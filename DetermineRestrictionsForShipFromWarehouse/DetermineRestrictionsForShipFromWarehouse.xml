<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="be11d27b-9aeb-4e63-b537-07e405d70b5a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineRestrictionsForShipFromWarehouse" searchProperties="true" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="be11d27b-9aeb-4e63-b537-07e405d70b5afileName">DetermineRestrictionsForShipFromWarehouse</con:setting>
  </con:settings>
  <con:testStep type="restrequest" name="JSON Request" id="c0205167-edfe-4f34-a921-1ffd60699cc7">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL" methodName="DetermineRestrictionsForShipFromWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="JSON Request" id="f3620f38-0a9f-4ffe-ac14-80caa1a5e197" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": null,
        "serviceState": null
    },
    "order": {
        "acceptableShipFromWarehouses": [
            {
                "warehouseLocationCd": "1"
            },
            {
                "warehouseLocationCd": "3"
            }
        ],
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "warehouseLocationCd": "4"
                    },
                    {
                        "warehouseLocationCd": "3"
                    }
                ],
                "itemNumber": "57154006",
                "lineItemID": "L001",
                "plans": [
                    {
                        "id": "P001",
                        "planCode": "2499"
                    }
                ],
                "productClass": "01"
            }
        ],
        "orderId": "O1",
        "shipToAddress": [
            {
                "state": "WV"
            }
        ]
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL</con:originalUri>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="MultiLineItem-NullAllocationType" id="ad209085-e93d-41d8-a186-e422da6a3b0c">
    <con:settings/>
    <con:config>
      <script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsforShipFromWarehouse(s)-Input.xls"
def outputfile = projectDir + "/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsforShipFromWarehouse(s)-MultiLineItem-NullAllocationType-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults_MultiLineItem2")
Sheet jsonInput = wb.getSheet("JSON_MultiLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"Jira Task ID",sheet1);
addCell(1,0,"orderId",sheet1);

addCell(2,0,"LineItems1",sheet1);
addCell(2,1,"lineItemID",sheet1);
addCell(3,1,"allocationType",sheet1);
addCell(4,1,"acceptableShipFromWarehouses",sheet1);
addCell(4,2,"warehouseLocationCd",sheet1);
addCell(5,2,"warehouseLocationCd",sheet1);

addCell(6,0,"LineItems2",sheet1);
addCell(6,1,"lineItemID",sheet1);
addCell(7,1,"allocationType",sheet1);
addCell(8,1,"acceptableShipFromWarehouses",sheet1);
addCell(8,2,"warehouseLocationCd",sheet1);
addCell(9,2,"warehouseLocationCd",sheet1);

addCell(10,0,"acceptableShipFromWarehouses",sheet1);
addCell(10,1,"warehouseLocationCd",sheet1);
addCell(11,2,"warehouseLocationCd",sheet1);
addCell(12,0,"PASS/FAIL",sheet1);
addCell(13,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(1,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                  //Inputs for order                                                             
                                requestTemplet.content.order.orderId = sh.getCell(2,i).getContents().toString()
                                requestTemplet.content.order.acceptableShipFromWarehouses[0].warehouseLocationCd = sh.getCell(3,i).getContents().toString()
                                requestTemplet.content.order.acceptableShipFromWarehouses[1].warehouseLocationCd = sh.getCell(4,i).getContents().toString()
                                requestTemplet.content.order.shipToAddress[0].state = sh.getCell(5,i).getContents().toString()                       

                                //Inputs for LineItems1
                                requestTemplet.content.order.lineItems[0].lineItemID = sh.getCell(6,i).getContents().toString()
                                requestTemplet.content.order.lineItems[0].itemNumber = sh.getCell(7,i).getContents().toString()
                                requestTemplet.content.order.lineItems[0].productClass = sh.getCell(8,i).getContents().toString()
                                
                                //Inputs for Plans
                                requestTemplet.content.order.lineItems[0].plans[0].id = sh.getCell(9,i).getContents().toString()
                                requestTemplet.content.order.lineItems[0].plans[0].planCode = sh.getCell(10,i).getContents().toString()

                                //Inputs for acceptableShipFromWarehouses at LineItems1 level.
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd = sh.getCell(11,i).getContents().toString()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[1].warehouseLocationCd = sh.getCell(12,i).getContents().toString()

                                //Inputs for LineItems2
                                requestTemplet.content.order.lineItems[1].lineItemID = sh.getCell(13,i).getContents().toString()
                                requestTemplet.content.order.lineItems[1].itemNumber = sh.getCell(14,i).getContents().toString()
                                requestTemplet.content.order.lineItems[1].productClass = sh.getCell(15,i).getContents().toString()
                                
                                //Inputs for Plans
                                requestTemplet.content.order.lineItems[1].plans[0].id = sh.getCell(16,i).getContents().toString()
                                requestTemplet.content.order.lineItems[1].plans[0].planCode = sh.getCell(17,i).getContents().toString()

                                //Inputs for acceptableShipFromWarehouses at LineItems2 level.
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd = sh.getCell(18,i).getContents().toString()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[1].warehouseLocationCd = sh.getCell(19,i).getContents().toString()
                                
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    

                           
                           //get response json
                           addCell(0,i,varTestCaseName.getContents().toString(),sheet1); 
                           addCell(1,i,json.order.orderId.toString(),sheet1);                         
                    int celNumForLineItems=2; celNumForWarehouses=4;                          
	                           for(int arrForLineItems=0; arrForLineItems<json.order.lineItems.size(); arrForLineItems++)
	                           {           
	                      	     addCell(celNumForLineItems,i,json.order.lineItems[arrForLineItems].lineItemID.toString(),sheet1);
	                              celNumForLineItems = celNumForLineItems +1; 	
	                              addCell(celNumForLineItems,i,json.order.lineItems[arrForLineItems].allocationType.toString(),sheet1);   
	                             
	                             for(int arrForShipWarehouses=0; arrForShipWarehouses<json.order.lineItems[arrForLineItems].acceptableShipFromWarehouses.size(); arrForShipWarehouses++)
	                                 {  
	                               
	                                  addCell(celNumForWarehouses,i,json.order.lineItems[arrForLineItems].acceptableShipFromWarehouses[arrForShipWarehouses].warehouseLocationCd.toString(),sheet1);
	                                  celNumForWarehouses = celNumForWarehouses+1; 
	                                  
	                                  } 
	                                  
	                                   celNumForLineItems = celNumForLineItems+3;
                                        celNumForWarehouses = celNumForWarehouses+2;

	                             }  
	                              
	                          
                       int celNumForAcceptableShipwarehouses=10;
		                   for(int arrForShipwarehouses=0; arrForShipwarehouses<json.order.acceptableShipFromWarehouses.size(); arrForShipwarehouses++)
		                    { 	                                     
		                      addCell(celNumForAcceptableShipwarehouses,i,json.order.acceptableShipFromWarehouses[arrForShipwarehouses].warehouseLocationCd.toString(),sheet1);
		                      celNumForAcceptableShipwarehouses = celNumForAcceptableShipwarehouses+1;                                       
		                      
		                    }         
                                                                              

                      def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                       addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
                       
                       orderId = sh.getCell(20,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,orderId,"order.orderId","orderId") 
                                       
                int celForLineItems=21; celForWarehouses=23;                          
	                       for(int arrForExpectedLineItems=0; arrForExpectedLineItems<json.order.lineItems.size(); arrForExpectedLineItems++)
	                           {           
	                      	     lineItemID = sh.getCell(celForLineItems,i).getContents()
                                   addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"order.lineItems["+arrForExpectedLineItems+"].lineItemID","lineItemID")
                                   celForLineItems = celForLineItems+1 
                                   allocationType = sh.getCell(celForLineItems,i).getContents()
                                    addAssertionJsonPathMatch(testStepForAssertion,allocationType,"order.lineItems["+arrForExpectedLineItems+"].allocationType","allocationType")                                
                               	                               
	                          for(int arrForWarehouses=0; arrForWarehouses<json.order.lineItems[arrForExpectedLineItems].acceptableShipFromWarehouses.size(); arrForWarehouses++)
	                               {                                   
	                                  	warehouseLocationCd = sh.getCell(celForWarehouses,i).getContents()
                                        addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd,"order.lineItems["+arrForExpectedLineItems+"].acceptableShipFromWarehouses["+arrForWarehouses+"].warehouseLocationCd","warehouseLocationCd")               
	                                   celForWarehouses = celForWarehouses+1; 
	                                                      
	                                  }
	                                                                 
                                       celForLineItems = celForLineItems+3;
                                       celForWarehouses = celForWarehouses+2;
	                             }   
	
                       int celForAcceptableShipwarehouses=29;
		                   for(int arrForAcceptableShipwarehouses=0; arrForAcceptableShipwarehouses<json.order.acceptableShipFromWarehouses.size(); arrForAcceptableShipwarehouses++)
		                    { 	                                     
		                       warehouseLocationCd = sh.getCell(celForAcceptableShipwarehouses,i).getContents()
                                 addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd,"order.acceptableShipFromWarehouses["+arrForAcceptableShipwarehouses+"].warehouseLocationCd","warehouseLocationCd")               
	                            celForAcceptableShipwarehouses = celForAcceptableShipwarehouses+1;                                      
		                      
		                    }     
                    
                          
                         assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(12,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(13,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(12,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{


     wb.close();
     wb1.close();     

}

def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

def cleanUp(String requestName){

                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    }

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               
}]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="MultiLineItem-ValidAllocationType" id="09889a0a-0174-4f59-bb8a-e110424ab3b8">
    <con:settings/>
    <con:config>
      <script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsforShipFromWarehouse(s)-Input.xls"
def outputfile = projectDir + "/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsforShipFromWarehouse(s)-MultiLineItem-ValidAllocationType-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults_MultiLineItem1")
Sheet jsonInput = wb.getSheet("JSON_MultiLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"Jira Task ID",sheet1);
addCell(1,0,"orderId",sheet1);

addCell(2,0,"LineItems1",sheet1);
addCell(2,1,"lineItemID",sheet1);
addCell(3,1,"allocationType",sheet1);
addCell(4,1,"acceptableShipFromWarehouses",sheet1);
addCell(4,2,"warehouseLocationCd",sheet1);

addCell(5,0,"LineItems2",sheet1);
addCell(5,1,"lineItemID",sheet1);
addCell(6,1,"allocationType",sheet1);
addCell(7,1,"acceptableShipFromWarehouses",sheet1);
addCell(7,2,"warehouseLocationCd",sheet1);

addCell(8,0,"acceptableShipFromWarehouses",sheet1);
addCell(8,1,"warehouseLocationCd",sheet1);
addCell(9,0,"PASS/FAIL",sheet1);
addCell(10,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(1,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                  //Inputs for order                                                             
                                requestTemplet.content.order.orderId = sh.getCell(2,i).getContents().toString()
                                requestTemplet.content.order.acceptableShipFromWarehouses[0].warehouseLocationCd = sh.getCell(3,i).getContents().toString()
                                requestTemplet.content.order.shipToAddress[0].state = sh.getCell(4,i).getContents().toString()                       

                                //Inputs for LineItems1
                                requestTemplet.content.order.lineItems[0].lineItemID = sh.getCell(5,i).getContents().toString()
                                requestTemplet.content.order.lineItems[0].itemNumber = sh.getCell(6,i).getContents().toString()
                                requestTemplet.content.order.lineItems[0].productClass = sh.getCell(7,i).getContents().toString()
                                
                                //Inputs for Plans
                                requestTemplet.content.order.lineItems[0].plans[0].id = sh.getCell(8,i).getContents().toString()
                                requestTemplet.content.order.lineItems[0].plans[0].planCode = sh.getCell(9,i).getContents().toString()

                                //Inputs for acceptableShipFromWarehouses at LineItems1 level.
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd = sh.getCell(10,i).getContents().toString()
                                
                                //Inputs for LineItems2
                                requestTemplet.content.order.lineItems[1].lineItemID = sh.getCell(11,i).getContents().toString()
                                requestTemplet.content.order.lineItems[1].itemNumber = sh.getCell(12,i).getContents().toString()
                                requestTemplet.content.order.lineItems[1].productClass = sh.getCell(13,i).getContents().toString()
                                
                                //Inputs for Plans
                                requestTemplet.content.order.lineItems[1].plans[0].id = sh.getCell(14,i).getContents().toString()
                                requestTemplet.content.order.lineItems[1].plans[0].planCode = sh.getCell(15,i).getContents().toString()

                                //Inputs for acceptableShipFromWarehouses at LineItems2 level.
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd = sh.getCell(16,i).getContents().toString()
                                
                                
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    

                           
                           //get response json
                           addCell(0,i,varTestCaseName.getContents().toString(),sheet1); 
                           addCell(1,i,json.order.orderId.toString(),sheet1);                         
                    int celNumForLineItems=2;                           
	                           for(int arrForLineItems=0; arrForLineItems&lt;json.order.lineItems.size(); arrForLineItems++)
	                           {           
	                      	     addCell(celNumForLineItems,i,json.order.lineItems[arrForLineItems].lineItemID.toString(),sheet1);
	                              celNumForLineItems = celNumForLineItems +1; 	
	                              addCell(celNumForLineItems,i,json.order.lineItems[arrForLineItems].allocationType.toString(),sheet1);
	                              celNumForLineItems = celNumForLineItems +1;                            
	                              addCell(celNumForLineItems,i,json.order.lineItems[arrForLineItems].acceptableShipFromWarehouses[0].warehouseLocationCd.toString(),sheet1);
	                              celNumForLineItems = celNumForLineItems +1;          
	                                                           
	                           }  

	                           addCell(8,i,json.order.acceptableShipFromWarehouses[0].warehouseLocationCd.toString(),sheet1);		                                                       
	                                                              

                      def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                       addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
                       
                       orderId = sh.getCell(17,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,orderId,"order.orderId","orderId") 
                                       
                int celForLineItems=18;                           
	                       for(int arrForExpectedLineItems=0; arrForExpectedLineItems&lt;json.order.lineItems.size(); arrForExpectedLineItems++)
	                           {           
	                      	     lineItemID = sh.getCell(celForLineItems,i).getContents()
                                   addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"order.lineItems["+arrForExpectedLineItems+"].lineItemID","lineItemID")
                                   celForLineItems = celForLineItems+1 
                                   allocationType = sh.getCell(celForLineItems,i).getContents()
                                   addAssertionJsonPathMatch(testStepForAssertion,allocationType,"order.lineItems["+arrForExpectedLineItems+"].allocationType","allocationType") 
                                   celForLineItems = celForLineItems+1                      
                                   warehouseLocationCd = sh.getCell(celForLineItems,i).getContents()
                                   addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd,"order.lineItems["+arrForExpectedLineItems+"].acceptableShipFromWarehouses[0].warehouseLocationCd","warehouseLocationCd") 
                                   celForLineItems = celForLineItems+1              
	                                                                         
	                           }

	                            warehouseLocationCd = sh.getCell(24,i).getContents()
                                 addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd,"order.acceptableShipFromWarehouses[0].warehouseLocationCd","warehouseLocationCd")                                     
                       
                          
                         assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(9,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(10,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(9,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{


     wb.close();
     wb1.close();     

}

def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

def cleanUp(String requestName){

                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    }

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="SingleLineItem-NullAllocationType" id="60146899-8eb6-4e78-b1f6-c069847a4eeb">
    <con:settings/>
    <con:config>
      <script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsforShipFromWarehouse(s)-Input.xls"
def outputfile = projectDir + "/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsforShipFromWarehouse(s)-SingleLineItem-NullAllocationType-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults_SingleLineItem2")
Sheet jsonInput = wb.getSheet("JSON_SingleLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"Jira Task ID",sheet1);
//OutPuts for LineItem
addCell(1,0,"orderId",sheet1);
addCell(2,0,"LineItems1",sheet1);
addCell(2,1,"lineItemID",sheet1);
addCell(3,1,"acceptableShipFromWarehouses",sheet1);
addCell(3,2,"warehouseLocationCd",sheet1);
addCell(4,2,"warehouseLocationCd",sheet1);
addCell(5,1,"allocationType",sheet1);
addCell(6,0,"acceptableShipFromWarehouses",sheet1);
addCell(6,1,"warehouseLocationCd",sheet1);
addCell(7,1,"warehouseLocationCd",sheet1);
addCell(8,0,"PASS/FAIL",sheet1);
addCell(9,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(1,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                  //Inputs for order                                                             
                                requestTemplet.content.order.orderId = sh.getCell(2,i).getContents().toString()
                                requestTemplet.content.order.acceptableShipFromWarehouses[0].warehouseLocationCd = sh.getCell(3,i).getContents().toString()
                                requestTemplet.content.order.acceptableShipFromWarehouses[1].warehouseLocationCd = sh.getCell(4,i).getContents().toString()
                                requestTemplet.content.order.shipToAddress[0].state = sh.getCell(5,i).getContents().toString()                       

                                //Inputs for LineItems1
                                requestTemplet.content.order.lineItems[0].lineItemID = sh.getCell(6,i).getContents().toString()
                                requestTemplet.content.order.lineItems[0].itemNumber = sh.getCell(7,i).getContents().toString()
                                requestTemplet.content.order.lineItems[0].productClass = sh.getCell(8,i).getContents().toString()
                                
                                //Inputs for Plans
                                requestTemplet.content.order.lineItems[0].plans[0].id = sh.getCell(9,i).getContents().toString()
                                requestTemplet.content.order.lineItems[0].plans[0].planCode = sh.getCell(10,i).getContents().toString()

                                //Inputs for acceptableShipFromWarehouses at LineItems1 level.
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd = sh.getCell(11,i).getContents().toString()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[1].warehouseLocationCd = sh.getCell(12,i).getContents().toString()
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                           
                           //get response json
                           addCell(0,i,varTestCaseName.getContents().toString(),sheet1);                               
                           addCell(1,i,json.order.orderId.toString(),sheet1);
                           addCell(2,i,json.order.lineItems[0].lineItemID.toString(),sheet1);
                           addCell(3,i,json.order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd.toString(),sheet1);
                           addCell(4,i,json.order.lineItems[0].acceptableShipFromWarehouses[1].warehouseLocationCd.toString(),sheet1);
                           addCell(5,i,json.order.lineItems[0].allocationType.toString(),sheet1); 
                           addCell(6,i,json.order.acceptableShipFromWarehouses[0].warehouseLocationCd.toString(),sheet1); 
                           addCell(7,i,json.order.acceptableShipFromWarehouses[1].warehouseLocationCd.toString(),sheet1);                                                                                     
                       
                                                               

                      def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                       addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
                       
                       orderId = sh.getCell(13,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,orderId,"order.orderId","orderId") 
                                       
                       lineItemID = sh.getCell(14,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"order.lineItems[0].lineItemID","lineItemID")
                                     
	                  warehouseLocationCd = sh.getCell(15,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd,"order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd","warehouseLocationCd")

                       warehouseLocationCd = sh.getCell(16,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd,"order.lineItems[0].acceptableShipFromWarehouses[1].warehouseLocationCd","warehouseLocationCd")               
	                     	                                   	 
	                   allocationType = sh.getCell(17,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,allocationType,"order.lineItems[0].allocationType","allocationType")                                 
                                                                   
		              warehouseLocationCd = sh.getCell(18,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd,"order.acceptableShipFromWarehouses[0].warehouseLocationCd","warehouseLocationCd")               

                        warehouseLocationCd = sh.getCell(19,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd,"order.acceptableShipFromWarehouses[1].warehouseLocationCd","warehouseLocationCd")               
          
                          
                          
                         assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(8,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(9,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(8,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{


     wb.close();
     wb1.close();     

}

def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

def cleanUp(String requestName){

                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    }

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="SingleLineItem-ValidAllocationType" id="4054f2ae-2d8c-4a2c-bf27-b71dc682c9dc">
    <con:settings/>
    <con:config>
      <script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsforShipFromWarehouse(s)-Input.xls"
def outputfile = projectDir + "/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsforShipFromWarehouse(s)-SingleLineItem-ValidAllocationType-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults_SingleLineItem1")
Sheet jsonInput = wb.getSheet("JSON_SingleLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"Jira Task ID",sheet1);
//OutPuts for LineItem
addCell(1,0,"orderId",sheet1);
addCell(2,0,"LineItems1",sheet1);
addCell(2,1,"lineItemID",sheet1);
addCell(3,1,"acceptableShipFromWarehouses",sheet1);
addCell(3,1,"warehouseLocationCd",sheet1);
addCell(4,1,"allocationType",sheet1);
addCell(5,0,"acceptableShipFromWarehouses",sheet1);
addCell(5,1,"warehouseLocationCd",sheet1);
addCell(6,0,"PASS/FAIL",sheet1);
addCell(7,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(1,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                  //Inputs for order                                                             
                                requestTemplet.content.order.orderId = sh.getCell(2,i).getContents().toString()
                                requestTemplet.content.order.acceptableShipFromWarehouses[0].warehouseLocationCd = sh.getCell(3,i).getContents().toString()
                                requestTemplet.content.order.acceptableShipFromWarehouses[1].warehouseLocationCd = sh.getCell(4,i).getContents().toString()
                                requestTemplet.content.order.shipToAddress[0].state = sh.getCell(5,i).getContents().toString()                       

                                //Inputs for LineItems1
                                requestTemplet.content.order.lineItems[0].lineItemID = sh.getCell(6,i).getContents().toString()
                                requestTemplet.content.order.lineItems[0].itemNumber = sh.getCell(7,i).getContents().toString()
                                requestTemplet.content.order.lineItems[0].productClass = sh.getCell(8,i).getContents().toString()
                                
                                //Inputs for Plans
                                requestTemplet.content.order.lineItems[0].plans[0].id = sh.getCell(9,i).getContents().toString()
                                requestTemplet.content.order.lineItems[0].plans[0].planCode = sh.getCell(10,i).getContents().toString()

                                //Inputs for acceptableShipFromWarehouses at LineItems1 level.
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd = sh.getCell(11,i).getContents().toString()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[1].warehouseLocationCd = sh.getCell(12,i).getContents().toString()
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                           
                           //get response json
                           addCell(0,i,varTestCaseName.getContents().toString(),sheet1);                           
                           addCell(1,i,json.order.orderId.toString(),sheet1);
                           addCell(2,i,json.order.lineItems[0].lineItemID.toString(),sheet1);
                           addCell(3,i,json.order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd.toString(),sheet1);
                           addCell(4,i,json.order.lineItems[0].allocationType.toString(),sheet1); 
                           addCell(5,i,json.order.acceptableShipFromWarehouses[0].warehouseLocationCd.toString(),sheet1); 
                         
                       
                      def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                       addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
                       
                       
                       orderId = sh.getCell(13,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,orderId,"order.orderId","orderId") 
                                       
                       lineItemID = sh.getCell(14,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"order.lineItems[0].lineItemID","lineItemID")
                      
	                  warehouseLocationCd = sh.getCell(15,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd,"order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd","warehouseLocationCd")
  
	                   allocationType = sh.getCell(16,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,allocationType,"order.lineItems[0].allocationType","allocationType")                                 
                                                                   
		              warehouseLocationCd = sh.getCell(17,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd,"order.acceptableShipFromWarehouses[0].warehouseLocationCd","warehouseLocationCd")               

                       
                         assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(6,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(7,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(6,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{


     wb.close();
     wb1.close();     

}

def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

def cleanUp(String requestName){

                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    }

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-64270" id="715ddd5f-40c4-4192-b396-7055210a8988">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL" methodName="DetermineRestrictionsForShipFromWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-64270" id="f3620f38-0a9f-4ffe-ac14-80caa1a5e197" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": null,
        "serviceState": null
    },
    "order": {
        "acceptableShipFromWarehouses": [
            {
                "warehouseLocationCd": "8"
            },
            {
                "warehouseLocationCd": ""
            }
        ],
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "warehouseLocationCd": "3"
                    },
                    {
                        "warehouseLocationCd": ""
                    }
                ],
                "allocationType": null,
                "itemNumber": "ZRLJ33169",
                "lineItemID": "L001",
                "plans": [
                    {
                        "id": "P001",
                        "planCode": "5004"
                    }
                ],
                "productClass": "71"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "warehouseLocationCd": "9"
                    },
                    {
                        "warehouseLocationCd": "1"
                    }
                ],
                "itemNumber": "507717",
                "lineItemID": "L002",
                "plans": [
                    {
                        "id": "P001",
                        "planCode": "5003"
                    }
                ],
                "productClass": "01"
            }
        ],
        "orderId": "O1",
        "shipToAddress": [
            {
                "state": "MI"
            }
        ]
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="3da83a99-26a1-46b6-acc7-01cd06b3c152" name="Valid HTTP Status Codes_4">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="328f8c29-677f-4a67-97c8-e9eb9930f7bd" name="orderId">
          <con:configuration>
            <path>order.orderId</path>
            <content>O1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a8efd077-eca7-499e-b827-f186e1873e46" name="lineItemID">
          <con:configuration>
            <path>order.lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a988dcfe-150b-44a1-90ac-5729a455e59c" name="allocationType">
          <con:configuration>
            <path>order.lineItems[0].allocationType</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="fc4a3b4d-dcc1-4ce9-897d-80c49c3198a4" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>3</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="5b6e7851-0865-4e61-8a94-28e3ededa7af" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[0].acceptableShipFromWarehouses[1].warehouseLocationCd</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="994a6f5c-d68c-4d28-bf08-1bb56a885a17" name="lineItemID">
          <con:configuration>
            <path>order.lineItems[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="3c8a48ad-ab59-4cf8-bba4-0702d063accf" name="allocationType">
          <con:configuration>
            <path>order.lineItems[1].allocationType</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="11038d68-5c24-4491-b57b-be9fe758a7bf" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>9</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="9c5b5609-7be2-4a6c-9c81-9db6a08a446d" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[1].acceptableShipFromWarehouses[1].warehouseLocationCd</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="7289e457-1c36-4153-9917-f4029fffc05e" name="warehouseLocationCd">
          <con:configuration>
            <path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>8</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="848ce53e-0f5a-4736-8911-e2652693402a" name="warehouseLocationCd">
          <con:configuration>
            <path>order.acceptableShipFromWarehouses[1].warehouseLocationCd</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-64271" id="eac4d41f-8f8b-4a33-8e0e-d2fae1de451a">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL" methodName="DetermineRestrictionsForShipFromWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-64271" id="f3620f38-0a9f-4ffe-ac14-80caa1a5e197" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": null,
        "serviceState": null
    },
    "order": {
        "acceptableShipFromWarehouses": [
            {
                "warehouseLocationCd": "1"
            },
            {
                "warehouseLocationCd": ""
            }
        ],
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "warehouseLocationCd": "3"
                    },
                    {
                        "warehouseLocationCd": ""
                    }
                ],
                "allocationType": null,
                "itemNumber": "509839",
                "lineItemID": "L001",
                "plans": [
                    {
                        "id": "P001",
                        "planCode": "5001"
                    }
                ],
                "productClass": "73"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "warehouseLocationCd": "9"
                    },
                    {
                        "warehouseLocationCd": ""
                    }
                ],
                "itemNumber": "5018193",
                "lineItemID": "L002",
                "plans": [
                    {
                        "id": "P001",
                        "planCode": "5002"
                    }
                ],
                "productClass": "01"
            }
        ],
        "orderId": "O1",
        "shipToAddress": [
            {
                "state": "MI"
            }
        ]
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="8cbff99d-0519-49c3-b2d3-2ee4dc626975" name="Valid HTTP Status Codes_5">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="b0a824d3-4288-4a4e-9952-1040fa52ebbf" name="orderId">
          <con:configuration>
            <path>order.orderId</path>
            <content>O1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="cacfbddf-f3c4-4ec4-a0bd-de2b8dbc8d56" name="lineItemID">
          <con:configuration>
            <path>order.lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e904e662-d57b-4904-836c-84f5513515ac" name="allocationType">
          <con:configuration>
            <path>order.lineItems[0].allocationType</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="6c26044d-9cfb-431e-a6d1-91b54a1ac77e" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>3</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="7ecd3436-4ef6-4ae7-bbfc-66ffdae7a425" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[0].acceptableShipFromWarehouses[1].warehouseLocationCd</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="56441999-179d-4b1a-94aa-820c22186797" name="lineItemID">
          <con:configuration>
            <path>order.lineItems[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="78ed9e67-d3d1-4a3d-8513-4605aeb954bc" name="allocationType">
          <con:configuration>
            <path>order.lineItems[1].allocationType</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="182257c9-8b9e-424e-b114-40afaa3402ca" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>9</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="39b66c0d-f9c6-43b4-a269-ba40665579bb" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[1].acceptableShipFromWarehouses[1].warehouseLocationCd</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="6bae7bce-1069-4f57-8162-9486c27c905f" name="warehouseLocationCd">
          <con:configuration>
            <path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="b46f5c84-896d-4087-af36-22816e890003" name="warehouseLocationCd">
          <con:configuration>
            <path>order.acceptableShipFromWarehouses[1].warehouseLocationCd</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-64272" id="737c4bdc-ca45-4bd4-96ac-78a26f1f0fc2">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL" methodName="DetermineRestrictionsForShipFromWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-64272" id="f3620f38-0a9f-4ffe-ac14-80caa1a5e197" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": null,
        "serviceState": null
    },
    "order": {
        "acceptableShipFromWarehouses": [
            {
                "warehouseLocationCd": "8"
            },
            {
                "warehouseLocationCd": ""
            }
        ],
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "warehouseLocationCd": "3"
                    },
                    {
                        "warehouseLocationCd": "1"
                    }
                ],
                "allocationType": null,
                "itemNumber": "ZR8OZEDA",
                "lineItemID": "L001",
                "plans": [
                    {
                        "id": "P001",
                        "planCode": "5001"
                    }
                ],
                "productClass": "01"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "warehouseLocationCd": "2"
                    },
                    {
                        "warehouseLocationCd": ""
                    }
                ],
                "itemNumber": "DI4626583001",
                "lineItemID": "L002",
                "plans": [
                    {
                        "id": "P001",
                        "planCode": "5002"
                    }
                ],
                "productClass": "02"
            }
        ],
        "orderId": "O1",
        "shipToAddress": [
            {
                "state": "TN"
            }
        ]
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="7a390519-4828-48d8-af28-5c835cf02f66" name="Valid HTTP Status Codes_6">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="7d3a9654-2932-4ce5-8c49-786dab6cb1b1" name="orderId">
          <con:configuration>
            <path>order.orderId</path>
            <content>O1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e353d2a8-53c2-4aaf-b7cc-2607c7db083b" name="lineItemID">
          <con:configuration>
            <path>order.lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="22ca150b-6f68-470e-a5b9-6fdac2bf8fc1" name="allocationType">
          <con:configuration>
            <path>order.lineItems[0].allocationType</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="fb1e01ea-b249-42e8-921f-44873f310fc6" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>3</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c6e30d23-ab4c-4f03-930c-20d16bbbe9f5" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[0].acceptableShipFromWarehouses[1].warehouseLocationCd</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f1f9c54c-344e-433f-8033-50cdcdc23119" name="lineItemID">
          <con:configuration>
            <path>order.lineItems[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="7291a5b6-4dc8-4d7f-b182-ac006819d88f" name="allocationType">
          <con:configuration>
            <path>order.lineItems[1].allocationType</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="390854b2-1bed-483a-a906-e7a42177f85d" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>2</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="2665a823-e0e6-40e9-b91e-41878a8eb41d" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[1].acceptableShipFromWarehouses[1].warehouseLocationCd</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="13f41c2f-05ec-4d59-b366-6cbf9c4b7c72" name="warehouseLocationCd">
          <con:configuration>
            <path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>8</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="5552f530-c799-42f7-93ad-78058c2d57b6" name="warehouseLocationCd">
          <con:configuration>
            <path>order.acceptableShipFromWarehouses[1].warehouseLocationCd</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-64273" id="322df644-39df-46d0-b6af-bf25ddc38b84">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL" methodName="DetermineRestrictionsForShipFromWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-64273" id="f3620f38-0a9f-4ffe-ac14-80caa1a5e197" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": null,
        "serviceState": null
    },
    "order": {
        "acceptableShipFromWarehouses": [
            {
                "warehouseLocationCd": "1"
            },
            {
                "warehouseLocationCd": ""
            }
        ],
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "warehouseLocationCd": "4"
                    },
                    {
                        "warehouseLocationCd": ""
                    }
                ],
                "allocationType": null,
                "itemNumber": "ZRLJ33169",
                "lineItemID": "L001",
                "plans": [
                    {
                        "id": "P001",
                        "planCode": "0011"
                    }
                ],
                "productClass": "04"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "warehouseLocationCd": "10"
                    },
                    {
                        "warehouseLocationCd": ""
                    }
                ],
                "itemNumber": "507717",
                "lineItemID": "L002",
                "plans": [
                    {
                        "id": "P001",
                        "planCode": "0011"
                    }
                ],
                "productClass": "01"
            }
        ],
        "orderId": "O1",
        "shipToAddress": [
            {
                "state": "WV"
            }
        ]
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="2c4959df-67d0-4b37-a03a-fdd6d186cdb5" name="Valid HTTP Status Codes_7">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="0c9baeb7-a649-43ba-acf1-3a5800099eee" name="orderId">
          <con:configuration>
            <path>order.orderId</path>
            <content>O1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="40cba57e-5af6-4bfa-9caf-4677884ff4c5" name="lineItemID">
          <con:configuration>
            <path>order.lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="dd955e94-359d-4de1-b7cd-0d8895c9762a" name="allocationType">
          <con:configuration>
            <path>order.lineItems[0].allocationType</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="00023284-27b8-42c4-a7d8-12a0adaf53cd" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>4</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="5f541282-1e74-40f6-bd00-465aba651008" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[0].acceptableShipFromWarehouses[1].warehouseLocationCd</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ea8a22c8-1e88-4a0b-8c3e-7f9db4ef821c" name="lineItemID">
          <con:configuration>
            <path>order.lineItems[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="4d58a2b7-e42d-41df-ad98-7b3a88b14325" name="allocationType">
          <con:configuration>
            <path>order.lineItems[1].allocationType</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="1b1d5a06-eabf-4035-a09f-fc9348289308" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>10</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ce0dac89-b120-4361-a48a-fca064c4eb9a" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[1].acceptableShipFromWarehouses[1].warehouseLocationCd</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="676282ca-4226-4c49-9868-ffcfe5349239" name="warehouseLocationCd">
          <con:configuration>
            <path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="2ffddb68-cda2-4561-bf7e-e9729ed7c96f" name="warehouseLocationCd">
          <con:configuration>
            <path>order.acceptableShipFromWarehouses[1].warehouseLocationCd</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-64274" id="131d5bbb-c7aa-493e-90d5-b49c4ed83aea">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL" methodName="DetermineRestrictionsForShipFromWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-64274" id="f3620f38-0a9f-4ffe-ac14-80caa1a5e197" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": null,
        "serviceState": null
    },
    "order": {
        "acceptableShipFromWarehouses": [
            {
                "warehouseLocationCd": "1"
            },
            {
                "warehouseLocationCd": "2"
            }
        ],
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "warehouseLocationCd": "4"
                    },
                    {
                        "warehouseLocationCd": "5"
                    }
                ],
                "allocationType": null,
                "itemNumber": "ZRLJ33169",
                "lineItemID": "L001",
                "plans": [
                    {
                        "id": "P001",
                        "planCode": "5001"
                    }
                ],
                "productClass": "03"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "warehouseLocationCd": "10"
                    },
                    {
                        "warehouseLocationCd": "1"
                    }
                ],
                "itemNumber": "507717",
                "lineItemID": "L002",
                "plans": [
                    {
                        "id": "P001",
                        "planCode": "5001"
                    }
                ],
                "productClass": ""
            }
        ],
        "orderId": "O1",
        "shipToAddress": [
            {
                "state": "NC"
            }
        ]
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="799f18b0-ea4f-4d72-a22a-ea54efad5306" name="Valid HTTP Status Codes_8">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="afcfafe8-29bb-491b-80f4-8486fd626717" name="orderId">
          <con:configuration>
            <path>order.orderId</path>
            <content>O1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="3deb8c0c-14a8-4f70-a9be-1f8ea1f0c8c7" name="lineItemID">
          <con:configuration>
            <path>order.lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f866e5e3-e2dd-4135-b699-8798657e3c65" name="allocationType">
          <con:configuration>
            <path>order.lineItems[0].allocationType</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="bf3429ca-2b14-4083-9930-4fd3e9d21231" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>4</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e38fd393-8e12-4df1-9a74-2c977a9d209b" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[0].acceptableShipFromWarehouses[1].warehouseLocationCd</path>
            <content>5</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="0c81beaa-caf4-44e5-ae2a-2e08803bff35" name="lineItemID">
          <con:configuration>
            <path>order.lineItems[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e95b234f-82d7-49c3-8e3d-162e37d96045" name="allocationType">
          <con:configuration>
            <path>order.lineItems[1].allocationType</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="15bae3d5-6870-4aa1-824c-4fad9d6cc628" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>10</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="7a676e94-7878-4b90-9f59-e1ebe4df6b36" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[1].acceptableShipFromWarehouses[1].warehouseLocationCd</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="8fc05e9c-34fe-4a18-a0b2-3ad08f98b4b6" name="warehouseLocationCd">
          <con:configuration>
            <path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="95e59737-06ac-4414-b4dc-16a0fbec509d" name="warehouseLocationCd">
          <con:configuration>
            <path>order.acceptableShipFromWarehouses[1].warehouseLocationCd</path>
            <content>2</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-64267" id="f85395dc-f799-4d4a-ac9b-b44d8e2862c2">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL" methodName="DetermineRestrictionsForShipFromWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-64267" id="f3620f38-0a9f-4ffe-ac14-80caa1a5e197" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": null,
        "serviceState": null
    },
    "order": {
        "acceptableShipFromWarehouses": [
            {
                "warehouseLocationCd": "8"
            },
            {
                "warehouseLocationCd": "7"
            }
        ],
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "warehouseLocationCd": "3"
                    },
                    {
                        "warehouseLocationCd": "7"
                    }
                ],
                "allocationType": null,
                "itemNumber": "62285840",
                "lineItemID": "L001",
                "plans": [
                    {
                        "id": "P001",
                        "planCode": "5001"
                    }
                ],
                "productClass": "73"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "warehouseLocationCd": "9"
                    },
                    {
                        "warehouseLocationCd": "7"
                    }
                ],
                "itemNumber": "5014203",
                "lineItemID": "L002",
                "plans": [
                    {
                        "id": "P001",
                        "planCode": "5002"
                    }
                ],
                "productClass": "71"
            }
        ],
        "orderId": "O1",
        "shipToAddress": [
            {
                "state": "MI"
            }
        ]
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="10bca137-0b14-4ccf-9e1b-febe0db1eced" name="Valid HTTP Status Codes_4">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="cec09fb8-7a33-4445-8ae7-8924cc711a5b" name="orderId">
          <con:configuration>
            <path>order.orderId</path>
            <content>O1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="47cd2a10-3469-4322-9393-2798addd49a0" name="lineItemID">
          <con:configuration>
            <path>order.lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="859929de-553e-4cbe-b42c-f38464d6e146" name="allocationType">
          <con:configuration>
            <path>order.lineItems[0].allocationType</path>
            <content>MD</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="67c9dfc9-a471-4354-84ca-4c57c8ee2830" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="109a43e0-6f22-40ca-8cc3-345a7702d45f" name="lineItemID">
          <con:configuration>
            <path>order.lineItems[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="3939b3e2-74e0-4d0d-8930-0500caf18a79" name="allocationType">
          <con:configuration>
            <path>order.lineItems[1].allocationType</path>
            <content>MD</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="edf4fb79-5680-40bc-bb21-5ffb7f157389" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d4b1508c-24c4-4f79-84e8-ed1d8bcd304f" name="warehouseLocationCd">
          <con:configuration>
            <path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-64268" id="0a1c2203-b200-4528-9652-154ef7b71e85">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL" methodName="DetermineRestrictionsForShipFromWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-64268" id="f3620f38-0a9f-4ffe-ac14-80caa1a5e197" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": null,
        "serviceState": null
    },
    "order": {
        "acceptableShipFromWarehouses": [
            {
                "warehouseLocationCd": "8"
            },
            {
                "warehouseLocationCd": "7"
            }
        ],
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "warehouseLocationCd": "3"
                    },
                    {
                        "warehouseLocationCd": "7"
                    }
                ],
                "allocationType": null,
                "itemNumber": "AN10018101EP",
                "lineItemID": "L001",
                "plans": [
                    {
                        "id": "P001",
                        "planCode": "5001"
                    }
                ],
                "productClass": "GLOVES"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "warehouseLocationCd": "9"
                    },
                    {
                        "warehouseLocationCd": "7"
                    }
                ],
                "itemNumber": "DI4626583001",
                "lineItemID": "L002",
                "plans": [
                    {
                        "id": "P001",
                        "planCode": "0011"
                    }
                ],
                "productClass": "01"
            }
        ],
        "orderId": "O1",
        "shipToAddress": [
            {
                "state": "TN"
            }
        ]
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="1bf16b7a-eafb-4ef9-b415-b3d1c3540eac" name="Valid HTTP Status Codes_5">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="1925a61f-969d-4b7e-8d5e-0aeb968dda47" name="orderId">
          <con:configuration>
            <path>order.orderId</path>
            <content>O1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d2f9c9fa-822c-40ae-81e1-ad21324c1690" name="lineItemID">
          <con:configuration>
            <path>order.lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="3534bb10-febb-4223-b082-903b88bd2ada" name="allocationType">
          <con:configuration>
            <path>order.lineItems[0].allocationType</path>
            <content>TD</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="01a8356e-8e70-4a84-a327-2b10c91092f8" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>5</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="53550b72-6d32-49bb-8048-6412d5f3d1c6" name="lineItemID">
          <con:configuration>
            <path>order.lineItems[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="1a595111-13d8-4fd3-8ebd-a28ca984e350" name="allocationType">
          <con:configuration>
            <path>order.lineItems[1].allocationType</path>
            <content>TD</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="061478c4-16e4-4e8e-984a-c1152506c0e1" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>5</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="fcd39847-2df0-4f0d-a29a-481fbc744577" name="warehouseLocationCd">
          <con:configuration>
            <path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>5</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-64269" id="32a4d35e-7892-452b-872f-726d2815d13e">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL" methodName="DetermineRestrictionsForShipFromWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-64269" id="f3620f38-0a9f-4ffe-ac14-80caa1a5e197" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": null,
        "serviceState": null
    },
    "order": {
        "acceptableShipFromWarehouses": [
            {
                "warehouseLocationCd": "1"
            },
            {
                "warehouseLocationCd": "7"
            }
        ],
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "warehouseLocationCd": "4"
                    },
                    {
                        "warehouseLocationCd": "7"
                    }
                ],
                "allocationType": null,
                "itemNumber": "ZA30075",
                "lineItemID": "L001",
                "plans": [
                    {
                        "id": "P001",
                        "planCode": "7938"
                    }
                ],
                "productClass": "BRACES"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "warehouseLocationCd": "10"
                    },
                    {
                        "warehouseLocationCd": "7"
                    }
                ],
                "itemNumber": "62285840BX",
                "lineItemID": "L002",
                "plans": [
                    {
                        "id": "P001",
                        "planCode": "9099"
                    }
                ],
                "productClass": "71"
            }
        ],
        "orderId": "O1",
        "shipToAddress": [
            {
                "state": "CO"
            }
        ]
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="1e9730b3-3e60-4419-82ad-4067f1ff0b5c" name="Valid HTTP Status Codes_6">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="be7e5a76-1533-4b1a-9b42-64644c1bf80f" name="orderId">
          <con:configuration>
            <path>order.orderId</path>
            <content>O1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d133cc46-2a4d-4946-826a-e2440dbabd7b" name="lineItemID">
          <con:configuration>
            <path>order.lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="439d9f6f-f7ba-48c4-b55f-39882c78d281" name="allocationType">
          <con:configuration>
            <path>order.lineItems[0].allocationType</path>
            <content>CD</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="cebd1ca1-7de2-4764-8375-54f34dba9152" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>3</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="490b601a-5da8-4fe8-bbff-7f9a56a20b81" name="lineItemID">
          <con:configuration>
            <path>order.lineItems[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="3754b9a9-ca27-48cf-97fd-c70003767f74" name="allocationType">
          <con:configuration>
            <path>order.lineItems[1].allocationType</path>
            <content>CD</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="534908ca-b7b7-42e9-8efe-60ebb984b7e1" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>3</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="9ef6c0f7-ecb9-4f40-898e-2406f61d60bc" name="warehouseLocationCd">
          <con:configuration>
            <path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>3</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-64264" id="a3862f7f-359b-4398-98c3-29e9a915fa2b">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL" methodName="DetermineRestrictionsForShipFromWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-64264" id="f3620f38-0a9f-4ffe-ac14-80caa1a5e197" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": null,
        "serviceState": null
    },
    "order": {
        "acceptableShipFromWarehouses": [
            {
                "warehouseLocationCd": "1"
            },
            {
                "warehouseLocationCd": "3"
            }
        ],
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "warehouseLocationCd": "1"
                    },
                    {
                        "warehouseLocationCd": "2"
                    }
                ],
                "itemNumber": "57154006",
                "lineItemID": "L001",
                "plans": [
                    {
                        "id": "P001",
                        "planCode": "5001"
                    }
                ],
                "productClass": "02"
            }
        ],
        "orderId": "O1",
        "shipToAddress": [
            {
                "state": "MI"
            }
        ]
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="1785165c-bccd-432e-ad67-56c85c73f048" name="Valid HTTP Status Codes_4">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e8fa5e2a-f97b-4216-983e-b29942a0f80f" name="orderId">
          <con:configuration>
            <path>order.orderId</path>
            <content>O1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ca941610-bd30-45d6-9b38-c92a61a40f86" name="lineItemID">
          <con:configuration>
            <path>order.lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="65a62be9-576d-430b-a1ca-e4bf3ae31b5a" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f8d0839e-47f0-42e8-a5e7-d573b47f37b3" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[0].acceptableShipFromWarehouses[1].warehouseLocationCd</path>
            <content>2</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="034cbd71-0731-4732-b9f9-0f3054861186" name="allocationType">
          <con:configuration>
            <path>order.lineItems[0].allocationType</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d2ac20d0-b270-42c3-977c-76849a083f0b" name="warehouseLocationCd">
          <con:configuration>
            <path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="44ddb728-fcb8-4a2d-95ed-8343f6a6b219" name="warehouseLocationCd">
          <con:configuration>
            <path>order.acceptableShipFromWarehouses[1].warehouseLocationCd</path>
            <content>3</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-64265" id="43f0cf5d-2b49-4d5a-a277-e72c7e032cfe">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL" methodName="DetermineRestrictionsForShipFromWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-64265" id="f3620f38-0a9f-4ffe-ac14-80caa1a5e197" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": null,
        "serviceState": null
    },
    "order": {
        "acceptableShipFromWarehouses": [
            {
                "warehouseLocationCd": "7"
            },
            {
                "warehouseLocationCd": ""
            }
        ],
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "warehouseLocationCd": "5"
                    },
                    {
                        "warehouseLocationCd": ""
                    }
                ],
                "itemNumber": "57154006",
                "lineItemID": "L001",
                "plans": [
                    {
                        "id": "P001",
                        "planCode": "9096"
                    }
                ],
                "productClass": "03"
            }
        ],
        "orderId": "O1",
        "shipToAddress": [
            {
                "state": "WV"
            }
        ]
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="9dab1170-aa2e-4883-80cf-3e21b63a471e" name="Valid HTTP Status Codes_5">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="64f8037b-26ac-4ec0-bab7-475159fe5fff" name="orderId">
          <con:configuration>
            <path>order.orderId</path>
            <content>O1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="9ad4dc37-a9bf-4223-830d-50ab7ff771cf" name="lineItemID">
          <con:configuration>
            <path>order.lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="711d75c9-9019-4bda-9299-bd977439d222" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>5</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ad188a69-6dad-438c-b6a8-3ded40d41b1c" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[0].acceptableShipFromWarehouses[1].warehouseLocationCd</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="4c2a8bfa-2453-456e-b9bb-59c9af11c893" name="allocationType">
          <con:configuration>
            <path>order.lineItems[0].allocationType</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e105f229-e2c6-45f9-b7db-d6d5e49d6d70" name="warehouseLocationCd">
          <con:configuration>
            <path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>7</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="42d883c7-d06a-4242-a8af-32b9443596ff" name="warehouseLocationCd">
          <con:configuration>
            <path>order.acceptableShipFromWarehouses[1].warehouseLocationCd</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-64266" id="93655aaf-083c-4f63-ab61-5f13453b1241">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL" methodName="DetermineRestrictionsForShipFromWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-64266" id="f3620f38-0a9f-4ffe-ac14-80caa1a5e197" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": null,
        "serviceState": null
    },
    "order": {
        "acceptableShipFromWarehouses": [
            {
                "warehouseLocationCd": "1"
            },
            {
                "warehouseLocationCd": ""
            }
        ],
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "warehouseLocationCd": "4"
                    },
                    {
                        "warehouseLocationCd": ""
                    }
                ],
                "itemNumber": "123456",
                "lineItemID": "L001",
                "plans": [
                    {
                        "id": "P001",
                        "planCode": "9096"
                    }
                ],
                "productClass": "COMMODES"
            }
        ],
        "orderId": "O1",
        "shipToAddress": [
            {
                "state": "NC"
            }
        ]
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="90f8c41a-622a-4f59-9bd7-6129749861bb" name="Valid HTTP Status Codes_6">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d969c7c1-9836-4131-b3b7-e9df0e1c1c49" name="orderId">
          <con:configuration>
            <path>order.orderId</path>
            <content>O1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="9ab03c16-77a3-4568-b8dd-bfecd2440aec" name="lineItemID">
          <con:configuration>
            <path>order.lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="eda7f4da-b3f5-4d92-8e91-96ad181b0491" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>4</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="38d8bc75-4e33-4315-9c10-41f38ffdc34b" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[0].acceptableShipFromWarehouses[1].warehouseLocationCd</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="39fac559-2a4f-4962-91e4-4d478da32662" name="allocationType">
          <con:configuration>
            <path>order.lineItems[0].allocationType</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c8123241-1f82-403c-9784-32493c751f25" name="warehouseLocationCd">
          <con:configuration>
            <path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a8c6acbc-054f-4805-b065-98b3363571ac" name="warehouseLocationCd">
          <con:configuration>
            <path>order.acceptableShipFromWarehouses[1].warehouseLocationCd</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-64263" id="15428b75-74a7-4f02-8cde-5264fb9f27ea">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL" methodName="DetermineRestrictionsForShipFromWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-64263" id="f3620f38-0a9f-4ffe-ac14-80caa1a5e197" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": null,
        "serviceState": null
    },
    "order": {
        "acceptableShipFromWarehouses": [
            {
                "warehouseLocationCd": "1"
            },
            {
                "warehouseLocationCd": "3"
            }
        ],
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "warehouseLocationCd": "4"
                    },
                    {
                        "warehouseLocationCd": "3"
                    }
                ],
                "itemNumber": "57154006",
                "lineItemID": "L001",
                "plans": [
                    {
                        "id": "P001",
                        "planCode": "2499"
                    }
                ],
                "productClass": "01"
            }
        ],
        "orderId": "O1",
        "shipToAddress": [
            {
                "state": "WV"
            }
        ]
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineRestrictionsForShipFromWarehouse/DetermineRestrictionsForShipFromWarehouse/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="82d67833-4324-40ee-aa6e-e8304b43b437" name="Valid HTTP Status Codes_4">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="1c0d190d-f464-49b8-8a66-f335893e173a" name="orderId">
          <con:configuration>
            <path>order.orderId</path>
            <content>O1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="3853c43c-809c-4043-ab84-13abfe7aee50" name="lineItemID">
          <con:configuration>
            <path>order.lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="9aeb4fbd-fe81-46fb-8f6d-94c787836cdf" name="warehouseLocationCd">
          <con:configuration>
            <path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>8</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="917c4fa7-b2d1-4dbf-a141-82c2fd8e104d" name="allocationType">
          <con:configuration>
            <path>order.lineItems[0].allocationType</path>
            <content>PA</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="dc6c6d0b-450c-48f2-b29e-7dfb3d138c03" name="warehouseLocationCd">
          <con:configuration>
            <path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path>
            <content>8</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
</con:testCase>

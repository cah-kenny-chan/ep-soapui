<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="237a9910-3917-4dfc-a30d-be15bbb660f7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineInsuranceVerificationPreferredMethodOfContact" searchProperties="true" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="237a9910-3917-4dfc-a30d-be15bbb660f7fileName">DetermineInsuranceVerificationPreferredMethodOfContact</con:setting>
  </con:settings>
  <con:testStep type="groovy" name="DetermineInsuranceVerificationPreferredMethodOfContact_SingleLineItem" id="0bb6f509-face-4abc-9283-8f0661415a1e">
    <con:settings/>
    <con:config>
      <script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineInsuranceVerificationPreferredMethodOfContact/Determine Insurance Verification Preferred Method Of Contact-Single LineItem-Input.xls"
def outputfile = projectDir + "/DetermineInsuranceVerificationPreferredMethodOfContact/Determine Insurance Verification Preferred Method Of Contact-Single LineItem-Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"planID",sheet1);
addCell(2,0,"preferredVerificationMethod",sheet1);
addCell(3,0,"PASS/FAIL",sheet1);
addCell(4,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                 //Input for Line Item ID                                                             
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents().toString()
                                 //Input for hcpcsCode                                  
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents().toString()
						   //Input for productCategory                                  
                                requestTemplet.content.lineItems[0].productCategory = sh.getCell(3,i).getContents().toString()
						   //Input for productSubCategory1                                  
                                requestTemplet.content.lineItems[0].productSubCategory1 = sh.getCell(4,i).getContents().toString()
						   //Input for productSubCategory2                                  
                                requestTemplet.content.lineItems[0].productSubCategory2 = sh.getCell(5,i).getContents().toString()
                                 //Input for productSubCategory3                                
                                requestTemplet.content.lineItems[0].productSubCategory3 = sh.getCell(6,i).getContents().toString()
                                 //Input for productSubCategory4                                  
                                requestTemplet.content.lineItems[0].productSubCategory4 = sh.getCell(7,i).getContents().toString()
                                //Input for planName                                  
                                requestTemplet.content.lineItems[0].plans[0].planCode = sh.getCell(8,i).getContents().toString()
                                //Input for id                                  
                                requestTemplet.content.lineItems[0].plans[0].id = sh.getCell(9,i).getContents().toString()
                                                                                    
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json  
                        addCell(0,i,json.insuranceVerifications[0].lineItemID.toString(),sheet1);                                   
                          // get payerID from response json                               
                        addCell(1,i,json.insuranceVerifications[0].planID.toString(),sheet1);                                   
                          // get preferredVerificationMethod from response json                                   
                        addCell(2,i,json.insuranceVerifications[0].preferredVerificationMethod.toString(),sheet1);  
                                                
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(10,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"insuranceVerifications[0].lineItemID","lineItemID")

                          planID = sh.getCell(11,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,planID,"insuranceVerifications[0].planID","planID")

                          preferredVerificationMethod = sh.getCell(12,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,preferredVerificationMethod,"insuranceVerifications[0].preferredVerificationMethod","preferredVerificationMethod")

        
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(3,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(4,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(3,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfully"

 

         }             
     
catch(Exception e)
{
log.info"test execution failed"
                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="DetermineInsuranceVerificationPreferredMethodOfContact_MultiLineItems" id="f08634f4-8315-440d-88ce-a281f02c1f1d">
    <con:settings/>
    <con:config>
      <script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineInsuranceVerificationPreferredMethodOfContact/Determine Insurance Verification Preferred Method Of Contact-Multi LineItem-Input.xls"
def outputfile = projectDir + "/DetermineInsuranceVerificationPreferredMethodOfContact/Determine Insurance Verification Preferred Method Of Contact-Multi LineItem-Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"planID",sheet1);
addCell(2,0,"preferredVerificationMethod",sheet1);
addCell(3,0,"lineItemID1",sheet1);
addCell(4,0,"planID1",sheet1);
addCell(5,0,"preferredVerificationMethod1",sheet1);
addCell(6,0,"PASS/FAIL",sheet1);
addCell(7,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                 //Input for Line Item ID                                                             
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents().toString()
                                 //Input for hcpcsCode                                  
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents().toString()
						   //Input for productCategory                                  
                                requestTemplet.content.lineItems[0].productCategory = sh.getCell(3,i).getContents().toString()
						   //Input for productSubCategory1                                  
                                requestTemplet.content.lineItems[0].productSubCategory1 = sh.getCell(4,i).getContents().toString()
						   //Input for productSubCategory2                                  
                                requestTemplet.content.lineItems[0].productSubCategory2 = sh.getCell(5,i).getContents().toString()
                                 //Input for productSubCategory3                                
                                requestTemplet.content.lineItems[0].productSubCategory3 = sh.getCell(6,i).getContents().toString()
                                 //Input for productSubCategory4                                  
                                requestTemplet.content.lineItems[0].productSubCategory4 = sh.getCell(7,i).getContents().toString()
                                //Input for planName                                  
                                requestTemplet.content.lineItems[0].plans[0].planCode = sh.getCell(8,i).getContents().toString()
                                //Input for id                                  
                                requestTemplet.content.lineItems[0].plans[0].id = sh.getCell(9,i).getContents().toString()
                                  //Input for Line Item ID2                                                             
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(10,i).getContents().toString()
                                 //Input for hcpcsCode                                  
                                requestTemplet.content.lineItems[1].hcpcsCode = sh.getCell(11,i).getContents().toString()
						   //Input for productCategory                                  
                                requestTemplet.content.lineItems[1].productCategory = sh.getCell(12,i).getContents().toString()
						   //Input for productSubCategory1                                  
                                requestTemplet.content.lineItems[1].productSubCategory1 = sh.getCell(13,i).getContents().toString()
						   //Input for productSubCategory2                                  
                                requestTemplet.content.lineItems[1].productSubCategory2 = sh.getCell(14,i).getContents().toString()
                                 //Input for productSubCategory3                                
                                requestTemplet.content.lineItems[1].productSubCategory3 = sh.getCell(15,i).getContents().toString()
                                 //Input for productSubCategory4                                  
                                requestTemplet.content.lineItems[1].productSubCategory4 = sh.getCell(16,i).getContents().toString()
                                //Input for planName                                  
                                requestTemplet.content.lineItems[1].plans[0].planCode = sh.getCell(17,i).getContents().toString()
                                //Input for id                                  
                                requestTemplet.content.lineItems[1].plans[0].id = sh.getCell(18,i).getContents().toString()
                                                                                  
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json  
                        addCell(0,i,json.insuranceVerifications[0].lineItemID.toString(),sheet1);                                   
                          // get payerID from response json                               
                        addCell(1,i,json.insuranceVerifications[0].planID.toString(),sheet1);                                   
                          // get preferredVerificationMethod from response json                                   
                        addCell(2,i,json.insuranceVerifications[0].preferredVerificationMethod.toString(),sheet1);  
                        // get lineItemID2 from response json  
                        addCell(3,i,json.insuranceVerifications[1].lineItemID.toString(),sheet1);                                   
                          // get payerID2 from response json                               
                        addCell(4,i,json.insuranceVerifications[1].planID.toString(),sheet1);                                   
                          // get preferredVerificationMethod2 fr1m response json                                   
                        addCell(5,i,json.insuranceVerifications[1].preferredVerificationMethod.toString(),sheet1); 

                                                
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(19,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"insuranceVerifications[0].lineItemID","lineItemID")

                          planID = sh.getCell(20,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,planID,"insuranceVerifications[0].planID","planID")

                          preferredVerificationMethod = sh.getCell(21,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,preferredVerificationMethod,"insuranceVerifications[0].preferredVerificationMethod","preferredVerificationMethod")
 //get the expected values
                          lineItemID1 = sh.getCell(22,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"insuranceVerifications[1].lineItemID","lineItemID")

                          planID1 = sh.getCell(23,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,planID1,"insuranceVerifications[1].planID","planID")

                          preferredVerificationMethod1 = sh.getCell(24,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,preferredVerificationMethod1,"insuranceVerifications[1].preferredVerificationMethod","preferredVerificationMethod")
        
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(6,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(7,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(6,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfully"

 

         }             
     
catch(Exception e)
{
log.info"test execution failed"
                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="DetermineInsuranceVerificationPreferredMethodOfContact_MultiPayers" id="6de673e8-f5a4-4f7a-8aa0-4b09162b5ea3">
    <con:settings/>
    <con:config>
      <script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineInsuranceVerificationPreferredMethodOfContact/Determine Insurance Verification Preferred Method Of Contact-Multi Payers-Input.xls"
def outputfile = projectDir + "/DetermineInsuranceVerificationPreferredMethodOfContact/Determine Insurance Verification Preferred Method Of Contact-Multi Payers-Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"planID",sheet1);
addCell(2,0,"preferredVerificationMethod",sheet1);
addCell(3,0,"lineItemID1",sheet1);
addCell(4,0,"planID1",sheet1);
addCell(5,0,"preferredVerificationMethod1",sheet1);
addCell(6,0,"PASS/FAIL",sheet1);
addCell(7,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                 //Input for Line Item ID                                                             
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents().toString()
                                 //Input for hcpcsCode                                  
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents().toString()
						   //Input for productCategory                                  
                                requestTemplet.content.lineItems[0].productCategory = sh.getCell(3,i).getContents().toString()
						   //Input for productSubCategory1                                  
                                requestTemplet.content.lineItems[0].productSubCategory1 = sh.getCell(4,i).getContents().toString()
						   //Input for productSubCategory2                                  
                                requestTemplet.content.lineItems[0].productSubCategory2 = sh.getCell(5,i).getContents().toString()
                                 //Input for productSubCategory3                                
                                requestTemplet.content.lineItems[0].productSubCategory3 = sh.getCell(6,i).getContents().toString()
                                 //Input for productSubCategory4                                  
                                requestTemplet.content.lineItems[0].productSubCategory4 = sh.getCell(7,i).getContents().toString()
                                //Input for planName1                                 
                                requestTemplet.content.lineItems[0].plans[0].planCode = sh.getCell(8,i).getContents().toString()
                                //Input for id1                               
                                requestTemplet.content.lineItems[0].plans[0].id = sh.getCell(9,i).getContents().toString()
                                //Input for planName2                                  
                                requestTemplet.content.lineItems[0].plans[1].planCode = sh.getCell(10,i).getContents().toString()
                                //Input for id2                                  
                                requestTemplet.content.lineItems[0].plans[1].id = sh.getCell(11,i).getContents().toString()
                                                                                    
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json  
                        addCell(0,i,json.insuranceVerifications[0].lineItemID.toString(),sheet1);                                   
                          // get payerID from response json                               
                        addCell(1,i,json.insuranceVerifications[0].planID.toString(),sheet1);                                   
                          // get preferredVerificationMethod from response json                                   
                        addCell(2,i,json.insuranceVerifications[0].preferredVerificationMethod.toString(),sheet1); 
                        // get lineItemID from response json  
                        addCell(3,i,json.insuranceVerifications[1].lineItemID.toString(),sheet1);                                   
                          // get payerID from response json                               
                        addCell(4,i,json.insuranceVerifications[1].planID.toString(),sheet1);                                   
                          // get preferredVerificationMethod from response json                                   
                        addCell(5,i,json.insuranceVerifications[1].preferredVerificationMethod.toString(),sheet1); 
                                                
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(12,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"insuranceVerifications[0].lineItemID","lineItemID")

                          planID = sh.getCell(13,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,planID,"insuranceVerifications[0].planID","planID")

                          preferredVerificationMethod = sh.getCell(14,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,preferredVerificationMethod,"insuranceVerifications[0].preferredVerificationMethod","preferredVerificationMethod")

                       //get the expected values
                          lineItemID1 = sh.getCell(15,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"insuranceVerifications[1].lineItemID","lineItemID")

                          planID1 = sh.getCell(16,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,planID1,"insuranceVerifications[1].planID","planID")

                          preferredVerificationMethod1 = sh.getCell(17,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,preferredVerificationMethod1,"insuranceVerifications[1].preferredVerificationMethod","preferredVerificationMethod")

        
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(6,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(7,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(6,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "Test Case Execution Completed successfully"


         }             
     
catch(Exception e)
{
log.info"test execution failed"
                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="JSON Request" id="3a87e97b-6a5b-4346-9f2a-8e8c740bf2f9">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineInsuranceVerificationPreferredMethodOfContact" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="JSON Request" id="7ff4e2f3-e40a-499d-8d7e-cfb6c10af1cb" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4230",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "P3",
                    "planCode": ""
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "Pods",
            "productSubCategory4": ""
        },
        {
            "hcpcsCode": "Invalid",
            "lineItemID": "L002",
            "plans": [
                {
                    "id": "P4",
                    "planCode": "A101"
                }
            ],
            "productCategory": "Invalid",
            "productSubCategory1": "Invalid",
            "productSubCategory2": "Invalid",
            "productSubCategory3": "Invalid",
            "productSubCategory4": "Invalid"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-62569" id="b322ac00-b681-4024-820f-c0744fd8cc5d">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineInsuranceVerificationPreferredMethodOfContact" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-62569" id="7ff4e2f3-e40a-499d-8d7e-cfb6c10af1cb" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "P1",
                    "planCode": "8106"
                },
                {
                    "id": "P2",
                    "planCode": ""
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="b7fcb937-34aa-40e0-b8d3-aab2e8b51de1" name="Valid HTTP Status Codes_2">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="5558f7d9-5055-4f5e-9acf-cc84b300dcf0" name="lineItemID">
          <con:configuration>
            <path>insuranceVerifications[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d7beaa86-aacc-4121-94cd-523161bad643" name="planID">
          <con:configuration>
            <path>insuranceVerifications[0].planID</path>
            <content>P1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="3a8e9a7f-021f-4470-8fc6-9298b7261253" name="preferredVerificationMethod">
          <con:configuration>
            <path>insuranceVerifications[0].preferredVerificationMethod</path>
            <content>WEB</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c12d40e5-9649-4d66-89d4-92168c6711e2" name="lineItemID">
          <con:configuration>
            <path>insuranceVerifications[1].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ba57a31e-8674-476a-9c46-9dd24c8928a8" name="planID">
          <con:configuration>
            <path>insuranceVerifications[1].planID</path>
            <content>P2</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="fb604f39-6891-4105-88b0-bedbc0be04aa" name="preferredVerificationMethod">
          <con:configuration>
            <path>insuranceVerifications[1].preferredVerificationMethod</path>
            <content>PHONE</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-62570" id="0190cc0e-c22d-48e7-94c0-756d6d1bfa7c">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineInsuranceVerificationPreferredMethodOfContact" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-62570" id="7ff4e2f3-e40a-499d-8d7e-cfb6c10af1cb" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "P3",
                    "planCode": "0011"
                },
                {
                    "id": "P4",
                    "planCode": "6398"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "Insulin Delivery",
            "productSubCategory2": "Insulin Pump Supplies",
            "productSubCategory3": "Pods",
            "productSubCategory4": ""
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="fd652511-34a7-4b8d-b551-4bef47321a67" name="Valid HTTP Status Codes_3">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="7ad8aa87-4892-44ee-8b68-0d754d535be7" name="lineItemID">
          <con:configuration>
            <path>insuranceVerifications[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="87a22639-6688-48f5-8e01-b84087c9d775" name="planID">
          <con:configuration>
            <path>insuranceVerifications[0].planID</path>
            <content>P3</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="7b99485b-535d-483c-ae2d-178d08ed2c65" name="preferredVerificationMethod">
          <con:configuration>
            <path>insuranceVerifications[0].preferredVerificationMethod</path>
            <content>WEB</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="cf90fe07-a45f-4fc3-889c-da0d98c7534a" name="lineItemID">
          <con:configuration>
            <path>insuranceVerifications[1].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f8b05cb8-c838-4d58-893c-22a84920090c" name="planID">
          <con:configuration>
            <path>insuranceVerifications[1].planID</path>
            <content>P4</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="2e7e5d68-8697-4bcd-90cc-341be227cca5" name="preferredVerificationMethod">
          <con:configuration>
            <path>insuranceVerifications[1].preferredVerificationMethod</path>
            <content>WEB</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-62561" id="d58a1813-1d38-4154-80d3-d6bf585cd7c3">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineInsuranceVerificationPreferredMethodOfContact" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-62561" id="7ff4e2f3-e40a-499d-8d7e-cfb6c10af1cb" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification",
            "correlationID": "C123",
            "from": "PCF",
            "timestamp": "2019-08-26T03:16:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "P1",
                    "planCode": "0011"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "Insulin Delivery",
            "productSubCategory2": "Insulin Pump Supplies",
            "productSubCategory3": "Pods",
            "productSubCategory4": ""
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="86509c16-a11b-4100-8647-4b5036bec03a" name="Valid HTTP Status Codes_2">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="bb54e611-3efd-406e-b876-9cddf43c2576" name="lineItemID">
          <con:configuration>
            <path>insuranceVerifications[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="9266848c-1a2b-42f4-aca3-cebc2ea745d5" name="planID">
          <con:configuration>
            <path>insuranceVerifications[0].planID</path>
            <content>P1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ab1b1c8d-579a-4e5d-8bfa-b4542e2722b8" name="preferredVerificationMethod">
          <con:configuration>
            <path>insuranceVerifications[0].preferredVerificationMethod</path>
            <content>WEB</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-62562" id="e7b9e099-680b-4d71-804e-196e03d79942">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineInsuranceVerificationPreferredMethodOfContact" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-62562" id="7ff4e2f3-e40a-499d-8d7e-cfb6c10af1cb" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification",
            "correlationID": "C123",
            "from": "PCF",
            "timestamp": "2019-08-26T03:16:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "P2",
                    "planCode": "6398"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="55848c5c-a177-43f0-85d7-62480b92230d" name="Valid HTTP Status Codes_3">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="008e4633-d3b1-40b1-a872-e98ad64f945d" name="lineItemID">
          <con:configuration>
            <path>insuranceVerifications[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="0cc43565-3e04-497e-b795-0c4dcf223adc" name="planID">
          <con:configuration>
            <path>insuranceVerifications[0].planID</path>
            <content>P2</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="74fc89f9-3995-4bbe-83f0-692493b930a4" name="preferredVerificationMethod">
          <con:configuration>
            <path>insuranceVerifications[0].preferredVerificationMethod</path>
            <content>PHONE</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-62563" id="580374c2-363f-427b-a7e1-cf8553966682">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineInsuranceVerificationPreferredMethodOfContact" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-62563" id="7ff4e2f3-e40a-499d-8d7e-cfb6c10af1cb" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification",
            "correlationID": "C123",
            "from": "PCF",
            "timestamp": "2019-08-26T03:16:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "P3",
                    "planCode": "6398"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "Insulin Pump Supplies",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="798a18d3-e84b-4607-a4c5-eafb060b7f6a" name="Valid HTTP Status Codes_4">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="0141dc66-1a49-4a91-9848-4aaa2a7dbe3f" name="lineItemID">
          <con:configuration>
            <path>insuranceVerifications[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="7ef3585f-3c14-4b7e-927e-50396ce329e7" name="planID">
          <con:configuration>
            <path>insuranceVerifications[0].planID</path>
            <content>P3</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="41036b09-302c-4c60-b31d-793006cce578" name="preferredVerificationMethod">
          <con:configuration>
            <path>insuranceVerifications[0].preferredVerificationMethod</path>
            <content>WEB</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-62564" id="b89eb9fe-b72a-4fe5-8dab-7597cae2bf20">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineInsuranceVerificationPreferredMethodOfContact" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-62564" id="7ff4e2f3-e40a-499d-8d7e-cfb6c10af1cb" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification",
            "correlationID": "C123",
            "from": "PCF",
            "timestamp": "2019-08-26T03:16:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4230",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "P4",
                    "planCode": ""
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "Pods",
            "productSubCategory4": ""
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="56abcccc-a3e3-451d-aa98-87be02c8fe2a" name="Valid HTTP Status Codes_5">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a95c2c61-d377-48cc-a9e0-f24a0ca6a67a" name="lineItemID">
          <con:configuration>
            <path>insuranceVerifications[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e21eba89-d5c2-41f0-b1eb-5083fdabdafe" name="planID">
          <con:configuration>
            <path>insuranceVerifications[0].planID</path>
            <content>P4</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e715f4d3-3bd4-4da8-82d1-bad75f50c4bf" name="preferredVerificationMethod">
          <con:configuration>
            <path>insuranceVerifications[0].preferredVerificationMethod</path>
            <content>PHONE</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-62565" id="fe487741-fbcf-4c53-878e-6c806d02bd91">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineInsuranceVerificationPreferredMethodOfContact" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-62565" id="7ff4e2f3-e40a-499d-8d7e-cfb6c10af1cb" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification",
            "correlationID": "C123",
            "from": "PCF",
            "timestamp": "2019-08-26T03:16:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "Invalid",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "P5",
                    "planCode": "A101"
                }
            ],
            "productCategory": "Invalid",
            "productSubCategory1": "Invalid",
            "productSubCategory2": "Invalid",
            "productSubCategory3": "Invalid",
            "productSubCategory4": "Invalid"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="774bce1f-1a81-435f-a88c-a090904528a3" name="Valid HTTP Status Codes_6">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ad9b646b-047f-439d-80e9-e41d452c55d8" name="lineItemID">
          <con:configuration>
            <path>insuranceVerifications[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="bf7247bf-c167-4993-85d7-274a1ea8f9fb" name="planID">
          <con:configuration>
            <path>insuranceVerifications[0].planID</path>
            <content>P5</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="93b5120c-3866-4890-a136-67ddeeb28b71" name="preferredVerificationMethod">
          <con:configuration>
            <path>insuranceVerifications[0].preferredVerificationMethod</path>
            <content>PHONE</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-62566" id="84ffe632-25ce-42cc-a61b-83604186b210">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineInsuranceVerificationPreferredMethodOfContact" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-62566" id="7ff4e2f3-e40a-499d-8d7e-cfb6c10af1cb" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification",
            "correlationID": "C123",
            "from": "PCF",
            "timestamp": "2019-08-26T03:16:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "P6",
                    "planCode": "9471"
                }
            ],
            "productCategory": "Breast Pump",
            "productSubCategory1": "Invalid",
            "productSubCategory2": "Continuous Glucose Monitors",
            "productSubCategory3": "Pods",
            "productSubCategory4": ""
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="1c31d47f-7d96-450e-8992-c2a3e052728e" name="Valid HTTP Status Codes_7">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="2310a8bd-0b25-46c2-8fca-7eb41a91abec" name="lineItemID">
          <con:configuration>
            <path>insuranceVerifications[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="2ce71977-a76d-44dc-8ec6-49f3aa9f1516" name="planID">
          <con:configuration>
            <path>insuranceVerifications[0].planID</path>
            <content>P6</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="be0d26c1-9f03-44d8-af03-69ecce0d2fa7" name="preferredVerificationMethod">
          <con:configuration>
            <path>insuranceVerifications[0].preferredVerificationMethod</path>
            <content>WEB</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-62567" id="bf9eb3c3-8a6d-4d91-85ae-b031d442bb4c">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineInsuranceVerificationPreferredMethodOfContact" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-62567" id="7ff4e2f3-e40a-499d-8d7e-cfb6c10af1cb" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "P1",
                    "planCode": "0011"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "Insulin Delivery",
            "productSubCategory2": "Insulin Pump Supplies",
            "productSubCategory3": "Pods",
            "productSubCategory4": ""
        },
        {
            "hcpcsCode": "",
            "lineItemID": "L002",
            "plans": [
                {
                    "id": "P2",
                    "planCode": "6398"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="4fb18edf-54f3-487c-ad10-1c5ea23251f3" name="Valid HTTP Status Codes_2">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="b291bf79-f0e5-4ddf-9422-c719c9d4fc6b" name="lineItemID">
          <con:configuration>
            <path>insuranceVerifications[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="7dad7d27-0c8f-4b40-bfa1-bc046bea5ada" name="planID">
          <con:configuration>
            <path>insuranceVerifications[0].planID</path>
            <content>P1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c957b91e-6d75-413c-a7df-ffe2b74ec821" name="preferredVerificationMethod">
          <con:configuration>
            <path>insuranceVerifications[0].preferredVerificationMethod</path>
            <content>WEB</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ba998454-bfb3-4aac-bf07-b20dd9f30e98" name="lineItemID">
          <con:configuration>
            <path>insuranceVerifications[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="483b345b-8e43-445d-985b-19c5535d2ae7" name="planID">
          <con:configuration>
            <path>insuranceVerifications[1].planID</path>
            <content>P2</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ed047c91-ffaf-487d-a7e6-4cac2925dec7" name="preferredVerificationMethod">
          <con:configuration>
            <path>insuranceVerifications[1].preferredVerificationMethod</path>
            <content>PHONE</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-62568" id="a22f8e01-2aa4-4960-b4c5-e7cba0917eae">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineInsuranceVerificationPreferredMethodOfContact" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-62568" id="7ff4e2f3-e40a-499d-8d7e-cfb6c10af1cb" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4230",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "P3",
                    "planCode": ""
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "Pods",
            "productSubCategory4": ""
        },
        {
            "hcpcsCode": "Invalid",
            "lineItemID": "L002",
            "plans": [
                {
                    "id": "P4",
                    "planCode": "A101"
                }
            ],
            "productCategory": "Invalid",
            "productSubCategory1": "Invalid",
            "productSubCategory2": "Invalid",
            "productSubCategory3": "Invalid",
            "productSubCategory4": "Invalid"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="8c848d5a-787c-4bbb-83a9-506256768c9c" name="Valid HTTP Status Codes_3">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="2811f991-8ac3-420f-8246-242fb936888d" name="lineItemID">
          <con:configuration>
            <path>insuranceVerifications[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ca049173-da07-4e62-b67f-63bbc4065700" name="planID">
          <con:configuration>
            <path>insuranceVerifications[0].planID</path>
            <content>P3</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c0fbdb03-fbbb-4707-bee8-785d8ac9ef27" name="preferredVerificationMethod">
          <con:configuration>
            <path>insuranceVerifications[0].preferredVerificationMethod</path>
            <content>PHONE</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ac28fded-88ee-42e4-b863-8fcbb09ec22c" name="lineItemID">
          <con:configuration>
            <path>insuranceVerifications[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="1b59cd7d-c2a2-4e91-a23b-3d6cea67a74c" name="planID">
          <con:configuration>
            <path>insuranceVerifications[1].planID</path>
            <content>P4</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ed97ba5e-196c-4263-a9af-993064ce934d" name="preferredVerificationMethod">
          <con:configuration>
            <path>insuranceVerifications[1].preferredVerificationMethod</path>
            <content>PHONE</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
</con:testCase>

<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="f26a8caa-602d-410e-8e19-0e7db68ddfc8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineAllowableShippingCarriersAndMethods" searchProperties="true" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="f26a8caa-602d-410e-8e19-0e7db68ddfc8fileName">DetermineAllowableShippingCarriersAndMethods</con:setting>
  </con:settings>
  <con:testStep type="groovy" name="DetermineAllowableShippingCarriersAndMethods_SingleCode" id="9f7a8a29-991d-4db6-9a39-3589bec32812">
    <con:settings/>
    <con:config>
      <script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_Input.xls"
def outputfile = projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_Single Code_Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("Input - Single Code")
Sheet jsonInput = wb.getSheet("JSON-Single Code")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"messageCode",sheet1);
addCell(1,0,"description",sheet1);
addCell(2,0,"messageType",sheet1);

addCell(3,0,"code",sheet1);
addCell(4,0,"methodCode",sheet1);
addCell(5,0,"saveAsCertified",sheet1);
addCell(6,0,"methodCode",sheet1);
addCell(7,0,"saveAsCertified",sheet1);
addCell(8,0,"methodCode",sheet1);
addCell(9,0,"saveAsCertified",sheet1);
addCell(10,0,"recommendedCarrierRank",sheet1);
addCell(11,0,"regionalCarrier",sheet1);

addCell(12,0,"recommendedCarrier",sheet1);
addCell(13,0,"recommendedShippingMethod",sheet1);

addCell(14,0,"PASS/FAIL",sheet1);
addCell(15,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

//try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                //Input                                 
                                requestTemplet.content.allowableShippingRequest.poBox = sh.getCell(2,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.physicalAddress = sh.getCell(3,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.hazmat = sh.getCell(4,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.proofOfDelivery = sh.getCell(5,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.addressOutsideContiguousStates = sh.getCell(6,i).getContents().toString()                                
                                requestTemplet.content.allowableShippingRequest.uspsPreferred = sh.getCell(7,i).getContents().toString()                               
                                 
                                 //Input for shippingCarriers - code [0]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].code = sh.getCell(8,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].methodCode = sh.getCell(9,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].transitTimeInDays = sh.getCell(10,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].methodCode = sh.getCell(11,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].transitTimeInDays = sh.getCell(12,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].methodCode = sh.getCell(13,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].transitTimeInDays = sh.getCell(14,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].recommendedCarrierRank = sh.getCell(15,i).getContents()                            
               				
              
	                             //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)                             
                         //teststep cloned: End
                         
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                          // get response for message
                          //initialize the cel postion for messages array
                          int celmsg=0;
                          //Get the array size for messages
                        for(int arrmsg=0; arrmsg<json.shippingOrder.messages.size(); arrmsg++)
                        {
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageCode.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].description.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageType.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        }
					
                        //get response for code  
                        //Check the existence of the array: allowedShippingCarriers                        
                          if (json.shippingOrder.allowedShippingCarriers != null)
                         {
		                        //initialize the cel postion for code, methodCode & recommendedCarrierRank
		                         int celcode=3; celmethodCode=4; celCrank=10; 
		                         int cCode, cMetdCode, cCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcode=0; arrcode<json.shippingOrder.allowedShippingCarriers.size(); arrcode++)
		                        {                    	
		                        		cCode=celcode
		                        		cMetdCode=celmethodCode
		                        		cCrank=celCrank
		                        		addCell(cCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].code.toString(),sheet1);		                        		
			                        		
				                        		//Get the array size for shippingMethods
				                        		for(int arrmethodCode=0; arrmethodCode<json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods.size(); arrmethodCode++)
				                        		{ 				                        		            		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].methodCode.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;		                        		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].saveAsCertified.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;				                        		
				                       		} 
			                       	addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].recommendedCarrierRank.toString(),sheet1);
			                       	cCrank=cCrank+1;							     
							     addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].regionalCarrier.toString(),sheet1); 
							    
							    //Increment the cel position for code, methodCode & recommendedCarrierRank 
							     celcode=celcode+9;
							     celmethodCode=celmethodCode+9;
							    celCrank=celCrank+9;						   							     
		                         }       					                     
			              }  
			              addCell(12,i,json.shippingOrder.recommendedCarrier.toString(),sheet1); 
                             addCell(13,i,json.shippingOrder.recommendedShippingMethod.toString(),sheet1); 
                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values for message
                              //initialize the cel postion for messages array for assertion                      
                                int celmsgass=16;
						//check the existence of messages
            		if(json.shippingOrder.messages.toString()!= "[]")
            		{            		         
		                        String messageCode = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageCode,"shippingOrder.messages[0].messageCode","messageCode")
		                        celmsgass=celmsgass+1;
		                       
		                        String description = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,description,"shippingOrder.messages[0].description","description")  
		                        celmsgass=celmsgass+1;                     
		                        
		                        String messageType = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageType,"shippingOrder.messages[0].messageType","messageType")
		                        celmsgass=celmsgass+1;
		                        
            		}
                             //get the expected values for code
                               
                             //check the existence of array allowedShippingCarriers                         
                          if (json.shippingOrder.allowedShippingCarriers != null)
                        	 {
                        	 	//initialize the cell postion used for assertion for code, methodCode & recommendedCarrierRank
		                         int AssForcelcode=19; AssForcelmethodCode=20; AssForcelCrank=26;
		                         int AssForCode, AssForMetdCode, AssForCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcdres=0; arrcdres<json.shippingOrder.allowedShippingCarriers.size(); arrcdres++)
		                        { 	 
		                        		AssForCode=AssForcelcode
		                        		AssForMetdCode=AssForcelmethodCode
		                        		AssForCrank=AssForcelCrank                       		
								 code = sh.getCell(AssForCode,i).getContents().toString() 								                
								addAssertionJsonPathMatch(testStepForAssertion,code,"shippingOrder.allowedShippingCarriers["+arrcdres+"].code","code")                                            
		                       		//check the existence of array shippingMethods
		                       		if (json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods != null)  
		                       			{    
		                       				//Get the array size for shippingMethods                 
				                        		for(int arrmtcd=0; arrmtcd<json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods.size(); arrmtcd++)
				                        		{              		
				                        		String methodCode = sh.getCell(AssForMetdCode,i).getContents().toString()
			                     			addAssertionJsonPathMatch(testStepForAssertion,methodCode,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].methodCode","methodCode")                       
			                      			AssForMetdCode=AssForMetdCode+1;			                      				
			                      			String saveAsCertified = sh.getCell(AssForMetdCode,i).getContents().toString()
				                        		addAssertionJsonPathMatch(testStepForAssertion,saveAsCertified,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].saveAsCertified","saveAsCertified"); 
				                        		AssForMetdCode=AssForMetdCode+1;
				                       		} 
		                       			}
			                       	   String recommendedCarrierRank = sh.getCell(AssForCrank,i).getContents().toString()			                       	   
				                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrierRank,"shippingOrder.allowedShippingCarriers["+arrcdres+"].recommendedCarrierRank","recommendedCarrierRank")
				                       AssForCrank=AssForCrank+1;				                       
				                       String regionalCarrier = sh.getCell(AssForCrank,i).getContents().toString()
				                       addAssertionJsonPathMatch(testStepForAssertion,regionalCarrier,"shippingOrder.allowedShippingCarriers["+arrcdres+"].regionalCarrier","regionalCarrier")
								
								//increment the cell postion used for assertion for code, methodCode & recommendedCarrierRank	                       	
							     AssForcelcode=AssForcelcode+9;
							     AssForcelmethodCode=AssForcelmethodCode+9;
							     AssForcelCrank=AssForcelCrank+9;							   							     
		                         }       					                     
			              }  
			             recommendedCarrier = sh.getCell(28,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrier,"shippingOrder.recommendedCarrier","recommendedCarrier")
	                       recommendedShippingMethod = sh.getCell(29,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedShippingMethod,"shippingOrder.recommendedShippingMethod","recommendedShippingMethod")
								                       						
                                //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(14,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(15,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(14,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"
          
/*}
     
catch(Exception e)
{

       log.info(e)                         
}

finally

{*/
    //close workbook
     wb.close();
     wb1.close();     

//}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

} 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="DetermineAllowableShippingCarriersAndMethods_TwoCodes" id="54763c86-1aac-4aa9-9304-350bf75d20bb">
    <con:settings/>
    <con:config>
      <script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_Input.xls"
def outputfile = projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_2 Codes_Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("Input - 2 Codes")
Sheet jsonInput = wb.getSheet("JSON-2 Codes")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"messageCode",sheet1);
addCell(1,0,"description",sheet1);
addCell(2,0,"messageType",sheet1);

addCell(3,0,"code",sheet1);
addCell(4,0,"methodCode",sheet1);
addCell(5,0,"saveAsCertified",sheet1);
addCell(6,0,"methodCode",sheet1);
addCell(7,0,"saveAsCertified",sheet1);
addCell(8,0,"methodCode",sheet1);
addCell(9,0,"saveAsCertified",sheet1);
addCell(10,0,"recommendedCarrierRank",sheet1);
addCell(11,0,"regionalCarrier",sheet1);

addCell(12,0,"code",sheet1);
addCell(13,0,"methodCode",sheet1);
addCell(14,0,"saveAsCertified",sheet1);
addCell(15,0,"methodCode",sheet1);
addCell(16,0,"saveAsCertified",sheet1);
addCell(17,0,"methodCode",sheet1);
addCell(18,0,"saveAsCertified",sheet1);
addCell(19,0,"recommendedCarrierRank",sheet1);
addCell(20,0,"regionalCarrier",sheet1);

addCell(21,0,"recommendedCarrier",sheet1);
addCell(22,0,"recommendedShippingMethod",sheet1);

addCell(23,0,"PASS/FAIL",sheet1);
addCell(24,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

//try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                //Input                                 
                                requestTemplet.content.allowableShippingRequest.poBox = sh.getCell(2,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.physicalAddress = sh.getCell(3,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.hazmat = sh.getCell(4,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.proofOfDelivery = sh.getCell(5,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.addressOutsideContiguousStates = sh.getCell(6,i).getContents().toString()                                
                                requestTemplet.content.allowableShippingRequest.uspsPreferred = sh.getCell(7,i).getContents().toString()                               
                                 
                                 //Input for shippingCarriers - code [0]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].code = sh.getCell(8,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].methodCode = sh.getCell(9,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].transitTimeInDays = sh.getCell(10,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].methodCode = sh.getCell(11,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].transitTimeInDays = sh.getCell(12,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].methodCode = sh.getCell(13,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].transitTimeInDays = sh.getCell(14,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].recommendedCarrierRank = sh.getCell(15,i).getContents()                            

               				//Input for shippingCarriers - code [1]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].code = sh.getCell(16,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[0].methodCode = sh.getCell(17,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[0].transitTimeInDays = sh.getCell(18,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[1].methodCode = sh.getCell(19,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[1].transitTimeInDays = sh.getCell(20,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[2].methodCode = sh.getCell(21,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[2].transitTimeInDays = sh.getCell(22,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].recommendedCarrierRank = sh.getCell(23,i).getContents()                            
               				
              
	                             //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)                             
                         //teststep cloned: End
                         
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                          // get response for message
                          //initialize the cel postion for messages array
                          int celmsg=0;
                          //Get the array size for messages
                        for(int arrmsg=0; arrmsg<json.shippingOrder.messages.size(); arrmsg++)
                        {
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageCode.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].description.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageType.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        }
					
                        //get response for code                                       
                         //Check the existence of the array: allowedShippingCarriers                        
                          if (json.shippingOrder.allowedShippingCarriers != null)
                         {
		                        //initialize the cel postion for code, methodCode & recommendedCarrierRank
		                         int celcode=3; celmethodCode=4; celCrank=10; 
		                         int cCode, cMetdCode, cCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcode=0; arrcode<json.shippingOrder.allowedShippingCarriers.size(); arrcode++)
		                        {                    	
		                        		cCode=celcode
		                        		cMetdCode=celmethodCode
		                        		cCrank=celCrank
		                        		addCell(cCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].code.toString(),sheet1);		                        		
			                        		
				                        		//Get the array size for shippingMethods
				                        		for(int arrmethodCode=0; arrmethodCode<json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods.size(); arrmethodCode++)
				                        		{ 				                        		            		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].methodCode.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;		                        		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].saveAsCertified.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;				                        		
				                       		} 
			                       	addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].recommendedCarrierRank.toString(),sheet1);
			                       	cCrank=cCrank+1;							     
							     addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].regionalCarrier.toString(),sheet1); 
							    
							    //Increment the cel position for code, methodCode & recommendedCarrierRank 
							     celcode=celcode+9;
							     celmethodCode=celmethodCode+9;
							    celCrank=celCrank+9;						   							     
		                         }       					                     
			              }  
			              addCell(21,i,json.shippingOrder.recommendedCarrier.toString(),sheet1); 
                             addCell(22,i,json.shippingOrder.recommendedShippingMethod.toString(),sheet1);                   

               
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values for msg
					 //initialize the cel postion for messages array for assertion                      
                                int celmsgass=24;
						//check the existence of messages
            		if(json.shippingOrder.messages.toString()!= "[]")
            		{            		         
		                        String messageCode = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageCode,"shippingOrder.messages[0].messageCode","messageCode")
		                        celmsgass=celmsgass+1;
		                       
		                        String description = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,description,"shippingOrder.messages[0].description","description")  
		                        celmsgass=celmsgass+1;                     
		                        
		                        String messageType = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageType,"shippingOrder.messages[0].messageType","messageType")
		                        celmsgass=celmsgass+1;
		                        
            		}
                             //get the expected values for code
                            //check the existence of array allowedShippingCarriers                         
                          if (json.shippingOrder.allowedShippingCarriers != null)
                        	 {
                        	 	//initialize the cell postion used for assertion for code, methodCode & recommendedCarrierRank
		                          int AssForcelcode=27; AssForcelmethodCode=28; AssForcelCrank=34;
		                         int AssForCode, AssForMetdCode, AssForCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcdres=0; arrcdres<json.shippingOrder.allowedShippingCarriers.size(); arrcdres++)
		                        { 	 
		                        		AssForCode=AssForcelcode
		                        		AssForMetdCode=AssForcelmethodCode
		                        		AssForCrank=AssForcelCrank                       		
								 code = sh.getCell(AssForCode,i).getContents().toString() 								                
								addAssertionJsonPathMatch(testStepForAssertion,code,"shippingOrder.allowedShippingCarriers["+arrcdres+"].code","code")                                            
		                       		//check the existence of array shippingMethods
		                       		if (json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods != null)  
		                       			{    
		                       				//Get the array size for shippingMethods                 
				                        		for(int arrmtcd=0; arrmtcd<json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods.size(); arrmtcd++)
				                        		{              		
				                        		String methodCode = sh.getCell(AssForMetdCode,i).getContents().toString()
			                     			addAssertionJsonPathMatch(testStepForAssertion,methodCode,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].methodCode","methodCode")                       
			                      			AssForMetdCode=AssForMetdCode+1;			                      				
			                      			String saveAsCertified = sh.getCell(AssForMetdCode,i).getContents().toString()
				                        		addAssertionJsonPathMatch(testStepForAssertion,saveAsCertified,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].saveAsCertified","saveAsCertified"); 
				                        		AssForMetdCode=AssForMetdCode+1;
				                       		} 
		                       			}
			                       	   String recommendedCarrierRank = sh.getCell(AssForCrank,i).getContents().toString()			                       	   
				                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrierRank,"shippingOrder.allowedShippingCarriers["+arrcdres+"].recommendedCarrierRank","recommendedCarrierRank")
				                       AssForCrank=AssForCrank+1;				                       
				                       String regionalCarrier = sh.getCell(AssForCrank,i).getContents().toString()
				                       addAssertionJsonPathMatch(testStepForAssertion,regionalCarrier,"shippingOrder.allowedShippingCarriers["+arrcdres+"].regionalCarrier","regionalCarrier")
								
								//increment the cell postion used for assertion for code, methodCode & recommendedCarrierRank	                       	
							     AssForcelcode=AssForcelcode+9;
							     AssForcelmethodCode=AssForcelmethodCode+9;
							     AssForcelCrank=AssForcelCrank+9;							   							     
		                         }       					                     
			              }  
			             recommendedCarrier = sh.getCell(45,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrier,"shippingOrder.recommendedCarrier","recommendedCarrier")
	                       recommendedShippingMethod = sh.getCell(46,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedShippingMethod,"shippingOrder.recommendedShippingMethod","recommendedShippingMethod")
					                            
                       	                       						
                                //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(23,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(24,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(23,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"
          
/*}
     
catch(Exception e)
{

       log.info(e)                         
}

finally

{*/
    //close workbook
     wb.close();
     wb1.close();     

//}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

} 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="DetermineAllowableShippingCarriersAndMethods_ThreeCodes" id="315a0f6e-5451-407c-a6e3-635a20feeba7">
    <con:settings/>
    <con:config>
      <script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_Input.xls"
def outputfile = projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_3 Codes_Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("Input - 3 Codes")
Sheet jsonInput = wb.getSheet("JSON-3 Codes")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"messageCode",sheet1);
addCell(1,0,"description",sheet1);
addCell(2,0,"messageType",sheet1);

addCell(3,0,"code",sheet1);
addCell(4,0,"methodCode",sheet1);
addCell(5,0,"saveAsCertified",sheet1);
addCell(6,0,"methodCode",sheet1);
addCell(7,0,"saveAsCertified",sheet1);
addCell(8,0,"methodCode",sheet1);
addCell(9,0,"saveAsCertified",sheet1);
addCell(10,0,"recommendedCarrierRank",sheet1);
addCell(11,0,"regionalCarrier",sheet1);

addCell(12,0,"code",sheet1);
addCell(13,0,"methodCode",sheet1);
addCell(14,0,"saveAsCertified",sheet1);
addCell(15,0,"methodCode",sheet1);
addCell(16,0,"saveAsCertified",sheet1);
addCell(17,0,"methodCode",sheet1);
addCell(18,0,"saveAsCertified",sheet1);
addCell(19,0,"recommendedCarrierRank",sheet1);
addCell(20,0,"regionalCarrier",sheet1);

addCell(21,0,"code",sheet1);
addCell(22,0,"methodCode",sheet1);
addCell(23,0,"saveAsCertified",sheet1);
addCell(24,0,"methodCode",sheet1);
addCell(25,0,"saveAsCertified",sheet1);
addCell(26,0,"methodCode",sheet1);
addCell(27,0,"saveAsCertified",sheet1);
addCell(28,0,"recommendedCarrierRank",sheet1);
addCell(29,0,"regionalCarrier",sheet1);

addCell(30,0,"recommendedCarrier",sheet1);
addCell(31,0,"recommendedShippingMethod",sheet1);

addCell(32,0,"PASS/FAIL",sheet1);
addCell(33,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

//try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                //Input                                 
                                requestTemplet.content.allowableShippingRequest.poBox = sh.getCell(2,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.physicalAddress = sh.getCell(3,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.hazmat = sh.getCell(4,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.proofOfDelivery = sh.getCell(5,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.addressOutsideContiguousStates = sh.getCell(6,i).getContents().toString()                                
                                requestTemplet.content.allowableShippingRequest.uspsPreferred = sh.getCell(7,i).getContents().toString()                               
                                 
                                 //Input for shippingCarriers - code [0]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].code = sh.getCell(8,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].methodCode = sh.getCell(9,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].transitTimeInDays = sh.getCell(10,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].methodCode = sh.getCell(11,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].transitTimeInDays = sh.getCell(12,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].methodCode = sh.getCell(13,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].transitTimeInDays = sh.getCell(14,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].recommendedCarrierRank = sh.getCell(15,i).getContents()                            

               				//Input for shippingCarriers - code [1]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].code = sh.getCell(16,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[0].methodCode = sh.getCell(17,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[0].transitTimeInDays = sh.getCell(18,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[1].methodCode = sh.getCell(19,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[1].transitTimeInDays = sh.getCell(20,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[2].methodCode = sh.getCell(21,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[2].transitTimeInDays = sh.getCell(22,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].recommendedCarrierRank = sh.getCell(23,i).getContents()                            
               				
              					//Input for shippingCarriers - code [2]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].code = sh.getCell(24,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[0].methodCode = sh.getCell(25,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[0].transitTimeInDays = sh.getCell(26,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[1].methodCode = sh.getCell(27,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[1].transitTimeInDays = sh.getCell(28,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[2].methodCode = sh.getCell(29,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[2].transitTimeInDays = sh.getCell(30,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].recommendedCarrierRank = sh.getCell(31,i).getContents()                            
               				
              
	                             //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)                             
                         //teststep cloned: End
                         
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                          // get response for message
                          //initialize the cel postion for messages array
                          int celmsg=0;
                          //Get the array size for messages
                        for(int arrmsg=0; arrmsg<json.shippingOrder.messages.size(); arrmsg++)
                        {
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageCode.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].description.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageType.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        }
					
                        //get response for code                         	
                         //Check the existence of the array: allowedShippingCarriers                        
                          if (json.shippingOrder.allowedShippingCarriers != null)
                         {
		                        //initialize the cel postion for code, methodCode & recommendedCarrierRank
		                         int celcode=3; celmethodCode=4; celCrank=10; 
		                         int cCode, cMetdCode, cCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcode=0; arrcode<json.shippingOrder.allowedShippingCarriers.size(); arrcode++)
		                        {                    	
		                        		cCode=celcode
		                        		cMetdCode=celmethodCode
		                        		cCrank=celCrank
		                        		addCell(cCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].code.toString(),sheet1);		                        		
			                        		
				                        		//Get the array size for shippingMethods
				                        		for(int arrmethodCode=0; arrmethodCode<json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods.size(); arrmethodCode++)
				                        		{ 				                        		            		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].methodCode.toString(),sheet1); 
				                        		cMetdCode=cMetdCode+1;		                        		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].saveAsCertified.toString(),sheet1); 
				                        		cMetdCode=cMetdCode+1;				                        		
				                       		} 
			                       	addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].recommendedCarrierRank.toString(),sheet1);
			                       	cCrank=cCrank+1;							     
							     addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].regionalCarrier.toString(),sheet1); 
							    
							    //Increment the cel position for code, methodCode & recommendedCarrierRank 
							     celcode=celcode+9;
							     celmethodCode=celmethodCode+9;
							    celCrank=celCrank+9;							   							     
		                         }       					                     
			              }  
			              addCell(30,i,json.shippingOrder.recommendedCarrier.toString(),sheet1); 
                             addCell(31,i,json.shippingOrder.recommendedShippingMethod.toString(),sheet1); 
                             
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values for msg
					 //initialize the cel postion for messages array for assertion                      
                                int celmsgass=32;
						//check the existence of messages
            		if(json.shippingOrder.messages.toString()!= "[]")
            		{            		         
		                        String messageCode = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageCode,"shippingOrder.messages[0].messageCode","messageCode")
		                        celmsgass=celmsgass+1;
		                       
		                        String description = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,description,"shippingOrder.messages[0].description","description")  
		                        celmsgass=celmsgass+1;                     
		                        
		                        String messageType = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageType,"shippingOrder.messages[0].messageType","messageType")
		                        celmsgass=celmsgass+1;
		                        
            		}
                             //get the expected values for code                            
                         //check the existence of array allowedShippingCarriers                         
                          if (json.shippingOrder.allowedShippingCarriers != null)
                        	 {
                        	 	//initialize the cell postion used for assertion for code, methodCode & recommendedCarrierRank		                        
		                          int AssForcelcode=35; AssForcelmethodCode=36; AssForcelCrank=42;
		                         int AssForCode, AssForMetdCode, AssForCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcdres=0; arrcdres<json.shippingOrder.allowedShippingCarriers.size(); arrcdres++)
		                        { 	 
		                        		AssForCode=AssForcelcode
		                        		AssForMetdCode=AssForcelmethodCode
		                        		AssForCrank=AssForcelCrank                       		
								 code = sh.getCell(AssForCode,i).getContents().toString() 								                
								addAssertionJsonPathMatch(testStepForAssertion,code,"shippingOrder.allowedShippingCarriers["+arrcdres+"].code","code")                                            
		                       		//check the existence of array shippingMethods
		                       		if (json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods != null)  
		                       			{    
		                       				//Get the array size for shippingMethods                 
				                        		for(int arrmtcd=0; arrmtcd<json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods.size(); arrmtcd++)
				                        		{              		
				                        		String methodCode = sh.getCell(AssForMetdCode,i).getContents().toString()
			                     			addAssertionJsonPathMatch(testStepForAssertion,methodCode,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].methodCode","methodCode")                       
			                      			AssForMetdCode=AssForMetdCode+1;			                      				
			                      			String saveAsCertified = sh.getCell(AssForMetdCode,i).getContents().toString()
				                        		addAssertionJsonPathMatch(testStepForAssertion,saveAsCertified,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].saveAsCertified","saveAsCertified"); 
				                        		AssForMetdCode=AssForMetdCode+1;
				                       		} 
		                       			}
			                       	   String recommendedCarrierRank = sh.getCell(AssForCrank,i).getContents().toString()			                       	   
				                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrierRank,"shippingOrder.allowedShippingCarriers["+arrcdres+"].recommendedCarrierRank","recommendedCarrierRank")
				                       AssForCrank=AssForCrank+1;				                       
				                       String regionalCarrier = sh.getCell(AssForCrank,i).getContents().toString()
				                       addAssertionJsonPathMatch(testStepForAssertion,regionalCarrier,"shippingOrder.allowedShippingCarriers["+arrcdres+"].regionalCarrier","regionalCarrier")
								
								//increment the cell postion used for assertion for code, methodCode & recommendedCarrierRank	                       	
							     AssForcelcode=AssForcelcode+9;
							     AssForcelmethodCode=AssForcelmethodCode+9;
							     AssForcelCrank=AssForcelCrank+9;		
							     			   							     
		                         }       					                     
			              }  
			             recommendedCarrier = sh.getCell(62,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrier,"shippingOrder.recommendedCarrier","recommendedCarrier")
	                       recommendedShippingMethod = sh.getCell(63,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedShippingMethod,"shippingOrder.recommendedShippingMethod","recommendedShippingMethod")
					                            
                       	                       						
                                //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(32,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(33,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(32,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"
          
/*}
     
catch(Exception e)
{

       log.info(e)                         
}

finally

{*/
    //close workbook
     wb.close();
     wb1.close();     

//}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

} 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="DetermineAllowableShippingCarriersAndMethods_FourCodes" id="16575ea5-6169-4a1d-8ae1-471b17d85d70">
    <con:settings/>
    <con:config>
      <script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_Input.xls"
def outputfile = projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_4 Codes_Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("Input - 4 Codes")
Sheet jsonInput = wb.getSheet("JSON-4 Codes")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"messageCode",sheet1);
addCell(1,0,"description",sheet1);
addCell(2,0,"messageType",sheet1);

addCell(3,0,"code",sheet1);
addCell(4,0,"methodCode",sheet1);
addCell(5,0,"saveAsCertified",sheet1);
addCell(6,0,"methodCode",sheet1);
addCell(7,0,"saveAsCertified",sheet1);
addCell(8,0,"methodCode",sheet1);
addCell(9,0,"saveAsCertified",sheet1);
addCell(10,0,"recommendedCarrierRank",sheet1);
addCell(11,0,"regionalCarrier",sheet1);

addCell(12,0,"code",sheet1);
addCell(13,0,"methodCode",sheet1);
addCell(14,0,"saveAsCertified",sheet1);
addCell(15,0,"methodCode",sheet1);
addCell(16,0,"saveAsCertified",sheet1);
addCell(17,0,"methodCode",sheet1);
addCell(18,0,"saveAsCertified",sheet1);
addCell(19,0,"recommendedCarrierRank",sheet1);
addCell(20,0,"regionalCarrier",sheet1);

addCell(21,0,"code",sheet1);
addCell(22,0,"methodCode",sheet1);
addCell(23,0,"saveAsCertified",sheet1);
addCell(24,0,"methodCode",sheet1);
addCell(25,0,"saveAsCertified",sheet1);
addCell(26,0,"methodCode",sheet1);
addCell(27,0,"saveAsCertified",sheet1);
addCell(28,0,"recommendedCarrierRank",sheet1);
addCell(29,0,"regionalCarrier",sheet1);

addCell(30,0,"code",sheet1);
addCell(31,0,"methodCode",sheet1);
addCell(32,0,"saveAsCertified",sheet1);
addCell(33,0,"methodCode",sheet1);
addCell(34,0,"saveAsCertified",sheet1);
addCell(35,0,"methodCode",sheet1);
addCell(36,0,"saveAsCertified",sheet1);
addCell(37,0,"recommendedCarrierRank",sheet1);
addCell(38,0,"regionalCarrier",sheet1);

addCell(39,0,"recommendedCarrier",sheet1);
addCell(40,0,"recommendedShippingMethod",sheet1);

addCell(41,0,"PASS/FAIL",sheet1);
addCell(42,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

//try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                //Input                                 
                                requestTemplet.content.allowableShippingRequest.poBox = sh.getCell(2,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.physicalAddress = sh.getCell(3,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.hazmat = sh.getCell(4,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.proofOfDelivery = sh.getCell(5,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.addressOutsideContiguousStates = sh.getCell(6,i).getContents().toString()                                
                                requestTemplet.content.allowableShippingRequest.uspsPreferred = sh.getCell(7,i).getContents().toString()                               
                                 
                                 //Input for shippingCarriers - code [0]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].code = sh.getCell(8,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].methodCode = sh.getCell(9,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].transitTimeInDays = sh.getCell(10,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].methodCode = sh.getCell(11,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].transitTimeInDays = sh.getCell(12,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].methodCode = sh.getCell(13,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].transitTimeInDays = sh.getCell(14,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].recommendedCarrierRank = sh.getCell(15,i).getContents()                            

               				//Input for shippingCarriers - code [1]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].code = sh.getCell(16,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[0].methodCode = sh.getCell(17,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[0].transitTimeInDays = sh.getCell(18,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[1].methodCode = sh.getCell(19,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[1].transitTimeInDays = sh.getCell(20,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[2].methodCode = sh.getCell(21,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[2].transitTimeInDays = sh.getCell(22,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].recommendedCarrierRank = sh.getCell(23,i).getContents()                            
               				
              					//Input for shippingCarriers - code [2]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].code = sh.getCell(24,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[0].methodCode = sh.getCell(25,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[0].transitTimeInDays = sh.getCell(26,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[1].methodCode = sh.getCell(27,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[1].transitTimeInDays = sh.getCell(28,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[2].methodCode = sh.getCell(29,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[2].transitTimeInDays = sh.getCell(30,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].recommendedCarrierRank = sh.getCell(31,i).getContents()                            
               				
              					//Input for shippingCarriers - code [3]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[3].code = sh.getCell(32,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[3].shippingMethods[0].methodCode = sh.getCell(33,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[3].shippingMethods[0].transitTimeInDays = sh.getCell(34,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[3].shippingMethods[1].methodCode = sh.getCell(35,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[3].shippingMethods[1].transitTimeInDays = sh.getCell(36,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[3].shippingMethods[2].methodCode = sh.getCell(37,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[3].shippingMethods[2].transitTimeInDays = sh.getCell(38,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[3].recommendedCarrierRank = sh.getCell(39,i).getContents()                            
               				
	                             //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)                             
                         //teststep cloned: End
                         
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                          // get response for message
                          //initialize the cel postion for messages array
                          int celmsg=0;
                          //Get the array size for messages
                        for(int arrmsg=0; arrmsg<json.shippingOrder.messages.size(); arrmsg++)
                        {
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageCode.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].description.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageType.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        }

					//get response for code                         	
                         //Check the existence of the array: allowedShippingCarriers                        
                          if (json.shippingOrder.allowedShippingCarriers != null)
                         {
		                        //initialize the cel postion for code, methodCode & recommendedCarrierRank
		                         int celcode=3; celmethodCode=4; celCrank=10;
		                         int cCode, cMetdCode, cCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcode=0; arrcode<json.shippingOrder.allowedShippingCarriers.size(); arrcode++)
		                        {                    	
		                        		cCode=celcode
		                        		cMetdCode=celmethodCode
		                        		cCrank=celCrank
		                        		addCell(cCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].code.toString(),sheet1);		                        		
			                        		
				                        		//Get the array size for shippingMethods
				                        		for(int arrmethodCode=0; arrmethodCode<json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods.size(); arrmethodCode++)
				                        		{ 				                        		            		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].methodCode.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;		                        		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].saveAsCertified.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;				                        		
				                       		} 
			                       	addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].recommendedCarrierRank.toString(),sheet1);
			                       	cCrank=cCrank+1;							     
							     addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].regionalCarrier.toString(),sheet1); 
							    
							    //Increment the cel position for code, methodCode & recommendedCarrierRank 
							     celcode=celcode+9;
							     celmethodCode=celmethodCode+9;
							    celCrank=celCrank+9;							   							     
		                         }       					                     
			              }  
			              addCell(39,i,json.shippingOrder.recommendedCarrier.toString(),sheet1); 
                             addCell(40,i,json.shippingOrder.recommendedShippingMethod.toString(),sheet1);                                          

                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                        //get the expected values for msg
						 //initialize the cel postion for messages array for assertion                      
                                int celmsgass=40;
						//check the existence of messages
            		if(json.shippingOrder.messages.toString()!= "[]")
            		{            		         
		                        String messageCode = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageCode,"shippingOrder.messages[0].messageCode","messageCode")
		                        celmsgass=celmsgass+1;
		                       
		                        String description = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,description,"shippingOrder.messages[0].description","description")  
		                        celmsgass=celmsgass+1;                     
		                        
		                        String messageType = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageType,"shippingOrder.messages[0].messageType","messageType")
		                        celmsgass=celmsgass+1;
		                        
            		}
                             //get the expected values for code                            
                         //check the existence of array allowedShippingCarriers                         
                          if (json.shippingOrder.allowedShippingCarriers != null)
                        	 {
                        	 	//initialize the cell postion used for assertion for code, methodCode & recommendedCarrierRank
		                          int AssForcelcode=43; AssForcelmethodCode=44; AssForcelCrank=50;
		                         int AssForCode, AssForMetdCode, AssForCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcdres=0; arrcdres<json.shippingOrder.allowedShippingCarriers.size(); arrcdres++)
		                        { 	 
		                        		AssForCode=AssForcelcode
		                        		AssForMetdCode=AssForcelmethodCode
		                        		AssForCrank=AssForcelCrank                       		
								 code = sh.getCell(AssForCode,i).getContents().toString() 								                
								addAssertionJsonPathMatch(testStepForAssertion,code,"shippingOrder.allowedShippingCarriers["+arrcdres+"].code","code")                                            
		                       		//check the existence of array shippingMethods
		                       		if (json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods != null)  
		                       			{    
		                       				//Get the array size for shippingMethods                 
				                        		for(int arrmtcd=0; arrmtcd<json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods.size(); arrmtcd++)
				                        		{              		
				                        		String methodCode = sh.getCell(AssForMetdCode,i).getContents().toString()
			                     			addAssertionJsonPathMatch(testStepForAssertion,methodCode,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].methodCode","methodCode")                       
			                      			AssForMetdCode=AssForMetdCode+1;			                      				
			                      			String saveAsCertified = sh.getCell(AssForMetdCode,i).getContents().toString()
				                        		addAssertionJsonPathMatch(testStepForAssertion,saveAsCertified,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].saveAsCertified","saveAsCertified"); 
				                        		AssForMetdCode=AssForMetdCode+1;
				                       		} 
		                       			}
			                       	   String recommendedCarrierRank = sh.getCell(AssForCrank,i).getContents().toString()			                       	   
				                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrierRank,"shippingOrder.allowedShippingCarriers["+arrcdres+"].recommendedCarrierRank","recommendedCarrierRank")
				                       AssForCrank=AssForCrank+1;				                       
				                       String regionalCarrier = sh.getCell(AssForCrank,i).getContents().toString()
				                       addAssertionJsonPathMatch(testStepForAssertion,regionalCarrier,"shippingOrder.allowedShippingCarriers["+arrcdres+"].regionalCarrier","regionalCarrier")
								
								//increment the cell postion used for assertion for code, methodCode & recommendedCarrierRank	                       	
							     AssForcelcode=AssForcelcode+9;
							     AssForcelmethodCode=AssForcelmethodCode+9;
							     AssForcelCrank=AssForcelCrank+9;							   							     
		                         }       					                     
			              }  
			             recommendedCarrier = sh.getCell(79,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrier,"shippingOrder.recommendedCarrier","recommendedCarrier")
	                       recommendedShippingMethod = sh.getCell(80,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedShippingMethod,"shippingOrder.recommendedShippingMethod","recommendedShippingMethod")
					             
                       	                       						
                                //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(41,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(42,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(41,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"
          
/*}
     
catch(Exception e)
{

       log.info(e)                         
}

finally

{*/
    //close workbook
     wb.close();
     wb1.close();     

//}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

} 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="DetermineAllowableShippingCarriersAndMethods_SingleCode_RunOnFriday" id="fc061b92-219d-4031-b3c6-3a034029530c">
    <con:settings/>
    <con:config>
      <script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_Input_Run on Friday.xls"
def outputfile = projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_Single Code_Run on Friday_Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("Input - Single Code")
Sheet jsonInput = wb.getSheet("JSON-Single Code")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"messageCode",sheet1);
addCell(1,0,"description",sheet1);
addCell(2,0,"messageType",sheet1);

addCell(3,0,"code",sheet1);
addCell(4,0,"methodCode",sheet1);
addCell(5,0,"saveAsCertified",sheet1);
addCell(6,0,"methodCode",sheet1);
addCell(7,0,"saveAsCertified",sheet1);
addCell(8,0,"methodCode",sheet1);
addCell(9,0,"saveAsCertified",sheet1);
addCell(10,0,"recommendedCarrierRank",sheet1);
addCell(11,0,"regionalCarrier",sheet1);

addCell(12,0,"recommendedCarrier",sheet1);
addCell(13,0,"recommendedShippingMethod",sheet1);

addCell(14,0,"PASS/FAIL",sheet1);
addCell(15,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

//try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                                                        
                                //Input                                 
                                requestTemplet.content.allowableShippingRequest.poBox = sh.getCell(2,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.physicalAddress = sh.getCell(3,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.hazmat = sh.getCell(4,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.proofOfDelivery = sh.getCell(5,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.addressOutsideContiguousStates = sh.getCell(6,i).getContents().toString()                                
                                requestTemplet.content.allowableShippingRequest.uspsPreferred = sh.getCell(7,i).getContents().toString()                               
                                 
                                 //Input for shippingCarriers - code [0]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].code = sh.getCell(8,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].methodCode = sh.getCell(9,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].transitTimeInDays = sh.getCell(10,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].methodCode = sh.getCell(11,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].transitTimeInDays = sh.getCell(12,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].methodCode = sh.getCell(13,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].transitTimeInDays = sh.getCell(14,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].recommendedCarrierRank = sh.getCell(15,i).getContents()                            
               				              
	                             //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)                             
                         //teststep cloned: End
                         
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)                    
                                  
                          // get response for message
                          //initialize the cel postion for messages array
                          int celmsg=0;
                          //Get the array size for messages
                        for(int arrmsg=0; arrmsg<json.shippingOrder.messages.size(); arrmsg++)
                        {
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageCode.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].description.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageType.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        }
					
                        //get response for code 
                          //Check the existence of the array: allowedShippingCarriers                        
                          if (json.shippingOrder.allowedShippingCarriers != null)
                         {
		                        //initialize the cel postion for code, methodCode & recommendedCarrierRank
		                         int celcode=3; celmethodCode=4; celCrank=10;
		                         int cCode, cMetdCode, cCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcode=0; arrcode<json.shippingOrder.allowedShippingCarriers.size(); arrcode++)
		                        {                    	
		                        		cCode=celcode
		                        		cMetdCode=celmethodCode
		                        		cCrank=celCrank
		                        		addCell(cCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].code.toString(),sheet1);		                        		
			                        		
				                        		//Get the array size for shippingMethods
				                        		for(int arrmethodCode=0; arrmethodCode<json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods.size(); arrmethodCode++)
				                        		{ 				                        		            		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].methodCode.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;		                        		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].saveAsCertified.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;				                        		
				                       		} 
			                       	addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].recommendedCarrierRank.toString(),sheet1);
			                       	cCrank=cCrank+1;							     
							     addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].regionalCarrier.toString(),sheet1); 
							    
							    //Increment the cel position for code, methodCode & recommendedCarrierRank 
							     celcode=celcode+9;
							     celmethodCode=celmethodCode+9;
							    celCrank=celCrank+9;							   							     
		                         }       					                     
			              }  
			              addCell(12,i,json.shippingOrder.recommendedCarrier.toString(),sheet1); 
                             addCell(13,i,json.shippingOrder.recommendedShippingMethod.toString(),sheet1);                                                        
                                        
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values for message
                          //initialize the cel postion for messages array for assertion                      
                                int celmsgass=16;
						//check the existence of messages
            		if(json.shippingOrder.messages.toString()!= "[]")
            		{            		         
		                        String messageCode = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageCode,"shippingOrder.messages[0].messageCode","messageCode")
		                        celmsgass=celmsgass+1;
		                       
		                        String description = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,description,"shippingOrder.messages[0].description","description")  
		                        celmsgass=celmsgass+1;                     
		                        
		                        String messageType = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageType,"shippingOrder.messages[0].messageType","messageType")
		                        celmsgass=celmsgass+1;
		                        
            		}
                       
					//get the expected values for code  
				 	 //check the existence of array allowedShippingCarriers                         
                          if (json.shippingOrder.allowedShippingCarriers != null)
                        	 {
                        	 	//initialize the cell postion used for assertion for code, methodCode & recommendedCarrierRank
		                          int AssForcelcode=19; AssForcelmethodCode=20; AssForcelCrank=26;
		                         int AssForCode, AssForMetdCode, AssForCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcdres=0; arrcdres<json.shippingOrder.allowedShippingCarriers.size(); arrcdres++)
		                        { 	 
		                        		AssForCode=AssForcelcode
		                        		AssForMetdCode=AssForcelmethodCode
		                        		AssForCrank=AssForcelCrank                       		
								 code = sh.getCell(AssForCode,i).getContents().toString() 								                
								addAssertionJsonPathMatch(testStepForAssertion,code,"shippingOrder.allowedShippingCarriers["+arrcdres+"].code","code")                                            
		                       		//check the existence of array shippingMethods
		                       		if (json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods != null)  
		                       			{    
		                       				//Get the array size for shippingMethods                 
				                        		for(int arrmtcd=0; arrmtcd<json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods.size(); arrmtcd++)
				                        		{              		
				                        		String methodCode = sh.getCell(AssForMetdCode,i).getContents().toString()
			                     			addAssertionJsonPathMatch(testStepForAssertion,methodCode,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].methodCode","methodCode")                       
			                      			AssForMetdCode=AssForMetdCode+1;			                      				
			                      			String saveAsCertified = sh.getCell(AssForMetdCode,i).getContents().toString()
				                        		addAssertionJsonPathMatch(testStepForAssertion,saveAsCertified,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].saveAsCertified","saveAsCertified"); 
				                        		AssForMetdCode=AssForMetdCode+1;
				                       		} 
		                       			}
			                       	   String recommendedCarrierRank = sh.getCell(AssForCrank,i).getContents().toString()			                       	   
				                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrierRank,"shippingOrder.allowedShippingCarriers["+arrcdres+"].recommendedCarrierRank","recommendedCarrierRank")
				                       AssForCrank=AssForCrank+1;				                       
				                       String regionalCarrier = sh.getCell(AssForCrank,i).getContents().toString()
				                       addAssertionJsonPathMatch(testStepForAssertion,regionalCarrier,"shippingOrder.allowedShippingCarriers["+arrcdres+"].regionalCarrier","regionalCarrier")
								
								//increment the cell postion used for assertion for code, methodCode & recommendedCarrierRank	                       	
							     AssForcelcode=AssForcelcode+9;
							     AssForcelmethodCode=AssForcelmethodCode+9;
							     AssForcelCrank=AssForcelCrank+9;							   							     
		                         }       					                     
			              }  
						 recommendedCarrier = sh.getCell(28,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrier,"shippingOrder.recommendedCarrier","recommendedCarrier")
	                       recommendedShippingMethod = sh.getCell(29,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedShippingMethod,"shippingOrder.recommendedShippingMethod","recommendedShippingMethod")
						                      						
                                //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(14,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(15,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(14,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"
          
/*}
     
catch(Exception e)
{

       log.info(e)                         
}

finally

{*/
    //close workbook
     wb.close();
     wb1.close();     

//}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

} 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="DetermineAllowableShippingCarriersAndMethods_TwoCodes_RunOnFriday" id="1e6aed30-d330-439c-afae-2957db42d25a">
    <con:settings/>
    <con:config>
      <script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_Input_Run on Friday.xls"
def outputfile = projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_2 Codes_Run on Friday_Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("Input - 2 Codes")
Sheet jsonInput = wb.getSheet("JSON-2 Codes")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"messageCode",sheet1);
addCell(1,0,"description",sheet1);
addCell(2,0,"messageType",sheet1);

addCell(3,0,"code",sheet1);
addCell(4,0,"methodCode",sheet1);
addCell(5,0,"saveAsCertified",sheet1);
addCell(6,0,"methodCode",sheet1);
addCell(7,0,"saveAsCertified",sheet1);
addCell(8,0,"methodCode",sheet1);
addCell(9,0,"saveAsCertified",sheet1);
addCell(10,0,"recommendedCarrierRank",sheet1);
addCell(11,0,"regionalCarrier",sheet1);

addCell(12,0,"code",sheet1);
addCell(13,0,"methodCode",sheet1);
addCell(14,0,"saveAsCertified",sheet1);
addCell(15,0,"methodCode",sheet1);
addCell(16,0,"saveAsCertified",sheet1);
addCell(17,0,"methodCode",sheet1);
addCell(18,0,"saveAsCertified",sheet1);
addCell(19,0,"recommendedCarrierRank",sheet1);
addCell(20,0,"regionalCarrier",sheet1);

addCell(21,0,"recommendedCarrier",sheet1);
addCell(22,0,"recommendedShippingMethod",sheet1);

addCell(23,0,"PASS/FAIL",sheet1);
addCell(24,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

//try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                //Input                                 
                                requestTemplet.content.allowableShippingRequest.poBox = sh.getCell(2,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.physicalAddress = sh.getCell(3,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.hazmat = sh.getCell(4,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.proofOfDelivery = sh.getCell(5,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.addressOutsideContiguousStates = sh.getCell(6,i).getContents().toString()                                
                                requestTemplet.content.allowableShippingRequest.uspsPreferred = sh.getCell(7,i).getContents().toString()                               
                                 
                                 //Input for shippingCarriers - code [0]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].code = sh.getCell(8,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].methodCode = sh.getCell(9,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].transitTimeInDays = sh.getCell(10,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].methodCode = sh.getCell(11,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].transitTimeInDays = sh.getCell(12,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].methodCode = sh.getCell(13,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].transitTimeInDays = sh.getCell(14,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].recommendedCarrierRank = sh.getCell(15,i).getContents()                            

               				//Input for shippingCarriers - code [1]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].code = sh.getCell(16,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[0].methodCode = sh.getCell(17,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[0].transitTimeInDays = sh.getCell(18,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[1].methodCode = sh.getCell(19,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[1].transitTimeInDays = sh.getCell(20,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[2].methodCode = sh.getCell(21,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[2].transitTimeInDays = sh.getCell(22,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].recommendedCarrierRank = sh.getCell(23,i).getContents()                            
               				
              
	                             //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)                             
                         //teststep cloned: End
                         
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                          // get response for message
                          //initialize the cel postion for messages array
                          int celmsg=0;
                          //Get the array size for messages
                        for(int arrmsg=0; arrmsg<json.shippingOrder.messages.size(); arrmsg++)
                        {
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageCode.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].description.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageType.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        }
					
                        //get response for code                                       
			 		//Check the existence of the array: allowedShippingCarriers                        
                          if (json.shippingOrder.allowedShippingCarriers != null)
                         {
		                        //initialize the cel postion for code, methodCode & recommendedCarrierRank
		                         int celcode=3; celmethodCode=4; celCrank=10;
		                         int cCode, cMetdCode, cCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcode=0; arrcode<json.shippingOrder.allowedShippingCarriers.size(); arrcode++)
		                        {                    	
		                        		cCode=celcode
		                        		cMetdCode=celmethodCode
		                        		cCrank=celCrank
		                        		addCell(cCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].code.toString(),sheet1);		                        		
			                        		
				                        		//Get the array size for shippingMethods
				                        		for(int arrmethodCode=0; arrmethodCode<json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods.size(); arrmethodCode++)
				                        		{ 				                        		            		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].methodCode.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;		                        		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].saveAsCertified.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;				                        		
				                       		} 
			                       	addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].recommendedCarrierRank.toString(),sheet1);
			                       	cCrank=cCrank+1;							     
							     addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].regionalCarrier.toString(),sheet1); 
							    
							    //Increment the cel position for code, methodCode & recommendedCarrierRank 
							     celcode=celcode+9;
							     celmethodCode=celmethodCode+9;
							    celCrank=celCrank+9;								   							     
		                         }       					                     
			              }  
			              addCell(21,i,json.shippingOrder.recommendedCarrier.toString(),sheet1); 
                             addCell(22,i,json.shippingOrder.recommendedShippingMethod.toString(),sheet1); 
               
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values for msg
						  //initialize the cel postion for messages array for assertion                      
                                int celmsgass=24;
						//check the existence of messages
            		if(json.shippingOrder.messages.toString()!= "[]")
            		{            		         
		                        String messageCode = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageCode,"shippingOrder.messages[0].messageCode","messageCode")
		                        celmsgass=celmsgass+1;
		                       
		                        String description = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,description,"shippingOrder.messages[0].description","description")  
		                        celmsgass=celmsgass+1;                     
		                        
		                        String messageType = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageType,"shippingOrder.messages[0].messageType","messageType")
		                        celmsgass=celmsgass+1;
		                        
            		}
                             //get the expected values for code
                            //check the existence of array allowedShippingCarriers                         
                          if (json.shippingOrder.allowedShippingCarriers != null)
                        	 {
                        	 	//initialize the cell postion used for assertion for code, methodCode & recommendedCarrierRank
		                          int AssForcelcode=27; AssForcelmethodCode=28; AssForcelCrank=34;
		                         int AssForCode, AssForMetdCode, AssForCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcdres=0; arrcdres<json.shippingOrder.allowedShippingCarriers.size(); arrcdres++)
		                        { 	 
		                        		AssForCode=AssForcelcode
		                        		AssForMetdCode=AssForcelmethodCode
		                        		AssForCrank=AssForcelCrank                       		
								 code = sh.getCell(AssForCode,i).getContents().toString() 								                
								addAssertionJsonPathMatch(testStepForAssertion,code,"shippingOrder.allowedShippingCarriers["+arrcdres+"].code","code")                                            
		                       		//check the existence of array shippingMethods
		                       		if (json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods != null)  
		                       			{    
		                       				//Get the array size for shippingMethods                 
				                        		for(int arrmtcd=0; arrmtcd<json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods.size(); arrmtcd++)
				                        		{              		
				                        		String methodCode = sh.getCell(AssForMetdCode,i).getContents().toString()
			                     			addAssertionJsonPathMatch(testStepForAssertion,methodCode,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].methodCode","methodCode")                       
			                      			AssForMetdCode=AssForMetdCode+1;			                      				
			                      			String saveAsCertified = sh.getCell(AssForMetdCode,i).getContents().toString()
				                        		addAssertionJsonPathMatch(testStepForAssertion,saveAsCertified,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].saveAsCertified","saveAsCertified"); 
				                        		AssForMetdCode=AssForMetdCode+1;
				                       		} 
		                       			}
			                       	   String recommendedCarrierRank = sh.getCell(AssForCrank,i).getContents().toString()			                       	   
				                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrierRank,"shippingOrder.allowedShippingCarriers["+arrcdres+"].recommendedCarrierRank","recommendedCarrierRank")
				                       AssForCrank=AssForCrank+1;				                       
				                       String regionalCarrier = sh.getCell(AssForCrank,i).getContents().toString()
				                       addAssertionJsonPathMatch(testStepForAssertion,regionalCarrier,"shippingOrder.allowedShippingCarriers["+arrcdres+"].regionalCarrier","regionalCarrier")
								
								//increment the cell postion used for assertion for code, methodCode & recommendedCarrierRank	                       	
							     AssForcelcode=AssForcelcode+9;
							     AssForcelmethodCode=AssForcelmethodCode+9;
							     AssForcelCrank=AssForcelCrank+9;							   							     
		                         }       					                     
			              }
			             recommendedCarrier = sh.getCell(45,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrier,"shippingOrder.recommendedCarrier","recommendedCarrier")
	                       recommendedShippingMethod = sh.getCell(46,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedShippingMethod,"shippingOrder.recommendedShippingMethod","recommendedShippingMethod")
					                            
                       	                       						
                                //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(23,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(24,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(23,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"
          
/*}
     
catch(Exception e)
{

       log.info(e)                         
}

finally

{*/
    //close workbook
     wb.close();
     wb1.close();     

//}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

} 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="DetermineAllowableShippingCarriersAndMethods_ThreeCodes_RunOnFriday" id="2e41a35c-223a-4be7-931c-ed69c611f6fe">
    <con:settings/>
    <con:config>
      <script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_Input_Run on Friday.xls"
def outputfile = projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_3 Codes_Run on Friday_Output.xls"



//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("Input - 3 Codes")
Sheet jsonInput = wb.getSheet("JSON-3 Codes")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"messageCode",sheet1);
addCell(1,0,"description",sheet1);
addCell(2,0,"messageType",sheet1);

addCell(3,0,"code",sheet1);
addCell(4,0,"methodCode",sheet1);
addCell(5,0,"saveAsCertified",sheet1);
addCell(6,0,"methodCode",sheet1);
addCell(7,0,"saveAsCertified",sheet1);
addCell(8,0,"methodCode",sheet1);
addCell(9,0,"saveAsCertified",sheet1);
addCell(10,0,"recommendedCarrierRank",sheet1);
addCell(11,0,"regionalCarrier",sheet1);

addCell(12,0,"code",sheet1);
addCell(13,0,"methodCode",sheet1);
addCell(14,0,"saveAsCertified",sheet1);
addCell(15,0,"methodCode",sheet1);
addCell(16,0,"saveAsCertified",sheet1);
addCell(17,0,"methodCode",sheet1);
addCell(18,0,"saveAsCertified",sheet1);
addCell(19,0,"recommendedCarrierRank",sheet1);
addCell(20,0,"regionalCarrier",sheet1);

addCell(21,0,"code",sheet1);
addCell(22,0,"methodCode",sheet1);
addCell(23,0,"saveAsCertified",sheet1);
addCell(24,0,"methodCode",sheet1);
addCell(25,0,"saveAsCertified",sheet1);
addCell(26,0,"methodCode",sheet1);
addCell(27,0,"saveAsCertified",sheet1);
addCell(28,0,"recommendedCarrierRank",sheet1);
addCell(29,0,"regionalCarrier",sheet1);

addCell(30,0,"recommendedCarrier",sheet1);
addCell(31,0,"recommendedShippingMethod",sheet1);

addCell(32,0,"PASS/FAIL",sheet1);
addCell(33,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

//try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                //Input                                 
                                requestTemplet.content.allowableShippingRequest.poBox = sh.getCell(2,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.physicalAddress = sh.getCell(3,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.hazmat = sh.getCell(4,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.proofOfDelivery = sh.getCell(5,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.addressOutsideContiguousStates = sh.getCell(6,i).getContents().toString()                                
                                requestTemplet.content.allowableShippingRequest.uspsPreferred = sh.getCell(7,i).getContents().toString()                               
                                 
                                 //Input for shippingCarriers - code [0]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].code = sh.getCell(8,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].methodCode = sh.getCell(9,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].transitTimeInDays = sh.getCell(10,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].methodCode = sh.getCell(11,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].transitTimeInDays = sh.getCell(12,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].methodCode = sh.getCell(13,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].transitTimeInDays = sh.getCell(14,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].recommendedCarrierRank = sh.getCell(15,i).getContents()                            

               				//Input for shippingCarriers - code [1]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].code = sh.getCell(16,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[0].methodCode = sh.getCell(17,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[0].transitTimeInDays = sh.getCell(18,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[1].methodCode = sh.getCell(19,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[1].transitTimeInDays = sh.getCell(20,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[2].methodCode = sh.getCell(21,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[2].transitTimeInDays = sh.getCell(22,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].recommendedCarrierRank = sh.getCell(23,i).getContents()                            
               				
              					//Input for shippingCarriers - code [2]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].code = sh.getCell(24,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[0].methodCode = sh.getCell(25,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[0].transitTimeInDays = sh.getCell(26,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[1].methodCode = sh.getCell(27,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[1].transitTimeInDays = sh.getCell(28,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[2].methodCode = sh.getCell(29,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[2].transitTimeInDays = sh.getCell(30,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].recommendedCarrierRank = sh.getCell(31,i).getContents()                            
               				
              
	                             //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)                             
                         //teststep cloned: End
                         
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                          // get response for message
                         //initialize the cel postion for messages array
                          int celmsg=0;
                          //Get the array size for messages
                        for(int arrmsg=0; arrmsg<json.shippingOrder.messages.size(); arrmsg++)
                        {
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageCode.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].description.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageType.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        }
					
                        //get response for code 
                        //Check the existence of the array: allowedShippingCarriers                        
                          if (json.shippingOrder.allowedShippingCarriers != null)
                         {
		                        //initialize the cel postion for code, methodCode & recommendedCarrierRank
		                         int celcode=3; celmethodCode=4; celCrank=10;
		                         int cCode, cMetdCode, cCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcode=0; arrcode<json.shippingOrder.allowedShippingCarriers.size(); arrcode++)
		                        {                    	
		                        		cCode=celcode
		                        		cMetdCode=celmethodCode
		                        		cCrank=celCrank
		                        		addCell(cCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].code.toString(),sheet1);		                        		
			                        		
				                        		//Get the array size for shippingMethods
				                        		for(int arrmethodCode=0; arrmethodCode<json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods.size(); arrmethodCode++)
				                        		{ 				                        		            		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].methodCode.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;		                        		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].saveAsCertified.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;				                        		
				                       		} 
			                       	addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].recommendedCarrierRank.toString(),sheet1);
			                       	cCrank=cCrank+1;							     
							     addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].regionalCarrier.toString(),sheet1); 
							    
							    //Increment the cel position for code, methodCode & recommendedCarrierRank 
							     celcode=celcode+9;
							     celmethodCode=celmethodCode+9;
							    celCrank=celCrank+9;						   							     
		                         }       					                     
			              }  
			              addCell(30,i,json.shippingOrder.recommendedCarrier.toString(),sheet1); 
                             addCell(31,i,json.shippingOrder.recommendedShippingMethod.toString(),sheet1);                       	
                                    
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                            //get the expected values for msg
						//check the existence of array allowedShippingCarriers                         
                          if (json.shippingOrder.allowedShippingCarriers != null)
                        	 {
                        	 	//initialize the cell postion used for assertion for code, methodCode & recommendedCarrierRank
		                          int AssForcelcode=35; AssForcelmethodCode=36; AssForcelCrank=42;
		                         int AssForCode, AssForMetdCode, AssForCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcdres=0; arrcdres<json.shippingOrder.allowedShippingCarriers.size(); arrcdres++)
		                        { 	 
		                        		AssForCode=AssForcelcode
		                        		AssForMetdCode=AssForcelmethodCode
		                        		AssForCrank=AssForcelCrank                       		
								 code = sh.getCell(AssForCode,i).getContents().toString() 								                
								addAssertionJsonPathMatch(testStepForAssertion,code,"shippingOrder.allowedShippingCarriers["+arrcdres+"].code","code")                                            
		                       		//check the existence of array shippingMethods
		                       		if (json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods != null)  
		                       			{    
		                       				//Get the array size for shippingMethods                 
				                        		for(int arrmtcd=0; arrmtcd<json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods.size(); arrmtcd++)
				                        		{              		
				                        		String methodCode = sh.getCell(AssForMetdCode,i).getContents().toString()
			                     			addAssertionJsonPathMatch(testStepForAssertion,methodCode,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].methodCode","methodCode")                       
			                      			AssForMetdCode=AssForMetdCode+1;			                      				
			                      			String saveAsCertified = sh.getCell(AssForMetdCode,i).getContents().toString()
				                        		addAssertionJsonPathMatch(testStepForAssertion,saveAsCertified,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].saveAsCertified","saveAsCertified"); 
				                        		AssForMetdCode=AssForMetdCode+1;
				                       		} 
		                       			}
			                       	   String recommendedCarrierRank = sh.getCell(AssForCrank,i).getContents().toString()			                       	   
				                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrierRank,"shippingOrder.allowedShippingCarriers["+arrcdres+"].recommendedCarrierRank","recommendedCarrierRank")
				                       AssForCrank=AssForCrank+1;				                       
				                       String regionalCarrier = sh.getCell(AssForCrank,i).getContents().toString()
				                       addAssertionJsonPathMatch(testStepForAssertion,regionalCarrier,"shippingOrder.allowedShippingCarriers["+arrcdres+"].regionalCarrier","regionalCarrier")
								
								//increment the cell postion used for assertion for code, methodCode & recommendedCarrierRank	                       	
							     AssForcelcode=AssForcelcode+9;
							     AssForcelmethodCode=AssForcelmethodCode+9;
							     AssForcelCrank=AssForcelCrank+9;							   							     
		                         }       					                     
			              }  
			             recommendedCarrier = sh.getCell(62,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrier,"shippingOrder.recommendedCarrier","recommendedCarrier")
	                       recommendedShippingMethod = sh.getCell(63,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedShippingMethod,"shippingOrder.recommendedShippingMethod","recommendedShippingMethod")
					             
                       	                       						
                                //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(32,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(33,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(32,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"
          
/*}
     
catch(Exception e)
{

       log.info(e)                         
}

finally

{*/
    //close workbook
     wb.close();
     wb1.close();     

//}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

} 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="JSON Request" id="a1b6cef1-8543-4b8f-9c97-1063edbf2509">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="JSON Request" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "false",
        "hazmat": "false",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "1",
                "recommendedCarrierRank": "0",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "4",
                "recommendedCarrierRank": "30",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "NDAR",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "NDAM",
                        "transitTimeInDays": "null"
                    }
                ]
            },
            {
                "code": "7",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/</con:originalUri>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-40429" id="ca099a41-d94e-47a1-9a1f-773be0ab2600">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-40429" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "false",
        "hazmat": "false",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "6",
                "recommendedCarrierRank": "20",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "NDSY",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "NDAR",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="41b800e2-df38-4026-8477-a19c0ac026f1" name="Valid HTTP Status Codes_4">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="b547f241-8e8e-469e-a416-35885e306c45" name="code">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].code</path>
            <content>6</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="fc90cdb9-8e96-413b-bac8-27820e378396" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].methodCode</path>
            <content>NDSY</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c1b7f175-eae3-445e-af8b-b080cb28a21a" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d9d5ab54-0de6-41ea-8769-86d0451252ff" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="23937cee-1208-4d05-a6b5-25f189bf0cc7" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a1d19fbc-5486-4fe7-8e70-a68083dab58c" name="recommendedCarrierRank">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].recommendedCarrierRank</path>
            <content>20</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d0faf2a7-575b-4019-86e2-e99256cf6d44" name="regionalCarrier">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].regionalCarrier</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a66e4d54-2df0-4464-bcf6-dec07b696efa" name="recommendedCarrier">
          <con:configuration>
            <path>shippingOrder.recommendedCarrier</path>
            <content>6</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="78f60f97-71f9-4c7b-be5d-b4e0ba7d040e" name="recommendedShippingMethod">
          <con:configuration>
            <path>shippingOrder.recommendedShippingMethod</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-40430" id="48f8d38e-a55b-411f-9636-bb5ec80510ab">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-40430" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "false",
        "hazmat": "false",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "1",
                "recommendedCarrierRank": "0",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "NDAR",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="764da1ee-bad6-4e58-a7f0-9834414d782c" name="Valid HTTP Status Codes_5">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a9803b7d-49f1-4b2f-9375-bc5867394aab" name="code">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].code</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e3519cb8-8c97-4e86-ae1c-c6af6be14533" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].methodCode</path>
            <content>GRND</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ac7b4829-ea2f-4f65-a434-36eb0c142788" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ea601c68-3565-4f9b-9a10-5eb1f2a81a39" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="4dc23bb4-5708-4b5b-9755-d89f1612caf6" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="902696bc-4101-4993-ad70-db519c69bfd0" name="recommendedCarrierRank">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].recommendedCarrierRank</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c335d984-470d-49e7-8e24-91f7367075f7" name="regionalCarrier">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].regionalCarrier</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="967ed0e3-65b2-43f9-8c67-bae3c55efdc0" name="recommendedCarrier">
          <con:configuration>
            <path>shippingOrder.recommendedCarrier</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="2adf732c-1294-4b1b-ba8d-359886a65fa9" name="recommendedShippingMethod">
          <con:configuration>
            <path>shippingOrder.recommendedShippingMethod</path>
            <content>GRND</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-43364" id="89f01704-9fff-4514-8588-9706f32ddbb8">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-43364" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "false",
        "hazmat": "false",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "1",
                "recommendedCarrierRank": "0",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="aabe18e6-0bb0-49f0-9a18-59e5322fba5f" name="Valid HTTP Status Codes_6">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="3fa8bc0b-134e-4d03-bf0e-dcac8f7f681c" name="code">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].code</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="3d69e9b0-e4f0-43dd-a0b7-847b660f35c6" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].methodCode</path>
            <content>GRND</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="5f619c3f-3343-4045-b64f-1a008d15fa9f" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="16690879-abcc-4627-9a86-a313ad116a29" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="7a601420-e31f-418f-bf28-7431fd70976b" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="9a32d6b0-ed7c-42fa-97a1-da73a0efe014" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[2].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="0cc989ea-ed4a-4216-9bcb-5ff055cb8eba" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[2].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="6fa16a27-1b67-42d4-b69f-e72c60b6b3c8" name="recommendedCarrierRank">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].recommendedCarrierRank</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ed452a21-44cc-4402-bb26-d28705d014ca" name="regionalCarrier">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].regionalCarrier</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="65b5c67e-61fb-4a6a-9716-7dd574b292f3" name="recommendedCarrier">
          <con:configuration>
            <path>shippingOrder.recommendedCarrier</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e1d1756d-3e55-4ccd-8601-a3116ecadda3" name="recommendedShippingMethod">
          <con:configuration>
            <path>shippingOrder.recommendedShippingMethod</path>
            <content>GRND</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-40433" id="2a9dc417-143b-4149-a01c-f9ab66c35fe4">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-40433" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "true",
        "hazmat": "false",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "12",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "NDAM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="bbd4e98a-3c50-4ea8-9acc-fcabe24eddc1" name="Valid HTTP Status Codes_7">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="89721fe1-de38-4061-b1ac-9577d677a971" name="recommendedCarrier">
          <con:configuration>
            <path>shippingOrder.recommendedCarrier</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="00c3cf6e-f527-4a6d-a42e-122d463fdfcc" name="recommendedShippingMethod">
          <con:configuration>
            <path>shippingOrder.recommendedShippingMethod</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-40436" id="c983d5d9-42a0-48f0-9363-9fe7680e8bcd">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-40436" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "false",
        "hazmat": "false",
        "physicalAddress": "true",
        "poBox": "false",
        "proofOfDelivery": "true",
        "shippingCarriers": [
            {
                "code": "11",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "USPM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "true"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="4d2c6f3b-71e0-49aa-b0d0-cdd1d5383e25" name="Valid HTTP Status Codes_8">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="88701e2c-c919-4987-b0ba-526c6355861d" name="recommendedCarrier">
          <con:configuration>
            <path>shippingOrder.recommendedCarrier</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="983c9214-1df2-4895-a6b4-9945cc204b21" name="recommendedShippingMethod">
          <con:configuration>
            <path>shippingOrder.recommendedShippingMethod</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-40434" id="a181a690-66ae-401e-8141-5a9b6294f414">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-40434" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "true",
        "hazmat": "false",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "6",
                "recommendedCarrierRank": "20",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "NDSY",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "NDAR",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "10",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "NDSY",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="046670f1-2ec9-4e54-86bf-fd2b2fe9405e" name="Valid HTTP Status Codes_4">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="b2eb2d69-b726-447c-925c-caac573ab82c" name="code">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].code</path>
            <content>6</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c757a3ec-78d6-4fbc-bec0-32b13989abde" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].methodCode</path>
            <content>NDSY</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="7abb7f20-a2ef-4c62-840a-5bd3baf9651d" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c69685a7-a036-4aca-a6c2-71dbc7c0713c" name="recommendedCarrierRank">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].recommendedCarrierRank</path>
            <content>20</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="07850e60-04c6-47a7-b63f-be052ff0b7f0" name="regionalCarrier">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].regionalCarrier</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="2d42e275-9baf-49d3-a649-6bd0495c8268" name="recommendedCarrier">
          <con:configuration>
            <path>shippingOrder.recommendedCarrier</path>
            <content>6</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c890e343-422d-42d4-adc5-5af19e8354c3" name="recommendedShippingMethod">
          <con:configuration>
            <path>shippingOrder.recommendedShippingMethod</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-40438" id="f0a54fd4-fe7a-4950-9107-3f659a94e33e">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-40438" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "false",
        "hazmat": "true",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "5",
                "recommendedCarrierRank": "40",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "USPM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "6",
                "recommendedCarrierRank": "20",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "SDAR",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "11",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "USPM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="3753eaca-cbf1-44e1-b679-6a29ac59e234" name="Valid HTTP Status Codes_4">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="79994b4b-2960-49ee-a93e-f9a60a132d17" name="code">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].code</path>
            <content>6</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="b4162dc1-42ec-47bd-b4e8-a5d872fe7b19" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].methodCode</path>
            <content>GRND</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="7925ae64-692e-4e2a-a858-c3d30dfeeebd" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="71276c4a-b954-40f2-81cf-70070ff279f3" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a58a5fb0-a828-4269-9e3c-76cda88f014a" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="09e2b76b-3dca-4efc-952f-625c994d32ce" name="recommendedCarrierRank">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].recommendedCarrierRank</path>
            <content>20</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="084264d4-17de-4322-a84c-11a03f418374" name="regionalCarrier">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].regionalCarrier</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e3947756-7644-430c-a01f-626b7bb4c4fe" name="code">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].code</path>
            <content>11</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="5bf527f9-21e5-4ebd-b1e4-bf4ad143886a" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].shippingMethods[0].methodCode</path>
            <content>USPM</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="38496b78-75dc-4ce1-b2a6-368d8c4f6cc7" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].shippingMethods[0].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="2dec8ccd-6b3a-4510-93d5-4c1fd198b210" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].shippingMethods[1].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="876fb3ff-30e6-4676-8ef9-92bad44e6376" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].shippingMethods[1].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="b9f975fe-d29c-461f-b626-e9637766d185" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].shippingMethods[2].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="16e4e5bd-0c7c-4594-91ff-80893419cc03" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].shippingMethods[2].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="32e37faa-656d-40e6-9f50-0840977cfc17" name="recommendedCarrierRank">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].recommendedCarrierRank</path>
            <content>10</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="6d4b22d3-77de-4002-83a2-23b11a932dbe" name="regionalCarrier">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].regionalCarrier</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="2f46c187-a713-4de2-9b67-3196f7a0266b" name="recommendedCarrier">
          <con:configuration>
            <path>shippingOrder.recommendedCarrier</path>
            <content>11</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="4175910b-32ed-43ef-98a8-03866d5852d7" name="recommendedShippingMethod">
          <con:configuration>
            <path>shippingOrder.recommendedShippingMethod</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-40440" id="510c3555-1b8a-457a-8c04-c03d6982eb77">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-40440" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "true",
        "hazmat": "true",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "5",
                "recommendedCarrierRank": "40",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "USPM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "12",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "10",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "DRVR",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="dec55355-7aae-4e45-a68b-abb6bf4c0d23" name="Valid HTTP Status Codes_5">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="fec4384c-1043-4ae6-b484-a2bfd3adceaf" name="recommendedCarrier">
          <con:configuration>
            <path>shippingOrder.recommendedCarrier</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d5f2b33e-d275-497f-9eff-d16f2df66789" name="recommendedShippingMethod">
          <con:configuration>
            <path>shippingOrder.recommendedShippingMethod</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-40442" id="660aafe4-2359-4323-9bdc-88556619ecea">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-40442" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "true",
        "hazmat": "false",
        "physicalAddress": "false",
        "poBox": "true",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "12",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "10",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "DRVR",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "6",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="cb3a5153-2670-4532-aa0e-16fc771ca251" name="Valid HTTP Status Codes_6">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="9e4d2bdc-9411-4e02-a991-6c307d150058" name="recommendedCarrier">
          <con:configuration>
            <path>shippingOrder.recommendedCarrier</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d1f9f7d9-f7c3-4018-836c-6fa1f29eb97f" name="recommendedShippingMethod">
          <con:configuration>
            <path>shippingOrder.recommendedShippingMethod</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-40444" id="2f3efe07-dbda-4ef9-9ab2-34621adce440">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-40444" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "false",
        "hazmat": "false",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "6",
                "recommendedCarrierRank": "20",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "NDAM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "NDAR",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "4",
                "recommendedCarrierRank": "70",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "NDAM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "NDAR",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "9",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "5",
                "recommendedCarrierRank": "40",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "USPM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="ec4ad45d-3ff4-4332-88f8-83358e236e81" name="Valid HTTP Status Codes_4">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="cb4a68e5-b1e9-4be2-b619-83109e1942e5" name="code">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].code</path>
            <content>6</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="6c54ad84-00e1-4162-8782-70453a9c7740" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].methodCode</path>
            <content>NDAM</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e41960f9-ad23-4d68-acb3-1ef199d99719" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ca4a0777-67e1-4c6c-9a53-79cf2b7b1884" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].methodCode</path>
            <content>NDAR</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="13d97761-6d93-44f5-80d8-0b620a0a4081" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="90a4d0af-b9d8-4cad-b8f3-1b042ad9e4be" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[2].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="25426db1-05c7-4159-87b4-df216ea98fc7" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[2].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="487d32bd-8c94-416b-a36e-cee56366bc75" name="recommendedCarrierRank">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].recommendedCarrierRank</path>
            <content>20</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="25f92587-a247-49ee-91c6-33683468ebca" name="regionalCarrier">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].regionalCarrier</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="7d2652d0-a30b-4841-bfa3-00048ede8f2a" name="code">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].code</path>
            <content>4</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="db6d8822-8e3c-4fbc-9b3f-5f899429beb0" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].shippingMethods[0].methodCode</path>
            <content>NDAM</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="277d50d6-7394-4b5f-903d-8e2a530a8514" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].shippingMethods[0].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="faa0b445-42b2-4537-9bfb-078d0abd9115" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].shippingMethods[1].methodCode</path>
            <content>NDAR</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e4dc22e0-12d4-4aee-8bb1-c5657215f56f" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].shippingMethods[1].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="8d7cfb9d-3d78-4b6e-9ac7-6c3320c297ef" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].shippingMethods[2].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="fc399965-1df6-4b20-81ad-be78424e973d" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].shippingMethods[2].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="650669f9-ea20-46b2-a4bd-3ddee41bed23" name="recommendedCarrierRank">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].recommendedCarrierRank</path>
            <content>70</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="889699eb-772e-4e65-8a7c-7a1b237dd90c" name="regionalCarrier">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].regionalCarrier</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="b836e18c-1466-41a5-aa8c-105894c8e6e0" name="code">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[2].code</path>
            <content>9</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a077a073-3c5c-4a84-8bcf-ab21f1e06f56" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[2].shippingMethods[0].methodCode</path>
            <content>GRND</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="53641b3a-9922-4692-901a-5a4a89a5ed86" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[2].shippingMethods[0].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="70262c68-302c-4875-b145-58048a897ce7" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[2].shippingMethods[1].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="07f054b5-6a31-4994-933a-05f9d84b6939" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[2].shippingMethods[1].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="b0c595e9-5c46-41c0-be01-dad1e7d44115" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[2].shippingMethods[2].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="35c6a659-ea48-40e6-9341-2a0985323542" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[2].shippingMethods[2].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c3613f74-3057-4c5a-a98e-68bda5b324ca" name="recommendedCarrierRank">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[2].recommendedCarrierRank</path>
            <content>10</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="7f508970-7416-4ffd-98c0-b28ced932872" name="regionalCarrier">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[2].regionalCarrier</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c303d6f7-4dee-4bc7-8c48-eb2ad0c0d426" name="code">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[3].code</path>
            <content>5</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="60ba2776-af1f-4402-916e-62be5712c09f" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[3].shippingMethods[0].methodCode</path>
            <content>USPM</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="9ae28c91-0987-4afa-871a-c746c707214b" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[3].shippingMethods[0].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="6ed53702-aef3-41e5-ad3f-b2bc3177af80" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[3].shippingMethods[1].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d46fb7f9-1dd9-497e-a625-1f0cf1334eb9" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[3].shippingMethods[1].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="5bae2552-649e-4c0d-870c-3c20548259d2" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[3].shippingMethods[2].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="21efa661-e244-4fc1-983c-8904f20cc533" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[3].shippingMethods[2].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f10b56b2-7103-44b0-8963-4b43d19e1874" name="recommendedCarrierRank">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[3].recommendedCarrierRank</path>
            <content>40</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="6adf1f51-94f3-46d0-95c9-1857538957aa" name="regionalCarrier">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[3].regionalCarrier</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f1a64c99-5079-4edb-ae17-6da7f5ed9f5b" name="recommendedCarrier">
          <con:configuration>
            <path>shippingOrder.recommendedCarrier</path>
            <content>9</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f1ad71ef-1109-44d4-a72d-89c914398bbe" name="recommendedShippingMethod">
          <con:configuration>
            <path>shippingOrder.recommendedShippingMethod</path>
            <content>GRND</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-40431" id="642f6865-1488-4ef2-8739-9f05ea40fa41">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-40431" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "true",
        "hazmat": "false",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "6",
                "recommendedCarrierRank": "20",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "NDAM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "SDAR",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="6536d2d7-e300-4121-8665-a5147f58e90e" name="Valid HTTP Status Codes_4">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="66bb922f-99f4-44bc-ae88-af732c3d84ee" name="code">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].code</path>
            <content>6</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c0af1618-88c9-460d-a821-2723806abb1e" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].methodCode</path>
            <content>NDAM</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ca50c9ef-e47f-44f9-bd33-8fe9c45160c1" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e56a9109-a5b2-48ce-b063-f33e547249a1" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].methodCode</path>
            <content>SDAR</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="59f7c2b3-dda4-4b1c-8aae-76cf8bc0cac7" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="4800c071-49b7-45ef-9d62-7c600ea2e9d0" name="recommendedCarrierRank">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].recommendedCarrierRank</path>
            <content>20</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="b1787c62-5758-42dd-8260-7f2c54d41d58" name="regionalCarrier">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].regionalCarrier</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d57de3b3-6317-4caa-a9ea-22ad8c9bdb3f" name="recommendedCarrier">
          <con:configuration>
            <path>shippingOrder.recommendedCarrier</path>
            <content>6</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="9ad40599-16b3-4348-8687-143ce6e78243" name="recommendedShippingMethod">
          <con:configuration>
            <path>shippingOrder.recommendedShippingMethod</path>
            <content>SDAR</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-40432" id="0c32f90f-7b35-4ac0-b628-9b63ece7277a">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-40432" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "true",
        "hazmat": "false",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "9",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "NDAM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "10",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "NDAR",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="5555df79-d16a-410d-a98c-54b9ff0d6d00" name="Valid HTTP Status Codes_4">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d1883cdb-567c-44d6-b67a-17fd99cfa77f" name="recommendedCarrier">
          <con:configuration>
            <path>shippingOrder.recommendedCarrier</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="b877a859-fbe1-4329-92e0-80b7f9683fbc" name="recommendedShippingMethod">
          <con:configuration>
            <path>shippingOrder.recommendedShippingMethod</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-40435" id="15243a58-851c-4458-8180-2400fe71d4b1">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-40435" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "false",
        "hazmat": "false",
        "physicalAddress": "true",
        "poBox": "false",
        "proofOfDelivery": "true",
        "shippingCarriers": [
            {
                "code": "5",
                "recommendedCarrierRank": "40",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "DRVR",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "10",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "DRVR",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "true"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="323af443-6597-42b3-9c9b-1566d526614a" name="Valid HTTP Status Codes_5">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="74c9f4d9-744f-4aa2-a8d7-8172aa024580" name="code">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].code</path>
            <content>5</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="fbac8981-08c4-4c41-94d9-85ee9f202eaa" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].methodCode</path>
            <content>GRND</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a0fb0901-6850-45f9-8001-077d18cb5a93" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].saveAsCertified</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="24753836-1000-4ae6-b309-02f4ba17f56d" name="recommendedCarrierRank">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].recommendedCarrierRank</path>
            <content>40</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="0e84264a-27b6-48b4-a075-c47e6dcc0c2b" name="regionalCarrier">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].regionalCarrier</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="fbd6cda2-5491-4ec8-ab10-3c1397b2919e" name="recommendedCarrier">
          <con:configuration>
            <path>shippingOrder.recommendedCarrier</path>
            <content>5</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="86054cd9-f092-4262-8a7e-92c5c784f62a" name="recommendedShippingMethod">
          <con:configuration>
            <path>shippingOrder.recommendedShippingMethod</path>
            <content>GRND</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-40437" id="f81eeb5a-9351-49b3-9ba6-56cd82d4cfdb">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-40437" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "false",
        "hazmat": "true",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "5",
                "recommendedCarrierRank": "40",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "USPM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "11",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "USPM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="b66b6b34-16a2-452b-9070-eab5d8effa83" name="Valid HTTP Status Codes_6">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d9e5a5d4-dfba-4098-87da-fa8b9f34e7b7" name="messageCode">
          <con:configuration>
            <path>shippingOrder.messages[0].messageCode</path>
            <content>1003</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f852c1ee-ad76-4515-9b97-cb2f2b2b66c7" name="description">
          <con:configuration>
            <path>shippingOrder.messages[0].description</path>
            <content>UNABLE_TO_SHIP_HAZMAT</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c088e3d4-3543-433b-8e76-2aa3231723d5" name="messageType">
          <con:configuration>
            <path>shippingOrder.messages[0].messageType</path>
            <content>ERROR</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="679de108-7e77-4327-8f19-5d750221dd9d" name="code">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].code</path>
            <content>11</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="9284a92f-6172-48de-a54b-1b75497abc65" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].methodCode</path>
            <content>USPM</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a3c77268-6e1e-48d0-8360-f4e97d7abb89" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="6aa7f118-d9b1-4de2-8d1b-86bbf082c5ee" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ab94fdb1-57d2-47f9-be59-88adc3f5d96a" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="5e8f8dba-09fd-4c68-a08a-68e4330ee290" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[2].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="6a1f7232-cd51-41dc-81e6-f959246b00ec" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[2].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c9b4bb75-b395-4c44-ab59-351b2af2a17a" name="recommendedCarrierRank">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].recommendedCarrierRank</path>
            <content>10</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="48aa256f-14ad-4ed9-a3f6-3337c10ab620" name="regionalCarrier">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].regionalCarrier</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="1177c64f-7d50-4f44-a421-20e3aa9dbca1" name="recommendedCarrier">
          <con:configuration>
            <path>shippingOrder.recommendedCarrier</path>
            <content>11</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="8f8d77a4-9520-43ac-837c-19d16daddaa3" name="recommendedShippingMethod">
          <con:configuration>
            <path>shippingOrder.recommendedShippingMethod</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-40439" id="d600bc1f-03d9-4e16-aefc-6ba7b5819349">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-40439" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "true",
        "hazmat": "true",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "true",
        "shippingCarriers": [
            {
                "code": "7",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "6",
                "recommendedCarrierRank": "20",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="3c7e2fc8-c45d-46fb-bd09-069847b9dd77" name="Valid HTTP Status Codes_7">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="0c920575-6dee-4dfc-a975-9bae1868d19f" name="messageCode">
          <con:configuration>
            <path>shippingOrder.messages[0].messageCode</path>
            <content>1004</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c61a08b9-d6f3-4f29-848f-db146b307629" name="description">
          <con:configuration>
            <path>shippingOrder.messages[0].description</path>
            <content>HAZMAT_ITEM</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="25873d5c-f0b6-44b1-abb5-c477e3841ab1" name="messageType">
          <con:configuration>
            <path>shippingOrder.messages[0].messageType</path>
            <content>ERROR</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="3bded8b8-3770-4d1c-aa88-7050d82c20a5" name="recommendedCarrier">
          <con:configuration>
            <path>shippingOrder.recommendedCarrier</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="00f59f3a-a22b-405d-8643-216faf5ccbfc" name="recommendedShippingMethod">
          <con:configuration>
            <path>shippingOrder.recommendedShippingMethod</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-40441" id="7f66bd5b-73ca-46cf-84db-09cd3ed57c6c">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-40441" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "true",
        "hazmat": "false",
        "physicalAddress": "false",
        "poBox": "true",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "5",
                "recommendedCarrierRank": "40",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "USPM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "11",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "USPM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="5e50739a-74b0-4464-9e70-0d9e51cbd451" name="Valid HTTP Status Codes_8">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="60fd9ce7-2b35-484c-8dd8-8fb76b24577d" name="messageCode">
          <con:configuration>
            <path>shippingOrder.messages[0].messageCode</path>
            <content>1002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="15e8d14e-d1c3-4efa-a637-d1c84c753861" name="description">
          <con:configuration>
            <path>shippingOrder.messages[0].description</path>
            <content>PO_BOX</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="31a00827-cb8e-4a2c-a82b-0a4050ea8321" name="messageType">
          <con:configuration>
            <path>shippingOrder.messages[0].messageType</path>
            <content>ERROR</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="60cee3c5-77b6-41b7-b17a-fcc330f71ac6" name="recommendedCarrier">
          <con:configuration>
            <path>shippingOrder.recommendedCarrier</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="3fe96c31-b215-498c-801c-b362bb869ea0" name="recommendedShippingMethod">
          <con:configuration>
            <path>shippingOrder.recommendedShippingMethod</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-40445" id="c5de7700-e0c4-47f9-92c8-db12826ac1d6">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-40445" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "false",
        "hazmat": "false",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "9",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "5",
                "recommendedCarrierRank": "13",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "USPM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="233f65ea-42f9-4776-93b1-eaac70b03000" name="Valid HTTP Status Codes_9">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ab740bdd-9c93-47b7-b411-ceda7e598e42" name="code">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].code</path>
            <content>9</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="72250aaf-3518-417d-87ca-9d399c2dcb7f" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].methodCode</path>
            <content>GRND</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="b66bfb76-9e03-474f-82ee-7a13d4e00608" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="7e7f8ce3-4484-459a-b8b4-5cb1daa0526e" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="9ec658ac-5d2b-44af-add4-462a00cc8b59" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="05ea46cf-af5c-4eed-953e-a1a199ed1d81" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[2].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="8125e22d-1893-48b6-b16a-8d9656fe42f1" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[2].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="1ba9aa0e-dc52-4bea-a7ad-1a1ab3b47a85" name="recommendedCarrierRank">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].recommendedCarrierRank</path>
            <content>10</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a62df031-2758-45ef-b2d0-0b7480a6bc24" name="regionalCarrier">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].regionalCarrier</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="5ce6fe74-6ba1-4eea-87dd-a453cec5eb8c" name="code">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].code</path>
            <content>5</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="cb6b3fc9-1397-4869-bf78-17f77777d9a8" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].shippingMethods[0].methodCode</path>
            <content>USPM</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="7385ca9a-156b-4762-9f72-331bd5e8e136" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].shippingMethods[0].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="5540eeb0-24f3-4aa3-89b2-608c1189c68f" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].shippingMethods[1].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ab6ecd2d-7b86-4d87-a949-d477d5f7f6f4" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].shippingMethods[1].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c220949c-4f80-4b98-a706-fccdcf58071f" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].shippingMethods[2].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a47b3a23-b675-47ef-b8ba-b87370221877" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].shippingMethods[2].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="bf0d83bd-7bac-4712-a9e5-582f9c8e3e04" name="recommendedCarrierRank">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].recommendedCarrierRank</path>
            <content>13</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="91f12a41-df87-4aae-96b6-149a38bf3fe2" name="regionalCarrier">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].regionalCarrier</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="4bb1084b-92e5-4c38-aee6-b548df2876df" name="recommendedCarrier">
          <con:configuration>
            <path>shippingOrder.recommendedCarrier</path>
            <content>9</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="2ce9a8c6-0845-44e8-85a8-f5a6b112ea90" name="recommendedShippingMethod">
          <con:configuration>
            <path>shippingOrder.recommendedShippingMethod</path>
            <content>GRND</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-40443" id="2dd0c4fc-a69d-4794-ac2d-23a5c4ad91ab">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-40443" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "false",
        "hazmat": "false",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "1",
                "recommendedCarrierRank": "0",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "4",
                "recommendedCarrierRank": "30",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "NDAR",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "NDAM",
                        "transitTimeInDays": "null"
                    }
                ]
            },
            {
                "code": "7",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="6887f896-9c28-43ce-a4a5-515fa3667e70" name="Valid HTTP Status Codes_4">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c4ef4fba-0e45-4346-aafa-1f47d919c91a" name="code">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].code</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="daad8d36-5ce6-495f-8e36-36186ca35445" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].methodCode</path>
            <content>GRND</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="7d0dc819-0b97-41a9-acef-6016ed30d1f4" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="dcd78ed8-3f0d-46ab-b8c9-5acb125fa803" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="400e2fde-68c3-4fed-b3dc-63882af4d4d7" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="57d5a303-184e-421d-a804-9ba8926a05aa" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[2].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a3142065-c38b-480d-960c-5bea6727224c" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].shippingMethods[2].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="346e883d-9fbf-44d7-b17a-fb7429aaa067" name="recommendedCarrierRank">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].recommendedCarrierRank</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="6abf28a5-a941-4695-9f71-34216de04605" name="regionalCarrier">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[0].regionalCarrier</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="15049c8c-053d-4936-ba6b-3ff43ec4303d" name="code">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].code</path>
            <content>4</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e27bd006-9cb0-4cd1-a87c-e3f5a0c98dae" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].shippingMethods[0].methodCode</path>
            <content>GRND</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="2e8135d4-3ce0-4248-bfb6-0b29d71f6ba0" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].shippingMethods[0].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e0e155c2-8394-41cc-a15f-2126244ba070" name="recommendedCarrierRank">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].recommendedCarrierRank</path>
            <content>30</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ccb624a7-bcaa-4d59-9642-b91993f100b4" name="regionalCarrier">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[1].regionalCarrier</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="be9f2184-4e5e-4481-b71a-06cc35356a4c" name="code">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[2].code</path>
            <content>7</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="31a79612-c4ed-4964-8ec1-db443f1418b0" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[2].shippingMethods[0].methodCode</path>
            <content>GRND</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="cdbbe628-9b38-45a8-984f-80ca54dc0908" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[2].shippingMethods[0].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ed0a07d8-3db9-4b6c-a52a-d5717307ecce" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[2].shippingMethods[1].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="509310ac-d2df-473f-b74a-b294c22e37da" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[2].shippingMethods[1].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="05a1af62-b7ff-4d94-a802-2ee5798aa433" name="methodCode">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[2].shippingMethods[2].methodCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="275defa7-7fb1-4395-a1d0-725c66b3b06e" name="saveAsCertified">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[2].shippingMethods[2].saveAsCertified</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="798e0263-6cb1-4215-84e8-f9e52b3958dc" name="recommendedCarrierRank">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[2].recommendedCarrierRank</path>
            <content>10</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ddeaffcd-4c37-4acb-a871-6d72ffd8c93b" name="regionalCarrier">
          <con:configuration>
            <path>shippingOrder.allowedShippingCarriers[2].regionalCarrier</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ec983f8f-8896-4b3e-8540-c5eac963ffd7" name="recommendedCarrier">
          <con:configuration>
            <path>shippingOrder.recommendedCarrier</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ef99855c-ec42-4cc1-ab6f-ee9fec0e70e1" name="recommendedShippingMethod">
          <con:configuration>
            <path>shippingOrder.recommendedShippingMethod</path>
            <content>GRND</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
</con:testCase>

import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse-Input.xls"
def outputfile = projectDir + "/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse-TwoLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults_TwoLineItems")
Sheet jsonInput = wb.getSheet("JSON_TwoLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"LineItem1", sheet1);
addCell(0,1,"lineItemID",sheet1);
addCell(1,1,"itemNumber",sheet1);
addCell(2,1,"requiresPharmacyDispensing", sheet1);
addCell(3,1,"acceptableShipFromWarehouses",sheet1);
addCell(3,2,"warehouseLocationCd",sheet1);
addCell(4,2,"priority",sheet1);
addCell(5,0,"LineItem2", sheet1);
addCell(5,1,"lineItemID",sheet1);
addCell(6,1,"itemNumber",sheet1);
addCell(7,1,"requiresPharmacyDispensing", sheet1);
addCell(8,1,"acceptableShipFromWarehouses",sheet1);
addCell(8,2,"warehouseLocationCd",sheet1);
addCell(9,2,"priority",sheet1);
addCell(10,2,"warehouseLocationCd",sheet1);
addCell(11,2,"priority",sheet1);
addCell(12,2,"warehouseLocationCd",sheet1);
addCell(13,2,"priority",sheet1);
addCell(14,2,"warehouseLocationCd",sheet1);
addCell(15,2,"priority",sheet1);
addCell(16,2,"warehouseLocationCd",sheet1);
addCell(17,2,"priority",sheet1);
addCell(18,2,"warehouseLocationCd",sheet1);
addCell(19,2,"priority",sheet1);
addCell(20,2,"warehouseLocationCd",sheet1);
addCell(21,2,"priority",sheet1);
addCell(22,2,"warehouseLocationCd",sheet1);
addCell(23,2,"priority",sheet1);
addCell(24,2,"warehouseLocationCd",sheet1);
addCell(25,2,"priority",sheet1);
addCell(26,2,"warehouseLocationCd",sheet1);
addCell(27,2,"priority",sheet1);
addCell(28,0,"acceptableShipFromWarehouses",sheet1);
addCell(28,1,"warehouseLocationCd",sheet1);
addCell(29,1,"priority",sheet1);
addCell(30,0,"recommendedCarrier",sheet1);
addCell(31,0,"recommendedShippingMethod",sheet1);
addCell(32,0,"primaryWarehouse",sheet1);
addCell(32,1,"warehouseLocationCd",sheet1);
addCell(33,1,"priority",sheet1);
addCell(34,0,"PASS/FAIL",sheet1);
addCell(35,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()                        
                
                                 //Input for recommendedCarrier                               
                                requestTemplet.content.order.recommendedCarrier = sh.getCell(1,i).getContents()
                                //Input for recommendedShippingMethod                               
                                requestTemplet.content.order.recommendedShippingMethod = sh.getCell(2,i).getContents() 

                               //Inputs for LineItem 1         
                                 //Input for lineItemID                               
                                requestTemplet.content.order.lineItems[0].lineItemID = sh.getCell(3,i).getContents()
                                 //Input for itemNumber  
                                requestTemplet.content.order.lineItems[0].itemNumber = sh.getCell(4,i).getContents()
                                //Input for requiresPharmacyDispensing  
                                requestTemplet.content.order.lineItems[0].requiresPharmacyDispensing = sh.getCell(5,i).getContents()
                                //Input for acceptableShipFromWarehouses                                 
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd = sh.getCell(6,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[0].priority = sh.getCell(7,i).getContents()                                
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[1].warehouseLocationCd = sh.getCell(8,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[1].priority = sh.getCell(9,i).getContents()                                
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[2].warehouseLocationCd = sh.getCell(10,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[2].priority = sh.getCell(11,i).getContents()                                                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[3].warehouseLocationCd = sh.getCell(12,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[3].priority = sh.getCell(13,i).getContents()                                                                                                                    
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[4].warehouseLocationCd = sh.getCell(14,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[4].priority = sh.getCell(15,i).getContents()                                                                                                                  
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[5].warehouseLocationCd = sh.getCell(16,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[5].priority = sh.getCell(17,i).getContents()                                                                                                                   
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[6].warehouseLocationCd = sh.getCell(18,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[6].priority = sh.getCell(19,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[7].warehouseLocationCd = sh.getCell(20,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[7].priority = sh.getCell(21,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[8].warehouseLocationCd = sh.getCell(22,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[8].priority = sh.getCell(23,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[9].warehouseLocationCd = sh.getCell(24,i).getContents()                                
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[9].priority = sh.getCell(25,i).getContents() 
                             
                              //Inputs for LineItem 2         
                                 //Input for lineItemID                               
                                requestTemplet.content.order.lineItems[1].lineItemID = sh.getCell(26,i).getContents()
                                 //Input for itemNumber  
                                requestTemplet.content.order.lineItems[1].itemNumber = sh.getCell(27,i).getContents()
                                //Input for requiresPharmacyDispensing  
                                requestTemplet.content.order.lineItems[1].requiresPharmacyDispensing = sh.getCell(28,i).getContents()
                                //Input for acceptableShipFromWarehouses                                 
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd = sh.getCell(29,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[0].priority = sh.getCell(30,i).getContents()                                
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[1].warehouseLocationCd = sh.getCell(31,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[1].priority = sh.getCell(32,i).getContents()                                
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[2].warehouseLocationCd = sh.getCell(33,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[2].priority = sh.getCell(34,i).getContents()                                                                                                                     
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[3].warehouseLocationCd = sh.getCell(35,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[3].priority = sh.getCell(36,i).getContents()                                                                                                                    
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[4].warehouseLocationCd = sh.getCell(37,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[4].priority = sh.getCell(38,i).getContents()                                                                                                                  
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[5].warehouseLocationCd = sh.getCell(39,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[5].priority = sh.getCell(40,i).getContents()                                                                                                                   
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[6].warehouseLocationCd = sh.getCell(41,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[6].priority = sh.getCell(42,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[7].warehouseLocationCd = sh.getCell(43,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[7].priority = sh.getCell(44,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[8].warehouseLocationCd = sh.getCell(45,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[8].priority = sh.getCell(46,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[9].warehouseLocationCd = sh.getCell(47,i).getContents()                                
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[9].priority = sh.getCell(48,i).getContents()                                                    
                               
      
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get values from response json  
                          int celNumForLineItems=0; celNumForShipWarehouses=3;                          
	                           for(int arrForLineItems=0; arrForLineItems<json.order.lineItems.size(); arrForLineItems++)
	                           {           
	                      	     addCell(celNumForLineItems,i,json.order.lineItems[arrForLineItems].lineItemID.toString(),sheet1);
	                              celNumForLineItems = celNumForLineItems +1;
	                              addCell(celNumForLineItems,i,json.order.lineItems[arrForLineItems].itemNumber.toString(),sheet1); 
	                              celNumForLineItems = celNumForLineItems +1;                                      
	                              addCell(celNumForLineItems,i,json.order.lineItems[arrForLineItems].requiresPharmacyDispensing.toString(),sheet1);                                                             
	                                  
	                                  for(int arrForShipWarehouses=0; arrForShipWarehouses<json.order.lineItems[arrForLineItems].acceptableShipFromWarehouses.size(); arrForShipWarehouses++)
	                                  {                    
	                                  addCell(celNumForShipWarehouses,i,json.order.lineItems[arrForLineItems].acceptableShipFromWarehouses[arrForShipWarehouses].warehouseLocationCd.toString(),sheet1);
	                                  celNumForShipWarehouses = celNumForShipWarehouses+1;                                       
	                                  addCell(celNumForShipWarehouses,i,json.order.lineItems[arrForLineItems].acceptableShipFromWarehouses[arrForShipWarehouses].priority.toString(),sheet1);
	                                  celNumForShipWarehouses = celNumForShipWarehouses+1;
	                                  } 
                                       celNumForLineItems = celNumForLineItems+3;
                                       celNumForShipWarehouses = celNumForShipWarehouses+3;

	                             }   
                     
                     
		                   int celNumForwarehouseAndPriority=28;
		                   for(int arrForwarehouseAndPriority=0; arrForwarehouseAndPriority<json.order.acceptableShipFromWarehouses.size(); arrForwarehouseAndPriority++)
		                    { 	                                     
		                      addCell(celNumForwarehouseAndPriority,i,json.order.acceptableShipFromWarehouses[arrForwarehouseAndPriority].warehouseLocationCd.toString(),sheet1);
		                      celNumForwarehouseAndPriority = celNumForwarehouseAndPriority+1;                                       
		                      addCell(celNumForwarehouseAndPriority,i,json.order.acceptableShipFromWarehouses[arrForwarehouseAndPriority].priority.toString(),sheet1);
		                      celNumForwarehouseAndPriority = celNumForwarehouseAndPriority+1;
		                    }
                   
                        addCell(30,i,json.order.recommendedCarrier.toString(),sheet1);                                                                      
                        addCell(31,i,json.order.recommendedShippingMethod.toString(),sheet1);
                        addCell(32,i,json.order.primaryWarehouse.warehouseLocationCd.toString(),sheet1); 
                        addCell(33,i,json.order.primaryWarehouse.priority.toString(),sheet1);               
                  
                                                         
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values

                         int celForLItem=49; celForacceptableWH=52;
                   		for(int arrForLItem=0; arrForLItem<json.order.lineItems.size(); arrForLItem++)
                     	{     
                            lineItemID = sh.getCell(celForLItem,i).getContents()
	                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"order.lineItems["+arrForLItem+"].lineItemID","lineItemID")
	                       celForLItem = celForLItem+1

                            itemNumber = sh.getCell(celForLItem,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,itemNumber,"order.lineItems["+arrForLItem+"].itemNumber","itemNumber")
	                       celForLItem = celForLItem+1

                            requiresPharmacyDispensing = sh.getCell(celForLItem,i).getContents().toString()
                       	   addAssertionJsonPathMatch(testStepForAssertion,requiresPharmacyDispensing,"order.lineItems["+arrForLItem+"].requiresPharmacyDispensing","requiresPharmacyDispensing")
                       
                      			for(int arrForacceptableWH=0; arrForacceptableWH<json.order.lineItems[arrForLItem].acceptableShipFromWarehouses.size(); arrForacceptableWH++)
                      			{                      	
			                       warehouseLocationCd = sh.getCell(celForacceptableWH,i).getContents().toString()
			                       addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd,"order.lineItems["+arrForLItem+"].acceptableShipFromWarehouses["+arrForacceptableWH+"].warehouseLocationCd","warehouseLocationCd")
			                       celForacceptableWH = celForacceptableWH+1;

			                       priority = sh.getCell(celForacceptableWH,i).getContents().toString()
			                       addAssertionJsonPathMatch(testStepForAssertion,priority,"order.lineItems["+arrForLItem+"].acceptableShipFromWarehouses["+arrForacceptableWH+"].priority","priority")
			                 	   celForacceptableWH = celForacceptableWH+1; 
                  				 }
                                    celForLItem = celForLItem+3
                                    celForacceptableWH = celForacceptableWH+3
                     	      }                     	                  
                            
	                 		int celNumForAWH =77              
	                         for(int arrForAWH=0; arrForAWH<json.order.acceptableShipFromWarehouses.size(); arrForAWH++)
                           	{                     
                                    warehouseLocationCd = sh.getCell(celNumForAWH,i).getContents().toString()
		                      	 addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd,"order.acceptableShipFromWarehouses["+arrForAWH+"].warehouseLocationCd","warehouseLocationCd")
		                          celNumForAWH = celNumForAWH+1;
		                          
			                       priority = sh.getCell(celNumForAWH,i).getContents().toString()
			                       addAssertionJsonPathMatch(testStepForAssertion,priority,"order.acceptableShipFromWarehouses["+arrForAWH+"].priority","priority")
			                       celNumForAWH = celNumForAWH+1;
                               }
         			
                      
                       //Recommended Shipping Carrier
                       recommendedCarrier = sh.getCell(79,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrier,"order.recommendedCarrier","recommendedCarrier")

                       //Recommended Shipping Method
                         recommendedShippingMethod = sh.getCell(80,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,recommendedShippingMethod,"order.recommendedShippingMethod","recommendedShippingMethod")
                      
                      //Primary WareHouse details
                       warehouseLocationCd_P = sh.getCell(81,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd_P,"order.primaryWarehouse.warehouseLocationCd","warehouseLocationCd")

                         priority_P = sh.getCell(82,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,priority_P,"order.primaryWarehouse.priority","priority")

                                   
           
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(34,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(35,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(34,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}
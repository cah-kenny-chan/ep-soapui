<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="28f63b92-b972-40f8-8db6-351b6ded0156" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineInsuranceVerificationExpirationDate" searchProperties="true" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="28f63b92-b972-40f8-8db6-351b6ded0156fileName">DetermineInsuranceVerificationExpirationDate</con:setting>
  </con:settings>
  <con:testStep type="groovy" name="DetermineInsuranceVerificationExpirationDate_SingleLineItem" id="0d7ce926-99f4-40b2-8f91-bd78cf42a05a">
    <con:settings/>
    <con:config>
      <script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineInsuranceVerificationExpirationDate/DetermineInsuranceVerificationExpirationDate-SingleLineItem-Input.xls"
def outputfile = projectDir + "/DetermineInsuranceVerificationExpirationDate/DetermineInsuranceVerificationExpirationDate-SingleLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"planCode",sheet1);
addCell(2,0,"expirationCategory",sheet1);
addCell(3,0,"insuranceVerificationExpireDays",sheet1);
addCell(4,0,"PASS/FAIL",sheet1);
addCell(5,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                 //Input for Line Item ID
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()    
                                //Input for PayerID
                                requestTemplet.content.lineItems[0].plans[0].id = sh.getCell(2,i).getContents()
                                //Input for planCode
                                requestTemplet.content.lineItems[0].plans[0].planCode = sh.getCell(3,i).getContents()                                                                                 
                                 

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)

                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json                                 
                        addCell(0,i,json.ivExpiryResponse[0].lineItemID,sheet1);                                   
                          // get planCode from response json                                   
                        addCell(1,i,json.ivExpiryResponse[0].planCode.toString(),sheet1);  
                         // get expirationCategory from response json                                   
                        addCell(2,i,json.ivExpiryResponse[0].expirationCategory.toString(),sheet1); 
				     // get insuranceVerificationExpireDays from response json   
				    // log.info json.insuranceVerificationExpireDays                                 
                        addCell(3,i,json.insuranceVerificationExpireDays.toString(),sheet1); 	                                                                            
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                 addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(4,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"ivExpiryResponse[0].lineItemID","lineItemID")

                          planCode = sh.getCell(5,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,planCode,"ivExpiryResponse[0].planCode","planCode")

                          expirationCategory = sh.getCell(6,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,expirationCategory,"ivExpiryResponse[0].expirationCategory","expirationCategory")

                          insuranceVerificationExpireDays = sh.getCell(7,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,insuranceVerificationExpireDays,"insuranceVerificationExpireDays","insuranceVerificationExpireDays")                     
                                               
                   
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(4,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(5,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(4,i,"PASS",sheet1);

                                }


       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"



                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){


                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}



//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="DetermineInsuranceVerificationExpirationDate_MultiLineItem" id="5bc044fd-ba87-4a48-9618-ea821a9f4882">
    <con:settings/>
    <con:config>
      <script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineInsuranceVerificationExpirationDate/DetermineInsuranceVerificationExpirationDate-MultiLineItem-Input.xls"
def outputfile = projectDir + "/DetermineInsuranceVerificationExpirationDate/DetermineInsuranceVerificationExpirationDate-MultiLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"planCode",sheet1);
addCell(2,0,"expirationCategory",sheet1);
addCell(3,0,"insuranceVerificationExpireDays",sheet1);
addCell(4,0,"lineItemID",sheet1);
addCell(5,0,"planCode",sheet1);
addCell(6,0,"expirationCategory",sheet1);
addCell(7,0,"insuranceVerificationExpireDays",sheet1);
addCell(8,0,"PASS/FAIL",sheet1);
addCell(9,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                 //Input for Line Item ID
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()    
                                //Input for planID
                                requestTemplet.content.lineItems[0].plans[0].id = sh.getCell(2,i).getContents()
                                //Input for planCode
                                requestTemplet.content.lineItems[0].plans[0].planCode = sh.getCell(3,i).getContents()                                                                                 

                                 //Input for Line Item ID1
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(4,i).getContents()    
                                //Input for planID
                                requestTemplet.content.lineItems[1].plans[0].id = sh.getCell(5,i).getContents()
                                //Input for planCode
                                requestTemplet.content.lineItems[1].plans[0].planCode = sh.getCell(6,i).getContents()

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)

                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json                                 
                        addCell(0,i,json.ivExpiryResponse[0].lineItemID,sheet1);                                   
                          // get planCode from response json                                   
                        addCell(1,i,json.ivExpiryResponse[0].planCode.toString(),sheet1);  
                         // get expirationCategory from response json                                   
                        addCell(2,i,json.ivExpiryResponse[0].expirationCategory.toString(),sheet1); 
				     // get insuranceVerificationExpireDays from response json   
				    // log.info json.insuranceVerificationExpireDays                                 
                        addCell(3,i,json.insuranceVerificationExpireDays.toString(),sheet1); 	

                         // get lineItemID1 from response json                                 
                        addCell(4,i,json.ivExpiryResponse[1].lineItemID,sheet1);                                   
                          // get planCode from response json                                   
                        addCell(5,i,json.ivExpiryResponse[1].planCode.toString(),sheet1);  
                         // get expirationCategory from response json                                   
                        addCell(6,i,json.ivExpiryResponse[1].expirationCategory.toString(),sheet1); 
				     // get insuranceVerificationExpireDays from response json   				                                    
                        addCell(7,i,json.insuranceVerificationExpireDays.toString(),sheet1);                                                                            
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                 addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(7,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"ivExpiryResponse[0].lineItemID","lineItemID")

                          planCode = sh.getCell(8,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,planCode,"ivExpiryResponse[0].planCode","planCode")

                          expirationCategory = sh.getCell(9,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,expirationCategory,"ivExpiryResponse[0].expirationCategory","expirationCategory")

                          insuranceVerificationExpireDays = sh.getCell(10,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,insuranceVerificationExpireDays,"insuranceVerificationExpireDays","insuranceVerificationExpireDays") 

                          lineItemID1 = sh.getCell(11,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"ivExpiryResponse[1].lineItemID","lineItemID")

                         planCode1 = sh.getCell(12,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,planCode1,"ivExpiryResponse[1].planCode","planCode")

                          expirationCategory1 = sh.getCell(13,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,expirationCategory1,"ivExpiryResponse[1].expirationCategory","expirationCategory")

                          insuranceVerificationExpireDays1 = sh.getCell(14,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,insuranceVerificationExpireDays1,"insuranceVerificationExpireDays","insuranceVerificationExpireDays") 
                                               
                   
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(8,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(9,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(8,i,"PASS",sheet1);

                                }


       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"



                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){


                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}



//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="JSON Request" id="3a27d409-314c-4641-b63f-65417d5a862b">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationExpirationDate/DetermineInsuranceVerificationExpirationDate/WADL" methodName="DetermineInsuranceVerificationExpirationDate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="JSON Request" id="dda6f8b0-039b-44ee-9545-88d4ba02fee0" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "C1234",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "PA001",
                    "planCode": "9166"
                }
            ]
        },
        {
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "PA001",
                    "planCode": "1234"
                }
            ]
        }
    ]
}</con:request>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-56580" id="6ebb5142-5a79-49ee-a779-3ad5db97d2ab">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationExpirationDate/DetermineInsuranceVerificationExpirationDate/WADL" methodName="DetermineInsuranceVerificationExpirationDate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-56580" id="dda6f8b0-039b-44ee-9545-88d4ba02fee0" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "C1234",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "PA001",
                    "planCode": "9166"
                }
            ]
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineInsuranceVerificationExpirationDate/DetermineInsuranceVerificationExpirationDate/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="1153f752-4f31-4083-9e12-5b19c1052cfa" name="Valid HTTP Status Codes_2">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ad355a43-632b-4c22-b53d-0d4d651c9a38" name="lineItemID">
          <con:configuration>
            <path>ivExpiryResponse[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="edd9d543-bab7-4095-9313-5f24794213f8" name="planCode">
          <con:configuration>
            <path>ivExpiryResponse[0].planCode</path>
            <content>9166</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="aa040966-eca1-428f-82e8-0178f346b7f8" name="expirationCategory">
          <con:configuration>
            <path>ivExpiryResponse[0].expirationCategory</path>
            <content>CURRENT MONTH</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f2411c76-69a7-4511-9cff-2484fed6781c" name="insuranceVerificationExpireDays">
          <con:configuration>
            <path>insuranceVerificationExpireDays</path>
            <content>10</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-56581" id="c712a6b5-a4ec-440b-8bb9-ccf617495c03">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationExpirationDate/DetermineInsuranceVerificationExpirationDate/WADL" methodName="DetermineInsuranceVerificationExpirationDate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-56581" id="dda6f8b0-039b-44ee-9545-88d4ba02fee0" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "C1234",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "PA001",
                    "planCode": "1234"
                }
            ]
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineInsuranceVerificationExpirationDate/DetermineInsuranceVerificationExpirationDate/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="231f5c08-1a8f-444e-9f10-a2fc10128636" name="Valid HTTP Status Codes_3">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="b0b1d44f-dee0-4ef6-8aa3-008d070c1a52" name="lineItemID">
          <con:configuration>
            <path>ivExpiryResponse[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="00c21eb6-50f4-4473-85e5-914dc1f7ded1" name="planCode">
          <con:configuration>
            <path>ivExpiryResponse[0].planCode</path>
            <content>1234</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="b69de4d2-544b-48cd-a78d-34d25333eb2d" name="expirationCategory">
          <con:configuration>
            <path>ivExpiryResponse[0].expirationCategory</path>
            <content>PLAN YEAR</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="0889ac4b-4f35-48f1-9170-eb884709c753" name="insuranceVerificationExpireDays">
          <con:configuration>
            <path>insuranceVerificationExpireDays</path>
            <content>10</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-56582" id="5c17b449-e006-4e44-bae6-ff94ed3dec1e">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationExpirationDate/DetermineInsuranceVerificationExpirationDate/WADL" methodName="DetermineInsuranceVerificationExpirationDate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-56582" id="dda6f8b0-039b-44ee-9545-88d4ba02fee0" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "C1234",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "PA001",
                    "planCode": "9166"
                }
            ]
        },
        {
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "PA001",
                    "planCode": "1234"
                }
            ]
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineInsuranceVerificationExpirationDate/DetermineInsuranceVerificationExpirationDate/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="75e82d07-7059-408a-8093-ee0ca1ac0e36" name="Valid HTTP Status Codes_2">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="8c32fa14-ea2e-4c54-8956-cc1bc9dd1c97" name="lineItemID">
          <con:configuration>
            <path>ivExpiryResponse[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="67727a5a-c656-4860-96c0-f416404e4ec3" name="planCode">
          <con:configuration>
            <path>ivExpiryResponse[0].planCode</path>
            <content>9166</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="1f2938d7-815f-4591-9e1f-75933198b08f" name="expirationCategory">
          <con:configuration>
            <path>ivExpiryResponse[0].expirationCategory</path>
            <content>CURRENT MONTH</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="4b12f929-ca00-4bdb-9600-5ba1097994e5" name="insuranceVerificationExpireDays">
          <con:configuration>
            <path>insuranceVerificationExpireDays</path>
            <content>10</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="50706628-8c98-4a77-8586-83e8cb386824" name="lineItemID">
          <con:configuration>
            <path>ivExpiryResponse[1].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c0477949-5c99-4a62-a85f-18d03f5c67f4" name="planCode">
          <con:configuration>
            <path>ivExpiryResponse[1].planCode</path>
            <content>1234</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="dd19fcea-2444-4738-b473-9e06dea23290" name="expirationCategory">
          <con:configuration>
            <path>ivExpiryResponse[1].expirationCategory</path>
            <content>PLAN YEAR</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="8481fe73-90dc-4ea4-8473-47cd72345d97" name="insuranceVerificationExpireDays">
          <con:configuration>
            <path>insuranceVerificationExpireDays</path>
            <content>10</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
</con:testCase>

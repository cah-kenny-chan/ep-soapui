<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="d90b3c18-266a-4fcd-bb82-21f2b3108de4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineBillForDenial" searchProperties="true" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="d90b3c18-266a-4fcd-bb82-21f2b3108de4fileName">DetermineBillForDenial</con:setting>
  </con:settings>
  <con:testStep type="groovy" name="DetermineBillForDenial_SingleLineItem" id="91627963-ad41-4767-8d79-091271050310">
    <con:settings/>
    <con:config>
      <script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineBillForDenial/DetermineBillforDenial_Input.xls"
def outputfile = projectDir + "/DetermineBillForDenial/DetermineBillforDenial_SingleLineItem_Output.xls"

//Creating workbook for reading value from Excel Sheet
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("SingleLineItems")
Sheet jsonInput = wb.getSheet("JSON_SingleLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"Expected Results (lineItems)",sheet1);

addCell(0,1,"lineItemID ",sheet1);
addCell(1,1,"hcpcsCode ",sheet1);
addCell(2,1,"billForDenial ",sheet1);

addCell(3,0,"PASS/FAIL",sheet1);
addCell(4,0,"FAILED DUE TO",sheet1);


//new testStepName
def newTestStep=null

//try {   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);
         
               for (i=3;i&lt;rc;i++)
               {                                                                                      
                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                                                        
                                //Input for lineitem1                                
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents().toString()
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents().toString()
                                requestTemplet.content.lineItems[0].plans[0].id = sh.getCell(3,i).getContents().toString()
                                requestTemplet.content.lineItems[0].plans[0].assignedOrder = sh.getCell(4,i).getContents().toString()
                                requestTemplet.content.lineItems[0].plans[0].planCode = sh.getCell(5,i).getContents().toString()
                                requestTemplet.content.lineItems[0].plans[1].id = sh.getCell(6,i).getContents().toString()
                                requestTemplet.content.lineItems[0].plans[1].assignedOrder = sh.getCell(7,i).getContents().toString()
                                requestTemplet.content.lineItems[0].plans[1].planCode = sh.getCell(8,i).getContents().toString()                                
                                                                                                                                      
                               //Input for lineitem2      

                                
                                                                                                                        
                       //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                        //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)                             
                         //teststep cloned: End
                         
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)

                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    

                          //get response                                       
                         //Check the existence of the array: lineitems


                          if (json.lineItems!= null)
                         {
                                                        //initialize the cel postion for lineItemID
                                                        int cellineItemID=0; 
                                                        int clineItemID; 
                                                                                                          
                              //Get the array size for lineItems
                               for(int arrlineItems=0; arrlineItems&lt;json.lineItems.size(); arrlineItems++)
                                    {             
                                      clineItemID= cellineItemID ;
                                                                                                                                                                                                                                         
                                      addCell(clineItemID,i,json.lineItems[arrlineItems].lineItemID.toString(),sheet1); 
                                      clineItemID= clineItemID+1;       
                                      addCell(clineItemID,i,json.lineItems[arrlineItems].hcpcsCode.toString(),sheet1); 
                                      clineItemID= clineItemID+1;
                                      addCell(clineItemID,i,json.lineItems[arrlineItems].billForDenial.toString(),sheet1); 
                                      clineItemID= clineItemID+1;
                                              

                                   //Increment the cel position for LineItemID
                                          //  cellineItemID= cellineItemID+3;                                                                                                                                                                                                                                                                                                                                                                                                                    
                                                 }  
                         }
                                                                                                                                   
          
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                    //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                          //get the expected values
                          //check the existence of array lineItems                         
                          if (json.lineItems != null)
                              {
                               //initialize the cell postion used for assertion for lineItemID
                                int AssForcellineItemID=9; 
                                int AssForlineItemID;                                                         
                                                         
                                 //Get the array size for LineItems
                                 for(int arrForlineItems=0; arrForlineItems&lt;json.lineItems.size(); arrForlineItems++)
                                 {     
                                      AssForlineItemID=AssForcellineItemID
                                      String lineItemID = sh.getCell(AssForlineItemID,i).getContents().toString()
                                      addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"lineItems["+arrForlineItems+"].lineItemID","lineItemID")                       
                                      AssForlineItemID=AssForlineItemID+1

                                      String hcpcsCode = sh.getCell(AssForlineItemID,i).getContents().toString()
                                      addAssertionJsonPathMatch(testStepForAssertion,hcpcsCode,"lineItems["+arrForlineItems+"].hcpcsCode","hcpcsCode")                       
                                      AssForlineItemID=AssForlineItemID+1

                                       String billForDenial = sh.getCell(AssForlineItemID,i).getContents().toString()
                                       addAssertionJsonPathMatch(testStepForAssertion,billForDenial,"lineItems["+arrForlineItems+"].billForDenial","billForDenial")                       
                                        AssForlineItemID=AssForlineItemID+1    
                                                                
                                             
                                   //increment the cell postion used for assertion for LimeItemID                                      
                                     //AssForcellineItemID=AssForcellineItemID+3;                                                                                                                                                                                                                                                                                                                                                                                                     
                                                              } 
                                                          } 
                              
                                                                                                                                                                             
                                //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(3,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(4,i,e.message,sheet1);

                                                } 
                                   }

                                }

                                else{
                                   addCell(3,i,"PASS",sheet1);
                                              }

      }

      wb1.write();
      log.info "TestCase Execution Completed successfully"
          
/*}
     
catch(Exception e)
{

       log.info(e)                         
}

finally

{*/
    //close workbook
     wb.close();
     wb1.close();   
//}


//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200
                                                                                                                                                                }

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){ 
                                    testCase.removeTestStep(testStep)
                                                                               }

//remove the teststep::End
} 

//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);             
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="DetermineBillForDenial_MultiLineItem" id="8e61ee11-4b4b-4c96-bd1c-d1df0f7d163f">
    <con:settings/>
    <con:config>
      <script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineBillForDenial/DetermineBillforDenial_Input.xls"
def outputfile = projectDir + "/DetermineBillForDenial/DetermineBillforDenial_MultiLineItem_Output.xls"

//Creating workbook for reading value from Excel Sheet(Input File)
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("MultiLineItem")
Sheet jsonInput = wb.getSheet("JSON_MultiLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"Expected Results (lineItems)",sheet1);

addCell(0,1,"lineItemID ",sheet1);
addCell(1,1,"hcpcsCode ",sheet1);
addCell(2,1,"billForDenial ",sheet1);
addCell(3,1,"lineItemID",sheet1);
addCell(4,1,"hcpcsCode",sheet1);
addCell(5,1,"billForDenial",sheet1);


addCell(6,0,"PASS/FAIL",sheet1);
addCell(7,0,"FAILED DUE TO",sheet1);




//new testStepName
def newTestStep=null

//try {   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);
         
               for (i=3;i&lt;rc;i++)
               {                                                                                      
                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                                                        
                                //Input for lineitem1                                
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents().toString()
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents().toString()
                                requestTemplet.content.lineItems[0].plans[0].id = sh.getCell(3,i).getContents().toString()
                                requestTemplet.content.lineItems[0].plans[0].assignedOrder = sh.getCell(4,i).getContents().toString()
                                requestTemplet.content.lineItems[0].plans[0].planCode = sh.getCell(5,i).getContents().toString()
                                requestTemplet.content.lineItems[0].plans[1].id = sh.getCell(6,i).getContents().toString()
                                requestTemplet.content.lineItems[0].plans[1].assignedOrder = sh.getCell(7,i).getContents().toString()
                                requestTemplet.content.lineItems[0].plans[1].planCode = sh.getCell(8,i).getContents().toString()                                
                                                                                                                                      
                               //Input for lineitem2      

                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(9,i).getContents().toString()
                                requestTemplet.content.lineItems[1].hcpcsCode = sh.getCell(10,i).getContents().toString()
                                requestTemplet.content.lineItems[1].plans[0].id = sh.getCell(11,i).getContents().toString()
                                requestTemplet.content.lineItems[1].plans[0].assignedOrder = sh.getCell(12,i).getContents().toString()
                                requestTemplet.content.lineItems[1].plans[0].planCode = sh.getCell(13,i).getContents().toString()
                                requestTemplet.content.lineItems[1].plans[1].id = sh.getCell(14,i).getContents().toString()
                                requestTemplet.content.lineItems[1].plans[1].assignedOrder = sh.getCell(15,i).getContents().toString()
                                requestTemplet.content.lineItems[1].plans[1].planCode = sh.getCell(16,i).getContents().toString()                          
                                                    
                                                                                                                        
                       //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                        //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)                             
                         //teststep cloned: End
                         
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)

                         //retrive response         
                         def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    

                          //get response                                       
                         //Check the existence of the array: lineitems


                          if (json.lineItems!= null)
                         {
                                                        //initialize the cel postion for lineItemID
                                                        int cellineItemID=0; 
                                                        int clineItemID; 
                                                                                                          
                              //Get the array size for lineItems
                               for(int arrlineItems=0; arrlineItems&lt;json.lineItems.size(); arrlineItems++)
                                    {             
                                      clineItemID= cellineItemID ;
                                                                                                                                                                                                                                         
                                      addCell(clineItemID,i,json.lineItems[arrlineItems].lineItemID.toString(),sheet1); 
                                      clineItemID= clineItemID+1;       
                                      addCell(clineItemID,i,json.lineItems[arrlineItems].hcpcsCode.toString(),sheet1); 
                                      clineItemID= clineItemID+1;
                                      addCell(clineItemID,i,json.lineItems[arrlineItems].billForDenial.toString(),sheet1); 
                                      clineItemID= clineItemID+1;
                                              

                                   //Increment the cel position for LineItemID
                                            cellineItemID= cellineItemID+3;                                                                                                                                                                                                                                                                                                                                                                                                                    
                                                 }  
                         }
                                                                                                                                   
          
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                    //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                          //get the expected values
                          //check the existence of array lineItems                         
                          if (json.lineItems != null)
                              {
                               //initialize the cell postion used for assertion for lineItemID
                                int AssForcellineItemID=17; 
                                int AssForlineItemID;                                                         
                                                         
                                 //Get the array size for LineItems
                                 for(int arrForlineItems=0; arrForlineItems&lt;json.lineItems.size(); arrForlineItems++)
                                 {     
                                      AssForlineItemID=AssForcellineItemID
                                      String lineItemID = sh.getCell(AssForlineItemID,i).getContents().toString()
                                      addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"lineItems["+arrForlineItems+"].lineItemID","lineItemID")                       
                                      AssForlineItemID=AssForlineItemID+1

                                      String hcpcsCode = sh.getCell(AssForlineItemID,i).getContents().toString()
                                      addAssertionJsonPathMatch(testStepForAssertion,hcpcsCode,"lineItems["+arrForlineItems+"].hcpcsCode","hcpcsCode")                       
                                      AssForlineItemID=AssForlineItemID+1

                                       String billForDenial = sh.getCell(AssForlineItemID,i).getContents().toString()
                                       addAssertionJsonPathMatch(testStepForAssertion,billForDenial,"lineItems["+arrForlineItems+"].billForDenial","billForDenial")                       
                                        AssForlineItemID=AssForlineItemID+1    
                                                                
                                             
                                   //increment the cell postion used for assertion for LimeItemID                                      
                                     AssForcellineItemID=AssForcellineItemID+3;                                                                                                                                                                                                                                                                                                                                                                                                     
                                                              } 
                                                          } 
                              
                                                                                                                                                                             
                                //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(6,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(7,i,e.message,sheet1);

                                                } 
                                   }

                                }

                                else{
                                   addCell(6,i,"PASS",sheet1);
                                              }

      }

      wb1.write();
      log.info "TestCase Execution Completed successfully"
          
/*}
     
catch(Exception e)
{

       log.info(e)                         
}

finally

{*/
    //close workbook
     wb.close();
     wb1.close();   
//}


//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200
                                                                                                                                                                }

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){ 
                                    testCase.removeTestStep(testStep)
                                                                               }

//remove the teststep::End
} 

//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);             
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="JSON Request" id="7cc0854f-39f6-4a82-b387-c94c3ed7f84a">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillForDenial/DetermineBillForDenial/WADL" methodName="DetermineBillForDenial" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="JSON Request" id="f5548a4f-d52d-4326-9b97-03260f5dada3" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": "C123",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "plans": [
                {
                    "assignedOrder": "Primary",
                    "id": "PA001",
                    "planCode": "9436"
                },
                {
                    "assignedOrder": "Secondary",
                    "id": "PA002",
                    "planCode": "9437"
                }
            ]
        },
        {
            "hcpcsCode": "A9278",
            "lineItemID": "L002",
            "plans": [
                {
                    "assignedOrder": "Primary",
                    "id": "PB001",
                    "planCode": "9576"
                },
                {
                    "assignedOrder": "Secondary",
                    "id": "PB002",
                    "planCode": "5002"
                }
            ]
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillForDenial/DetermineBillForDenial/WADL</con:originalUri>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-64065" id="2b938a0a-74fb-43d5-83c6-58cadf19d0e8">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillForDenial/DetermineBillForDenial/WADL" methodName="DetermineBillForDenial" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-64065" id="f5548a4f-d52d-4326-9b97-03260f5dada3" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": "C123",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "DEFAULT",
            "lineItemID": "L001",
            "plans": [
                {
                    "assignedOrder": "Primary",
                    "id": "PA001",
                    "planCode": "DEFAULT"
                },
                {
                    "assignedOrder": "Secondary",
                    "id": "PA002",
                    "planCode": "DEFAULT"
                }
            ]
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillForDenial/DetermineBillForDenial/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="95b0c3e9-ec2a-4cd4-92dd-51ba9a296486" name="Valid HTTP Status Codes_3">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ddf40e00-24c1-4186-86f3-1d641ee32b7e" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="450564d4-10f4-4a5d-8c07-4037127aa743" name="hcpcsCode">
          <con:configuration>
            <path>lineItems[0].hcpcsCode</path>
            <content>DEFAULT</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="6da80a89-1a83-48e8-b813-ab69b98bc65e" name="billForDenial">
          <con:configuration>
            <path>lineItems[0].billForDenial</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-64066" id="2de8a5ac-8ebd-492d-998f-b8034c5d65af">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillForDenial/DetermineBillForDenial/WADL" methodName="DetermineBillForDenial" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-64066" id="f5548a4f-d52d-4326-9b97-03260f5dada3" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": "C123",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "plans": [
                {
                    "assignedOrder": "Primary",
                    "id": "PA001",
                    "planCode": "5001"
                },
                {
                    "assignedOrder": "Secondary",
                    "id": "PA002",
                    "planCode": "6325"
                }
            ]
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillForDenial/DetermineBillForDenial/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="4f8d1674-0c7a-498b-a673-d54b125837b4" name="Valid HTTP Status Codes_4">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="5f507db5-130c-40c3-a2b0-76a192b43f4e" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="8e168224-916d-4f89-9e28-b7e862c7ec66" name="hcpcsCode">
          <con:configuration>
            <path>lineItems[0].hcpcsCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a20b9245-4193-4958-8be5-e52528a08b58" name="billForDenial">
          <con:configuration>
            <path>lineItems[0].billForDenial</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-64067" id="75925b08-abd8-48e2-87b5-b6410731ee28">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillForDenial/DetermineBillForDenial/WADL" methodName="DetermineBillForDenial" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-64067" id="f5548a4f-d52d-4326-9b97-03260f5dada3" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": "C123",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "plans": [
                {
                    "assignedOrder": "Primary",
                    "id": "PA001",
                    "planCode": ""
                },
                {
                    "assignedOrder": "Secondary",
                    "id": "PA002",
                    "planCode": "7914"
                }
            ]
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillForDenial/DetermineBillForDenial/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="a726ba92-d279-463b-bce1-240950f383ab" name="Valid HTTP Status Codes_5">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="556ad96f-9f6f-4602-a055-3e683c33f6f9" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="b0dae50e-3c99-44f7-9536-57d35a82aa6f" name="hcpcsCode">
          <con:configuration>
            <path>lineItems[0].hcpcsCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="9eb11ec7-6689-4026-acce-425b8728e061" name="billForDenial">
          <con:configuration>
            <path>lineItems[0].billForDenial</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-64068" id="0657434c-373c-46af-b1df-c330be5f45a4">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillForDenial/DetermineBillForDenial/WADL" methodName="DetermineBillForDenial" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-64068" id="f5548a4f-d52d-4326-9b97-03260f5dada3" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": "C123",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A9276",
            "lineItemID": "L001",
            "plans": [
                {
                    "assignedOrder": "Primary",
                    "id": "PA001",
                    "planCode": "5003"
                },
                {
                    "assignedOrder": "Secondary",
                    "id": "PA002",
                    "planCode": "7044"
                }
            ]
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillForDenial/DetermineBillForDenial/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="d2e9c9bb-c4a3-47c8-a7d2-c659b5c5ac95" name="Valid HTTP Status Codes_6">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ceb86679-3690-4a00-b50e-78ecd51c4da1" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="80866050-b57e-445c-906d-11cadd35f1f0" name="hcpcsCode">
          <con:configuration>
            <path>lineItems[0].hcpcsCode</path>
            <content>A9276</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a97d8583-d8d5-484f-b2b0-1c43f1288aeb" name="billForDenial">
          <con:configuration>
            <path>lineItems[0].billForDenial</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-64069" id="c0f00ef6-3c2e-43a7-b2e5-8ddd8379b15d">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillForDenial/DetermineBillForDenial/WADL" methodName="DetermineBillForDenial" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-64069" id="f5548a4f-d52d-4326-9b97-03260f5dada3" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": "C123",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "plans": [
                {
                    "assignedOrder": "Primary",
                    "id": "PA001",
                    "planCode": "9436"
                },
                {
                    "assignedOrder": "Secondary",
                    "id": "PA002",
                    "planCode": "6325"
                }
            ]
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillForDenial/DetermineBillForDenial/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="c0f39d5a-0ed1-41fc-acf9-b3587623a0bb" name="Valid HTTP Status Codes_7">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="96a80bb4-a451-4a4e-81d3-fdd95361862c" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="7f62c2c0-e0fe-44f3-8e47-fb16279c1380" name="hcpcsCode">
          <con:configuration>
            <path>lineItems[0].hcpcsCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="066b19b9-6dd4-4504-8d16-e3fb3aba84ca" name="billForDenial">
          <con:configuration>
            <path>lineItems[0].billForDenial</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-64070" id="f2dae56b-17f1-45b4-837b-ca52f1973bcc">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillForDenial/DetermineBillForDenial/WADL" methodName="DetermineBillForDenial" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-64070" id="f5548a4f-d52d-4326-9b97-03260f5dada3" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": "C123",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "K0554",
            "lineItemID": "L001",
            "plans": [
                {
                    "assignedOrder": "Primary",
                    "id": "PA001",
                    "planCode": "5002"
                },
                {
                    "assignedOrder": "Secondary",
                    "id": "PA002",
                    "planCode": "7414"
                }
            ]
        },
        {
            "hcpcsCode": "",
            "lineItemID": "L002",
            "plans": [
                {
                    "assignedOrder": "Primary",
                    "id": "PB001",
                    "planCode": "5004"
                },
                {
                    "assignedOrder": "Secondary",
                    "id": "PB002",
                    "planCode": "9576"
                }
            ]
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillForDenial/DetermineBillForDenial/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="88922879-e191-4252-84b1-9d5e3f800a6e" name="Valid HTTP Status Codes_3">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="9f81c9d7-1625-4b7b-8d8d-1bc987b43584" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="af098647-a5a1-4c5d-9f5f-82297656005c" name="hcpcsCode">
          <con:configuration>
            <path>lineItems[0].hcpcsCode</path>
            <content>K0554</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="dca0e209-328b-4d34-92f9-8a130fbb1872" name="billForDenial">
          <con:configuration>
            <path>lineItems[0].billForDenial</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f2db514a-2f70-4beb-b5e8-417ea7d912ab" name="lineItemID">
          <con:configuration>
            <path>lineItems[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="04c68a0d-472d-4b41-a8ec-b59a0a33b03c" name="hcpcsCode">
          <con:configuration>
            <path>lineItems[1].hcpcsCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="348e5713-228d-4b5f-b2aa-d4e23ce33f65" name="billForDenial">
          <con:configuration>
            <path>lineItems[1].billForDenial</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-64071" id="b8ff81da-1695-4831-8470-e3d5a8fe5b18">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillForDenial/DetermineBillForDenial/WADL" methodName="DetermineBillForDenial" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-64071" id="f5548a4f-d52d-4326-9b97-03260f5dada3" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": "C123",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "plans": [
                {
                    "assignedOrder": "Primary",
                    "id": "PA001",
                    "planCode": "9436"
                },
                {
                    "assignedOrder": "Secondary",
                    "id": "PA002",
                    "planCode": "9437"
                }
            ]
        },
        {
            "hcpcsCode": "A9278",
            "lineItemID": "L002",
            "plans": [
                {
                    "assignedOrder": "Primary",
                    "id": "PB001",
                    "planCode": "9576"
                },
                {
                    "assignedOrder": "Secondary",
                    "id": "PB002",
                    "planCode": "5002"
                }
            ]
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillForDenial/DetermineBillForDenial/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="e624aa31-3218-4949-bd91-aa00b2cb61ac" name="Valid HTTP Status Codes_4">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="5a31f7e0-0082-4980-aeb5-0876cafd0b19" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e27b89b9-6d33-47a8-878f-6f27a461ee80" name="hcpcsCode">
          <con:configuration>
            <path>lineItems[0].hcpcsCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ebb32681-0964-420b-a51e-f0339e7b7df6" name="billForDenial">
          <con:configuration>
            <path>lineItems[0].billForDenial</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="9acaacc5-76d8-4aac-8e98-94cf6f3f9c22" name="lineItemID">
          <con:configuration>
            <path>lineItems[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d0daaebd-5ef5-4b3e-93f1-d0c1f25d7c18" name="hcpcsCode">
          <con:configuration>
            <path>lineItems[1].hcpcsCode</path>
            <content>A9278</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="5f322ec0-80f9-445e-b448-b76bebe79808" name="billForDenial">
          <con:configuration>
            <path>lineItems[1].billForDenial</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
</con:testCase>

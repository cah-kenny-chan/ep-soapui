<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="887c2225-c38e-4482-89e2-3baee79be338" activeEnvironment="Default" name="EPST_ODM" resourceRoot="${projectDir}" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="07e8d604-b652-443c-ba77-b78e3c5c35a0" wadlVersion="http://wadl.dev.java.net/2009/02" name="CARESOrderManagement" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:endpoint>http://localhost:9081</con:endpoint><con:endpoint>https://sg.ws.dev.cardinalhealth.net:4333/Medical/Cares/CalculateMedDocExpiration/V1_0</con:endpoint><con:endpoint>https://sg.ws.dev.cardinalhealth.net:4333/Medical/Cares/DetermineAllowableShippingMethods/V1_0</con:endpoint><con:endpoint>https://sg.ws.dev.cardinalhealth.net:4333/Medical/Cares/DetermineDWOFormFields/V1_0</con:endpoint><con:endpoint>https://sg.ws.dev.cardinalhealth.net:4333/Medical/Cares/DetermineExpectedShipDate/V1_0</con:endpoint><con:endpoint>https://sg.ws.dev.cardinalhealth.net:4333/Medical/Cares/DetermineMedDocStartDate/V1_0</con:endpoint><con:endpoint>https://sg.ws.dev.cardinalhealth.net:4333/Medical/Cares/DetermineMedDocs/V1_0</con:endpoint><con:endpoint>https://sg.ws.dev.cardinalhealth.net:4333/Medical/Cares/DeterminePriorAuthRequired/V1_0</con:endpoint><con:endpoint>https://sg.ws.dev.cardinalhealth.net:4333/Medical/Cares/EvaluateLineItemLimits/V1_0</con:endpoint><con:endpoint>https://sg.ws.dev.cardinalhealth.net:4333/Medical/Cares/EvaluateOrderLimits/V1_0</con:endpoint><con:endpoint>https://sg.ws.dev.cardinalhealth.net:4333/Medical/Cares/GroupTasks/V1_0</con:endpoint><con:endpoint>https://sg.ws.dev.cardinalhealth.net:4333/Medical/Cares/MedDocsNeeded/V1_0</con:endpoint><con:endpoint>https://sg.ws.dev.cardinalhealth.net:4333/Medical/Cares/ValidateMedDocPerMedPolicy/V1_0</con:endpoint><con:endpoint>https://sg.ws.qa.cardinalhealth.net:4443/Medical/Cares/GroupTasks/V1_0</con:endpoint></con:endpoints><con:resource name="DetermineIfProductSpecificQuestions" path="/DecisionService/rest/v1/OrderValidation/DetermineIfProductSpecificQuestionsRequired/WADL" id="ec51dabc-5a81-4c69-9177-28e12a6c890d"><con:settings/><con:parameters/><con:method name="DetermineIfProductSpecificQuestions" id="5839f839-f4dc-427b-a20f-7a694b57793b" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:det="http://ldec5009c1ods02/DetermineIfProductSpecificQuestions">det:Response</con:element></con:representation><con:request name="DetermineIfProductSpecificQuestions" id="8b8c1efd-5eaf-4e11-9710-802947736027" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "order": {
        "lineItems": [{
            "lineItemID": "L0008",
            "diagnosis": [{
                "codeICD10": "E11"
            }],
            "payers": [{
                "id": "09GJKJI56FHGJ787UU9897834",
                "name": "998785",
                "plan": "4",
                "planName": "B865",
                "payerForEvaluation": true,
                "requiresReceiverDeliveryQuestion": true
            }],
            "productCategory": "Diabetes",
            "productSubCategory1": "Diabetes Testing Supplies",
            "productSubCategory2": "Continuous Glucose Monitors",
            "productSubCategory3": "CGM Sensors",
            "hcpcsCode": "A4253",
            "zeroDollarItem": false
        }]
    },
    "dateLastSeenByPhysician": "2019-01-29T07:19:45.000+0530",
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "from": "string",
            "callingFunction": "string",
            "correlationID": "string",
            "timestamp": "2014-09-19T04:48:33.000+0530"
        }
    }
}








</con:request><con:originalUri>http://ldec5009c1ods02/DetermineIfProductSpecificQuestions</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="BackOrderRe-processing" path="/DecisionService/rest/v1/Shipping/DetermineBackOrderReprocessing/WADL" id="78d90cbe-51f4-451b-9c7c-968ebfcf3d1f"><con:settings/><con:parameters/><con:method name="BackOrderRe-processing" id="b5dcc79e-5109-41e2-a650-82306ea45919" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:wadl="http://ldec5009c1ods02/DecisionService/rest/v1/Shipping/DetermineBackOrderReprocessing/WADL">wadl:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="BackOrderRe-processing" id="9827bd37-12ff-445e-8cc4-4e50e6848ded" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
  "__DecisionID__": "string",
  "e2eMetadata": {
    "serviceAddressing": {
      "from": "PCF",
      "callingFunction": "ABC",
      "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
      "timestamp": "2019-08-26T00:00:00.000+0000"
    }
  }
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/Shipping/DetermineBackOrderReprocessing/WADL</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="ValidateEligibleDiagnosis" path="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" id="789140a6-d841-4208-b065-f2dd2b5d4e3c"><con:settings/><con:parameters/><con:method name="ValidateEligibleDiagnosis" id="92cb673c-9c5e-49c8-80fa-03f66fb5707b" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:wadl="http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL">wadl:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="ValidateEligibleDiagnosis" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "lineItems": [
        {
            "lineItemID": "L001",
            "hcpcsCode": "A4649",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "B187"
                }
            ]
        }
    ],
    "diagnosis": [
      {
            "codeICD10": "E10"
        },
        {
            "codeICD10": "E10.1"
        },
        {
            "codeICD10": "E10.2"
        }       
    ],
  "e2eMetadata": {
    "serviceAddressing": {
      "from": "string",
      "callingFunction": "string",
      "correlationID": "C1234",
      "timestamp": "2019-08-26T00:00:00.000+0000"
    }
  },
  "__DecisionID__": "string"
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineEdgeparkCompanyLimits" path="/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL" id="adeac867-80f3-4eaa-a28d-413c9e94e954"><con:settings/><con:parameters/><con:method name="DetermineEdgeparkCompanyLimits" id="c697cef3-30a2-419b-8524-7e3efa76956b" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:wadl="http://ldec5009c1ods02/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL">wadl:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DetermineEdgeparkCompanyLimits" id="8e1823b7-0b90-4a25-9b4a-56b1fb7cceef" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>
{

   "lineItems":[

      {

         "lineItemID":"L001",

         "hcpcsCode":"A123"

      },

      {

         "lineItemID":"L002",

         "hcpcsCode":"A1234"

      }

   ],

   "e2eMetadata":{

      "serviceAddressing":{

         "from":"string",

         "callingFunction":"string",

         "correlationID":"string",

         "timestamp":"2019-08-26T00:00:00.000+0000"

      }

   }

}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineAllowableShippingCarriersAndMethods" path="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" id="00ffd881-6db1-49f9-bd82-513f7f14673c"><con:settings/><con:parameters/><con:method name="DetermineAllowableShippingCarriersAndMethods" id="5f264a7b-0372-42d4-b7b3-4ceb08c66164" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:lqec="http://lqec5009c1ods01/">lqec:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:lqec="http://lqec5009c1ods01/">lqec:Fault</con:element></con:representation><con:request name="DetermineAllowableShippingCarriersAndMethods" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>
{

   "allowableShippingRequest":{

      "poBox":false,

      "physicalAddress":false,

      "hazmat":false,

      "proofOfDelivery":false,

      "addressOutsideContiguousStates":false,

      "uspsPreferred":false,

      "shippingCarriers":[

         {

            "code":"5",

            "shippingMethods":[

               {

                  "methodCode":"GRND",

                  "transitTimeInDays":3

               },

               {

                  "methodCode":"NDAR",

                  "transitTimeInDays":4

               },

               {

                  "methodCode":"NDSY",

                  "transitTimeInDays":4

               }

            ],

            "recommendedCarrierRank":6,

            "regionalCarrier":false

         },

         {

            "code":"4",

            "shippingMethods":[

               {

                  "methodCode":"NDAM",

                  "transitTimeInDays":3

               },

               {

                  "methodCode":"NDAR",

                  "transitTimeInDays":2

               },

               {

                  "methodCode":"GRND",

                  "transitTimeInDays":4

               }

            ],

            "recommendedCarrierRank":4,

            "regionalCarrier":false

         },

         {

            "code":"6",

            "shippingMethods":[

               {

                  "methodCode":"GRND",

                  "transitTimeInDays":5

               },

               {

                  "methodCode":"SDAR",

                  "transitTimeInDays":5

               }

            ],

            "recommendedCarrierRank":2,

            "regionalCarrier":false

         },

         {

            "code":"3",

            "shippingMethods":[

               {

                  "methodCode":"GRND",

                  "transitTimeInDays":5

               },

               {

                  "methodCode":"STRE",

                  "transitTimeInDays":5

               }

            ],

            "recommendedCarrierRank":7,

            "regionalCarrier":false

         }

      ]

   },

   "e2eMetadata":{

      "serviceAddressing":{

         "from":"PCF",

         "callingFunction":"string",

         "correlationID":"string",

         "timestamp":"2020-02-21T18:12:28.000+0530"

      }

   }

}</con:request><con:originalUri>http://lqec5009c1ods01/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineInsuranceVerificationFields" path="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" id="e0d1fb79-3059-4423-b8e9-7cf77218da40"><con:settings/><con:parameters/><con:method name="DetermineInsuranceVerificationFields" id="e06e089a-31ad-432f-bc8c-bbf9e6d81b3b" method="POST"><con:settings/><con:parameters/><con:request name="DetermineInsuranceVerificationFields_LineItems" id="c68db7a1-9c35-4880-b24d-c2a800d69b6e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{

	"lineItems": [

		{

			"lineItemID": "0001",

			"productCategory": "Breast Pumps",

			"productSubCategory1": "Breast Pumpss",

			"productSubCategory2": "Breast Pump Unit",

			"productSubCategory3": "Breast Pump Accessories",

			"dateOfService": "2018-01-01T22:07:00.000+0000",

			"payers": [

				{

					"id": "4F586843484E1E0BE0532C97F4A12082",

					"planName": "B208",

					"financialResponsiblePayer": true

				}
			]

		},


		{

			"lineItemID": "0001",

			"productCategory": "Breast Pumps",

			"productSubCategory1": "Breast Pumpss",

			"productSubCategory2": "Breast Pump Unit",

			"productSubCategory3": "Breast Pump Accessories",

			"dateOfService": "2018-01-01T22:07:00.000+0000",

			"payers": [

				{

					"id": "4F586843484E1E0BE0532C97F4A12082",

					"planName": "B208",

					"financialResponsiblePayer": true

				}

			]
		}

	],

	"e2eMetadata": {

		"serviceAddressing": {

			"from": "string",

			"callingFunction": "string",

			"correlationID": "string",

			"timestamp": "2019-08-26T00:00:00.000+0000"

		}

	},

	"__DecisionID__": "string"

}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="DetermineInsuranceVerificationFields_Payerlist" id="5c5114b4-7b03-4021-994a-e9912d86d051" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
  "payers": [
    {
      "id": "4F586843484E1E0BE0532C97F4A12082",
      "planName": "B208",
      "financialResponsiblePayer":true
    },
    {
      "id": "4F586843484E1E0BE0532C97F4A12081",
      "planName": "B208",
      "financialResponsiblePayer":true
    }
  ],
  "e2eMetadata": {
    "serviceAddressing": {
      "from": "string",
      "callingFunction": "string",
      "correlationID": "string",
      "timestamp": "2019-08-26T00:00:00.000+0000"
    }
  },
  "__DecisionID__": "string"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineStaticProperties" path="/DecisionService/rest/v1/DetermineStaticProperties/DetermineStaticProperties/WADL" id="1fd0c3d6-4d91-4e94-9593-3c7f790c26b3"><con:settings/><con:parameters/><con:method name="DetermineStaticProperties" id="c378036e-1967-4f4b-9c3e-2e2ce1fcb114" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:wadl="http://lqec5009c1ods01/DecisionService/rest/v1/DetermineStaticProperties/DetermineStaticProperties/WADL">wadl:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="DetermineStaticProperties" id="3d75bfb7-e255-4131-b021-8fb03b1fd56d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>    {
  "staticPropertyKeys": ["eligiblityWindowToConsolidateCommunication","declineReorderCommunicationDateFutureDays","eligibliltyWindowToAddToCartAndCommunicate"],
  "__DecisionID__": "string",
  "e2eMetadata": {
    "serviceAddressing": {
      "from": "string",
      "callingFunction": "string",
      "correlationID": "string",
      "timestamp": "2008-09-29T07:19:45.000+0530"
    },
    "serviceParameters": {
      "accountId": "string",
      "agentId": "string",
      "orderId": "string",
      "serviceTags": [
        "string"
      ]
    },
    "serviceState": {
      "stateCode": "string",
      "errorCode": "string",
      "errorText": "string",
      "errorTrace": "string"
    }
  }
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineBillingIndicator" path="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" id="c8805660-f301-42bd-8a9c-184696dae9b1"><con:settings/><con:parameters/><con:method name="DetermineBillingIndicator" id="b8a8ec4e-baf3-45d0-8f6e-b37583aa6976" method="POST"><con:settings/><con:parameters/><con:request name="DetermineBillingIndicator" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
  "lineItems": [
    	{
      "lineItemID": "0001",
      "hcpcsCode": "K0553",
      "itemNumber": "",
      "extendedUnits": 30,
      "payers": [
        {
          "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
          "planName": "B127",
          "assignedOrder": "Primary"		
        }
      ]
    }
  ],
  "e2eMetadata": {
    "serviceAddressing": {
      "from": "PCF",
      "callingFunction": "",
      "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
      "timestamp": ""
    }
  },
  "__DecisionID__": ""
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineShippingPriceForShippingMethod" path="/DecisionService/rest/v1/DetermineShippingPriceForShippingMethod/DetermineShippingPriceForShippingMethod/WADL" id="0347b7d9-2cb4-4640-a79f-4999a2ff7cda"><con:settings/><con:parameters/><con:method name="DetermineShippingPriceForShippingMethod" id="b0b592f9-2b96-4c48-b8e6-d4ea1a105421" method="POST"><con:settings/><con:parameters/><con:request name="DetermineShippingPriceForShippingMethod" id="c960d397-b5ca-4b90-b4a5-b38d03215324" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
  "shippingMethods": [
    {
      "methodCode": "NDAM"
    }
  ],
  "e2eMetadata": {
        "serviceAddressing": {
            "from": "string",
            "callingFunction": "string",
            "correlationID": "C123",
            "timestamp": "2020-02-24T04:48:33.000+0530"
        }
    },
    "__DecisionID__": "string"
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineWeeklyBillingAndCycleDays" path="/DecisionService/rest/v1/DetermineWeeklyBillingAndCycleDays/DetermineWeeklyBillingAndCycleDays/WADL" id="c395faa1-139f-413a-b2d1-5578d1c3f771"><con:settings/><con:parameters/><con:method name="DetermineWeeklyBillingAndCycleDays" id="4744e243-801f-4502-8d89-b7cb0d16c789" method="POST"><con:settings/><con:parameters/><con:request name="DetermineWeeklyBillingAndCycleDays" id="c59f134d-a8dc-4e36-8056-e04400f8413f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request> {

  "lineItems": [

    {

      "lineItemID": "L001",

      "hcpcsCode": "A4224"

    }

  ],

  "e2eMetadata": {

    "serviceAddressing": {

      "from": "string",

      "callingFunction": "string",

      "correlationID": "string",

      "timestamp": "2019-08-26T00:00:00.000+0000"

    }

   

  }

}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineIfPPSQuestionsRequired" path="/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL" id="c21de8d9-bddf-4b7e-b897-871a5ccc76b4"><con:settings/><con:parameters/><con:method name="DetermineIfPPSQuestionsRequired" id="35e6e4f4-139e-46aa-939e-84303b3477e6" method="POST"><con:settings/><con:parameters/><con:request name="DetermineIfPPSQuestionsRequired" id="a9c70a88-bd3b-4e9b-a088-5490f94bf8fd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
  "order": {
    "source": "NON ELECTRONIC"
  },
  "payers": [
    {
         
      "planName": "9907"
    },
    {
      "planName": "B135"
    }
  ],
  "e2eMetadata": {
    "serviceAddressing": {
      "from": "PCF",
      "callingFunction": null,
      "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
      "timestamp": "2019-08-26T00:00:00.000+0000"
    }
  }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineIfProductSpecificQuestionsRequired" path="/DecisionService/rest/v1/DetermineIfProductSpecificQuestionsRequired/DetermineIfProductSpecificQuestionsRequired/WADL" id="330c1361-7c45-442f-9b29-be70d7c943b4"><con:settings/><con:parameters/><con:method name="DetermineIfProductSpecificQuestionsRequired" id="c248357d-1adc-4fdc-ac3d-3c28ba9ad758" method="POST"><con:settings/><con:parameters/><con:request name="DetermineIfProductSpecificQuestionsRequired" id="104e931b-8390-4966-b475-06729f46a675" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "order": {
        "lineItems": [{
            "lineItemID": "L0008",
            "diagnosis": [{
                "codeICD10": "E11"
            }],
            "payers": [{
                "id": "09GJKJI56FHGJ787UU9897834",
                "name": "998785",
                "plan": "4",
                "planName": "B865",
                "payerForEvaluation": true,
                "requiresReceiverDeliveryQuestion": true
            }],
            "productCategory": "Diabetes",
            "productSubCategory1": "Diabetes Testing Supplies",
            "productSubCategory2": "Continuous Glucose Monitors",
            "productSubCategory3": "CGM Sensors",
            "hcpcsCode": "A4253",
            "zeroDollarItem": false
        }]
    },
    "dateLastSeenByPhysician": "2019-01-29T07:19:45.000+0530",
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "from": "string",
            "callingFunction": "string",
            "correlationID": "string",
            "timestamp": "2014-09-19T04:48:33.000+0530"
        }
    }
}








</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineAskDaysSupplyOnHand" path="/DecisionService/rest/v1/DetermineAskDaysSupplyOnHand/DetermineAskDaysSupplyOnHand/WADL" id="5c6d970b-6251-4d9c-9ced-1e34356c845d"><con:settings/><con:parameters/><con:method name="DetermineAskDaysSupplyOnHand" id="02c9c7ef-3bb9-44cb-bf90-3f8445238b33" method="POST"><con:settings/><con:parameters/><con:request name="DetermineAskDaysSupplyOnHand" id="27d9ee80-9d44-4ba0-83e7-6761f397aa0d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
	"lineItems": [{
			"lineItemID": "0001",
			"hcpcsCode": "K0553",
			"lineItemCode": "MNMMT523NAL",
			"payers": [{
				"id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
				"planName": "A1234"
			}]
		},
		{
			"lineItemID": "0001",
			"hcpcsCode": "K0553",
			"lineItemCode": "MNMMT523NAL",
			"payers": [{
				"id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
				"planName": "A1234"
			}]
		}
	],
	"__DecisionID__": "string",
	"e2eMetadata": {
		"serviceAddressing": {
			"from": "PCF",
			"callingFunction": "ABC",
			"correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
			"timestamp": "2019-08-26T00:00:00.000+0000"
		}
	}
}


</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineDaysSupplyOnHand" path="/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL" id="a031dd95-5bf6-4ddb-a160-004727a11140"><con:settings/><con:parameters/><con:method name="DetermineDaysSupplyOnHand" id="81dede7c-ff49-4be5-bd0d-9f2cc45a8857" method="POST"><con:settings/><con:parameters/><con:request name="DetermineDaysSupplyOnHand" id="057deaed-30b2-4af0-8462-9ff14abcf13a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "order": {
        "nextEligibleShipDate": "2019-10-14",
        "lineItems": [
            {
                "lineItemID": "L0001",
                "daysSupplyOnHand" : "15"
            },
            {
                "lineItemID": "L0002",
                "daysSupplyOnHand" : "9"
            },
            {
                "lineItemID": "L0003",
                "daysSupplyOnHand" : "16"
            }
        ]
    },
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "from": "string",
            "callingFunction": "string",
            "correlationID": "string",
            "timestamp": "2020-01-19T04:48:33.000+0530"
        }
    }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineAncillaryLimitsForBundles" path="/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL" id="ecb58ef7-e8d3-4052-b05f-5e4c8deff1fc"><con:settings/><con:parameters/><con:method name="DetermineAncillaryLimitsForBundles" id="86541b0a-3adf-4054-a739-68801ef11fbe" method="POST"><con:settings/><con:parameters/><con:request name="DetermineAncillaryLimitsForBundles" id="c14f5186-5a8e-4940-9d5b-d6e7be45c5e7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
  "lineItems": [
    {"hcpcsCode": "A4233",
            "lineItemID": "L004"
    },
    {"hcpcsCode": "A4247",
            "lineItemID": "L001"
    }
  ],
  "__DecisionID__": "string",
  "e2eMetadata": {
    "serviceAddressing": {
      "from": "string",
      "callingFunction": "string",
      "correlationID": "string",
      "timestamp": "2008-09-29T07:19:45.000+0530"
    },
    "serviceParameters": {
      "accountId": "string",
      "agentId": "string",
      "orderId": "string",
      "serviceTags": [
        "string"
      ]
    },
    "serviceState": {
      "stateCode": "string",
      "errorCode": "string",
      "errorText": "string",
      "errorTrace": "string"
    }
  }
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineGracePeriodForLimits" path="/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL" id="f2cf2d8d-78b1-4756-9d7b-7aaecf1a4dba"><con:settings/><con:parameters/><con:method name="DetermineGracePeriodForLimits" id="cbb774f7-fb6a-4e90-b368-bc085c57ee63" method="POST"><con:settings/><con:parameters/><con:request name="DetermineGracePeriodForLimits" id="0c2d6fd7-c0d9-4994-a5ed-f34ac43bd6dd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
            "lineItems": [{
                                    "lineItemID": "L001",
                                    "hcpcsCode": "A1234",
                                    "itemNumber": "string",
                                    "payers": [{
                                                "planName": "A001"
                                    }]
                        },
                        {
                                    "lineItemID": "L002",
                                    "hcpcsCode": "A2222",
                                    "itemNumber": "string",
                                    "payers": [{
                                                "planName": "A004"
                                    }]
                        }
            ],
            "e2eMetadata": {
                        "serviceAddressing": {
                                    "from": "string",
                                    "callingFunction": "string",
                                    "correlationID": "string",
                                    "timestamp": "2019-08-26T00:00:00.000+0000"
                        }
            },
            "__DecisionID__": "string"
}

</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DeterminePhysicianSpecialtyAndPrimaryCareRequired" path="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" id="98b344a1-9374-4d4b-951c-04963849b81c"><con:settings/><con:parameters/><con:method name="DeterminePhysicianSpecialtyAndPrimaryCareRequired" id="e733db93-a719-4a34-9f04-20fb116a34f4" method="POST"><con:settings/><con:parameters/><con:request name="DeterminePhysicianSpecialtyAndPrimaryCareRequired" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "lineItems": [{
        "lineItemID": "L001",
        "productCategory": "Continuous Glucose MonitorsDiabetes",
        "payers": [{
            "id": "513942563DD75A34E0532C97F4A150EF",
            "planName": "A627"
        }],
        "physician": {
            "physicianID": "P0001",
            "taxonomyCode": "TBD",
            "specialityCode": "TBD",
            "primaryCarePhysician": false
        }
    }],
    "e2eMetadata": {
        "serviceAddressing": {
            "from": "string",
            "callingFunction": "string",
            "correlationID": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "__DecisionID__": "string"
}

</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DeterminePrimaryWarehouse" path="/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL" id="30da7501-241b-4680-83be-9017903bb86c"><con:settings/><con:parameters/><con:method name="DeterminePrimaryWarehouse" id="4609facc-c560-4710-a1ed-a134a0a14806" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:wadl="http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL">wadl:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="DeterminePrimaryWarehouse" id="865e51e3-92d4-44ad-a94a-656216ff1d6b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "Case4_MultiLine",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "dpw",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "order": {
        "acceptableShipFromWarehouses": null,
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                       "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "MMNT123",
                "lineItemID": "L001",
                "requiresPharmacyDispensing": "false"
            }
        ],
        "orderId": "1",
        "recommendedCarrier": "6",
        "recommendedShippingMethod": ""
    }
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineOrderProcessingTime" path="/DecisionService/rest/v1/DetermineOrderProcessingTime/DetermineOrderProcessingTime/WADL" id="1592a315-39b8-4a23-be7b-bc59199e9304"><con:settings/><con:parameters/><con:method name="DetermineOrderProcessingTime" id="91f9c26a-02f8-4b4d-9e12-31c3c210e3d2" method="POST"><con:settings/><con:parameters/><con:request name="DetermineOrderProcessingTime" id="bf726038-cf60-4e66-ad92-467409395dd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>Determine Order Processing Time

{
  "e2eMetadata": {
    "serviceAddressing": {
      "from": "string",
      "callingFunction": "string",
      "correlationID": "string",
      "timestamp": "2019-08-26T00:00:00.000+0000"
    }
  }
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineUsageLimits" path="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" id="897246fb-0fe8-49a7-bb19-457ae1bf14b3"><con:settings/><con:parameters/><con:method name="DetermineUsageLimits" id="297e210d-d145-45a3-be36-5c257b0a21e6" method="POST"><con:settings/><con:parameters/><con:request name="DetermineUsageLimits" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
	"__DecisionID__": "string",
	"lineItems": [{
			"lineItemID": "",
			"hcpcsCode": "A508312",
                        "diagnosis": [{
				"codeICD10": "Z79.4"
			}],
			"payers": [{
				"planName": "B861"
			}]
		},
		{
			"lineItemID": "L002",
			"hcpcsCode": "A5102",
                        "diagnosis": [{
				"codeICD10": "Z79.4"
			}],
			"payers": [{
				"planName": "B861"
			}]
		},
		
		{
			"lineItemID": "L003",
			"hcpcsCode": "A332",
			"diagnosis": [{
				"codeICD10": "Z79.4"
			}],
			"payers": [{
				"planName": "A698"
			},
			{
				"planName": "B861"
			}
			]
		}
	],
	"e2eMetadata": {
		"serviceAddressing": {
			"from": "string",
			"callingFunction": "string",
			"correlationID": "string",
			"timestamp": "2008-09-28T21:49:45.000-0400"
		},
		"serviceParameters": {
			"accountId": "string",
			"agentId": "string",
			"orderId": "string",
			"serviceTags": [
				"string"
			]
		},
		"serviceState": {
			"stateCode": "string",
			"errorCode": "string",
			"errorText": "string",
			"errorTrace": "string"
		}
	}

}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineDateSpanRequiredAndCalculation" path="/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL" id="3519a129-5af7-4953-85dd-97e5c040d099"><con:settings/><con:parameters/><con:method name="DetermineDateSpanRequiredAndCalculation" id="e0b042ab-d8a9-4c6d-af84-757fd298aa6f" method="POST"><con:settings/><con:parameters/><con:request name="DetermineDateSpanRequiredAndCalculation" id="98f9ed3b-f333-4780-b375-bae44bdfa0a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
	"lineItems": [{
			"hcpcsCode": "A9278",
			"lineItemID": "0001",
			"supplyPeriod": "2",
			"extendedUnits": "2",
			"unitsOfThePrescribedQuantity": "",
			"prescribedQuantityDays": "",
			"expectedShipDate": "",
			"actualShipDate": "",
			"payers": [{
				"id": "PA001",
				"planName": "B187"
			}]
		},
		{
			"hcpcsCode": "A9276",
			"lineItemID": "0002",
			"supplyPeriod": "1",
			"extendedUnits": "1",
			"unitsOfThePrescribedQuantity": "1",
			"prescribedQuantityDays": "1",
			"expectedShipDate": "",
			"actualShipDate":"2020-02-04T00:00:00.000+0000",
			"payers": [{
				"id": "9e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
				"planName": "B187"
			}]
		}

	],
	"__DecisionID__": "string",
	"e2eMetadata": {
		"serviceAddressing": {
			"from": "PCF",
			"callingFunction": "ABC",
			"correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
			"timestamp": "2019-08-26T00:00:00.000+0000"
		}
	}
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineSampleLimits" path="/DecisionService/rest/v1/DetermineSampleLimits/DetermineSampleLimits/WADL" id="43ec1f37-8756-4f85-99a6-524e4e67e92e"><con:settings/><con:parameters/><con:method name="DetermineSampleLimits" id="7c48ae6c-da01-4836-a6fd-9cb3d6baaa70" method="POST"><con:settings/><con:parameters/><con:request name="DetermineSampleLimits" id="bd7c84ea-b130-4f8c-805d-b5d4e9aa42db" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "lineItems": [{
            "itemNumber": "S958320149",
            "lineItemID": "L001"
        },
        {
            "itemNumber": "Item1234",
            "lineItemID": "L002"
        }
    ],
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "from": "string",
            "callingFunction": "string",
            "correlationID": "123",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        }
    }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineTradeInEligibilityAndAmount" path="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" id="41eca028-f4fa-4fa5-bb02-b277ee310fed"><con:settings/><con:parameters/><con:method name="DetermineTradeInEligibilityAndAmount" id="fbfe019f-40b6-4e67-bad5-6082c6cc4e7a" method="POST"><con:settings/><con:parameters/><con:request name="DetermineTradeInEligibilityAndAmount" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "MINIMED DISTRIBUTION CENT",
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "09gJKJI56FHGJ787UU9897834",
                    "planName": ""
                }
            ],
            "tradingInItemManufacturersCode": ""
        },
        {
            "currentItemManufacturersCode": "TANDEM DIABETES CARE",
            "hcpcsCode": "E0784",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planName": ""
                }
            ],
            "tradingInItemManufacturersCode": ""
        }
    ]
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DeterminePharmacyReviewAndDispensing" path="/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL" id="96454152-21d8-4d10-9829-39d2a28f773d"><con:settings/><con:parameters/><con:method name="DeterminePharmacyReviewAndDispensing" id="2ded5e62-0871-4abd-8022-589aca02f921" method="POST"><con:settings/><con:parameters/><con:request name="DeterminePharmacyReviewAndDispensing" id="19932dd2-d0ee-416a-9424-22c6c1f59735" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{

"lineItems": [{

"lineItemID": "L001",

"hcpcsCode": "A4657",

"itemNumber": "MN01234"

},

{

"lineItemID": "L002",

"hcpcsCode": "A4123",

"itemNumber": "PSKU01234"

}

],

"shipToAddress": {

"state": "OH"

},

"e2eMetadata": {

"serviceAddressing": {

"from": "string",

"callingFunction": "string",

"correlationID": "string",

"timestamp": "2019-08-26T00:00:00.000+0000"

}

 

}

}

 </con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineMaxSupplyPeriodOverride" path="/DecisionService/rest/v1/DetermineMaxSupplyPeriodOverride/DetermineMaxSupplyPeriodOverride/WADL" id="b90acfbd-3e03-4faa-b9a7-7fbfd37f8621"><con:settings/><con:parameters/><con:method name="DetermineMaxSupplyPeriodOverride" id="a10b58c7-9c69-4d99-92dd-fdce2cd99c28" method="POST"><con:settings/><con:parameters/><con:request name="DetermineMaxSupplyPeriodOverride" id="9b4d9470-c5c8-4191-9ab3-79df023e9fb4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
  "lineItems": [
    {
      "lineItemID": "L0001",
      "itemNumber": "111",
      "payers": [
        {
          "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
          "planName": "A1234"
        }
      ]
    },
    {
      "lineItemID": "L0002",
      "itemNumber": "222",
      "payers": [
        {
          "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
          "planName": "A12345"
        }
      ]
    }
  ],
  "__DecisionID__": "string",
  "e2eMetadata": {
    "serviceAddressing": {
      "from": "PCF",
      "callingFunction": "ABC",
      "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
      "timestamp": "2019-08-26T00:00:00.000+0000"
    }
  }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DeterminePricingModifiers" path="/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL" id="74598e73-5146-4e06-9acf-e61792110f7c"><con:settings/><con:parameters/><con:method name="DeterminePricingModifiers" id="01302bb4-d67c-482e-9ea2-f073f9461587" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:wadl="http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL">wadl:Response</con:element></con:representation><con:request name="DeterminePricingModifiers_SingleLineItem" id="33305737-ae27-4eec-a824-479acf5066a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4211",
            "itemNumber": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "2494"
                }
            ]
        }
    ]
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="DeterminePricingModifiers_MultiLineItem" id="9cb69abc-717e-42de-b6d1-edba96a381c4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "INVALID",
            "itemNumber": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA012",
                    "planName": "INVALID"
                }
            ]
        },
        {
            "hcpcsCode": "null",
            "itemNumber": "null",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PA013",
                    "planName": "null"
                }
            ]
        }
    ]
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="DeterminePricingModifiers_MultiPayers" id="cfb879b9-22d7-4a84-bb71-5338a4fefd24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "K0554",
            "itemNumber": "EDSTKOM001",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA008",
                    "planName": "INVALID"
                },
                {
                    "id": "PA009",
                    "planName": "5003"
                }
            ]
        }
    ]
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineMultiEntityResponsibility" path="/DecisionService/rest/v1/DetermineMultiEntityResponsibility/DetermineMultiEntityResponsibility/WADL" id="576774fe-8e31-41ed-af7c-01dcddcb4635"><con:settings/><con:parameters/><con:method name="DetermineMultiEntityResponsibility" id="d97cd0db-5345-47bf-8d36-89d608373c98" method="POST"><con:settings/><con:parameters/><con:request name="DetermineMultiEntityResponsibility" id="89705616-5f22-4d95-a1b9-766b35e346e4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string ",
    "e2eMetadata": {
       "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "entity": "ANY",
    "entityType": "BlueCard",
    "medGroupAtRisk": "",
    "plan": "0098",
    "planContractStatus": "false"
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineDefaultBenefitMapping" path="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" id="4a2006f0-e84f-4bf3-9619-cc5c558affd9"><con:settings/><con:parameters/><con:method name="DetermineDefaultBenefitMapping" id="1115c9c4-4683-44d1-bd57-164366b7c86b" method="POST"><con:settings/><con:parameters/><con:request name="DetermineDefaultBenefitMapping" id="90a5f7de-610a-4b1d-acf7-afe7d4d1d7bf" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "lineItems": [
        {
            "lineItemID": "0001",
            "hcpcsCode": "A1234",
            "productCategory": "string",
            "productSubCategory1": "string",
            "productSubCategory2": "string",
            "productSubCategory3": "string",
            "payers": [
                {
                    "id": "1F586843484E1E0BE0532C97F4A12089",
                    "planName": "B189",
                    "groupID": "string",
                    "name": "2402",
                    "type": "1",
                    "prefix": "string"
                }
            ],
            "diagnosis":[
                {
                    "codeICD10": "E11.1"
                }
            ]          
        }
    ],
  "e2eMetadata": {
    "serviceAddressing": {
      "from": "string",
      "callingFunction": "string",
      "correlationID": "string",
      "timestamp": "2019-08-26T00:00:00.000+0000"
    }
  },
  "__DecisionID__": "string"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineServiceCode" path="/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL" id="ec4ed3e0-8e61-4353-a31d-bc9aee50674d"><con:settings/><con:parameters/><con:method name="DetermineServiceCode" id="baffb377-90e6-458d-8194-b34198cae0e6" method="POST"><con:settings/><con:parameters/><con:request name="DetermineServiceCode" id="a773d023-0f76-46ab-8c1a-d2b425976773" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineLevelOfInsuranceVerification" path="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" id="2797e025-3b4c-40bc-b793-a9237b6a5f8e"><con:settings/><con:parameters/><con:method name="DetermineLevelOfInsuranceVerification" id="cd6035fd-fc12-4c2d-b3f8-48febdc88641" method="POST"><con:settings/><con:parameters/><con:request name="DetermineLevelOfInsuranceVerification_SingleLineItem" id="f21a31ab-9a7a-4ad0-a442-5d388b931718" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA18",
                    "planName": "B187"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "Insulin Delivery",
            "productSubCategory2": "Insulin Pumps",
            "productSubCategory3": "INVALID",
            "productSubCategory4": ""
        }
    ]
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="DetermineLevelOfInsuranceVerification_MultiLineItem" id="230b0a26-40b4-42d0-bffe-283b143b4684" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
                "lineItems": [{
                                                "lineItemID": "string",
                                                "hcpcsCode": "string",
                                                "productCategory": "string",
                                                "productSubCategory1": "string",
                                                "productSubCategory2": "string",
                                                "productSubCategory3": "string",
                                                "productSubCategory4": "string",
                                                "payers": [{
                                                                "planName": "A007",
                                                                "id": "string"
                                                }]
                                },
                                {
                                                "lineItemID": "string",
                                                "hcpcsCode": "string",
                                                "productCategory": "string",
                                                "productSubCategory1": "string",
                                                "productSubCategory2": "string",
                                                "productSubCategory3": "string",
                                                "productSubCategory4": "string",
                                                "payers": [{
                                                                "planName": "A006",
                                                                "id": "string"
                                                }]
                                }
                ],
                "e2eMetadata": {
                                "serviceAddressing": {
                                                "from": "string",
                                                "callingFunction": "string",
                                                "correlationID": "string",
                                                "timestamp": "2019-08-26T00:00:00.000+0000"
                                }
                },
                "__DecisionID__": "string"
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="DetermineLevelOfInsuranceVerification_MultiPayers" id="11e09e25-04de-4d5a-ba83-ae1cf4da6504" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
                "lineItems": [{
                                                "lineItemID": "string",
                                                "hcpcsCode": "string",
                                                "productCategory": "string",
                                                "productSubCategory1": "string",
                                                "productSubCategory2": "string",
                                                "productSubCategory3": "string",
                                                "productSubCategory4": "string",
                                                "payers": [{
                                                                                "planName": "A007",
                                                                                "id": "string"
                                                                },
                                                                {
                                                                                "planName": "A007",
                                                                                "id": "string"
                                                                }
                                                ]
                                }

                ],
                "e2eMetadata": {
                                "serviceAddressing": {
                                                "from": "string",
                                                "callingFunction": "string",
                                                "correlationID": "string",
                                                "timestamp": "2019-08-26T00:00:00.000+0000"
                                }
                },
                "__DecisionID__": "string"
}

</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineBaseItemHcpcsCodes" path="/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL" id="919f73fd-26f5-4cdb-bbb1-bd02753fdf4c"><con:settings/><con:parameters/><con:method name="DetermineBaseItemHcpcsCodes" id="bb9d1058-3132-41f0-a7e6-ab95647f7499" method="POST"><con:settings/><con:parameters/><con:request name="DetermineBaseItemHcpcsCodes" id="1cdca625-9abb-476f-8d86-0115a4887e4d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
	"__DecisionID__": "dbe9b0d7-4ac9-425f-888d-352d2f4867180",

	"lineItems": [{
		"lineItemID": "12345",
		"payers": [{
				"id": "WSFDT FBYGINUJN",
				"name": "FV^T*^HT(&amp;YHN",
				"plan": "",
				"planName": "Multipayerid1",
				"type": "4"
			},
			{
				"id": "12345",
				"name": "1234567",
				"plan": "",
				"planName": "12345678",
				"type": "4"
			}
		],
		"productCategory": "",
		"productSubCategory3": "CGM Transmitters"
	}],
	"e2eMetadata": {
		"serviceAddressing": {
			"from": "PCF",
			"callingFunction": "bundles/DetermineBaseItemHcpcsCodes",
			"correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
			"timestamp": "2019-08-26T00:00:00.000+0000"
		}
	}
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineBackOrderReprocessing" path="/DecisionService/rest/v1/DetermineBackOrderReprocessing/DetermineBackOrderReprocessing/WADL" id="cf992aca-22a6-4d3d-84c1-add009f855de"><con:settings/><con:parameters/><con:method name="DetermineBackOrderReprocessing" id="29c43408-fb23-4c59-a691-8ae53347ab23" method="POST"><con:settings/><con:parameters/><con:request name="DetermineBackOrderReprocessing" id="7e96302b-89ce-4c6d-bf3f-7bdd204335d4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
  "__DecisionID__": "string",
  "e2eMetadata": {
    "serviceAddressing": {
      "from": "PCF",
      "callingFunction": "ABC",
      "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
      "timestamp": "2019-08-26T00:00:00.000+0000"
    }
  }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DetermineServiceCode" path="/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL" id="b299d13d-b48c-4256-8bd8-6129021606cf"><con:settings/><con:parameters/><con:method name="DetermineServiceCode" id="39388852-faa8-49fd-b323-4f5258870c8c" method="POST"><con:settings/><con:parameters/><con:request name="DetermineServiceCode" id="f5cd1bbf-4b80-4542-abc2-3a326ebe8c35" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-09-19T04:48:33.000+0530"
        }
    },
    "payers": [
        {
            "id": "PA017",
            "planName": "A004"
        },
        {
            "id": "PA018",
            "planName": "A006"
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="922fc6ea-2a65-46e3-9161-d86c0705663d" name="ValidateEligibleDiagnosis"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="628e96c1-0816-47a7-b9e3-d0ed73739b32" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ValidateEligibleDiagnosis" searchProperties="true"><con:settings/><con:testStep type="groovy" name="ValidateEligibleDiagnosis_SingleLineItem" id="0ca2d20f-7846-43b6-babd-6828c3f64c50"><con:settings/><con:config><script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis_Input.xls"
def outputfile = projectDir + "/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis_SingleLineItem_Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("SingleLineItem")
Sheet jsonInput = wb.getSheet("JSON-SingleLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"hcpcsCode",sheet1);
addCell(1,0,"lineItemID",sheet1);
addCell(2,0,"id",sheet1);
addCell(3,0,"planName",sheet1);
addCell(4,0,"DiagnosisCode 1",sheet1);
addCell(5,0,"DiagnosisCode 2",sheet1);
addCell(6,0,"DiagnosisCode 3",sheet1);
addCell(7,0,"diagnosisEligible",sheet1);
addCell(8,0,"PASS/FAIL",sheet1);
addCell(9,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=3;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                 //Input for Line Item ID                                                                                        
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents().toString()
                                 //Input for hcpcsCode                                   
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents().toString()
                                //Input for id                                  
                                requestTemplet.content.lineItems[0].payers[0].id = sh.getCell(3,i).getContents().toString()
                                //Input for planName                                  
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(4,i).getContents().toString() 
                                //Input for diagnosis  						
                                requestTemplet.content.diagnosis[0].codeICD10 = sh.getCell(5,i).getContents().toString()
                                requestTemplet.content.diagnosis[1].codeICD10 = sh.getCell(6,i).getContents().toString()                                                                                                         
                               requestTemplet.content.diagnosis[2].codeICD10 = sh.getCell(7,i).getContents().toString()                                                  
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                          // get hcpcsCode from response json                               
                        addCell(0,i,json.lineItems[0].hcpcsCode.toString(),sheet1);   
                        // get lineItemID from response json  
                        addCell(1,i,json.lineItems[0].lineItemID.toString(),sheet1); 
                        // get id from response json                                   
                        addCell(2,i,json.lineItems[0].payers[0].id.toString(),sheet1);
                        // get planName from response json                                   
                        addCell(3,i,json.lineItems[0].payers[0].planName.toString(),sheet1); 
                        // get diagnosis from response json   
                        
                        /*if(json.containsKey("diagnosis[0]")){
                       		addCell(4,i,json.lineItems[0].diagnosis[0].codeICD10.toString(),sheet1); }
                        if(json.containsKey("diagnosis[1]") )   {           
                      		addCell(5,i,json.lineItems[0].diagnosis[1].codeICD10.toString(),sheet1);    }                  
                        if(json.containsKey("diagnosis[2]")){
                       		addCell(6,i,json.lineItems[0].diagnosis[2].codeICD10.toString(),sheet1);  }                      */
                       		int cel=4;
                        for(int arrDiag=0; arrDiag<json.lineItems[0].diagnosis.size(); arrDiag++)
                        {
                        		addCell(cel,i,json.lineItems[0].diagnosis[arrDiag].codeICD10.toString(),sheet1); 
                        		cel=cel+1;
                        }

                        //get diagnosisEligible from response json                               
                        addCell(7,i,json.lineItems[0].diagnosisEligible.toString(),sheet1);                                               
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                        hcpcsCode = sh.getCell(8,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,hcpcsCode,"lineItems[0].hcpcsCode","hcpcsCode")
                       
                       lineItemID = sh.getCell(9,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"lineItems[0].lineItemID","lineItemID")

                       id = sh.getCell(10,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,id,"lineItems[0].payers[0].id","id")

                        planName = sh.getCell(11,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,planName,"lineItems[0].payers[0].planName","planName")

					//console.log("`lineItems[0].diagnosis[0].codeICD10` exists"); 
				
					
					if(json.lineItems[0].diagnosis[0] && json.lineItems[0].diagnosis[0].codeICD10){
                       codeICD10 = sh.getCell(12,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,codeICD10,"lineItems[0].diagnosis[0].codeICD10","codeICD10")
					}
					if(json.lineItems[0].diagnosis[1] && json.lineItems[0].diagnosis[1].codeICD10){
                       codeICD10 = sh.getCell(13,i).getContents().toString()
                      addAssertionJsonPathMatch(testStepForAssertion,codeICD10,"lineItems[0].diagnosis[1].codeICD10","codeICD10")
					}
					if(json.lineItems[0].diagnosis[2] && json.lineItems[0].diagnosis[2].codeICD10){
                    codeICD10 = sh.getCell(14,i).getContents().toString()
                   addAssertionJsonPathMatch(testStepForAssertion,codeICD10,"lineItems[0].diagnosis[2].codeICD10","codeICD10")
					}
                       diagnosisEligible = sh.getCell(15,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,diagnosisEligible,"lineItems[0].diagnosisEligible","diagnosisEligible")

                       
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(8,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(9,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(8,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

       }             
     
catch(Exception e)
{

            log.info(e)                         
}

finally

{
    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}]]></script></con:config></con:testStep><con:testStep type="groovy" name="ValidateEligibleDiagnosis_MultiLineItem" id="81f498ee-d2a3-4822-a68f-9e74c28b4b48"><con:settings/><con:config><script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis_Input.xls"
def outputfile = projectDir + "/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis_MultiLineItem_Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("MultiLineItem")
Sheet jsonInput = wb.getSheet("JSON-MultiLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"hcpcsCode",sheet1);
addCell(1,0,"lineItemID",sheet1);
addCell(2,0,"id",sheet1);
addCell(3,0,"planName",sheet1);
addCell(4,0,"DiagnosisCode 1",sheet1);
addCell(5,0,"DiagnosisCode 2",sheet1);
addCell(6,0,"diagnosisEligible",sheet1);

addCell(7,0,"hcpcsCode",sheet1);
addCell(8,0,"lineItemID",sheet1);
addCell(9,0,"id",sheet1);
addCell(10,0,"planName",sheet1);
addCell(11,0,"DiagnosisCode 1",sheet1);
addCell(12,0,"DiagnosisCode 2",sheet1);
addCell(13,0,"diagnosisEligible",sheet1);

addCell(14,0,"PASS/FAIL",sheet1);
addCell(15,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

//try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=3;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                 //Input for Line Item ID 1                                                                                     
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents().toString()
                                 //Input for hcpcsCode                                   
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents().toString()
                                //Input for id                                  
                                requestTemplet.content.lineItems[0].payers[0].id = sh.getCell(3,i).getContents().toString()
                                //Input for planName                                  
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(4,i).getContents().toString()                                                                                                                                  
                                                                         

                                //Input for Line Item ID 2                                                                                     
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(5,i).getContents().toString()
                                 //Input for hcpcsCode                                   
                                requestTemplet.content.lineItems[1].hcpcsCode = sh.getCell(6,i).getContents().toString()
                                //Input for id                                  
                                requestTemplet.content.lineItems[1].payers[0].id = sh.getCell(7,i).getContents().toString()
                                //Input for planName                                  
                                requestTemplet.content.lineItems[1].payers[0].planName = sh.getCell(8,i).getContents().toString() 

                                 //Input for diagnosis  						
                                requestTemplet.content.diagnosis[0].codeICD10 = sh.getCell(9,i).getContents().toString()
                                requestTemplet.content.diagnosis[1].codeICD10 = sh.getCell(10,i).getContents().toString()  
                                
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                          // get hcpcsCode from response json                               
                        addCell(0,i,json.lineItems[0].hcpcsCode.toString(),sheet1);   
                        // get lineItemID from response json  
                        addCell(1,i,json.lineItems[0].lineItemID.toString(),sheet1); 
                        // get id from response json                                   
                        addCell(2,i,json.lineItems[0].payers[0].id.toString(),sheet1);
                        // get planName from response json                                   
                        addCell(3,i,json.lineItems[0].payers[0].planName.toString(),sheet1); 
					  // get diagnosis from response json    
                       	int cel=4;
                        for(int arrDiag=0; arrDiag<json.lineItems[0].diagnosis.size(); arrDiag++)
                        {
                        		addCell(cel,i,json.lineItems[0].diagnosis[arrDiag].codeICD10.toString(),sheet1); 
                        		cel=cel+1;
                        }
                        //get diagnosisEligible from response json                               
                        addCell(6,i,json.lineItems[0].diagnosisEligible.toString(),sheet1);  

                        
                        // get hcpcsCode from response json                               
                        addCell(7,i,json.lineItems[1].hcpcsCode.toString(),sheet1);   
                        // get lineItemID from response json  
                        addCell(8,i,json.lineItems[1].lineItemID.toString(),sheet1); 
                        // get id from response json                                   
                        addCell(9,i,json.lineItems[1].payers[0].id.toString(),sheet1);
                        // get planName from response json                                   
                        addCell(10,i,json.lineItems[1].payers[0].planName.toString(),sheet1); 

                          // get diagnosis from response json                         
                          int cel1=11;
                        for(int arrDiag=0; arrDiag<json.lineItems[1].diagnosis.size(); arrDiag++)
                        {
                        		addCell(cel1,i,json.lineItems[1].diagnosis[arrDiag].codeICD10.toString(),sheet1); 
                        		cel1=cel1+1;
                        }
                        //get diagnosisEligible from response json                               
                        addCell(13,i,json.lineItems[1].diagnosisEligible.toString(),sheet1);                                               
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values for Line item 1
                        hcpcsCode = sh.getCell(11,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,hcpcsCode,"lineItems[0].hcpcsCode","hcpcsCode")
                       
                       lineItemID = sh.getCell(12,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"lineItems[0].lineItemID","lineItemID")

                       id = sh.getCell(13,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,id,"lineItems[0].payers[0].id","id")

                        planName = sh.getCell(14,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,planName,"lineItems[0].payers[0].planName","planName")
					
					if(json.lineItems[0].diagnosis[0] && json.lineItems[0].diagnosis[0].codeICD10){
                       codeICD10 = sh.getCell(15,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,codeICD10,"lineItems[0].diagnosis[0].codeICD10","codeICD10")
					}
					
					if(json.lineItems[0].diagnosis[1] && json.lineItems[0].diagnosis[1].codeICD10){
                       codeICD10 = sh.getCell(16,i).getContents().toString()
                      addAssertionJsonPathMatch(testStepForAssertion,codeICD10,"lineItems[0].diagnosis[1].codeICD10","codeICD10")
					}
					
                       diagnosisEligible = sh.getCell(17,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,diagnosisEligible,"lineItems[0].diagnosisEligible","diagnosisEligible")


                        //get the expected values for ine item 2
                        hcpcsCode = sh.getCell(18,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,hcpcsCode,"lineItems[1].hcpcsCode","hcpcsCode")
                       
                       lineItemID = sh.getCell(19,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"lineItems[1].lineItemID","lineItemID")

                       id = sh.getCell(20,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,id,"lineItems[1].payers[0].id","id")

                        planName = sh.getCell(21,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,planName,"lineItems[1].payers[0].planName","planName")
					
					if(json.containsKey("diagnosis[0]")){
                       codeICD10 = sh.getCell(22,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,codeICD10,"lineItems[1].diagnosis[1].codeICD10","codeICD10")
					}
					
					if(json.containsKey("diagnosis[1]")){
                       codeICD10 = sh.getCell(23,i).getContents().toString()
                      addAssertionJsonPathMatch(testStepForAssertion,codeICD10,"lineItems[1].diagnosis[1].codeICD10","codeICD10")
					}
					
                       diagnosisEligible = sh.getCell(24,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,diagnosisEligible,"lineItems[1].diagnosisEligible","diagnosisEligible")
                       
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(14,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(15,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(14,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

 //        }             
     
//catch(Exception e)
//{

       //    log.info(e)                         
//}

//finally

//{
    //close workbook
     wb.close();
     wb1.close();     

//}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}]]></script></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request" id="a32e2e69-2660-4556-90d3-513161e691a7"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "8aa5"
        },
        {
            "codeICD10": "E11.3"
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4253",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": ""
                }
            ]
        },
        {
            "hcpcsCode": "A6250",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PA002",
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-37201" id="274053c3-b32b-43a2-8142-d99320d98217"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-37201" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "E10.8"
        },
        {
            "codeICD10": "Z96.41"
        },
        {
            "codeICD10": ""
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A9278",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "B187"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0b9011b5-c820-4508-b06b-8f2157c6a362" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="395aafc1-4f00-4bb8-9511-a73027769c1d" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>A9278</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a578879d-1a45-4641-9bc7-316e35170858" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dac18bf1-8ac1-4f23-bdca-a5cd3da72845" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a62eaa57-814c-4be6-9053-5f962f2210ef" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b535998e-1201-4f41-ba3c-00f5b63b4623" name="codeICD10"><con:configuration><path>lineItems[0].diagnosis[0].codeICD10</path><content>E10.8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b751beb-fb4a-474f-ba14-4d5e3710b703" name="codeICD10"><con:configuration><path>lineItems[0].diagnosis[1].codeICD10</path><content>Z96.41</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1b1442df-33e0-48ce-94b9-c98dc1754bde" name="diagnosisEligible"><con:configuration><path>lineItems[0].diagnosisEligible</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-37202" id="0460d780-f964-42f1-80e1-614726f1abf9"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-37202" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "Test12"
        },
        {
            "codeICD10": "T00002"
        },
        {
            "codeICD10": ""
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "K0554",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "B187"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9a0c1006-08d8-43f4-9c73-f0c638f877db" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="93c55529-bea4-4e01-a6e8-7cdd05581910" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>K0554</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="90bf99d4-51d2-43c0-bc70-3e0dd25eb3fb" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0cefbc2-fdeb-41eb-9aa9-55315a358a95" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="355f922d-bdfa-44a5-81c8-2c38ec90ff41" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="730ebff6-db16-4289-ba25-9e92fcee83bd" name="diagnosisEligible"><con:configuration><path>lineItems[0].diagnosisEligible</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-37203" id="c723486d-6977-4bdb-96cf-e4991d8a5f15"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-37203" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "O24.421"
        },
        {
            "codeICD10": ""
        },
        {
            "codeICD10": ""
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A9276",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "B187"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2cad2b02-feb0-401a-9f95-45f1ff6ff0c1" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="72e53661-3ec3-450e-9fb4-657d8ab2a41e" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>A9276</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f0fab798-f743-4c4e-a7ff-186573259fa7" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1816f9df-634c-4920-a0ce-cc22bf1bf9af" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bfbf5a88-0cd3-4c5a-a45b-ac5aa06582d3" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6ac56316-66f3-4bb7-acdf-eaebead4b2b7" name="codeICD10"><con:configuration><path>lineItems[0].diagnosis[0].codeICD10</path><content>O24.421</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6d02d941-1677-487e-813b-bc7698d0151d" name="diagnosisEligible"><con:configuration><path>lineItems[0].diagnosisEligible</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-37204" id="cad89451-552d-4c00-94bf-bf3778c8c00e"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-37204" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "Test12"
        },
        {
            "codeICD10": ""
        },
        {
            "codeICD10": ""
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "K0553",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "B187"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="45af5bec-2c37-446d-8fae-9f7f15235469" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1dcb4134-39b3-45c0-84f6-21ae6d74fcb4" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>K0553</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a899aae0-3395-4870-80ad-38b4540dccbd" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="691e4c97-22a7-4e73-a826-a1508199de28" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="21a34315-b779-43fa-98cf-4a982eda2f4e" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9d9d47ab-d292-4208-bf06-3789ac28e24e" name="diagnosisEligible"><con:configuration><path>lineItems[0].diagnosisEligible</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-37205" id="227915fa-1e14-4c73-99f3-8caa615a18f3"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-37205" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "O24.421"
        },
        {
            "codeICD10": ""
        },
        {
            "codeICD10": ""
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "Test12",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "B187"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0fb9f7a4-39e1-4910-95f3-f61f43b8e150" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="449750bf-4f6e-45f9-ae9c-69f2c16d63a9" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>Test12</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="191990d8-f2b4-41c5-9bd7-57fbef90b957" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="308424c9-3c1a-4047-b860-cbfcf3c657b1" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e69c4b61-2fe9-4acc-8fd5-d81cb1e94d78" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4f525af7-5f95-4136-8dff-7a8afa2d1e5c" name="diagnosisEligible"><con:configuration><path>lineItems[0].diagnosisEligible</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-37206" id="7afaebae-fcc7-4a36-94b9-af7c64419bb4"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-37206" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "E10.8"
        },
        {
            "codeICD10": ""
        },
        {
            "codeICD10": ""
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "Blank",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "B187"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="03913000-b2f8-41d9-b899-16054e843236" name="Valid HTTP Status Codes_8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d459e2a7-a788-4b16-a516-f712b4a734b0" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>Blank</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0e02efd1-b89d-4ea8-9151-d25a21998000" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69fb5513-f724-44c9-a0c1-41ce063ce1c3" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="73588df5-7217-4756-b0ed-827b2a12fa1c" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be5b9d14-2c02-4ba8-b8e3-0249718a8bd8" name="diagnosisEligible"><con:configuration><path>lineItems[0].diagnosisEligible</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-37207" id="d9d41571-4c19-4cd9-9a3b-7d41062e0fb7"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-37207" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "E10.9"
        },
        {
            "codeICD10": "Z96.41"
        },
        {
            "codeICD10": ""
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A9276",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "123invalid"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="961b2760-bde2-4d74-88e0-908b90c347c0" name="Valid HTTP Status Codes_9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="520cb204-17c3-4a1f-8c95-ef2126a14e71" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>A9276</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d22ef6d0-89d1-4403-9e95-ffc448fedcec" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe586eb-318d-489f-bb58-2036dbdd481c" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fee64c3b-30fb-4c32-b821-5521dc0a2b38" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>123invalid</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="00c96542-33bc-4739-a692-243341c760f1" name="diagnosisEligible"><con:configuration><path>lineItems[0].diagnosisEligible</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-37208" id="5eaa3533-a080-4284-8eee-104c1c150da5"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-37208" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "123invalid"
        },
        {
            "codeICD10": "Z96.41 "
        },
        {
            "codeICD10": ""
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "K0553",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "B187"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b4cee44b-931c-4781-bfde-76cb1f91dae5" name="Valid HTTP Status Codes_10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e0d2c5e8-8272-4357-bfa2-6778e5d175bb" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>K0553</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bc9f3921-7546-41ee-a09b-71cdaf73f7ff" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="27c070c3-5f47-4b22-96ee-4c1f6cf719a4" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f863d7db-bf19-4b82-9fca-44ad75d71a8c" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="efa4ca08-e968-4e8b-a7cc-d0c01b61573b" name="diagnosisEligible"><con:configuration><path>lineItems[0].diagnosisEligible</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-37209" id="cdb34c66-6ce8-451f-bea4-4e6a46ca8e13"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-37209" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "E10.8"
        },
        {
            "codeICD10": "Test12"
        },
        {
            "codeICD10": ""
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A9278",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "B187"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25ba8021-f8ce-4516-91d0-3851a2c75504" name="Valid HTTP Status Codes_11"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f4200072-c55f-4d29-8079-030184c7a883" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>A9278</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cc265721-29e3-494f-beaf-d27a90b76708" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e72464b7-d2f3-4624-8d31-d18d684c40d0" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="97fb7bc3-a689-4c39-944a-c5a4a3ca673e" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="936491ab-50f7-4547-b4e0-e7269b9a35c1" name="codeICD10"><con:configuration><path>lineItems[0].diagnosis[0].codeICD10</path><content>E10.8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8964f7b8-29e1-4285-a9cc-2e18bec3f9d5" name="diagnosisEligible"><con:configuration><path>lineItems[0].diagnosisEligible</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-37210" id="69a38b5a-a9a1-4798-9d66-ac02c3eac67d"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-37210" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "E08"
        },
        {
            "codeICD10": "E08.2"
        },
        {
            "codeICD10": "E08.9999"
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4649",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8a6ba3a8-81c3-4082-9fbc-57af3868b9b9" name="Valid HTTP Status Codes_12"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dd455b96-daca-4134-ab5b-7c6353b55b57" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>A4649</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="449f95bb-65bf-42df-b6be-8aa93f0ebfac" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a77d8cd5-986f-4205-950e-02130462b95e" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2c2a60fd-c2a6-4a8c-bf67-9c75894ca12a" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="453d7e07-eb46-4dac-8d51-b3dbb19cdacd" name="codeICD10"><con:configuration><path>lineItems[0].diagnosis[0].codeICD10</path><content>E08</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b15e14f7-ef68-4ec1-800a-f0ed97bbbf49" name="codeICD10"><con:configuration><path>lineItems[0].diagnosis[1].codeICD10</path><content>E08.2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="032c0bf4-f9f9-4dbc-ab89-f38e0bc658ec" name="codeICD10"><con:configuration><path>lineItems[0].diagnosis[2].codeICD10</path><content>E08.9999</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5d846f80-d097-4d86-938d-eb4478da566e" name="diagnosisEligible"><con:configuration><path>lineItems[0].diagnosisEligible</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-37211" id="4a57127f-d759-4691-b753-a215ed856bc9"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-37211" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "E13.5"
        },
        {
            "codeICD10": "Test12"
        },
        {
            "codeICD10": ""
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "K0554",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="52ced632-a5a8-46c6-b312-95ebcf325b37" name="Valid HTTP Status Codes_13"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1724d8c4-6583-4120-a115-8eeb8cda4fd1" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>K0554</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ad4cdfb7-2332-4e5a-b2d1-46ee372236fb" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="88cbb5d3-2a6f-40d9-80ac-898f0de1c0dc" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="200333e4-0375-40a9-aa63-932e89666f69" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="67456edd-e4a7-4acc-9b02-fdaa119a96f1" name="codeICD10"><con:configuration><path>lineItems[0].diagnosis[0].codeICD10</path><content>E13.5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1db752b1-a090-4889-89ba-04a12dc96a57" name="diagnosisEligible"><con:configuration><path>lineItems[0].diagnosisEligible</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-37212" id="0951cd0b-e27e-4630-ba81-52452359f41f"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-37212" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "E13.99999"
        },
        {
            "codeICD10": ""
        },
        {
            "codeICD10": ""
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4253",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bcacd148-38bb-4335-ae9b-5bad23553803" name="Valid HTTP Status Codes_14"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1fc49151-5455-457f-a44c-cf74bc2c8fcf" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>A4253</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2ccdf00f-6621-4aa9-8297-c18d7f8aa225" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8324f136-65a4-450e-b959-67febb554c45" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="932d23aa-b621-4598-9ab8-6d87f4714d17" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31c23788-9f57-4f18-bf9d-7b7325d6a07a" name="diagnosisEligible"><con:configuration><path>lineItems[0].diagnosisEligible</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-37213" id="d5a3a35e-60f7-4fc5-8bc2-57cd1993ab44"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-37213" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "Z13.1"
        },
        {
            "codeICD10": ""
        },
        {
            "codeICD10": ""
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A6250",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="779c4686-9a4d-4fbe-b601-33547fee1832" name="Valid HTTP Status Codes_15"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0f1f3fe1-a216-4037-be77-4247e52c82cc" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>A6250</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a82ef4f1-1593-4e24-9995-ca19da01128f" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0e1f0665-c894-4e29-ab3d-d76474aa2e3f" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="acf78ed2-c314-4924-9e10-0dc115fcd8da" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ad73f2a8-3d08-4959-9f7c-5602e20cc6de" name="codeICD10"><con:configuration><path>lineItems[0].diagnosis[0].codeICD10</path><content>Z13.1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f90d2a3f-ab28-4a6d-8c79-b9b2f167c077" name="diagnosisEligible"><con:configuration><path>lineItems[0].diagnosisEligible</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-37214" id="7d714a99-4ed0-49ad-8e32-9c620e4b0d1f"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-37214" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "O24.9999"
        },
        {
            "codeICD10": ""
        },
        {
            "codeICD10": ""
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4259",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="87ed79d3-9445-4602-9bb9-044eb18a32c3" name="Valid HTTP Status Codes_16"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b8966303-243c-4f91-b7e8-9d0a160a6cc2" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>A4259</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="29474c31-d080-41f3-9d5f-750f8523bf97" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9c8e2214-a776-4f52-b5ab-d72e85294592" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1178b725-0b48-4254-877c-6db3a092e1df" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="103a8b28-3c29-45a2-b36f-37e7ad380250" name="codeICD10"><con:configuration><path>lineItems[0].diagnosis[0].codeICD10</path><content>O24.9999</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d00df41d-ef5c-400d-a976-a3f40214e877" name="diagnosisEligible"><con:configuration><path>lineItems[0].diagnosisEligible</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-37215" id="5641fc93-d88b-43e4-9e5c-4ee17a7fed5d"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-37215" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "E10.8"
        },
        {
            "codeICD10": "Z96.41"
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A9278",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "B187"
                }
            ]
        },
        {
            "hcpcsCode": "K0553",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PA002",
                    "planName": "B187"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6761951a-b52c-46f1-acb7-902d10be1d49" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1da387cd-18b9-4fa7-b8c3-ae4e4de41bee" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>A9278</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ae59f729-9b07-4da9-83b1-f22d246db278" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6f896c39-7a3d-4d6e-af9d-2c1341ecd59e" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d5971871-32f5-4b5e-b004-39694dbea20d" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a9111406-792e-425c-8dad-b742934f19a6" name="codeICD10"><con:configuration><path>lineItems[0].diagnosis[0].codeICD10</path><content>E10.8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="43d69b56-87d0-4c86-b712-68f87752b76b" name="codeICD10"><con:configuration><path>lineItems[0].diagnosis[1].codeICD10</path><content>Z96.41</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6be09110-a9e4-4dcc-bc37-dd1c236b427e" name="diagnosisEligible"><con:configuration><path>lineItems[0].diagnosisEligible</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ad9f81cc-aca0-49c0-8052-ff654e45599e" name="hcpcsCode"><con:configuration><path>lineItems[1].hcpcsCode</path><content>K0553</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eebca9e8-b5a9-4513-ada8-3115b9f735f9" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3203998f-8a7f-4249-9790-ebee275bf783" name="id"><con:configuration><path>lineItems[1].payers[0].id</path><content>PA002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="17746d57-36f3-427f-ba15-e7a7e3786681" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6c73c8c0-5f40-482a-8b44-828a0dc9385b" name="diagnosisEligible"><con:configuration><path>lineItems[1].diagnosisEligible</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-37216" id="075078f2-79e3-4be7-a162-4d869e2871e1"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-37216" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "O24.421"
        },
        {
            "codeICD10": "Z96.41"
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "K0554",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "Test12"
                }
            ]
        },
        {
            "hcpcsCode": "A9276",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PA002",
                    "planName": "874643875"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fff67ee7-8e66-4d8d-b550-97bd3caca9c9" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="425b0fbd-fbbc-49b9-9366-8b8a33288390" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>K0554</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="488c988c-cc0f-4c5c-be2b-84f166741643" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="93068a72-b61f-4b64-9c4e-4b8255c58bd5" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="74e29548-f7ab-4a4e-a04e-e888266505bb" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>Test12</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="92d28c7e-7545-47d5-a38f-78a3418212a1" name="codeICD10"><con:configuration><path>lineItems[0].diagnosis[0].codeICD10</path><content>O24.421</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bf50293c-1b6d-43bd-9aa1-fe10a436ec75" name="diagnosisEligible"><con:configuration><path>lineItems[0].diagnosisEligible</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="562dbc74-d4a3-4529-8561-7eab9f479a04" name="hcpcsCode"><con:configuration><path>lineItems[1].hcpcsCode</path><content>A9276</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1cf2755a-71bf-4e9e-a5e2-c22373e00610" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e794a58d-2bf4-4045-9e1d-fb332ccb4262" name="id"><con:configuration><path>lineItems[1].payers[0].id</path><content>PA002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2fbd0ed4-7907-4dd9-b581-2901cb1aeffe" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content>874643875</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6c3a9ea8-bcaf-46b1-a0c3-f7b7d616b730" name="diagnosisEligible"><con:configuration><path>lineItems[1].diagnosisEligible</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-37217" id="e2a5c358-e53c-4fa3-9230-e15e98dd0d55"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-37217" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "Test12"
        },
        {
            "codeICD10": "Z96.41"
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A9276",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "B187"
                }
            ]
        },
        {
            "hcpcsCode": "K0554",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PA002",
                    "planName": "B187"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="5db078fe-e35f-456a-acac-2563c7eaeea6" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a30ef149-e5db-4857-99b2-b955c55df867" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>A9276</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="59e548d2-92f0-4479-8d87-dd6c8ac1e910" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="307a6c8d-05f5-4b19-8c5f-31da40af9c01" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="585bfb8e-d220-4ccc-becf-0e90979c0a40" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="44a101a5-1d17-4a7e-9ee4-b75acf40e9ce" name="diagnosisEligible"><con:configuration><path>lineItems[0].diagnosisEligible</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6907a013-5e8e-42da-a432-e415add1b8df" name="hcpcsCode"><con:configuration><path>lineItems[1].hcpcsCode</path><content>K0554</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1a87e592-1246-4050-8e1a-c201c4863f62" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="127067a5-30ae-43c5-9f72-fae9d3d9f371" name="id"><con:configuration><path>lineItems[1].payers[0].id</path><content>PA002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0ca8e81-5c63-405a-809d-6e4c3c8f1c5a" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="62e73a0e-bc5d-4b1c-a80c-42a0a1effc42" name="diagnosisEligible"><con:configuration><path>lineItems[1].diagnosisEligible</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-37218" id="5533790a-8493-4526-8a04-92912902a870"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-37218" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "O24.422"
        },
        {
            "codeICD10": "Test12"
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "K0553",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "B187"
                }
            ]
        },
        {
            "hcpcsCode": "A9278",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PA002",
                    "planName": "B187"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8e220f1f-14ad-4f9a-a5a6-47ef23c503ec" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="64f114b9-dd26-4b76-a682-1d845e49d41a" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>K0553</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b433594f-44b5-4f5c-bd8e-ee1898d2e357" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8ee5ef46-8bf7-45b1-bff8-836607c7a69a" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b3a02b3e-e80a-4db5-8b67-795f0cfb222c" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c16180ed-4795-4211-89cf-46b1148af0a1" name="codeICD10"><con:configuration><path>lineItems[0].diagnosis[0].codeICD10</path><content>O24.422</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="74778ad9-b5e5-41a1-bc41-1f28de1ab15b" name="diagnosisEligible"><con:configuration><path>lineItems[0].diagnosisEligible</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="54b555dd-eac2-4ba1-bbfc-67a81c8483c8" name="hcpcsCode"><con:configuration><path>lineItems[1].hcpcsCode</path><content>A9278</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="934000bb-7472-46d9-b3d9-4ed113569692" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6fea02f4-b85a-4241-ae5d-26c5addbdbf3" name="id"><con:configuration><path>lineItems[1].payers[0].id</path><content>PA002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f236ef87-a087-49e4-b904-bc404fbe572e" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e218a61f-2d90-4cb5-94f8-c3aae7e1e100" name="diagnosisEligible"><con:configuration><path>lineItems[1].diagnosisEligible</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-37219" id="fe0d41be-de61-49a4-b966-b3616e2bacfa"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-37219" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "E08.2"
        },
        {
            "codeICD10": "E13.5"
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "K0554",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": ""
                }
            ]
        },
        {
            "hcpcsCode": "A4253",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PA002",
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="04b5a647-de92-4b6d-b610-97f9df2c43dd" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b118bc99-6156-4c3c-b2fe-2f35721d3bc1" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>K0554</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7aa130b5-6a86-4cac-b875-b1e8d39edd1f" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="39c2c173-7d5e-444c-b304-43448355357c" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="70105343-faa9-47a7-b175-d1c0ee1ce70b" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3c3d0780-64ce-43c9-bfe0-acb9e3cd2d81" name="codeICD10"><con:configuration><path>lineItems[0].diagnosis[0].codeICD10</path><content>E08.2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f4a995f-a4c4-4513-9df9-d57400656d37" name="codeICD10"><con:configuration><path>lineItems[0].diagnosis[1].codeICD10</path><content>E13.5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fb8f3dcd-8457-447d-9a13-be180c8932a3" name="diagnosisEligible"><con:configuration><path>lineItems[0].diagnosisEligible</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="075a7fb8-5730-43e2-a32d-6181eaee1e16" name="hcpcsCode"><con:configuration><path>lineItems[1].hcpcsCode</path><content>A4253</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="06906a7c-8a99-49af-9d9e-300eeb01ed03" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="612ac3dd-8c7e-437b-8a46-5671acfabf22" name="id"><con:configuration><path>lineItems[1].payers[0].id</path><content>PA002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="90be0918-742e-4ab0-a549-b24a92370812" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fe7e2480-e148-4620-9f6e-a12324930ac3" name="diagnosisEligible"><con:configuration><path>lineItems[1].diagnosisEligible</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-37220" id="526cff4d-f7ed-4e45-af23-666f34e0a7df"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-37220" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "87875"
        },
        {
            "codeICD10": "8aa5"
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4649",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": ""
                }
            ]
        },
        {
            "hcpcsCode": "A4259",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PA002",
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f439b071-1177-451f-aaa4-584742179222" name="Valid HTTP Status Codes_8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="87e28162-6fba-4bb7-be6f-7156c18d71b4" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>A4649</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="996a348b-90d6-41d3-897c-728330215397" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a1a46b5c-e9f5-4694-92cc-9e2b984d5321" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="884d74d2-9f46-4cff-bad2-63f6cba95a44" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be3c0ab4-ccd2-47b7-9856-fabf4f1dc408" name="diagnosisEligible"><con:configuration><path>lineItems[0].diagnosisEligible</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3284f085-d063-4d3a-b3af-a826f5c9fc64" name="hcpcsCode"><con:configuration><path>lineItems[1].hcpcsCode</path><content>A4259</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d81a4eb8-550a-4773-a800-7c504c806b15" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0f482e43-50d2-4276-b308-e8c8c083ddf6" name="id"><con:configuration><path>lineItems[1].payers[0].id</path><content>PA002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0e424a80-478e-4593-886d-dc00d62ab0ce" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="56b7db29-8bc6-4831-b1f9-b9ecdfbd3b0a" name="diagnosisEligible"><con:configuration><path>lineItems[1].diagnosisEligible</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-37221" id="018d5a64-46b5-423b-8851-6181d648b551"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL" methodName="ValidateEligibleDiagnosis" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-37221" id="a4cdb487-d867-45be-a4ee-a5df8055ccb9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "diagnosis": [
        {
            "codeICD10": "8aa5"
        },
        {
            "codeICD10": "E11.3"
        }
    ],
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4253",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": ""
                }
            ]
        },
        {
            "hcpcsCode": "A6250",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PA002",
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods02/DecisionService/rest/v1/ValidateEligibleDiagnosis/ValidateEligibleDiagnosis/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="15afd4d6-8d27-4294-ab84-5703a5c7e7e6" name="Valid HTTP Status Codes_9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3ad8f07a-f521-4721-9e27-f523c224a66a" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>A4253</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="92c7228e-964c-401c-9d92-165cab86003b" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0887aeaf-c90c-41fa-9830-1c44ff274a96" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cf55dd9a-3894-4830-ab9f-aa8bdb1f2eae" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b9463fd-abe5-45ff-b672-13f4bdeba769" name="codeICD10"><con:configuration><path>lineItems[0].diagnosis[0].codeICD10</path><content>E11.3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bfb7e229-5e41-4997-bae3-4222cd4122d8" name="diagnosisEligible"><con:configuration><path>lineItems[0].diagnosisEligible</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8d4c383a-726d-4c97-8f9f-cc4c91d6ed67" name="hcpcsCode"><con:configuration><path>lineItems[1].hcpcsCode</path><content>A6250</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="528d3554-3304-44ac-9e3f-b87166888f95" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a063f79-d790-4bb3-9daa-191f539ad01a" name="id"><con:configuration><path>lineItems[1].payers[0].id</path><content>PA002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="847303ce-8f13-4a99-befd-aefcc4c59c54" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a795af2d-7f98-46f9-a6f8-be0c66fffa9e" name="diagnosisEligible"><con:configuration><path>lineItems[1].diagnosisEligible</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="b6306f6f-c0d4-4777-9f05-8100f1f962e9" name="DetermineIfProductSpecificQuestions"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="158fcbc7-562b-474f-b67b-b4e8e762bf0b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineIfProductSpecificQuestions" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Insulin Pump Question-SingleLineItem-Groovy Script" id="aa563165-6ddd-40a7-a936-b283e13dcdbe"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineIfProductSpecificQuestionsRequired/IPQ_Input.xls"
def outputfile = projectDir + "/DetermineIfProductSpecificQuestionsRequired/IPQ_SingleLine_Output.xls"


//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpRes-SingleLine")
Sheet jsonInput = wb.getSheet("JSON-SingleLine")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file 
addCell(0,0,"Description",sheet1);
//addCell(1,0,"IsZeroDollarItem",sheet1);
addCell(1,0,"insulinPumpQuestionRequired",sheet1);
addCell(2,0,"PASS/FAIL",sheet1);
addCell(3,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
              
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplete = new JsonBuilder(slurper);
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(0,i)
					     def TestCaseName = varTestCaseName.getContents()
					     
                             
				          //Input for Product Category
				          requestTemplete.content.order.lineItems[0].productCategory =  sh.getCell(1,i).getContents().toString()
					 //Input for Product Category1
                                          requestTemplete.content.order.lineItems[0].productSubCategory1 = sh.getCell(2,i).getContents().toString()
				         //Input for Product Category2
                                          requestTemplete.content.order.lineItems[0].productSubCategory2 = sh.getCell(3,i).getContents().toString()
				         //Input for Product Category3
                                         requestTemplete.content.order.lineItems[0].productSubCategory3 = sh.getCell(4,i).getContents().toString()
				         //Input for Product Category
                                         requestTemplete.content.order.lineItems[0].zeroDollarItem = sh.getCell(5,i).getContents().toBoolean()
				          
				          
				            //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSONRequest-SingleLineItem-SinglePayer');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSONRequest-SingleLineItem-SinglePayer");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                log.info("testing started");
				  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                                // extract the value of required elements fron the json response 		
                      		       // get timesTestingQuestionRequired from response json   
                      		           
                      		      addCell(0,i,TestCaseName,sheet1);    
                                    addCell(1,i,json.productSpecificQuestionsResponse.insulinPumpQuestionRequired.toString(),sheet1);    
                                
								
							
			                //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
								//get the expected values
								
  						  insulinPumpQuestionRequired = sh.getCell(6,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,insulinPumpQuestionRequired,"productSpecificQuestionsResponse.insulinPumpQuestionRequired","insulinPumpQuestionRequired")
								
						
                              
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(2,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(3,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(2,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Insulin Pump Question-MultiLineItem-Groovy Script" id="e9c8b02e-20c2-449a-a399-67a5b59de898"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineIfProductSpecificQuestionsRequired/IPQ_Input.xls"
def outputfile = projectDir + "/DetermineIfProductSpecificQuestionsRequired/IPQ_MultiLine_Output.xls"


//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpRes-MultiLine")
Sheet jsonInput = wb.getSheet("JSON-MultiLine")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file 
addCell(0,0,"Description",sheet1);
//addCell(1,0,"IsZeroDollarItem",sheet1);
addCell(1,0,"insulinPumpQuestionRequired",sheet1);
addCell(2,0,"PASS/FAIL",sheet1);
addCell(3,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
              
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplete = new JsonBuilder(slurper);
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(0,i)
					     def TestCaseName = varTestCaseName.getContents()
					     
                             //Input for LineItem 1
				          //Input for Product Category
				          requestTemplete.content.order.lineItems[0].productCategory =  sh.getCell(1,i).getContents().toString()
					 //Input for Product Category1
                                          requestTemplete.content.order.lineItems[0].productSubCategory1 = sh.getCell(2,i).getContents().toString()
				         //Input for Product Category2
                                          requestTemplete.content.order.lineItems[0].productSubCategory2 = sh.getCell(3,i).getContents().toString()
				         //Input for Product Category3
                                         requestTemplete.content.order.lineItems[0].productSubCategory3 = sh.getCell(4,i).getContents().toString()
				         //Input for Product Category
                                         requestTemplete.content.order.lineItems[0].zeroDollarItem = sh.getCell(5,i).getContents().toBoolean()
				          
				//Input for LineItem 2
				          //Input for Product Category
				          requestTemplete.content.order.lineItems[1].productCategory =  sh.getCell(6,i).getContents().toString()
					 //Input for Product Category1
                                          requestTemplete.content.order.lineItems[1].productSubCategory1 = sh.getCell(7,i).getContents().toString()
				         //Input for Product Category2
                                          requestTemplete.content.order.lineItems[1].productSubCategory2 = sh.getCell(8,i).getContents().toString()
				         //Input for Product Category3
                                         requestTemplete.content.order.lineItems[1].productSubCategory3 = sh.getCell(9,i).getContents().toString()
				         //Input for Product Category
                                         requestTemplete.content.order.lineItems[1].zeroDollarItem = sh.getCell(5,i).getContents().toBoolean()
				          
				                    
				            //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSONRequest-MultiLineItem-SinglePayer');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSONRequest-MultiLineItem-SinglePayer");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                log.info("testing started");
				  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                                // extract the value of required elements fron the json response 		
                      		       // get timesTestingQuestionRequired from response json   
                      		           
                      		      addCell(0,i,TestCaseName,sheet1);    
                                    addCell(1,i,json.productSpecificQuestionsResponse.insulinPumpQuestionRequired.toString(),sheet1);    
                                
								
							
			                //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
								//get the expected values
								
  						  insulinPumpQuestionRequired = sh.getCell(11,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,insulinPumpQuestionRequired,"productSpecificQuestionsResponse.insulinPumpQuestionRequired","insulinPumpQuestionRequired")
								
						
                              
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(2,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(3,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(2,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Trade In Question-SingleLineItem-Groovy Script" id="c7c774b8-ead0-474e-bc8e-c2c224ad03cc"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineIfProductSpecificQuestionsRequired/TIQ_Input.xls"
def outputfile = projectDir + "/DetermineIfProductSpecificQuestionsRequired/TIQ_SingleLine_Output.xls"

//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpRes-SingleLine")
Sheet jsonInput = wb.getSheet("JSON-SingleLine")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file 
addCell(0,0,"Description",sheet1);
//addCell(1,0,"IsZeroDollarItem",sheet1);
addCell(1,0,"TradeinQuestionRequired",sheet1);
addCell(2,0,"PASS/FAIL",sheet1);
addCell(3,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
              
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplete = new JsonBuilder(slurper);
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(0,i)
					     def TestCaseName = varTestCaseName.getContents()
                             
				           //LineItem1
				          //Input for productCategory
				          requestTemplete.content.order.lineItems[0].productCategory =  sh.getCell(1,i).getContents().toString()
					 //Input for productCategory1	
				          requestTemplete.content.order.lineItems[0].productSubCategory1 = sh.getCell(2,i).getContents().toString()
				         //Input for productCategory2
                                          requestTemplete.content.order.lineItems[0].productSubCategory2 = sh.getCell(3,i).getContents().toString()
				         //Input for productCategory3
                                          requestTemplete.content.order.lineItems[0].productSubCategory3 = sh.getCell(4,i).getContents().toString()
				         //Input for zeroDollarItem
                                         requestTemplete.content.order.lineItems[0].zeroDollarItem = sh.getCell(5,i).getContents().toBoolean()

                                           

                                          

                                            //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSONRequest-SingleLineItem-SinglePayer');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSONRequest-SingleLineItem-SinglePayer");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                       log.info("testing started");
				  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                                // extract the value of required elements fron the json response 		
                      		       // get tradeInQuestionRequired from response json   
                      		           
                      		      addCell(0,i,TestCaseName,sheet1);    
                                    addCell(1,i,json.productSpecificQuestionsResponse.tradeInQuestionRequired.toString(),sheet1);    
                                
								
							
			                //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
								//get the expected values
								
  						  tradeInQuestionRequired = sh.getCell(6,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,tradeInQuestionRequired,"productSpecificQuestionsResponse.tradeInQuestionRequired","tradeInQuestionRequired")
								
						
                              
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(2,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(3,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(2,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Trade In Question-MultiLineItem-Groovy Script" id="ad48a7af-a756-46b6-898f-50d14c09f00a"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineIfProductSpecificQuestionsRequired/TIQ_Input.xls"
def outputfile = projectDir + "/DetermineIfProductSpecificQuestionsRequired/TIQ_MultiLine_Output.xls"

//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpRes-MultiLine")
Sheet jsonInput = wb.getSheet("JSON-MultiLine")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file 
addCell(0,0,"Description",sheet1);
//addCell(1,0,"IsZeroDollarItem",sheet1);
addCell(1,0,"TradeinQuestionRequired",sheet1);
addCell(2,0,"PASS/FAIL",sheet1);
addCell(3,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
              
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplete = new JsonBuilder(slurper);
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(0,i)
					     def TestCaseName = varTestCaseName.getContents()
                             
				           //LineItem1
				          //Input for productCategory
				          requestTemplete.content.order.lineItems[0].productCategory =  sh.getCell(1,i).getContents().toString()
					 //Input for productCategory1	
				          requestTemplete.content.order.lineItems[0].productSubCategory1 = sh.getCell(2,i).getContents().toString()
				         //Input for productCategory2
                                          requestTemplete.content.order.lineItems[0].productSubCategory2 = sh.getCell(3,i).getContents().toString()
				         //Input for productCategory3
                                          requestTemplete.content.order.lineItems[0].productSubCategory3 = sh.getCell(4,i).getContents().toString()
				         //Input for zeroDollarItem
                                         requestTemplete.content.order.lineItems[0].zeroDollarItem = sh.getCell(5,i).getContents().toBoolean()

                                           //LineItem2
				          //Input for productCategory
				          requestTemplete.content.order.lineItems[1].productCategory =  sh.getCell(6,i).getContents().toString()
					 //Input for productCategory1	
				          requestTemplete.content.order.lineItems[1].productSubCategory1 = sh.getCell(7,i).getContents().toString()
				         //Input for productCategory2
                                          requestTemplete.content.order.lineItems[1].productSubCategory2 = sh.getCell(8,i).getContents().toString()
				         //Input for productCategory3
                                          requestTemplete.content.order.lineItems[1].productSubCategory3 = sh.getCell(9,i).getContents().toString()
				         //Input for zeroDollarItem
                                         requestTemplete.content.order.lineItems[1].zeroDollarItem = sh.getCell(10,i).getContents().toBoolean()


                                          

                                            //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSONRequest-MultiLineItem-MultiPayer');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSONRequest-MultiLineItem-MultiPayer");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                       log.info("testing started");
				  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                                // extract the value of required elements fron the json response 		
                      		       // get tradeInQuestionRequired from response json   
                      		           
                      		      addCell(0,i,TestCaseName,sheet1);    
                                    addCell(1,i,json.productSpecificQuestionsResponse.tradeInQuestionRequired.toString(),sheet1);    
                                
								
							
			                //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
								//get the expected values
								
  						  tradeInQuestionRequired = sh.getCell(11,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,tradeInQuestionRequired,"productSpecificQuestionsResponse.tradeInQuestionRequired","tradeInQuestionRequired")
								
						
                              
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(2,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(3,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(2,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Times Testing Question-MultiLineItem-Groovy Script" id="e40c4e6e-0ee0-4ddb-aacb-91ed9b450a91"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineIfProductSpecificQuestionsRequired/TTQ_Input.xls"
def outputfile = projectDir + "/DetermineIfProductSpecificQuestionsRequired/TTQ_MultiLine_Output.xls"

//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpRes-MultiLine")
Sheet jsonInput = wb.getSheet("JSON-MultiLine")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file 
addCell(0,0,"Description",sheet1);
//addCell(1,0,"IsZeroDollarItem",sheet1);
addCell(1,0,"isTimesTestingQuestionRequired",sheet1);
addCell(2,0,"PASS/FAIL",sheet1);
addCell(3,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
              
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplete = new JsonBuilder(slurper);
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(0,i)
					     def TestCaseName = varTestCaseName.getContents()
                             
				          //Input for hcpcsCode
				          requestTemplete.content.order.lineItems[0].hcpcsCode =  sh.getCell(1,i).getContents().toString()
					  requestTemplete.content.order.lineItems[1].hcpcsCode =  sh.getCell(3,i).getContents().toString()
					  
				          //Input for zeroDollarItem
				          requestTemplete.content.order.lineItems[0].zeroDollarItem =  sh.getCell(2,i).getContents().toBoolean()
                                          requestTemplete.content.order.lineItems[0].zeroDollarItem =  sh.getCell(4,i).getContents().toBoolean()


				            //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSONRequest-MultiLineItem-SinglePayer');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSONRequest-MultiLineItem-SinglePayer");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                //def response = context.expand( '${TestRequest#Response}' ).toString()
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                       log.info("testing started");
				  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                                // extract the value of required elements fron the json response 		
                      		       // get timesTestingQuestionRequired from response json   
                      		           
                      		      addCell(0,i,TestCaseName,sheet1);    
                                    addCell(1,i,json.productSpecificQuestionsResponse.timesTestingQuestionRequired.toString(),sheet1);    
                                
								
							
			                //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
								//get the expected values
								
  						  timesTestingQuestionRequired = sh.getCell(5,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,timesTestingQuestionRequired,"productSpecificQuestionsResponse.timesTestingQuestionRequired","timesTestingQuestionRequired")
								
						
                              
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(2,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(3,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(2,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Times Testing Question-SingleLineItem-Groovy Script" id="6b4cb1e3-bb9b-4a3d-95ad-05855db354e7"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineIfProductSpecificQuestionsRequired/TTQ_Input.xls"
def outputfile = projectDir + "/DetermineIfProductSpecificQuestionsRequired/TTQ_SingleLine_Output.xls"

//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpRes-SingleLine")
Sheet jsonInput = wb.getSheet("JSON-SingleLine")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file 
addCell(0,0,"Description",sheet1);
//addCell(1,0,"IsZeroDollarItem",sheet1);
addCell(1,0,"isTimesTestingQuestionRequired",sheet1);
addCell(2,0,"PASS/FAIL",sheet1);
addCell(3,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
              
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplete = new JsonBuilder(slurper);
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(0,i)
					     def TestCaseName = varTestCaseName.getContents()
                             
				          //Input for hcpcsCode
				          requestTemplete.content.order.lineItems[0].hcpcsCode =  sh.getCell(1,i).getContents().toString()
					  
				          //Input for zeroDollarItem
				          requestTemplete.content.order.lineItems[0].zeroDollarItem =  sh.getCell(2,i).getContents().toBoolean()
                              

				            //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSONRequest-SingleLineItem-SinglePayer');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSONRequest-SingleLineItem-SinglePayer");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                //def response = context.expand( '${TestRequest#Response}' ).toString()
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                       log.info("testing started");
				  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                                // extract the value of required elements fron the json response 		
                      		       // get timesTestingQuestionRequired from response json   
                      		           
                      		      addCell(0,i,TestCaseName,sheet1);    
                                    addCell(1,i,json.productSpecificQuestionsResponse.timesTestingQuestionRequired.toString(),sheet1);    
                                
								
							
			                //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
								//get the expected values
								
  						  timesTestingQuestionRequired = sh.getCell(3,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,timesTestingQuestionRequired,"productSpecificQuestionsResponse.timesTestingQuestionRequired","timesTestingQuestionRequired")
								
						
                              
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(2,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(3,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(2,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Insulin Dependent Question-MultiLineItem-Groovy Script" id="4d85b0a0-cfb8-4706-84cf-fc05ac833fde"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineIfProductSpecificQuestionsRequired/IDQ_Input.xls"
def outputfile = projectDir + "/DetermineIfProductSpecificQuestionsRequired/IDQ_MultiLine_Output.xls"

//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpRes-MultiLine")
Sheet jsonInput = wb.getSheet("JSON-MultiLine")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file 
addCell(0,0,"Description",sheet1);
addCell(1,0,"diagnosisRequiresInsulinRelatedQuestions",sheet1);//diag,prod,insulin
addCell(2,0,"productCategoryRequiresInsulinRelatedQuestions",sheet1);
addCell(3,0,"insulinDependentQuestionsDays",sheet1);
addCell(4,0,"PASS/FAIL",sheet1);
addCell(5,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
              
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplete = new JsonBuilder(slurper);
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(0,i)
					     def TestCaseName = varTestCaseName.getContents()
                                 //LineItem1
				          //Input for productcategory
				          requestTemplete.content.order.lineItems[0].productCategory =  sh.getCell(1,i).getContents()
				          //Input for diagnosis
                                          requestTemplete.content.order.lineItems[0].diagnosis[0].codeICD10 =  sh.getCell(2,i).getContents()
				 //LineItem2
				          //Input for productcategory
				          requestTemplete.content.order.lineItems[1].productCategory =  sh.getCell(3,i).getContents()
				          //Input for diagnosis
                                          requestTemplete.content.order.lineItems[1].diagnosis[0].codeICD10 =  sh.getCell(4,i).getContents()
				              

				            //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSONRequest-MultiLineItem-MultiPayer');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSONRequest-MultiLineItem-MultiPayer");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                //def response = context.expand( '${TestRequest#Response}' ).toString()
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                       log.info("testing started");
				  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                                // extract the value of required elements fron the json response 		
                      		       // get timesTestingQuestionRequired from response json   
                      		           
                      		     addCell(0,i,TestCaseName,sheet1);    
                                    addCell(1,i,json.productSpecificQuestionsResponse.diagnosisRequiresInsulinRelatedQuestions.toString(),sheet1);      
                                     
                                     //addCell(1,i,TestCaseName,sheet1);    
                                    addCell(2,i,json.productSpecificQuestionsResponse.productCategoryRequiresInsulinRelatedQuestions.toString(),sheet1);    
                                     //  addCell(2,i,TestCaseName,sheet1);    
                                    addCell(3,i,json.productSpecificQuestionsResponse.insulinDependentQuestionsDays.toString(),sheet1);    
                                //diag,prod,insulin
				

			
							
			                //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
								//get the expected values
								
  						  diagnosisRequiresInsulinRelatedQuestions = sh.getCell(5,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,diagnosisRequiresInsulinRelatedQuestions,"productSpecificQuestionsResponse.diagnosisRequiresInsulinRelatedQuestions","diagnosisRequiresInsulinRelatedQuestions")

								 productCategoryRequiresInsulinRelatedQuestions = sh.getCell(6,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,productCategoryRequiresInsulinRelatedQuestions,"productSpecificQuestionsResponse.productCategoryRequiresInsulinRelatedQuestions","diagnosisRequiresInsulinRelatedQuestions")


						 insulinDependentQuestionsDays = sh.getCell(7,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,insulinDependentQuestionsDays,"productSpecificQuestionsResponse.insulinDependentQuestionsDays","insulinDependentQuestionsDays")
						
						
                              
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(4,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(5,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(4,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Insulin Dependent Question-SingleLineItem-Groovy Script" id="112b0ced-d660-42a0-bdd9-7fe8cd0a0acb"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineIfProductSpecificQuestionsRequired/IDQ_Input.xls"
def outputfile = projectDir + "/DetermineIfProductSpecificQuestionsRequired/IDQ_SingleLine_Output.xls"

//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpRes-SingleLine")
Sheet jsonInput = wb.getSheet("JSON-SingleLine")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file 
addCell(0,0,"Description",sheet1);
addCell(1,0,"diagnosisRequiresInsulinRelatedQuestions",sheet1);//diag,prod,insulin
addCell(2,0,"productCategoryRequiresInsulinRelatedQuestions",sheet1);
addCell(3,0,"insulinDependentQuestionsDays",sheet1);
addCell(4,0,"PASS/FAIL",sheet1);
addCell(5,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
              
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplete = new JsonBuilder(slurper);
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(0,i)
					     def TestCaseName = varTestCaseName.getContents()
                             
				          //Input for productcategory
				          requestTemplete.content.order.lineItems[0].productCategory =  sh.getCell(1,i).getContents()
				          //Input for diagnosis
                                          requestTemplete.content.order.lineItems[0].diagnosis[0].codeICD10 =  sh.getCell(2,i).getContents()
				       

				            //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSONRequest-SingleLineItem-SinglePayer');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSONRequest-SingleLineItem-SinglePayer");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                //def response = context.expand( '${TestRequest#Response}' ).toString()
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                       log.info("testing started");
				  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                                // extract the value of required elements fron the json response 		
                      		       // get timesTestingQuestionRequired from response json   
                      		           
                      		     addCell(0,i,TestCaseName,sheet1);    
                                    addCell(1,i,json.productSpecificQuestionsResponse.diagnosisRequiresInsulinRelatedQuestions.toString(),sheet1);      
                                     
                                    // addCell(1,i,TestCaseName,sheet1);    
                                    addCell(2,i,json.productSpecificQuestionsResponse.productCategoryRequiresInsulinRelatedQuestions.toString(),sheet1);    
                                     //  addCell(2,i,TestCaseName,sheet1);    
                                    addCell(3,i,json.productSpecificQuestionsResponse.insulinDependentQuestionsDays.toString(),sheet1);    
                                //diag,prod,insulin
				

			
							
			                //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
								//get the expected values
								
  						  diagnosisRequiresInsulinRelatedQuestions = sh.getCell(3,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,diagnosisRequiresInsulinRelatedQuestions,"productSpecificQuestionsResponse.diagnosisRequiresInsulinRelatedQuestions","diagnosisRequiresInsulinRelatedQuestions")

								 productCategoryRequiresInsulinRelatedQuestions = sh.getCell(4,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,productCategoryRequiresInsulinRelatedQuestions,"productSpecificQuestionsResponse.productCategoryRequiresInsulinRelatedQuestions","diagnosisRequiresInsulinRelatedQuestions")


						 insulinDependentQuestionsDays = sh.getCell(5,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,insulinDependentQuestionsDays,"productSpecificQuestionsResponse.insulinDependentQuestionsDays","insulinDependentQuestionsDays")
						
						
                              
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(4,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(5,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(4,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Receiver Delivery Question_SinglelineItem_MultiPayer_Groovy Script" id="8bbc02dd-0396-411e-beff-708ccc2ca354"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineIfProductSpecificQuestionsRequired/RD_Input.xls"
def outputfile = projectDir + "/DetermineIfProductSpecificQuestionsRequired/RD_SingleLine_MultiPayer_Output.xls"

//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpRes-SingleLine-MultiPayer")
Sheet jsonInput = wb.getSheet("JSON-SingleLine-MultiPayer")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file 
addCell(0,0,"Description",sheet1);
//addCell(1,0,"IsZeroDollarItem",sheet1);
addCell(1,0,"isReceiverDeliveryQuestionRequired",sheet1);
addCell(2,0,"PASS/FAIL",sheet1);
addCell(3,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
              
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplete = new JsonBuilder(slurper);
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(0,i)
					     def TestCaseName = varTestCaseName.getContents()
                             //LineItem1
				          //Input for productCategory
				          requestTemplete.content.order.lineItems[0].productCategory =  sh.getCell(1,i).getContents().toString()
						 //Input for productCategory1
						 requestTemplete.content.order.lineItems[0].productSubCategory1 = sh.getCell(2,i).getContents().toString()
				           //Input for productCategory2
				           requestTemplete.content.order.lineItems[0].productSubCategory2 = sh.getCell(3,i).getContents().toString()
				           //Input for productCategory3
				           requestTemplete.content.order.lineItems[0].productSubCategory3 = sh.getCell(4,i).getContents().toString()
				           //Input for zeroDollarItem
				           requestTemplete.content.order.lineItems[0].zeroDollarItem = sh.getCell(5,i).getContents().toBoolean()
				           //Input for payerForEvaluation
				           requestTemplete.content.order.lineItems[0].payers[0].payerForEvaluation = sh.getCell(6,i).getContents()
				           //Input for requiresReceiverDeliveryQuestion
				           requestTemplete.content.order.lineItems[0].payers[0].requiresReceiverDeliveryQuestion = sh.getCell(8,i).getContents().toString()
				          
				          //Payer2
				          //Input for payerForEvaluation 
				           requestTemplete.content.order.lineItems[0].payers[1].payerForEvaluation = sh.getCell(7,i).getContents()
				           //Input for requiresReceiverDeliveryQuestion
				           requestTemplete.content.order.lineItems[0].payers[1].requiresReceiverDeliveryQuestion = sh.getCell(9,i).getContents().toString()
				          
				          
				         
				            //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSONRequest-SingleLineItem-MultiPayer');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSONRequest-SingleLineItem-MultiPayer");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                //def response = context.expand( '${TestRequest#Response}' ).toString()
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                       log.info("testing started");
				  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                                // extract the value of required elements fron the json response 		
                      		       // get timesTestingQuestionRequired from response json   
                      		           
                      		      addCell(0,i,TestCaseName,sheet1);    
                                    addCell(1,i,json.productSpecificQuestionsResponse.receiverDeliveryQuestionRequired.toString(),sheet1);    
                                    
								
							
			                //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
								//get the expected values
								
  						 // insulinDependentQuestionsDays = sh.getCell(9,i).getContents().toString()
                              //  addAssertionJsonPathMatch(testStepForAssertion,insulinDependentQuestionsDays,"productSpecificQuestionsResponse.insulinDependentQuestionsDays","insulinPumpQuestionRequired")

						  receiverDeliveryQuestionRequired = sh.getCell(10,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,receiverDeliveryQuestionRequired,"productSpecificQuestionsResponse.receiverDeliveryQuestionRequired","receiverDeliveryQuestionRequired")
							
						
                              
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(2,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(3,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(2,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Receiver Delivery Question_MultilineItem_SinglePayer_Groovy Script" id="f5b5ab83-a74c-4745-8e75-9d2c9f642594"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineIfProductSpecificQuestionsRequired/RD_Input.xls"
def outputfile = projectDir + "/DetermineIfProductSpecificQuestionsRequired/RD_MultiLine_SinglePayer_Output.xls"

//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpRes-MultiLine-SinglePayer")
Sheet jsonInput = wb.getSheet("JSON-MultiLine-SinglePayer")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults-MultiLine-SinglePayer",0);

//Header declaration for output file 
addCell(0,0,"Description",sheet1);
//addCell(1,0,"IsZeroDollarItem",sheet1);
addCell(1,0,"isReceiverDeliveryQuestionRequired",sheet1);
addCell(2,0,"PASS/FAIL",sheet1);
addCell(3,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
              
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplete = new JsonBuilder(slurper);
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(0,i)
					     def TestCaseName = varTestCaseName.getContents()
                             
				          //Input for LineItem1
				          //Input for productCategory
				          requestTemplete.content.order.lineItems[0].productCategory =  sh.getCell(1,i).getContents().toString()
						//Input for productCategory1
						requestTemplete.content.order.lineItems[0].productSubCategory1 = sh.getCell(2,i).getContents().toString()
				          //Input for productCategory2
				          requestTemplete.content.order.lineItems[0].productSubCategory2 = sh.getCell(3,i).getContents().toString()
				          //Input for productCategory3
				          requestTemplete.content.order.lineItems[0].productSubCategory3 = sh.getCell(4,i).getContents().toString()
				          //Input for zeroDollarItem
				          requestTemplete.content.order.lineItems[0].zeroDollarItem = sh.getCell(5,i).getContents().toBoolean()
				            //Input for payerForEvaluation
				            requestTemplete.content.order.lineItems[0].payers[0].payerForEvaluation = sh.getCell(6,i).getContents().toString()
				            //Input for requiresReceiverDeliveryQuestion
				            requestTemplete.content.order.lineItems[0].payers[0].requiresReceiverDeliveryQuestion = sh.getCell(7,i).getContents().toString()
				         


				         //LineItem2
				         //Input for productCategory
				         requestTemplete.content.order.lineItems[1].productCategory =  sh.getCell(8,i).getContents().toString()
					    //Input for productCategory1
					    requestTemplete.content.order.lineItems[1].productSubCategory1 = sh.getCell(9,i).getContents().toString()
				         //Input for productCategory2
				         requestTemplete.content.order.lineItems[1].productSubCategory2 = sh.getCell(10,i).getContents().toString()
				          //Input for productCategory3
				          requestTemplete.content.order.lineItems[1].productSubCategory3 = sh.getCell(11,i).getContents().toString()
				          //Input for zeroDollarItem
				          requestTemplete.content.order.lineItems[1].zeroDollarItem = sh.getCell(12,i).getContents().toBoolean()
				           //Input for payerForEvaluation
				           requestTemplete.content.order.lineItems[1].payers[0].payerForEvaluation = sh.getCell(13,i).getContents().toString()
				           //Input for requiresReceiverDeliveryQuestion
				           requestTemplete.content.order.lineItems[1].payers[0].requiresReceiverDeliveryQuestion = sh.getCell(14,i).getContents().toString()
				          

				            //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSONRequest-MultiLineItem-SinglePayer');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSONRequest-MultiLineItem-SinglePayer");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                //def response = context.expand( '${TestRequest#Response}' ).toString()
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                       log.info("testing started");
				  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                                // extract the value of required elements fron the json response 		
                      		       // get timesTestingQuestionRequired from response json   
                      		           
                      		      addCell(0,i,TestCaseName,sheet1);    
                                    addCell(1,i,json.productSpecificQuestionsResponse.receiverDeliveryQuestionRequired.toString(),sheet1);    
                                    
								
							
			                //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
								//get the expected values
								
  						 // insulinDependentQuestionsDays = sh.getCell(9,i).getContents().toString()
                              //  addAssertionJsonPathMatch(testStepForAssertion,insulinDependentQuestionsDays,"productSpecificQuestionsResponse.insulinDependentQuestionsDays","insulinPumpQuestionRequired")

						  receiverDeliveryQuestionRequired = sh.getCell(15,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,receiverDeliveryQuestionRequired,"productSpecificQuestionsResponse.receiverDeliveryQuestionRequired","receiverDeliveryQuestionRequired")
							
						
                              
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(2,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(3,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(2,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Receiver Delivery Question_SinglelineItem_SinglePayer_Groovy Script" id="9dab89c9-46be-477b-be10-4bfb70f68a7a"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineIfProductSpecificQuestionsRequired/RD_Input.xls"
def outputfile = projectDir + "/DetermineIfProductSpecificQuestionsRequired/RD_SingleLine_SinglePayer_Output.xls"

//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpRes-SingleLine-SinglePayer")
Sheet jsonInput = wb.getSheet("JSON-SingleLine-SinglePayer")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file 
addCell(0,0,"Description",sheet1);
addCell(1,0,"isReceiverDeliveryQuestionRequired",sheet1);
addCell(2,0,"PASS/FAIL",sheet1);
addCell(3,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
              
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplete = new JsonBuilder(slurper);
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(0,i)
					     def TestCaseName = varTestCaseName.getContents()
                             
				          //Input for productCategory
				          requestTemplete.content.order.lineItems[0].productCategory =  sh.getCell(1,i).getContents().toString()
						//Input for productCategory1
						requestTemplete.content.order.lineItems[0].productSubCategory1 = sh.getCell(2,i).getContents().toString()
				          //Input for productCategory2
				          requestTemplete.content.order.lineItems[0].productSubCategory2 = sh.getCell(3,i).getContents().toString()
				          //Input for productCategory3
				          requestTemplete.content.order.lineItems[0].productSubCategory3 = sh.getCell(4,i).getContents().toString()
				         //Input for zerodollarItem
				         requestTemplete.content.order.lineItems[0].zeroDollarItem = sh.getCell(5,i).getContents().toBoolean()
				          //Input for payerForEvaluation
				          requestTemplete.content.order.lineItems[0].payers[0].payerForEvaluation = sh.getCell(6,i).getContents().toString()
				           //Input for requiresReceiverDeliveryQuestion
				          requestTemplete.content.order.lineItems[0].payers[0].requiresReceiverDeliveryQuestion = sh.getCell(7,i).getContents().toString()
				         
				            //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSONRequest-SingleLineItem-SinglePayer');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSONRequest-SingleLineItem-SinglePayer");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                //def response = context.expand( '${TestRequest#Response}' ).toString()
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                       log.info("testing started");
				  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                                // extract the value of required elements fron the json response 		
                      		       // get timesTestingQuestionRequired from response json   
                      		           
                      		      addCell(0,i,TestCaseName,sheet1);    
                                    addCell(1,i,json.productSpecificQuestionsResponse.receiverDeliveryQuestionRequired.toString(),sheet1);    
                                    
								
							
			                //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
								//get the expected values
								
  						 // insulinDependentQuestionsDays = sh.getCell(9,i).getContents().toString()
                              //  addAssertionJsonPathMatch(testStepForAssertion,insulinDependentQuestionsDays,"productSpecificQuestionsResponse.insulinDependentQuestionsDays","insulinPumpQuestionRequired")

						  receiverDeliveryQuestionRequired = sh.getCell(8,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,receiverDeliveryQuestionRequired,"productSpecificQuestionsResponse.receiverDeliveryQuestionRequired","receiverDeliveryQuestionRequired")
							
						
                              
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(2,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(3,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(2,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Receiver Delivery Question_MultilineItem_MultiPayer_Groovy Script" id="0a286ac5-44e1-46cd-a605-4e1b537d3521"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineIfProductSpecificQuestionsRequired/RD_Input.xls"
def outputfile = projectDir + "/DetermineIfProductSpecificQuestionsRequired/RD_MultiLine_MultiPayer_Output.xls"

//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpRes-MultiLine-MultiPayer")
Sheet jsonInput = wb.getSheet("JSON-MultiLine-MultiPayer")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file 
addCell(0,0,"Description",sheet1);
//addCell(1,0,"IsZeroDollarItem",sheet1);
addCell(1,0,"isReceiverDeliveryQuestionRequired",sheet1);
addCell(2,0,"PASS/FAIL",sheet1);
addCell(3,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
              
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplete = new JsonBuilder(slurper);
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(0,i)
					     def TestCaseName = varTestCaseName.getContents()
                             
				          //Input for LineItem1
                                          //Input for productCategory
				          requestTemplete.content.order.lineItems[0].productCategory =  sh.getCell(1,i).getContents().toString()
					  //Input for productCategory1
                                         requestTemplete.content.order.lineItems[0].productSubCategory1 = sh.getCell(2,i).getContents().toString()
				          //Input for productCategory2
                                        requestTemplete.content.order.lineItems[0].productSubCategory2 = sh.getCell(3,i).getContents().toString()
				          //Input for productCategory3
                                          requestTemplete.content.order.lineItems[0].productSubCategory3 = sh.getCell(4,i).getContents().toString()
				          //Input for zeroDollarItem
                                          requestTemplete.content.order.lineItems[0].zeroDollarItem = sh.getCell(5,i).getContents().toBoolean()
                                         //Payer1				          
                                         //Input for payerForEvaluation
                                          requestTemplete.content.order.lineItems[0].payers[0].payerForEvaluation = sh.getCell(6,i).getContents().toString()
				          //Input for requiresReceiverDeliveryQuestion
                                          requestTemplete.content.order.lineItems[0].payers[0].requiresReceiverDeliveryQuestion = sh.getCell(8,i).getContents().toString()
				         //Payer 2
                                         //Input for payerForEvaluation
                                         requestTemplete.content.order.lineItems[0].payers[1].payerForEvaluation = sh.getCell(7,i).getContents().toString()
				         //Input for requiresReceiverDeliveryQuestion
                                          requestTemplete.content.order.lineItems[0].payers[1].requiresReceiverDeliveryQuestion = sh.getCell(9,i).getContents().toString()
				           


				         //lineItem2
                                           //Input for product Category
				            requestTemplete.content.order.lineItems[1].productCategory =  sh.getCell(10,i).getContents().toString()
					   //Input for product Category1
                                           requestTemplete.content.order.lineItems[1].productSubCategory1 = sh.getCell(11,i).getContents().toString()
				          //Input for product Category2
                                          requestTemplete.content.order.lineItems[1].productSubCategory2 = sh.getCell(12,i).getContents().toString()
				          //Input for product Category3
                                          requestTemplete.content.order.lineItems[1].productSubCategory3 = sh.getCell(13,i).getContents().toString()
				          //Input for product zeroDollarItem
                                          requestTemplete.content.order.lineItems[1].zeroDollarItem = sh.getCell(14,i).getContents().toBoolean()
				           //Payer1 
                                          //Input for payerForEvaluation
                                          requestTemplete.content.order.lineItems[1].payers[0].payerForEvaluation = sh.getCell(15,i).getContents().toString()
				            //Input for requiresReceiverDeliveryQuestion
                                         requestTemplete.content.order.lineItems[1].payers[0].requiresReceiverDeliveryQuestion = sh.getCell(17,i).getContents().toString()
				          //Payer 2
                                          //Input for payerForEvaluation
                                           requestTemplete.content.order.lineItems[1].payers[1].payerForEvaluation = sh.getCell(16,i).getContents().toString()
				           //Input for requiresReceiverDeliveryQuestion
                                         requestTemplete.content.order.lineItems[1].payers[1].requiresReceiverDeliveryQuestion = sh.getCell(18,i).getContents().toString()
				      
				          
				            //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSONRequest-MultiLineItem-MultiPayer');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSONRequest-MultiLineItem-MultiPayer");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                //def response = context.expand( '${TestRequest#Response}' ).toString()
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                       log.info("testing started");
				  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                                // extract the value of required elements fron the json response 		
                      		       // get timesTestingQuestionRequired from response json   
                      		           
                      		      addCell(0,i,TestCaseName,sheet1);    
                                    addCell(1,i,json.productSpecificQuestionsResponse.receiverDeliveryQuestionRequired.toString(),sheet1);    
                                    
								
							
			                //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
								//get the expected values
								
  						
						  receiverDeliveryQuestionRequired = sh.getCell(19,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,receiverDeliveryQuestionRequired,"productSpecificQuestionsResponse.receiverDeliveryQuestionRequired","receiverDeliveryQuestionRequired")
							
						
                              
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(2,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(3,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(2,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Date Last Seen By Physician Question_SinglelineItem_SinglePayer_Groovy Script" id="60622005-9c40-4f98-a351-30fb6fcf04dc"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineIfProductSpecificQuestionsRequired/LSD_Input1.xls"
def outputfile = projectDir + "/DetermineIfProductSpecificQuestionsRequired/LSD_SingleLine_Output.xls"

//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpRes-SingleLIne-SinglePayer")
Sheet jsonInput = wb.getSheet("JSON-SingleLine-SinglePayer")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults-SingleLIne-SinglePayer",0);

//Header declaration for output file 
addCell(0,0,"Description",sheet1);
//addCell(1,0,"IsZeroDollarItem",sheet1);
addCell(1,0,"insulinDependentQuestionsDays",sheet1);
addCell(2,0,"PASS/FAIL",sheet1);
addCell(3,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
              
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplete = new JsonBuilder(slurper);
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(2,i)
					     def TestCaseName = varTestCaseName.getContents()
                             
				          //Input for 
				          //IsZeroDollarItem
				           requestTemplete.content.order.lineItems[0].zeroDollarItem = sh.getCell(3,i).getContents().toBoolean()      
                                          //isPayerForEvaluation
				           requestTemplete.content.order.lineItems[0].payers[0].payerForEvaluation = sh.getCell(5,i).getContents().toString()
				         //planName
				           requestTemplete.content.order.lineItems[0].payers[0].planName = sh.getCell(6,i).getContents().toString()
				        // productCategory				        
				          requestTemplete.content.order.lineItems[0].productCategory =  sh.getCell(7,i).getContents().toString()
					//productCategory1
					  requestTemplete.content.order.lineItems[0].productSubCategory1 = sh.getCell(8,i).getContents().toString()
				         //productCategory2
				          requestTemplete.content.order.lineItems[0].productSubCategory2 = sh.getCell(9,i).getContents().toString()
				         //productCategory3
				          requestTemplete.content.order.lineItems[0].productSubCategory3 = sh.getCell(10,i).getContents().toString()
				         //dateLastSeenByPhysician
                             
                            
                               requestTemplete.content.dateLastSeenByPhysician  = sh.getCell(11,i).getContents().toString()//OutOfRange.format("yyyy-MM-dd").concat("T07:19:45.000+0530")
                              
                           


				            //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSONRequest-SingleLineItem-SinglePayer');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSONRequest-SingleLineItem-SinglePayer");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                //def response = context.expand( '${TestRequest#Response}' ).toString()
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                       log.info("testing started");
				  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                                // extract the value of required elements fron the json response 		
                      		       // get timesTestingQuestionRequired from response json   
                      		           
                      		      addCell(0,i,TestCaseName,sheet1); 
                      		       addCell(1,i,json.productSpecificQuestionsResponse.dateLastSeenByPhysicianNeeded.toString(),sheet1);    
                                      
                                   
								
							
			                //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
								//get the expected values
								
								
  						  dateLastSeenByPhysicianNeeded = sh.getCell(12,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,dateLastSeenByPhysicianNeeded,"productSpecificQuestionsResponse.dateLastSeenByPhysicianNeeded","dateLastSeenByPhysicianNeeded")

							
						
                              
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(2,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(3,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(2,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Date Last Seen By Physician Question_SinglelineItem_MultiPayer_Groovy Script" id="d45e71ba-91a1-4af7-9058-1f2cffb9224f"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineIfProductSpecificQuestionsRequired/LSD_Input1.xls"
def outputfile = projectDir + "/DetermineIfProductSpecificQuestionsRequired/LSD_MultiLine_Output.xls"

//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpRes-SingleLIne-MultiPayer")
Sheet jsonInput = wb.getSheet("JSON-SingleLine-MultiPayer")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults-SingleLIne-MultiPayer",0);

//Header declaration for output file 
addCell(0,0,"Description",sheet1);
//addCell(1,0,"IsZeroDollarItem",sheet1);
addCell(1,0,"insulinDependentQuestionsDays",sheet1);
addCell(2,0,"PASS/FAIL",sheet1);
addCell(3,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
             
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                
                def requestTemplete = new JsonBuilder(slurper);
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(2,i)
					     def TestCaseName = varTestCaseName.getContents()
                             
				          //Input for 
				          //IsZeroDollarItem
		
	                 	requestTemplete.content.order.lineItems[0].zeroDollarItem = sh.getCell(3,i).getContents().toBoolean()
				         
                             
				         
				       
                             //isPayerForEvaluation
                              requestTemplete.content.order.lineItems[0].payers[0].payerForEvaluation = sh.getCell(5,i).getContents().toString()
				        requestTemplete.content.order.lineItems[0].payers[1].payerForEvaluation = sh.getCell(7,i).getContents().toString()
				        
				        
                           //planName
                            requestTemplete.content.order.lineItems[0].payers[0].planName = sh.getCell(6,i).getContents().toString()
				       
				         
				         requestTemplete.content.order.lineItems[0].payers[1].planName = sh.getCell(8,i).getContents().toString()
				        // productCategory				        
				          requestTemplete.content.order.lineItems[0].productCategory =  sh.getCell(9,i).getContents().toString()
						//productCategory1
						requestTemplete.content.order.lineItems[0].productSubCategory1 = sh.getCell(10,i).getContents().toString()
				         //productCategory2
				          requestTemplete.content.order.lineItems[0].productSubCategory2 = sh.getCell(11,i).getContents().toString()
				         //productCategory3
				          requestTemplete.content.order.lineItems[0].productSubCategory3 = sh.getCell(12,i).getContents().toString()
				           //dateLastSeenByPhysician
                                                     
                              requestTemplete.content.dateLastSeenByPhysician = sh.getCell(13,i).getContents()
                            
				     

				            //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSONRequest-SingleLineItem-MultiPayer');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSONRequest-SingleLineItem-MultiPayer");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                //def response = context.expand( '${TestRequest#Response}' ).toString()
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                       log.info("testing started");
				  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                                // extract the value of required elements fron the json response 		
                      		       // get timesTestingQuestionRequired from response json   
                      		           
                      		      addCell(0,i,TestCaseName,sheet1);  
                      		        addCell(1,i,json.productSpecificQuestionsResponse.dateLastSeenByPhysicianNeeded.toString(),sheet1);    
                                      
                                   
								
							
			                //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
								//get the expected values
								
								
  						  dateLastSeenByPhysicianNeeded = sh.getCell(14,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,dateLastSeenByPhysicianNeeded,"productSpecificQuestionsResponse.dateLastSeenByPhysicianNeeded","dateLastSeenByPhysicianNeeded")

						
                              
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(2,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(3,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(2,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Date Last Seen By Physician Question_MultilineItem_MultiPayer_Groovy Script" id="0f8c2045-c210-49b1-9016-8d335f5bd63f"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineIfProductSpecificQuestionsRequired/LSD_Input1.xls"
def outputfile = projectDir + "/DetermineIfProductSpecificQuestionsRequired/LSD_MultiLine_MultiPayer_Output.xls"

//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpRes-MultiLine-MultiPayer")
Sheet jsonInput = wb.getSheet("JSON-MultiLine-MultiPayer")
def dateLastSeenByPhysician

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults-MultiLine-MultiPayer",0);

//Header declaration for output file 
addCell(0,0,"Description",sheet1);
//addCell(1,0,"IsZeroDollarItem",sheet1);
addCell(1,0,"insulinDependentQuestionsDays",sheet1);
addCell(2,0,"PASS/FAIL",sheet1);
addCell(3,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
             
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                
                def requestTemplete = new JsonBuilder(slurper);
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(2,i)
					     def TestCaseName = varTestCaseName.getContents()
                             
				          

				         //dateLastSeenByPhysician
                           

                             requestTemplete.content.dateLastSeenByPhysician = sh.getCell(13,i).getContents()
                             
 
				         ////Input for for LineItem 1

				         
                                          //IsZeroDollarItem
		              	          requestTemplete.content.order.lineItems[0].zeroDollarItem = sh.getCell(3,i).getContents().toBoolean()
				         //isPayerForEvaluation for multipayer
                                        requestTemplete.content.order.lineItems[0].payers[0].payerForEvaluation = sh.getCell(5,i).getContents().toString()
				        requestTemplete.content.order.lineItems[0].payers[1].payerForEvaluation = sh.getCell(7,i).getContents().toString()
				        
				        
                                         //planName for multipayer
                                         requestTemplete.content.order.lineItems[0].payers[0].planName = sh.getCell(6,i).getContents().toString()	         
				         requestTemplete.content.order.lineItems[0].payers[1].planName = sh.getCell(8,i).getContents().toString()

				        // productCategory				        
				          requestTemplete.content.order.lineItems[0].productCategory =  sh.getCell(9,i).getContents().toString()
						
                                       //productCategory1
					requestTemplete.content.order.lineItems[0].productSubCategory1 = sh.getCell(10,i).getContents().toString()
				         
                                       //productCategory2
				         requestTemplete.content.order.lineItems[0].productSubCategory2 = sh.getCell(11,i).getContents().toString()
				         
                                       //productCategory3
				         requestTemplete.content.order.lineItems[0].productSubCategory3 = sh.getCell(12,i).getContents().toString()

				       
				      //Input for for LineItem 2
                                     //isPayerForEvaluation  for multipayer
                                        requestTemplete.content.order.lineItems[1].payers[0].payerForEvaluation = sh.getCell(15,i).getContents().toString()
				        requestTemplete.content.order.lineItems[1].payers[1].payerForEvaluation = sh.getCell(17,i).getContents().toString()
				        
				        
                                     //planName for multipayer
                                        requestTemplete.content.order.lineItems[1].payers[0].planName = sh.getCell(16,i).getContents().toString()			         
				         requestTemplete.content.order.lineItems[1].payers[1].planName = sh.getCell(18,i).getContents().toString()
				     
                                      //IsZeroDollarItem
		               requestTemplete.content.order.lineItems[1].zeroDollarItem = sh.getCell(13,i).getContents().toBoolean()
				     
                                     // productCategory				        
				         requestTemplete.content.order.lineItems[1].productCategory = sh.getCell(19,i).getContents().toString()
						
                                    //productCategory1
					 requestTemplete.content.order.lineItems[1].productSubCategory1 = sh.getCell(20,i).getContents().toString()
				         
                                   //productCategory2
				         requestTemplete.content.order.lineItems[1].productSubCategory2 = sh.getCell(21,i).getContents().toString()
				         
                                  //productCategory3
				          requestTemplete.content.order.lineItems[1].productSubCategory3 = sh.getCell(22,i).getContents().toString()
				         requestTemplete.content.dateLastSeenByPhysician = sh.getCell(23,i).getContents()
                            

				            //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSONRequest-MultiLineItem-MultiPayer');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSONRequest-MultiLineItem-MultiPayer");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                //def response = context.expand( '${TestRequest#Response}' ).toString()
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                       log.info("testing started");
				  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                                // extract the value of required elements fron the json response 		
                      		       // get timesTestingQuestionRequired from response json   
                      		           
                      		      addCell(0,i,TestCaseName,sheet1);    
                                     addCell(1,i,json.productSpecificQuestionsResponse.dateLastSeenByPhysicianNeeded.toString(),sheet1);    
                                    
								
							
			                //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
								//get the expected values
								
								
  						  dateLastSeenByPhysicianNeeded = sh.getCell(24,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,dateLastSeenByPhysicianNeeded,"productSpecificQuestionsResponse.dateLastSeenByPhysicianNeeded","dateLastSeenByPhysicianNeeded")

						
                              
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(2,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(3,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(2,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Date Last Seen By Physician Question_MultilineItem_SinglePayer_Groovy Script" id="dca9cb6f-2bbf-454f-ba3a-518e18120755"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineIfProductSpecificQuestionsRequired/LSD_Input1.xls"
def outputfile = projectDir + "/DetermineIfProductSpecificQuestionsRequired/LSD_MultiLine_SinglePayer_Output.xls"

//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpRes-MultiLine-SinglePayer")
Sheet jsonInput = wb.getSheet("JSON-MultiLine-SinglePayer")
def dateLastSeenByPhysician

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults-MultiLine-SinglePayer",0);

//Header declaration for output file 
addCell(0,0,"Description",sheet1);
//addCell(1,0,"IsZeroDollarItem",sheet1);
addCell(1,0,"insulinDependentQuestionsDays",sheet1);
addCell(2,0,"PASS/FAIL",sheet1);
addCell(3,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
             
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                
                def requestTemplete = new JsonBuilder(slurper);
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(2,i)
					     def TestCaseName = varTestCaseName.getContents()
                             
				          
				         
                             //Input for LineItem1

				       //IsZeroDollarItem
		
	                 	requestTemplete.content.order.lineItems[0].zeroDollarItem = sh.getCell(3,i).getContents().toBoolean()
                                     //isPayerForEvaluation for multipayer
                              requestTemplete.content.order.lineItems[0].payers[0].payerForEvaluation = sh.getCell(5,i).getContents().toString()
				        
                                   //planName
                                  requestTemplete.content.order.lineItems[0].payers[0].planName = sh.getCell(6,i).getContents().toString()
				       
				         
				   // productCategory				        
				       requestTemplete.content.order.lineItems[0].productCategory =  sh.getCell(7,i).getContents().toString()
						
                                   //productCategory1
				        requestTemplete.content.order.lineItems[0].productSubCategory1 = sh.getCell(8,i).getContents().toString()
				        
                                    //productCategory2
				          requestTemplete.content.order.lineItems[0].productSubCategory2 = sh.getCell(9,i).getContents().toString()
				         
                                   //productCategory3
				          requestTemplete.content.order.lineItems[0].productSubCategory3 = sh.getCell(10,i).getContents().toString()
				       
				  
                                 //Input for LineItem2           
                                    //IsZeroDollarItem
		               	   requestTemplete.content.order.lineItems[1].zeroDollarItem = sh.getCell(11,i).getContents().toBoolean()
				               
                                   //isPayerForEvaluation
                                   requestTemplete.content.order.lineItems[1].payers[0].payerForEvaluation = sh.getCell(13,i).getContents().toString()
				      
				        
                                  //planName
                                   requestTemplete.content.order.lineItems[1].payers[0].planName = sh.getCell(14,i).getContents().toString()
				         
                                 // productCategory				        
				          requestTemplete.content.order.lineItems[1].productCategory =  sh.getCell(15,i).getContents().toString()
						 
                                 //productCategory1
						requestTemplete.content.order.lineItems[1].productSubCategory1 = sh.getCell(16,i).getContents().toString()
				         
                                //productCategory2
				          requestTemplete.content.order.lineItems[1].productSubCategory2 = sh.getCell(17,i).getContents().toString()
				         
                                //productCategory3
				          requestTemplete.content.order.lineItems[1].productSubCategory3 = sh.getCell(18,i).getContents().toString()
				          requestTemplete.content.dateLastSeenByPhysician = sh.getCell(19,i).getContents()
                            

				            //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSONRequest-MultiLineItem-SinglePayer');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSONRequest-MultiLineItem-SinglePayer");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                //def response = context.expand( '${TestRequest#Response}' ).toString()
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                       log.info("testing started");
				  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                                // extract the value of required elements fron the json response 		
                      		       // get timesTestingQuestionRequired from response json   
                      		           
                      		      addCell(0,i,TestCaseName,sheet1);    
                                    addCell(1,i,json.productSpecificQuestionsResponse.dateLastSeenByPhysicianNeeded.toString(),sheet1);    
                                    
								
							
			                //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
								//get the expected values
								
								
  						  dateLastSeenByPhysicianNeeded = sh.getCell(20,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,dateLastSeenByPhysicianNeeded,"productSpecificQuestionsResponse.dateLastSeenByPhysicianNeeded","dateLastSeenByPhysicianNeeded")
	
						
                              
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(2,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(3,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(2,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="JSONRequest-MultiLineItem-MultiPayer" id="1b49b8ee-682d-47dd-99fe-8fc178b07c8c"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/OrderValidation/DetermineIfProductSpecificQuestionsRequired/WADL" methodName="DetermineIfProductSpecificQuestions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSONRequest-MultiLineItem-MultiPayer" id="8b8c1efd-5eaf-4e11-9710-802947736027" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "dateLastSeenByPhysician": "2020-1-17T07:19:45.000+0530",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2014-09-19T04:48:33.000+0530"
        }
    },
    "order": {
        "lineItems": [
            {
                "diagnosis": [
                    {
                        "codeICD10": "E11"
                    }
                ],
                "hcpcsCode": "A4253",
                "lineItemID": "L0008",
                "payers": [
                    {
                        "id": "09GJKJI56FHGJ787UU9897834",
                        "name": "998785",
                        "payerForEvaluation": "true",
                        "plan": "4",
                        "planName": "invalid",
                        "requiresReceiverDeliveryQuestion": true
                    },
                    {
                        "id": "09GJKJI56FHGJ787UU9897834",
                        "name": "998785",
                        "payerForEvaluation": "true",
                        "plan": "4",
                        "planName": "B861",
                        "requiresReceiverDeliveryQuestion": true
                    }
                ],
                "productCategory": "Diabetes",
                "productSubCategory1": "Diabetes Testing",
                "productSubCategory2": "Continuous Glucose Monitors",
                "productSubCategory3": "CGM Sensors",
                "zeroDollarItem": false
            },
            {
                "diagnosis": [
                    {
                        "codeICD10": "E11"
                    }
                ],
                "hcpcsCode": "A4253",
                "lineItemID": "L0009",
                "payers": [
                    {
                        "id": "09GJKJI56FHGJ787UU9897834",
                        "name": "998785",
                        "payerForEvaluation": "true",
                        "plan": "4",
                        "planName": "invalid",
                        "requiresReceiverDeliveryQuestion": true
                    },
                    {
                        "id": "09GJKJI56FHGJ787UU9897834",
                        "name": "998785",
                        "payerForEvaluation": "true",
                        "plan": "4",
                        "planName": "MEDICARE REGION A",
                        "requiresReceiverDeliveryQuestion": true
                    }
                ],
                "productCategory": "Diabetes",
                "productSubCategory1": "Insulin Delivery",
                "productSubCategory2": "Insulin Pump Supplies",
                "productSubCategory3": "",
                "zeroDollarItem": false
            }
        ]
    }
}</con:request><con:originalUri>http://ldec5009c1ods02/DetermineIfProductSpecificQuestions</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="JSONRequest-MultiLineItem-SinglePayer" id="e3b6f6e8-8a43-4833-84f3-95f94ba240af"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/OrderValidation/DetermineIfProductSpecificQuestionsRequired/WADL" methodName="DetermineIfProductSpecificQuestions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSONRequest-MultiLineItem-SinglePayer" id="8b8c1efd-5eaf-4e11-9710-802947736027" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "dateLastSeenByPhysician": "2020-1-17T07:19:45.000+0530",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2014-09-19T04:48:33.000+0530"
        }
    },
    "order": {
        "lineItems": [
            {
                "diagnosis": [
                    {
                        "codeICD10": "E11"
                    }
                ],
                "hcpcsCode": "A4253",
                "lineItemID": "L0008",
                "payers": [
                    {
                        "id": "09GJKJI56FHGJ787UU9897834",
                        "name": "998785",
                        "payerForEvaluation": "true",
                        "plan": "4",
                        "planName": "invalid",
                        "requiresReceiverDeliveryQuestion": "false"
                    }
                ],
                "productCategory": "Diabetes",
                "productSubCategory1": "Diabetes Testing",
                "productSubCategory2": "Continuous Glucose Monitors",
                "productSubCategory3": "CGM Sensors",
                "zeroDollarItem": true
            },
            {
                "diagnosis": [
                    {
                        "codeICD10": "E11"
                    }
                ],
                "hcpcsCode": "A4253",
                "lineItemID": "L0009",
                "payers": [
                    {
                        "id": "09GJKJI56FHGJ787UU9897834",
                        "name": "998785",
                        "payerForEvaluation": "true",
                        "plan": "4",
                        "planName": "invalid",
                        "requiresReceiverDeliveryQuestion": "true"
                    }
                ],
                "productCategory": "invalid",
                "productSubCategory1": "invalid",
                "productSubCategory2": "invalid",
                "productSubCategory3": "invalid",
                "zeroDollarItem": false
            }
        ]
    }
}</con:request><con:originalUri>http://ldec5009c1ods02/DetermineIfProductSpecificQuestions</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="JSONRequest-SingleLineItem-MultiPayer" id="074e35d1-fc19-4c5f-be45-9222825fd582"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/OrderValidation/DetermineIfProductSpecificQuestionsRequired/WADL" methodName="DetermineIfProductSpecificQuestions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSONRequest-SingleLineItem-MultiPayer" id="8b8c1efd-5eaf-4e11-9710-802947736027" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "dateLastSeenByPhysician": "2019-07-21T07:19:45.000+0530",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2014-09-19T04:48:33.000+0530"
        }
    },
    "order": {
        "lineItems": [
            {
                "diagnosis": [
                    {
                        "codeICD10": "E11"
                    }
                ],
                "hcpcsCode": "A4253",
                "lineItemID": "L0008",
                "payers": [
                    {
                        "id": "09GJKJI56FHGJ787UU9897834",
                        "name": "998785",
                        "payerForEvaluation": "true",
                        "plan": "4",
                        "planName": "B861",
                        "requiresReceiverDeliveryQuestion": true
                    },
                    {
                        "id": "09GJKJI56FHGJ787UU9897834",
                        "name": "998785",
                        "payerForEvaluation": "true",
                        "plan": "4",
                        "planName": "B861",
                        "requiresReceiverDeliveryQuestion": true
                    }
                ],
                "productCategory": "Diabetes",
                "productSubCategory1": "Diabetes Testing",
                "productSubCategory2": "Continuous Glucose Monitors",
                "productSubCategory3": "CGM Sensors",
                "zeroDollarItem": false
            }
        ]
    }
}</con:request><con:originalUri>http://ldec5009c1ods02/DetermineIfProductSpecificQuestions</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="JSONRequest-SingleLineItem-SinglePayer" id="16683bec-6382-4bb7-8724-88f97ee1262b"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/OrderValidation/DetermineIfProductSpecificQuestionsRequired/WADL" methodName="DetermineIfProductSpecificQuestions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSONRequest-SingleLineItem-SinglePayer" id="8b8c1efd-5eaf-4e11-9710-802947736027" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "dateLastSeenByPhysician": "2019-01-29T07:19:45.000+0530",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2014-09-19T04:48:33.000+0530"
        }
    },
    "order": {
        "lineItems": [
            {
                "diagnosis": [
                    {
                        "codeICD10": "E11"
                    }
                ],
                "hcpcsCode": "A4253",
                "lineItemID": "L0008",
                "payers": [
                    {
                        "id": "09GJKJI56FHGJ787UU9897834",
                        "name": "998785",
                        "payerForEvaluation": true,
                        "plan": "4",
                        "planName": "B865",
                        "requiresReceiverDeliveryQuestion": true
                    }
                ],
                "productCategory": "Diabetes",
                "productSubCategory1": "Insulin Delivery",
                "productSubCategory2": "Insulin Pumps",
                "productSubCategory3": "",
                "zeroDollarItem": false
            }
        ]
    }
}</con:request><con:originalUri>http://ldec5009c1ods02/DetermineIfProductSpecificQuestions</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-19548" id="02270b1a-d2e7-4389-bcec-87bf3a4dcea3"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/OrderValidation/DetermineIfProductSpecificQuestionsRequired/WADL" methodName="DetermineIfProductSpecificQuestions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-19548" id="8b8c1efd-5eaf-4e11-9710-802947736027" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "dateLastSeenByPhysician": "2019-01-29T07:19:45.000+0530",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2014-09-19T04:48:33.000+0530"
        }
    },
    "order": {
        "lineItems": [
            {
                "diagnosis": [
                    {
                        "codeICD10": "E11"
                    }
                ],
                "hcpcsCode": "A4253",
                "lineItemID": "L0008",
                "payers": [
                    {
                        "id": "09GJKJI56FHGJ787UU9897834",
                        "name": "998785",
                        "payerForEvaluation": true,
                        "plan": "4",
                        "planName": "B865",
                        "requiresReceiverDeliveryQuestion": true
                    }
                ],
                "productCategory": "Diabetes",
                "productSubCategory1": "Insulin Delivery",
                "productSubCategory2": "Insulin Pumps",
                "productSubCategory3": "",
                "zeroDollarItem": false
            }
        ]
    }
}</con:request><con:originalUri>http://ldec5009c1ods02/DetermineIfProductSpecificQuestions</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="2d4098c0-1888-4539-bffe-e81648b64da8" name="DetermineShippingPriceForShippingMethod"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="bf655bd5-ba2f-47da-9e5a-2749f3b45970" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineShippingPriceForShippingMethod" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DetermineShippingPriceForShippingMethod" id="22fda995-865a-4dc3-87c4-60491826de15"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineShippingPriceForShippingMethod/DetermineShippingPriceForShippingMethod_Input.xls"
def outputfile = projectDir + "/DetermineShippingPriceForShippingMethod/DetermineShippingPriceForShippingMethod_Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"methodCode",sheet1);
addCell(1,0,"shippingPrice",sheet1);
addCell(2,0,"methodCode",sheet1);
addCell(3,0,"shippingPrice",sheet1);
addCell(4,0,"methodCode",sheet1);
addCell(5,0,"shippingPrice",sheet1);
addCell(6,0,"methodCode",sheet1);
addCell(7,0,"shippingPrice",sheet1);
addCell(8,0,"PASS/FAIL",sheet1);
addCell(9,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                 //Input for methodCode1                                                            
                                requestTemplet.content.shippingMethods[0].methodCode = sh.getCell(1,i).getContents().toString()
                                 //Input for methodCode2                                  
                                requestTemplet.content.shippingMethods[1].methodCode = sh.getCell(2,i).getContents().toString()
                                //Input for methodCode3                                 
                                requestTemplet.content.shippingMethods[2].methodCode = sh.getCell(3,i).getContents().toString()
                                //Input for methodCode4                                  
                                requestTemplet.content.shippingMethods[3].methodCode = sh.getCell(4,i).getContents().toString()
                                                                                                                                    
                                                                                     
                                  //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get methodcode1 from response json  
                        addCell(0,i,json.shippingMethods[0].methodCode.toString(),sheet1);
                          addCell(1,i,json.shippingMethods[0].shippingPrice.toString(),sheet1); 

                            // get methodcode2 from response json 
                        addCell(2,i,json.shippingMethods[1].methodCode.toString(),sheet1); 
                          addCell(3,i,json.shippingMethods[1].shippingPrice.toString(),sheet1)

                           // get methodcode3 from response json 
                        addCell(4,i,json.shippingMethods[2].methodCode.toString(),sheet1);
                          addCell(5,i,json.shippingMethods[2].shippingPrice.toString(),sheet1)

                            // get methodcode4 from response json 
                        addCell(6,i,json.shippingMethods[3].methodCode.toString(),sheet1); 
                             addCell(7,i,json.shippingMethods[3].shippingPrice.toString(),sheet1)                                 
                                            
                                                       
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          methodCode = sh.getCell(5,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,methodCode,"shippingMethods[0].methodCode","methodCode")

                           shippingPrice = sh.getCell(6,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,shippingPrice,"shippingMethods[0].shippingPrice","shippingPrice")

                                  methodCode = sh.getCell(7,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,methodCode,"shippingMethods[1].methodCode","methodCode")

                           shippingPrice = sh.getCell(8,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,shippingPrice,"shippingMethods[1].shippingPrice","shippingPrice")

              				methodCode = sh.getCell(9,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,methodCode,"shippingMethods[2].methodCode","methodCode")

                           shippingPrice = sh.getCell(10,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,shippingPrice,"shippingMethods[2].shippingPrice","shippingPrice")

					methodCode = sh.getCell(11,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,methodCode,"shippingMethods[3].methodCode","methodCode")

                           shippingPrice = sh.getCell(12,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,shippingPrice,"shippingMethods[3].shippingPrice","shippingPrice")

                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(8,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(9,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(8,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

            }             
     
catch(Exception e)
{

             log.info(e)                         
}

finally

{
    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request" id="822b4415-9fe2-4aff-b2a6-effa370f4923"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineShippingPriceForShippingMethod/DetermineShippingPriceForShippingMethod/WADL" methodName="DetermineShippingPriceForShippingMethod" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="c960d397-b5ca-4b90-b4a5-b38d03215324" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C123",
            "from": "string",
            "timestamp": "2020-02-24T04:48:33.000+0530"
        }
    },
    "shippingMethods": [
        {
            "methodCode": ""
        },
        {
            "methodCode": ""
        },
        {
            "methodCode": ""
        },
        {
            "methodCode": ""
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36973" id="a0e5c783-99e8-4f90-b884-dbae855c731b"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineShippingPriceForShippingMethod/DetermineShippingPriceForShippingMethod/WADL" methodName="DetermineShippingPriceForShippingMethod" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36973" id="c960d397-b5ca-4b90-b4a5-b38d03215324" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C123",
            "from": "string",
            "timestamp": "2020-02-24T04:48:33.000+0530"
        }
    },
    "shippingMethods": [
        {
            "methodCode": "SDAR"
        },
        {
            "methodCode": "NDSY"
        },
        {
            "methodCode": "NDAR"
        },
        {
            "methodCode": "NDAM"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineShippingPriceForShippingMethod/DetermineShippingPriceForShippingMethod/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="cb7a448c-fa2a-4f62-b91b-ab61bf3a231d" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="84768278-9cd5-436d-aab8-3c096dcd1c4e" name="methodCode"><con:configuration><path>shippingMethods[0].methodCode</path><content>SDAR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f0dfbaf7-4b33-47a2-a726-f6ff51573cec" name="shippingPrice"><con:configuration><path>shippingMethods[0].shippingPrice</path><content>25.5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ad534d98-9919-4a1f-8288-16cdb2d88ed1" name="methodCode"><con:configuration><path>shippingMethods[1].methodCode</path><content>NDSY</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1dde1a89-2dc4-4fdf-b80c-4c4a93bb28d9" name="shippingPrice"><con:configuration><path>shippingMethods[1].shippingPrice</path><content>37.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="20acaefb-688b-4887-b2b7-24901cc8b84b" name="methodCode"><con:configuration><path>shippingMethods[2].methodCode</path><content>NDAR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f07daf1-8e30-4279-bbc7-1aff075ac7e1" name="shippingPrice"><con:configuration><path>shippingMethods[2].shippingPrice</path><content>26.5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b295cfe-cb72-462c-aaa3-16691a6de744" name="methodCode"><con:configuration><path>shippingMethods[3].methodCode</path><content>NDAM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55b8c49f-286e-4b47-9cd6-1663ddc2ee9f" name="shippingPrice"><con:configuration><path>shippingMethods[3].shippingPrice</path><content>31.5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36974" id="07ccf4c8-8aa6-416b-b124-bf0ca3180885"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineShippingPriceForShippingMethod/DetermineShippingPriceForShippingMethod/WADL" methodName="DetermineShippingPriceForShippingMethod" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36974" id="c960d397-b5ca-4b90-b4a5-b38d03215324" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C123",
            "from": "string",
            "timestamp": "2020-02-24T04:48:33.000+0530"
        }
    },
    "shippingMethods": [
        {
            "methodCode": "EE$$QQ"
        },
        {
            "methodCode": "12355"
        },
        {
            "methodCode": "A23P"
        },
        {
            "methodCode": "XDE"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineShippingPriceForShippingMethod/DetermineShippingPriceForShippingMethod/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="268dd062-8a7a-4461-8166-e6c9c4f89d9c" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0e2ee818-3d70-49e8-9824-c2b27203c724" name="methodCode"><con:configuration><path>shippingMethods[0].methodCode</path><content>EE$$QQ</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c41df50a-8c78-4000-9476-d275011665a6" name="shippingPrice"><con:configuration><path>shippingMethods[0].shippingPrice</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5036c613-068f-4ed7-ae2e-c5dd506df81c" name="methodCode"><con:configuration><path>shippingMethods[1].methodCode</path><content>12355</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c31d079f-3094-4353-ada1-3a4c3c8554cd" name="shippingPrice"><con:configuration><path>shippingMethods[1].shippingPrice</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2bf57aa4-ca57-4e81-b213-ddc8288fe98a" name="methodCode"><con:configuration><path>shippingMethods[2].methodCode</path><content>A23P</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8d6e93e8-9acd-47dc-9cec-bac5677aa044" name="shippingPrice"><con:configuration><path>shippingMethods[2].shippingPrice</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bac55b2e-7e6e-4c68-a7f7-b277a28c60a9" name="methodCode"><con:configuration><path>shippingMethods[3].methodCode</path><content>XDE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="391ec4f0-52f8-4085-a0d2-6b1a72f883ce" name="shippingPrice"><con:configuration><path>shippingMethods[3].shippingPrice</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36975" id="70664817-3455-4469-96e1-33f02334053d"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineShippingPriceForShippingMethod/DetermineShippingPriceForShippingMethod/WADL" methodName="DetermineShippingPriceForShippingMethod" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36975" id="c960d397-b5ca-4b90-b4a5-b38d03215324" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C123",
            "from": "string",
            "timestamp": "2020-02-24T04:48:33.000+0530"
        }
    },
    "shippingMethods": [
        {
            "methodCode": "STRE"
        },
        {
            "methodCode": "GRND"
        },
        {
            "methodCode": "##12"
        },
        {
            "methodCode": "EE$$"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineShippingPriceForShippingMethod/DetermineShippingPriceForShippingMethod/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6db86fb2-8024-48c4-8024-1628742758a4" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0899e329-00f6-4ba7-bac7-b47eb440c76a" name="methodCode"><con:configuration><path>shippingMethods[0].methodCode</path><content>STRE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8b885a3b-f3f4-4091-a2fd-1e2863fe3f68" name="shippingPrice"><con:configuration><path>shippingMethods[0].shippingPrice</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c668cd68-6ff4-4d77-bfed-c75fec91cfa0" name="methodCode"><con:configuration><path>shippingMethods[1].methodCode</path><content>GRND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be32efda-cb8f-4010-afb5-67a294459d1b" name="shippingPrice"><con:configuration><path>shippingMethods[1].shippingPrice</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="676a8ed9-dec9-48e2-badd-be9d8dc2f596" name="methodCode"><con:configuration><path>shippingMethods[2].methodCode</path><content>##12</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0e72d332-43b7-41fe-a5e6-85c2f57e80f4" name="shippingPrice"><con:configuration><path>shippingMethods[2].shippingPrice</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eaf131d6-f3a9-4348-a535-df96862a9082" name="methodCode"><con:configuration><path>shippingMethods[3].methodCode</path><content>EE$$</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d3aaa88a-b58a-4c2f-905c-502320381e1c" name="shippingPrice"><con:configuration><path>shippingMethods[3].shippingPrice</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36976" id="79e9dd6f-9018-4abc-be98-cf35701cbac5"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineShippingPriceForShippingMethod/DetermineShippingPriceForShippingMethod/WADL" methodName="DetermineShippingPriceForShippingMethod" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36976" id="c960d397-b5ca-4b90-b4a5-b38d03215324" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C123",
            "from": "string",
            "timestamp": "2020-02-24T04:48:33.000+0530"
        }
    },
    "shippingMethods": [
        {
            "methodCode": "DRVR"
        },
        {
            "methodCode": ""
        },
        {
            "methodCode": ""
        },
        {
            "methodCode": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineShippingPriceForShippingMethod/DetermineShippingPriceForShippingMethod/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fc0bc05a-e87e-4158-a990-65a3608c9e7b" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="359204e3-0884-4cd4-93c8-0b8f326f1116" name="methodCode"><con:configuration><path>shippingMethods[0].methodCode</path><content>DRVR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="60e570ae-1981-436d-9b5d-4156e94fa434" name="shippingPrice"><con:configuration><path>shippingMethods[0].shippingPrice</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="faa52ee1-6463-425d-b044-d188ea3e2b55" name="methodCode"><con:configuration><path>shippingMethods[1].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2801bdf3-2336-4559-b236-5da48309e1dd" name="shippingPrice"><con:configuration><path>shippingMethods[1].shippingPrice</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="978f6640-cee1-4fce-8d93-54e0236061dd" name="methodCode"><con:configuration><path>shippingMethods[2].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f04fa704-229e-40a2-86e2-232a2b5d2653" name="shippingPrice"><con:configuration><path>shippingMethods[2].shippingPrice</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aa04d2cb-1cff-4b63-8e9b-411092364c40" name="methodCode"><con:configuration><path>shippingMethods[3].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="12141caf-e759-483d-a354-76164f0febde" name="shippingPrice"><con:configuration><path>shippingMethods[3].shippingPrice</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36977" id="faddc469-de53-469e-b370-accd9ff5f7a7"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineShippingPriceForShippingMethod/DetermineShippingPriceForShippingMethod/WADL" methodName="DetermineShippingPriceForShippingMethod" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36977" id="c960d397-b5ca-4b90-b4a5-b38d03215324" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C123",
            "from": "string",
            "timestamp": "2020-02-24T04:48:33.000+0530"
        }
    },
    "shippingMethods": [
        {
            "methodCode": ""
        },
        {
            "methodCode": ""
        },
        {
            "methodCode": ""
        },
        {
            "methodCode": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineShippingPriceForShippingMethod/DetermineShippingPriceForShippingMethod/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="71da03dd-cfc9-4160-8676-1a405fce44ec" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1a824393-1962-4617-a43e-92fbe824ab8f" name="methodCode"><con:configuration><path>shippingMethods[0].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0f625c3c-5290-441b-ab20-218c6bca368f" name="shippingPrice"><con:configuration><path>shippingMethods[0].shippingPrice</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="608571ec-8c9a-4ab6-9237-28e0104be111" name="methodCode"><con:configuration><path>shippingMethods[1].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0100c8a8-1c41-472c-b2db-0dfe31cc6c12" name="shippingPrice"><con:configuration><path>shippingMethods[1].shippingPrice</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6b43c0a6-9c8c-4149-9d67-972b7159e230" name="methodCode"><con:configuration><path>shippingMethods[2].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69d9f2a8-a3f0-4c6c-9fae-e5fa4796a57e" name="shippingPrice"><con:configuration><path>shippingMethods[2].shippingPrice</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6f0d43e9-623e-47cf-a972-2a10107d7c28" name="methodCode"><con:configuration><path>shippingMethods[3].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7304e14-9a3b-4738-a795-e61fc11155eb" name="shippingPrice"><con:configuration><path>shippingMethods[3].shippingPrice</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="8c056244-dd6f-4a3c-b806-b7ba91b0a175" name="DetermineWeeklyBillingAndCycleDays"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="666ec0d3-e00a-45c5-a987-431404e23cf3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineWeeklyBillingAndCycleDays" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DetermineWeeklyBillingAndCycleDays_SingleLineItem" id="f23bac83-defb-41c4-af62-91418c8580bc"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineWeeklyBillingAndCycleDays/DetermineWeeklyBillingAndCycleDays_input.xls"
def outputfile = projectDir + "/DetermineWeeklyBillingAndCycleDays/DetermineWeeklyBillingAndCycleDays_SingleLineItem_Output.xls"

//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults-SingleLineItem")
Sheet jsonInput = wb.getSheet("JSON-SingleLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file 
addCell(0,0,"isWeeklyBillingCode",sheet1);
addCell(1,0,"numberOfDaysInBillingCycle",sheet1);
addCell(2,0,"PASS/FAIL",sheet1);
addCell(3,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
              
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplete = new JsonBuilder(slurper);
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(1,i)
					     def TestCaseName = varTestCaseName.getContents()
                             
				          //Input for lineItemID
				          requestTemplete.content.lineItems[0].lineItemID =  sh.getCell(2,i).getContents().toString()
						  
				          //Input for hcpcsCode
				          requestTemplete.content.lineItems[0].hcpcsCode =  sh.getCell(3,i).getContents()

				                                  
                                //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSON Request-SingleLineItem');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSON Request - SingleLineItem");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                //def response = context.expand( '${TestRequest#Response}' ).toString()
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                     
				  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                                // extract the value of required elements fron the json response 		
                      		       // get isWeeklyBillingCode from response json           
                                addCell(0,i,json.weeklyBillingCycleDaysListResponses.weeklyBillingNeeded.toString(),sheet1);    
							// get numberOfDaysInBillingCycle from response json           
                                addCell(1,i,json.weeklyBillingCycleDaysListResponses.numberOfDaysInBillingCycle.toString(),sheet1);    
					       //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
								//get the expected values
								
  						  isWeeklyBillingCode = sh.getCell(4,i).getContents().toString()
  						  WeeklyBillingCode=json.weeklyBillingCycleDaysListResponses.weeklyBillingNeeded.toString()
                               addAssertionJsonPathMatch(testStepForAssertion,isWeeklyBillingCode,"weeklyBillingCycleDaysListResponses[0].weeklyBillingNeeded","isWeeklyBillingCode")

						  numberOfDaysInBillingCycle = sh.getCell(5,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,numberOfDaysInBillingCycle,"weeklyBillingCycleDaysListResponses[0].numberOfDaysInBillingCycle","numberOfDaysInBillingCycle")
                              
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                  
                                   addCell(2,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(3,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                	
                                  addCell(2,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}
</script></con:config></con:testStep><con:testStep type="groovy" name="DetermineWeeklyBillingAndCycleDays_MultiLineItem" id="e3f83def-6391-4344-a96c-a512b274fa14"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineWeeklyBillingAndCycleDays/DetermineWeeklyBillingAndCycleDays_input.xls"
def outputfile = projectDir + "/DetermineWeeklyBillingAndCycleDays/DetermineWeeklyBillingAndCycleDays_MultiLineItem_Output.xls"

//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults-MultiLineItem")
Sheet jsonInput = wb.getSheet("JSON-MultiLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file 
addCell(0,0,"isWeeklyBillingCode",sheet1);
addCell(1,0,"numberOfDaysInBillingCycle",sheet1);
addCell(2,0,"isWeeklyBillingCode",sheet1);
addCell(3,0,"numberOfDaysInBillingCycle",sheet1);
addCell(4,0,"PASS/FAIL",sheet1);
addCell(5,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
              
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplete = new JsonBuilder(slurper);
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(1,i)
					     def TestCaseName = varTestCaseName.getContents()
                             
				          //Input for lineItemID
				          requestTemplete.content.lineItems[0].lineItemID =  sh.getCell(2,i).getContents().toString()
						  
				          //Input for hcpcsCode
				          requestTemplete.content.lineItems[0].hcpcsCode =  sh.getCell(3,i).getContents()

				          //Input for lineItemID
				          requestTemplete.content.lineItems[1].lineItemID =  sh.getCell(4,i).getContents().toString()
						  
				          //Input for hcpcsCode
				          requestTemplete.content.lineItems[1].hcpcsCode =  sh.getCell(5,i).getContents()

				                                  
                                //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSON Request-MultiLineItem');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSON Request-MultiLineItem");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                //def response = context.expand( '${TestRequest#Response}' ).toString()
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                       log.info("testing started");
				  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                                // extract the value of required elements fron the json response 		
                      		       // get isWeeklyBillingCode from response json           
                                addCell(0,i,json.weeklyBillingCycleDaysListResponses[0].weeklyBillingNeeded.toString(),sheet1);    
						  addCell(2,i,json.weeklyBillingCycleDaysListResponses[1].weeklyBillingNeeded.toString(),sheet1);    
						
							// get numberOfDaysInBillingCycle from response json           
                                addCell(1,i,json.weeklyBillingCycleDaysListResponses[0].numberOfDaysInBillingCycle.toString(),sheet1);    
					       addCell(3,i,json.weeklyBillingCycleDaysListResponses[1].numberOfDaysInBillingCycle.toString(),sheet1);    
					      
					       //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
								//get the expected values
								
  						  isWeeklyBillingCode = sh.getCell(6,i).getContents().toString()
  						   isWeeklyBillingCode1 = sh.getCell(8,i).getContents().toString()
                               addAssertionJsonPathMatch(testStepForAssertion,isWeeklyBillingCode,"weeklyBillingCycleDaysListResponses[0].weeklyBillingNeeded","isWeeklyBillingCode")
                               addAssertionJsonPathMatch(testStepForAssertion,isWeeklyBillingCode1,"weeklyBillingCycleDaysListResponses[1].weeklyBillingNeeded","isWeeklyBillingCode")

						  numberOfDaysInBillingCycle = sh.getCell(7,i).getContents().toString()
						  numberOfDaysInBillingCycle1 = sh.getCell(9,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,numberOfDaysInBillingCycle,"weeklyBillingCycleDaysListResponses[0].numberOfDaysInBillingCycle","numberOfDaysInBillingCycle")
                               addAssertionJsonPathMatch(testStepForAssertion,numberOfDaysInBillingCycle1,"weeklyBillingCycleDaysListResponses[1].numberOfDaysInBillingCycle","numberOfDaysInBillingCycle")
                              
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                  
                                   addCell(2,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(3,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                	
                                  addCell(2,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request-SingleLineItem" id="c5678ab5-d9ce-44c9-83ae-9b9749e69504"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineWeeklyBillingAndCycleDays/DetermineWeeklyBillingAndCycleDays/WADL" methodName="DetermineWeeklyBillingAndCycleDays" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request-SingleLineItem" id="c59f134d-a8dc-4e36-8056-e04400f8413f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "invalid",
            "lineItemID": "L001"
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request-MultiLineItem" id="094a2c49-0ee9-47c1-9ff9-ba32e6100824"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineWeeklyBillingAndCycleDays/DetermineWeeklyBillingAndCycleDays/WADL" methodName="DetermineWeeklyBillingAndCycleDays" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request-MultiLineItem" id="c59f134d-a8dc-4e36-8056-e04400f8413f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4224",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "invalid",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="MultiLineItem_WeeklyCode_CycleBilling" id="b9e06d5c-b8e8-4f14-9bf1-9ab0272ccbf3"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineWeeklyBillingAndCycleDays/DetermineWeeklyBillingAndCycleDays/WADL" methodName="DetermineWeeklyBillingAndCycleDays" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="MultiLineItem_WeeklyCode_CycleBilling" id="c59f134d-a8dc-4e36-8056-e04400f8413f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4224",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "K0553",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineWeeklyBillingAndCycleDays/DetermineWeeklyBillingAndCycleDays/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d6f66089-1635-4d22-8e29-ff0300080262" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e1de59f3-9aa7-404f-a823-ca51cf60bd00" name="isWeeklyBillingCode"><con:configuration><path>weeklyBillingCycleDaysListResponses[0].weeklyBillingNeeded</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="08f63f68-25f0-48b2-b2dc-0a199a9152fc" name="isWeeklyBillingCode"><con:configuration><path>weeklyBillingCycleDaysListResponses[1].weeklyBillingNeeded</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c0bde6dc-fde3-4c92-af6f-f086c077d61c" name="numberOfDaysInBillingCycle"><con:configuration><path>weeklyBillingCycleDaysListResponses[0].numberOfDaysInBillingCycle</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="939f47f1-05d2-4c38-8328-4293b41ba285" name="numberOfDaysInBillingCycle"><con:configuration><path>weeklyBillingCycleDaysListResponses[1].numberOfDaysInBillingCycle</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="MultiLineItem_invalidWeeklyCode_validcycleBilling" id="897e60df-91b8-4d19-8219-ea6eeea565b6"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineWeeklyBillingAndCycleDays/DetermineWeeklyBillingAndCycleDays/WADL" methodName="DetermineWeeklyBillingAndCycleDays" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="MultiLineItem_invalidWeeklyCode_validcycleBilling" id="c59f134d-a8dc-4e36-8056-e04400f8413f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "invalid",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "K0553",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineWeeklyBillingAndCycleDays/DetermineWeeklyBillingAndCycleDays/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1cf55b51-fb16-4504-8533-a2a3b4f2773a" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="305dc99e-1f50-4fea-8d2c-7b55cf09387d" name="isWeeklyBillingCode"><con:configuration><path>weeklyBillingCycleDaysListResponses[0].weeklyBillingNeeded</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="84bb40a2-bd05-4a08-b69b-c16b67fd56d9" name="isWeeklyBillingCode"><con:configuration><path>weeklyBillingCycleDaysListResponses[1].weeklyBillingNeeded</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9c6ee015-62fd-4d24-a19a-b6dbd52a9c78" name="numberOfDaysInBillingCycle"><con:configuration><path>weeklyBillingCycleDaysListResponses[0].numberOfDaysInBillingCycle</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9ab0da89-0d05-4c82-a4a6-c5cbc28b947d" name="numberOfDaysInBillingCycle"><con:configuration><path>weeklyBillingCycleDaysListResponses[1].numberOfDaysInBillingCycle</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="MultiLineItem_validWeeklyCode_invalidcycleBilling" id="47ed0e57-92c2-4523-be0e-0554f094a4b9"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineWeeklyBillingAndCycleDays/DetermineWeeklyBillingAndCycleDays/WADL" methodName="DetermineWeeklyBillingAndCycleDays" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="MultiLineItem_validWeeklyCode_invalidcycleBilling" id="c59f134d-a8dc-4e36-8056-e04400f8413f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4224",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "invalid",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineWeeklyBillingAndCycleDays/DetermineWeeklyBillingAndCycleDays/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="19507c0a-aa07-4e0c-84e0-b3f9a24392aa" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85d54c32-5b38-439e-b957-439335d17abb" name="isWeeklyBillingCode"><con:configuration><path>weeklyBillingCycleDaysListResponses[0].weeklyBillingNeeded</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3463283a-0d7e-4a59-ada6-ccdafafcca20" name="isWeeklyBillingCode"><con:configuration><path>weeklyBillingCycleDaysListResponses[1].weeklyBillingNeeded</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="49473593-066b-4588-b965-8c6f8bdda974" name="numberOfDaysInBillingCycle"><con:configuration><path>weeklyBillingCycleDaysListResponses[0].numberOfDaysInBillingCycle</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="66c5e162-891f-45e5-bc58-17d9608460b7" name="numberOfDaysInBillingCycle"><con:configuration><path>weeklyBillingCycleDaysListResponses[1].numberOfDaysInBillingCycle</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="SingleLineItem_WeeklyCode" id="3b04aa54-7a06-4542-9d8b-0236f5e90a02"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineWeeklyBillingAndCycleDays/DetermineWeeklyBillingAndCycleDays/WADL" methodName="DetermineWeeklyBillingAndCycleDays" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SingleLineItem_WeeklyCode" id="c59f134d-a8dc-4e36-8056-e04400f8413f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4224",
            "lineItemID": "L001"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineWeeklyBillingAndCycleDays/DetermineWeeklyBillingAndCycleDays/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3cf167e9-e730-4e76-ad1f-997ce89b8880" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="89d9f628-8206-4e4d-8f04-2a794f61d038" name="isWeeklyBillingCode"><con:configuration><path>weeklyBillingCycleDaysListResponses[0].weeklyBillingNeeded</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4d5c80eb-b726-470e-9e88-c63f99573ef3" name="numberOfDaysInBillingCycle"><con:configuration><path>weeklyBillingCycleDaysListResponses[0].numberOfDaysInBillingCycle</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="SingleLineItem_CycleBilling" id="4431d83c-dfbd-4147-ad74-5fa19a84224f"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineWeeklyBillingAndCycleDays/DetermineWeeklyBillingAndCycleDays/WADL" methodName="DetermineWeeklyBillingAndCycleDays" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SingleLineItem_CycleBilling" id="c59f134d-a8dc-4e36-8056-e04400f8413f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "K0553",
            "lineItemID": "L001"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineWeeklyBillingAndCycleDays/DetermineWeeklyBillingAndCycleDays/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="283d9731-9b05-49b7-a6a0-0b2e34d21bc1" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="66d47142-5405-477f-b876-c4e1986be7a3" name="isWeeklyBillingCode"><con:configuration><path>weeklyBillingCycleDaysListResponses[0].weeklyBillingNeeded</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ac3dd1b4-1193-4cb2-8828-03f05aa876ab" name="numberOfDaysInBillingCycle"><con:configuration><path>weeklyBillingCycleDaysListResponses[0].numberOfDaysInBillingCycle</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="SingleLineItem_allinvalid" id="1fa62ffa-d03f-4009-a6f7-fb659eece686"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineWeeklyBillingAndCycleDays/DetermineWeeklyBillingAndCycleDays/WADL" methodName="DetermineWeeklyBillingAndCycleDays" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SingleLineItem_allinvalid" id="c59f134d-a8dc-4e36-8056-e04400f8413f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "invalid",
            "lineItemID": "L001"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineWeeklyBillingAndCycleDays/DetermineWeeklyBillingAndCycleDays/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3c720f55-7957-49fe-baa2-27143196b7ca" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="457927ef-cac6-4da7-933e-c018b3900732" name="isWeeklyBillingCode"><con:configuration><path>weeklyBillingCycleDaysListResponses[0].weeklyBillingNeeded</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2a690533-3cc8-4325-9d31-572d3bdec3d9" name="numberOfDaysInBillingCycle"><con:configuration><path>weeklyBillingCycleDaysListResponses[0].numberOfDaysInBillingCycle</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="e3112c10-d0fa-424f-a261-4a7c674f1e43" name="DetermineBackOrderReprocessing"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="3853ebda-312c-4ec0-8f80-fb83bffa8966" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineBackOrderReprocessing" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DetermineBackOrderReprocessing-inTimeRange." id="f4b8eabf-9904-4e2e-836a-eace55c231dc"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineBackOrderReprocessing/DetermineBackOrderReprocessing-InRange-Input.xls"
def outputfile = projectDir + "/DetermineBackOrderReprocessing/DetermineBackOrderReprocessing-InRange-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"withinWarehouseProcessingTimes",sheet1);
addCell(1,0,"PASS/FAIL",sheet1);
addCell(2,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                 //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get withinWarehouseProcessingTimes from response json                                 
                        addCell(0,i,json.withinWarehouseProcessingTimes.toString(),sheet1);                                   
                                                                              
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          withinWarehouseProcessingTimes = sh.getCell(1,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,withinWarehouseProcessingTimes,"withinWarehouseProcessingTimes","withinWarehouseProcessingTimes")
                     
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(1,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(2,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(1,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="groovy" name="DetermineBackOrderReprocessing-outOfTimeRange." id="cae916a2-8155-4b72-90f3-42f828fc3222"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineBackOrderReprocessing/DetermineBackOrderReprocessing-OutOfRange-Input.xls"
def outputfile = projectDir + "/DetermineBackOrderReprocessing/DetermineBackOrderReprocessing-OutOfRange-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"withinWarehouseProcessingTimes",sheet1);
addCell(1,0,"PASS/FAIL",sheet1);
addCell(2,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                 //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get withinWarehouseProcessingTimes from response json                                 
                        addCell(0,i,json.withinWarehouseProcessingTimes.toString(),sheet1);                                   
                                                                              
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          withinWarehouseProcessingTimes = sh.getCell(1,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,withinWarehouseProcessingTimes,"withinWarehouseProcessingTimes","withinWarehouseProcessingTimes")
                     
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(1,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(2,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(1,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request" id="5e3880d6-8fe2-4578-848d-833896ee36fa"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBackOrderReprocessing/DetermineBackOrderReprocessing/WADL" methodName="DetermineBackOrderReprocessing" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="7e96302b-89ce-4c6d-bf3f-7bdd204335d4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42790" id="55cfc554-8dd6-486f-960a-bcdd9aaddea2"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBackOrderReprocessing/DetermineBackOrderReprocessing/WADL" methodName="DetermineBackOrderReprocessing" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42790" id="7e96302b-89ce-4c6d-bf3f-7bdd204335d4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBackOrderReprocessing/DetermineBackOrderReprocessing/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f2f60331-54b6-460c-9051-b2b4ecf2d72d" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="90d5203d-62f3-4312-a60b-8048df1e76d2" name="withinWarehouseProcessingTimes"><con:configuration><path>withinWarehouseProcessingTimes</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42791 &amp; EPST-42792" id="3f0cfed5-b395-4420-b1b8-8ebe3e82c583"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBackOrderReprocessing/DetermineBackOrderReprocessing/WADL" methodName="DetermineBackOrderReprocessing" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42791 &amp; EPST-42792" id="7e96302b-89ce-4c6d-bf3f-7bdd204335d4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBackOrderReprocessing/DetermineBackOrderReprocessing/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="05ee717a-6d15-407b-89f7-fca2ebce2767" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="447b50db-4838-4430-a533-c3cf7268c8b1" name="withinWarehouseProcessingTimes"><con:configuration><path>withinWarehouseProcessingTimes</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="d4d2c89d-571f-44da-9577-1f626f18e61e" name="DetermineBillingIndicator"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="d681c77e-cd41-40fc-9dac-7da6de693b77" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineBillingIndicator" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DetermineBillingIndicator_SingleLineItem" id="7e0ce3b0-2447-4ca2-af0e-48f4142159b3"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineBillingIndicator/DetermineBillingIndicator_Input.xls"
def outputfile = projectDir + "/DetermineBillingIndicator/DetermineBillingIndicator_SingleLineItem_Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults-SingleLineItem")
Sheet jsonInput = wb.getSheet("JSON-SingleLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"hcpcsCode",sheet1);
addCell(2,0,"itemNumber",sheet1);
addCell(3,0,"extendedUnits",sheet1);
addCell(4,0,"planName",sheet1);
addCell(5,0,"incrementalBilling",sheet1);
addCell(6,0,"cycleBilling",sheet1);
addCell(7,0,"minimumCycleQuantity",sheet1);
addCell(8,0,"PASS/FAIL",sheet1);
addCell(9,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                 //Input for Line Item ID                                                             
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for hcpcsCode                                   
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents()
                                //Input for itemNumber                                  
                                requestTemplet.content.lineItems[0].itemNumber = sh.getCell(3,i).getContents() 
                                //Input for extendedUnits                                  
                                requestTemplet.content.lineItems[0].extendedUnits = sh.getCell(4,i).getContents() 
                                //Input for id                                  
                                requestTemplet.content.lineItems[0].payers[0].id = sh.getCell(5,i).getContents()
                                //Input for planName                                  
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(6,i).getContents().toString()
                                //Input for assignedOrder                                  
                                requestTemplet.content.lineItems[0].payers[0].assignedOrder = sh.getCell(7,i).getContents()                                                                                                            
                                                                                     
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json  
                        addCell(0,i,json.lineItems[0].lineItemID,sheet1);                                   
                          // get hcpcsCode from response json                               
                        addCell(1,i,json.lineItems[0].hcpcsCode,sheet1);                                   
                          // get itemNumber from response json                                   
                        addCell(2,i,json.lineItems[0].itemNumber,sheet1); 
                        // get extendedUnits from response json                                   
                        addCell(3,i,json.lineItems[0].extendedUnits.toString(),sheet1);
                        // get planName from response json                                   
                        addCell(4,i,json.lineItems[0].payers[0].planName.toString(),sheet1); 
                        // get IncrementalBilling from response json                                 
                        addCell(5,i,json.lineItems[0].incrementalBilling.toString(),sheet1); 
                        // get cycleBilling from response json                                 
                        addCell(6,i,json.lineItems[0].cycleBilling.toString(),sheet1);  
                         // get minimumCycleQuantity from response json  
                        addCell(7,i,json.lineItems[0].minimumCycleQuantity.toString(),sheet1); 
                                                                           
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(8,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"lineItems[0].lineItemID","lineItemID")

                           hcpcsCode = sh.getCell(9,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,hcpcsCode,"lineItems[0].hcpcsCode","hcpcsCode")

                          itemNumber = sh.getCell(10,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,itemNumber,"lineItems[0].itemNumber","itemNumber")

                       extendedUnits = sh.getCell(11,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,extendedUnits,"lineItems[0].extendedUnits","extendedUnits")

                       planName = sh.getCell(12,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,planName,"lineItems[0].payers[0].planName","planName")

                       incrementalBilling = sh.getCell(13,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,incrementalBilling,"lineItems[0].incrementalBilling","incrementalBilling")

                       cycleBilling = sh.getCell(14,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,cycleBilling,"lineItems[0].cycleBilling","cycleBilling")

                       minimumCycleQuantity = sh.getCell(15,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,minimumCycleQuantity,"lineItems[0].minimumCycleQuantity","minimumCycleQuantity")

                       
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(8,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(9,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(8,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

            }             
     
catch(Exception e)
{

             log.info(e)                         
}

finally

{
    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="groovy" name="DetermineBillingIndicator_MultiLineItem" id="4ddb3f14-683c-47ca-8d4a-0672c2054e71"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineBillingIndicator/DetermineBillingIndicator_Input.xls"
def outputfile = projectDir + "/DetermineBillingIndicator/DetermineBillingIndicator_MultiLineItem_Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults-MultiLineItem")
Sheet jsonInput = wb.getSheet("JSON-MultiLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID1",sheet1);
addCell(1,0,"hcpcsCode1",sheet1);
addCell(2,0,"itemNumber1",sheet1);
addCell(3,0,"extendedUnits1",sheet1);
addCell(4,0,"planName1",sheet1);
addCell(5,0,"incrementalBilling1",sheet1);
addCell(6,0,"cycleBilling1",sheet1);
addCell(7,0,"minimumCycleQuantity1",sheet1);
addCell(8,0,"lineItemID2",sheet1);
addCell(9,0,"hcpcsCode2",sheet1);
addCell(10,0,"itemNumber2",sheet1);
addCell(11,0,"extendedUnits2",sheet1);
addCell(12,0,"planName2",sheet1);
addCell(13,0,"incrementalBilling2",sheet1);
addCell(14,0,"cycleBilling2",sheet1);
addCell(15,0,"minimumCycleQuantity2",sheet1);
addCell(16,0,"PASS/FAIL",sheet1);
addCell(17,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

//try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                 //Input for Line Item ID 1                                                           
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for hcpcsCode                                   
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents()
                                //Input for itemNumber                                  
                                requestTemplet.content.lineItems[0].itemNumber = sh.getCell(3,i).getContents() 
                                //Input for extendedUnits                                  
                                requestTemplet.content.lineItems[0].extendedUnits = sh.getCell(4,i).getContents() 
                                //Input for id                                  
                                requestTemplet.content.lineItems[0].payers[0].id = sh.getCell(5,i).getContents().toString()
                                //Input for planName                                  
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(6,i).getContents().toString()
                                //Input for assignedOrder                                  
                                requestTemplet.content.lineItems[0].payers[0].assignedOrder = sh.getCell(7,i).getContents()                                                                                                            
                                                                                     
                                 //Input for Line Item ID 2                                                           
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(8,i).getContents()
                                 //Input for hcpcsCode                                   
                                requestTemplet.content.lineItems[1].hcpcsCode = sh.getCell(9,i).getContents()
                                //Input for itemNumber                                  
                                requestTemplet.content.lineItems[1].itemNumber = sh.getCell(10,i).getContents() 
                                //Input for extendedUnits                                  
                                requestTemplet.content.lineItems[1].extendedUnits = sh.getCell(11,i).getContents() 
                                //Input for id                                  
                                requestTemplet.content.lineItems[1].payers[0].id = sh.getCell(12,i).getContents()
                                //Input for planName                                  
                                requestTemplet.content.lineItems[1].payers[0].planName = sh.getCell(13,i).getContents().toString()
                                //Input for assignedOrder                                  
                                requestTemplet.content.lineItems[1].payers[0].assignedOrder = sh.getCell(14,i).getContents()  
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID1 from response json  
                        addCell(0,i,json.lineItems[0].lineItemID,sheet1);                                   
                          // get hcpcsCode1 from response json                               
                        addCell(1,i,json.lineItems[0].hcpcsCode,sheet1);                                   
                          // get itemNumber1 from response json                                   
                        addCell(2,i,json.lineItems[0].itemNumber,sheet1); 
                        // get extendedUnits1 from response json                                   
                        addCell(3,i,json.lineItems[0].extendedUnits.toString(),sheet1);
                        // get planName1 from response json                                   
                        addCell(4,i,json.lineItems[0].payers[0].planName.toString(),sheet1); 
                        // get IncrementalBilling1 from response json                                 
                        addCell(5,i,json.lineItems[0].incrementalBilling.toString(),sheet1); 
                        // get cycleBilling1 from response json                                 
                        addCell(6,i,json.lineItems[0].cycleBilling.toString(),sheet1);  
                         // get minimumCycleQuantity1 from response json  
                        addCell(7,i,json.lineItems[0].minimumCycleQuantity.toString(),sheet1); 

                        // get lineItemID2 from response json  
                        addCell(8,i,json.lineItems[1].lineItemID,sheet1);                                   
                          // get hcpcsCode2 from response json                               
                        addCell(9,i,json.lineItems[1].hcpcsCode,sheet1);                                   
                          // get itemNumber2 from response json                                   
                        addCell(10,i,json.lineItems[1].itemNumber,sheet1); 
                        // get extendedUnits2 from response json                                   
                        addCell(11,i,json.lineItems[1].extendedUnits.toString(),sheet1);
                        // get planName2 from response json                                   
                        addCell(12,i,json.lineItems[1].payers[0].planName.toString(),sheet1); 
                        // get IncrementalBilling2 from response json                                 
                        addCell(13,i,json.lineItems[1].incrementalBilling.toString(),sheet1); 
                        // get cycleBilling2 from response json                                 
                        addCell(14,i,json.lineItems[1].cycleBilling.toString(),sheet1);  
                         // get minimumCycleQuantity2 from response json  
                        addCell(15,i,json.lineItems[1].minimumCycleQuantity.toString(),sheet1); 
                                                                           
                                                          
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values for Line Item 1
                          lineItemID = sh.getCell(15,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"lineItems[0].lineItemID","lineItemID")

                           hcpcsCode = sh.getCell(16,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,hcpcsCode,"lineItems[0].hcpcsCode","hcpcsCode")

                          itemNumber = sh.getCell(17,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,itemNumber,"lineItems[0].itemNumber","itemNumber")

                       extendedUnits = sh.getCell(18,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,extendedUnits,"lineItems[0].extendedUnits","extendedUnits")

                       planName = sh.getCell(19,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,planName,"lineItems[0].payers[0].planName","planName")

                       incrementalBilling = sh.getCell(20,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,incrementalBilling,"lineItems[0].incrementalBilling","incrementalBilling")

                       cycleBilling = sh.getCell(21,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,cycleBilling,"lineItems[0].cycleBilling","cycleBilling")

                       minimumCycleQuantity = sh.getCell(22,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,minimumCycleQuantity,"lineItems[0].minimumCycleQuantity","minimumCycleQuantity")

                       //get the expected values for Line Item 2
                          lineItemID = sh.getCell(23,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"lineItems[1].lineItemID","lineItemID")

                           hcpcsCode = sh.getCell(24,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,hcpcsCode,"lineItems[1].hcpcsCode","hcpcsCode")

                          itemNumber = sh.getCell(25,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,itemNumber,"lineItems[1].itemNumber","itemNumber")

                       extendedUnits = sh.getCell(26,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,extendedUnits,"lineItems[1].extendedUnits","extendedUnits")

                       planName = sh.getCell(27,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,planName,"lineItems[1].payers[0].planName","planName")

                       incrementalBilling = sh.getCell(28,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,incrementalBilling,"lineItems[1].incrementalBilling","incrementalBilling")

                       cycleBilling = sh.getCell(29,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,cycleBilling,"lineItems[1].cycleBilling","cycleBilling")

                       minimumCycleQuantity = sh.getCell(30,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,minimumCycleQuantity,"lineItems[1].minimumCycleQuantity","minimumCycleQuantity")

                       
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(16,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(17,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(16,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

         //   }             
     
//catch(Exception e)
//{

           //  log.info(e)                         
//}

//finally

//{
    //close workbook
     wb.close();
     wb1.close();     

//}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request" id="68385415-42d5-4abe-94b8-67d2a88324a9"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "",
            "hcpcsCode": "K0553",
            "itemNumber": "TW7194001",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "B187"
                }
            ]
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36129" id="ca712d89-a775-47f5-b9bb-bc9a1ce2f26a"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36129" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "3",
            "hcpcsCode": "K0553",
            "itemNumber": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "B127"
                }
            ]
        },
        {
            "extendedUnits": "5",
            "hcpcsCode": "K0554",
            "itemNumber": "",
            "lineItemID": "0002",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "B197"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="116ee92a-7a7a-4048-9bed-aaa215cb2d4c" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fadba048-2aab-4c08-9f86-f3076f280090" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="044e1cac-68c4-43a5-87db-461c032e5145" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>K0553</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f7e83176-85c7-485b-884a-d20edb1f5082" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6c06ce00-133a-4ab1-aa29-4365e83760ae" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e02bf782-56dc-4f9f-972b-d1cd608608e4" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B127</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7d400a26-fb7f-4940-8a61-f5d3cad388e1" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8842ae53-122d-4695-a494-dbac92cb1cec" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6754f26d-9c22-409e-8761-769c2ab004c2" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="415da3fa-ed81-4232-a8ea-ca39b0228d9d" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f1125cb-32c0-4a1d-be6b-d84bf00d6686" name="hcpcsCode"><con:configuration><path>lineItems[1].hcpcsCode</path><content>K0554</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b470290c-3c33-4707-a29c-46eec482a5e2" name="itemNumber"><con:configuration><path>lineItems[1].itemNumber</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d07da571-904f-44c7-821c-d635b48da73c" name="extendedUnits"><con:configuration><path>lineItems[1].extendedUnits</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1daaf443-4d0f-4b8a-a28a-6c4e67e23cf2" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content>B197</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="89b345ba-7956-433b-9d08-5d92fa2cf9da" name="incrementalBilling"><con:configuration><path>lineItems[1].incrementalBilling</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e199150c-3747-4948-9cea-5240284d06a6" name="cycleBilling"><con:configuration><path>lineItems[1].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3efbf053-5b3f-49b5-ab7c-f3e16d845d0d" name="minimumCycleQuantity"><con:configuration><path>lineItems[1].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36130" id="9104a7de-85f4-4957-bcf6-34dec20fe67f"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36130" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "6",
            "hcpcsCode": "TE$#%#4",
            "itemNumber": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "A633"
                }
            ]
        },
        {
            "extendedUnits": "2",
            "hcpcsCode": "K0553",
            "itemNumber": "",
            "lineItemID": "0002",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "A633"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09299bd1-c022-4faf-a1c6-62bcbcfe88bf" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cc3bae5e-1f6c-416e-b8d3-1f2633ef3a18" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d4895b4d-6c58-4abc-afe7-557eb6f87889" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>TE$#%#4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="08be6a20-a7fd-434b-9d23-70882c7112c9" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7669b432-ee58-4d4a-a455-6ccf7e0b4693" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4e01fbc5-9860-43f1-814e-6cc574fb88e8" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>A633</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="de3538e0-9014-4950-9174-b3390647a626" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="92af4b99-1f2d-43ca-8be5-7ad813b285e5" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="164be839-7dfc-4f28-8dc3-203407185abb" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6ee667aa-03e1-4b11-9e1a-8563246879ca" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="756c085b-f366-4f1c-b386-0bdcf17b70da" name="hcpcsCode"><con:configuration><path>lineItems[1].hcpcsCode</path><content>K0553</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="39d74f5c-c658-4610-8a96-8776a1544132" name="itemNumber"><con:configuration><path>lineItems[1].itemNumber</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c30cfc65-47aa-4c39-9465-14b87193446e" name="extendedUnits"><con:configuration><path>lineItems[1].extendedUnits</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="58d4fb58-ed50-45b4-a7ea-4fe63c1363ae" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content>A633</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a4d6af64-0dd5-4c64-a394-2ea764e69b95" name="incrementalBilling"><con:configuration><path>lineItems[1].incrementalBilling</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="507a8ca8-6b1f-4cef-80ec-940d71d795f4" name="cycleBilling"><con:configuration><path>lineItems[1].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f795d528-76a9-44c1-af5d-8eb64ec66791" name="minimumCycleQuantity"><con:configuration><path>lineItems[1].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36131" id="cc83c4a6-7b1d-40a1-8a2a-aae6874896d2"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36131" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "0",
            "hcpcsCode": "K0554",
            "itemNumber": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "A012"
                }
            ]
        },
        {
            "extendedUnits": "0",
            "hcpcsCode": "K0554",
            "itemNumber": "",
            "lineItemID": "0002",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "B127"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7bd317c8-d06d-41b3-ba3c-6e07c96a89b6" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dbdf2d98-a362-4c3f-8ac9-1f19e33072e3" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f8bb8b7d-c0c6-42f7-9b7f-bda420c2f636" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>K0554</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="58bffa68-1b3e-4895-8262-408fbf31ca7e" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="230edd75-911f-4528-a2c8-f40bef78ec8e" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="98ed9427-a8f5-46f7-99d2-279f76713db7" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>A012</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3e26ab7d-6c0a-4f86-98f9-77f7fb1f994c" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="77467799-c9d8-4857-8ea8-eca3fbd56efc" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9ee8335d-234f-41cc-9a9c-b4249d4ce359" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5b1460d5-befc-4059-bf71-f73fc00151d4" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="35d47fa0-3719-4536-ab63-9a659aace2d7" name="hcpcsCode"><con:configuration><path>lineItems[1].hcpcsCode</path><content>K0554</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ade84b2b-5ef5-47fc-b414-e4edbbde662e" name="itemNumber"><con:configuration><path>lineItems[1].itemNumber</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="532082f1-ff5d-43a1-9ab4-6b6f71fe9226" name="extendedUnits"><con:configuration><path>lineItems[1].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="08016c23-de93-4614-b31d-abf6e9182886" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content>B127</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e3f698a2-3601-4773-abae-cd69a159ca40" name="incrementalBilling"><con:configuration><path>lineItems[1].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aec60afc-a5a3-433f-8818-912a6faf3572" name="cycleBilling"><con:configuration><path>lineItems[1].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="50259bf8-f839-426f-96ab-180595395d1d" name="minimumCycleQuantity"><con:configuration><path>lineItems[1].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36132" id="78cdc4c7-e1e7-4526-929b-500ecf3ec0f4"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36132" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "2",
            "hcpcsCode": "2423$#$",
            "itemNumber": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "AAAA"
                }
            ]
        },
        {
            "extendedUnits": "4",
            "hcpcsCode": "AB#%5",
            "itemNumber": "",
            "lineItemID": "0002",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "GU655"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="da1132fd-f0ef-479f-833f-0940a70b6603" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="add120fc-3779-43f6-800a-fe1f152fcb9b" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a9a192a3-38a0-4603-8285-b0f178ff4904" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>2423$#$</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="30bc281f-b225-44ea-8933-462c701a576a" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="86960bdb-0e0d-49c8-a766-904747641dde" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e6fe1da-acb0-4e28-9841-eb1e8ffc1463" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>AAAA</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="23ecfaa1-189a-45c4-b2a9-7bd090713dd7" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="478ad29c-6842-4dd5-a086-a8289c855801" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2a0519d4-90eb-4bf9-a0fe-ece46ba644b3" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="660880be-d735-419f-b6a7-4d79e3cb032e" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e6464542-084e-4f98-8f2c-652fdb3d7ba9" name="hcpcsCode"><con:configuration><path>lineItems[1].hcpcsCode</path><content>AB#%5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b2098a2-228c-4a89-a950-9242970814cc" name="itemNumber"><con:configuration><path>lineItems[1].itemNumber</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b17b0458-0bee-4bc7-b3fe-9a62a159eb5f" name="extendedUnits"><con:configuration><path>lineItems[1].extendedUnits</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a580b114-c0c0-46d7-bd50-63b6895231fa" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content>GU655</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3ed6326f-69ca-4105-b9f2-f651c52bb2d4" name="incrementalBilling"><con:configuration><path>lineItems[1].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b293941d-f479-47cf-ae97-a627bb201e06" name="cycleBilling"><con:configuration><path>lineItems[1].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f089f5a-a8dc-4828-bd2c-f413c300f007" name="minimumCycleQuantity"><con:configuration><path>lineItems[1].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36133" id="52cb07c9-04d5-47fe-8cb1-06fc57a1bd95"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36133" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "1",
            "hcpcsCode": "testing23",
            "itemNumber": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "ABBBB"
                }
            ]
        },
        {
            "extendedUnits": "0",
            "hcpcsCode": "123EE",
            "itemNumber": "",
            "lineItemID": "0002",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "WWW#23"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="5467105d-6652-4fa1-840a-d748b4c71e73" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="100cb1d7-1f5b-41a0-9694-26e89ba5f7ed" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8fb173db-3759-4972-8b17-f04f6a1acbb0" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>testing23</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f1a2ef62-1713-4c9a-9dab-f2aa6ef547dd" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="29c30db4-c96e-484a-aeb3-fdf9bcbf2ac7" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4fdbba1d-42e8-4978-9133-ad4bc0c1153f" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>ABBBB</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1ebd41cc-2269-4574-ba30-b845158957f8" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1b72e71c-9d3f-47b7-89f6-d5ad31380b62" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ba4ed6d0-8da1-4dc9-a3a8-48f6ca1ef184" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="104df3d3-36c8-4e25-8ccd-d175ab193389" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bf8f04eb-3673-4869-a7d1-768d06b5ec14" name="hcpcsCode"><con:configuration><path>lineItems[1].hcpcsCode</path><content>123EE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6323d4ea-7f94-4971-a21d-019f9cf8ffe0" name="itemNumber"><con:configuration><path>lineItems[1].itemNumber</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a9f368c0-c543-4308-836b-cb83e471fdb0" name="extendedUnits"><con:configuration><path>lineItems[1].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f9088cb-6894-4c99-91f4-16be2c2a4322" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content>WWW#23</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8903d0b9-2d19-4d69-88e0-862c0c8c73aa" name="incrementalBilling"><con:configuration><path>lineItems[1].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="61f1c3ad-1fc9-4b75-8148-cb2cccfd14c5" name="cycleBilling"><con:configuration><path>lineItems[1].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b1b26ef7-3e10-4379-9058-0d00779fbb29" name="minimumCycleQuantity"><con:configuration><path>lineItems[1].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36134" id="a8d626d0-3199-4065-8ee6-bcffa3758675"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36134" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "0",
            "hcpcsCode": "A9276",
            "itemNumber": "TW7194001",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "A072"
                }
            ]
        },
        {
            "extendedUnits": "0",
            "hcpcsCode": "K0553",
            "itemNumber": "EDSTSGL041",
            "lineItemID": "0002",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "B187"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="96ed0158-4e8d-4199-a9ea-97e9f2c46856" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aa199ed0-359c-42a4-85a0-f4b26790d030" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="de6b4e5a-b39a-4fec-bef6-a7fea444461c" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>A9276</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="97a2501a-4f29-4ff7-afac-61154f1a5b68" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content>TW7194001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0bb52683-b593-4f70-bdf7-672b1b67e592" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ca59744a-6827-4aa0-8d36-7ec3aba2e458" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>A072</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9d9b7c8f-a58d-457f-8686-540ccdb0ed7f" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef605daa-4dbf-46d7-999a-05399293001c" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="abafd6df-3b52-46ed-b325-122fbb486e7f" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7a91ee35-8deb-4308-8ddc-ab3edccb37df" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a557e0a4-2d4a-40d5-adaa-a9d6b5cc2ebc" name="hcpcsCode"><con:configuration><path>lineItems[1].hcpcsCode</path><content>K0553</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3772dfaf-7010-4daf-a242-fbace14df09c" name="itemNumber"><con:configuration><path>lineItems[1].itemNumber</path><content>EDSTSGL041</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b2dc03a6-6608-4f53-b5f9-e8c6711fdbc2" name="extendedUnits"><con:configuration><path>lineItems[1].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d3cf8b0e-b88b-4976-8149-b0630d2d0972" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19369ec1-988f-47cf-929f-af1593e77b2b" name="incrementalBilling"><con:configuration><path>lineItems[1].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="00561e03-4a48-4e14-bd95-fc2fde0ae418" name="cycleBilling"><con:configuration><path>lineItems[1].cycleBilling</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="48d91023-201f-4580-9216-00384d2877fe" name="minimumCycleQuantity"><con:configuration><path>lineItems[1].minimumCycleQuantity</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36135" id="4c739219-a59f-4699-9868-ffaf8f782c7b"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36135" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "0",
            "hcpcsCode": "TEST@1",
            "itemNumber": "EDSTSOR003",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "B187"
                }
            ]
        },
        {
            "extendedUnits": "0",
            "hcpcsCode": "123rtf",
            "itemNumber": "TW7194001",
            "lineItemID": "0002",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "A072"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="15772f7f-4a0f-40b3-a59f-27c981f144fc" name="Valid HTTP Status Codes_8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ee13e29c-304b-42cb-8d74-52b077b8f9bd" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9c0acf0f-5a1a-4270-8fe7-89c602b6817d" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>TEST@1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="11fbaa13-c124-4a7b-89e6-cce55ca3c7fd" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content>EDSTSOR003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3ad59b7f-fbe7-4c03-b9e4-05d9b34c49a8" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d1dffa4-a681-4d74-95f7-4503a064f450" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4258fd0f-743f-435c-b48c-31b7f9b5bd19" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d99ddbf5-231a-477f-bbfb-84f7a13482cf" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="41ca7881-fcf0-4da6-a982-b73c987d0283" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1640afc8-2726-4f8d-9e8c-71dc900441b2" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b801450b-bf89-4ee1-a528-9e982f4602c9" name="hcpcsCode"><con:configuration><path>lineItems[1].hcpcsCode</path><content>123rtf</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0743e391-8896-4edf-870b-e10cb1dcb8fd" name="itemNumber"><con:configuration><path>lineItems[1].itemNumber</path><content>TW7194001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="62dcfd3c-75d8-43e4-bb7d-c280e0272b37" name="extendedUnits"><con:configuration><path>lineItems[1].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6caacae6-9356-4714-b09e-33bfc912d41f" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content>A072</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7a2be10e-07da-4c6a-97e2-85ccebaaa57d" name="incrementalBilling"><con:configuration><path>lineItems[1].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9caec442-fec3-4867-a142-0b928ceca281" name="cycleBilling"><con:configuration><path>lineItems[1].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d45611e4-0d23-4a38-9d1c-a2724c96eed0" name="minimumCycleQuantity"><con:configuration><path>lineItems[1].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36136" id="e169c79c-10d9-43f5-8d09-7e67dde9c950"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36136" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "0",
            "hcpcsCode": "K0553",
            "itemNumber": "EDSTSOR003",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "B187"
                }
            ]
        },
        {
            "extendedUnits": "0",
            "hcpcsCode": "TEST@1",
            "itemNumber": "TW7194001",
            "lineItemID": "0002",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "xyz"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7e78fd2f-5245-4093-8d21-d7cd22f42079" name="Valid HTTP Status Codes_9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3212372e-cb91-467c-98e2-d2af1d5b3c77" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="54fe4d26-7835-4161-a493-5162a4e029ba" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>K0553</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b19f3c73-6b25-492b-9953-33efedcefd05" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content>EDSTSOR003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5a45bf14-7010-480f-9b59-203e986b54ef" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ee549f74-edd0-4cd7-8eb3-8787425ecef2" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="59640cc3-b82c-44c0-bed2-25eb4e03f0c5" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4f1d6fad-c23c-4e06-bcf5-5888dd6c18d7" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5be18519-35db-45d6-9ded-90a3ee4db631" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="15c659a6-d457-4b7d-b95b-3852419189cc" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="752021f9-e67c-45ab-a854-9804b597a010" name="hcpcsCode"><con:configuration><path>lineItems[1].hcpcsCode</path><content>TEST@1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3df24614-bbe8-4c82-8e15-d9f075a8d973" name="itemNumber"><con:configuration><path>lineItems[1].itemNumber</path><content>TW7194001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dcaa3eed-e637-4bd4-9ae4-b2462453b1e2" name="extendedUnits"><con:configuration><path>lineItems[1].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="937bb74d-30ae-48b9-bd09-7473bfdd56bd" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content>xyz</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="16ed89db-973f-488c-be56-e6e758adf9ae" name="incrementalBilling"><con:configuration><path>lineItems[1].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2ffad48f-4a79-4fcf-be4b-fa1d5caa38dc" name="cycleBilling"><con:configuration><path>lineItems[1].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7a6fb69c-d4ef-4663-b21a-299316849114" name="minimumCycleQuantity"><con:configuration><path>lineItems[1].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36137" id="86ee18d3-9e08-4eb8-9851-3438788341b6"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36137" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "0",
            "hcpcsCode": "123rtf",
            "itemNumber": "fgg##$4",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "#$%$##"
                }
            ]
        },
        {
            "extendedUnits": "0",
            "hcpcsCode": "TEST@2",
            "itemNumber": "43534",
            "lineItemID": "0002",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "xy54343"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b22079cd-ec39-4995-96d9-0bf6819fc1ad" name="Valid HTTP Status Codes_10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4051e456-e790-4a83-8319-ce6ff2ffd7fc" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f6d2f916-0d66-46d2-86ac-a5806ef5e143" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>123rtf</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="84bff978-c48b-47f3-b92d-b7f78db422f2" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content>fgg##$4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0d457b63-ede4-46dc-baeb-3ffbda3b1c0b" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6d920ada-19ac-4181-ba33-17faa15e5572" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>#$%$##</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="caece01c-7f44-4f09-8a71-65022e1323fa" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7517ca1e-df4b-4057-804c-dff81ae4ba94" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="734e645a-53f1-419c-8e87-d2f8c018b625" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d420e618-f246-4ce6-ae84-df88b14da83e" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e71d3f72-6c37-499e-aa9a-d5b316260210" name="hcpcsCode"><con:configuration><path>lineItems[1].hcpcsCode</path><content>TEST@2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="949e800c-0c1d-4419-9945-359dbdd4fc35" name="itemNumber"><con:configuration><path>lineItems[1].itemNumber</path><content>43534</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b59ed735-e47f-4696-b7e8-fb6f2ad2950b" name="extendedUnits"><con:configuration><path>lineItems[1].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0f217b47-3192-494e-be0b-4e975ff20158" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content>xy54343</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="56e88261-c671-4c8d-a3c5-08941eba9d70" name="incrementalBilling"><con:configuration><path>lineItems[1].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bcb3fc15-2a4f-4633-8a99-0cf05da00996" name="cycleBilling"><con:configuration><path>lineItems[1].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="94c1eb5e-75b3-436f-8784-de6be6738323" name="minimumCycleQuantity"><con:configuration><path>lineItems[1].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36138" id="52b24a7c-4c32-46fb-bbcd-5bb0200f281d"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36138" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "0",
            "hcpcsCode": "A9276",
            "itemNumber": "TW7194001",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "B187"
                }
            ]
        },
        {
            "extendedUnits": "0",
            "hcpcsCode": "K0553",
            "itemNumber": "TW7194001",
            "lineItemID": "0002",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "B187"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f216bf5e-0c2b-451d-9388-436efb6fc8bd" name="Valid HTTP Status Codes_11"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f2f57129-80e4-4bb0-a329-ca09596b66a8" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="559ff019-38b4-4d72-81dc-62027033b5f4" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>A9276</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="231d1af5-b83a-48a8-86e1-dfa7d1206727" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content>TW7194001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1ba6cd6a-472b-492a-8e1a-137549c19956" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c508e29f-0d8a-45a2-be2b-dbcc81ae9d94" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1cc094c9-8036-4b43-b535-060cc655a2ab" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d52a085-47f6-4fb0-82d8-e6da9248a19a" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b932ecac-c99b-487b-9964-a7823030fedc" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3f7d058a-6af5-454c-933a-d9261b3d8b53" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="593f956f-293b-46a7-b0c9-c4d5fc105130" name="hcpcsCode"><con:configuration><path>lineItems[1].hcpcsCode</path><content>K0553</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f9173194-bf79-474f-b266-31cfab6a939d" name="itemNumber"><con:configuration><path>lineItems[1].itemNumber</path><content>TW7194001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e1b391c5-2004-4288-8c64-fa2d540377dd" name="extendedUnits"><con:configuration><path>lineItems[1].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="12aa56ab-4465-47b4-b52b-afe8b2eb25a0" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0a9181e3-0b3f-4cf9-b0af-1c531ccaf5c1" name="incrementalBilling"><con:configuration><path>lineItems[1].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0d3cc28e-e94b-4766-b097-f66d815c707d" name="cycleBilling"><con:configuration><path>lineItems[1].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="753ef566-d469-4fe6-860a-b292c1e37d76" name="minimumCycleQuantity"><con:configuration><path>lineItems[1].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36139" id="d7ede4b7-6979-4d48-945f-2f4d1c5c606a"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36139" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "0",
            "hcpcsCode": "K0553",
            "itemNumber": "TW7194001",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "B187"
                }
            ]
        },
        {
            "extendedUnits": "0",
            "hcpcsCode": "A9276",
            "itemNumber": "TW7194001",
            "lineItemID": "0002",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "B187"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3e825eb9-2a9c-40f0-a504-cb021b7f3db1" name="Valid HTTP Status Codes_12"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7e05e99c-3423-46ea-bf39-b8830e73e70d" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="645c776d-fb56-4618-95f5-07cd928d166f" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>K0553</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0e50fd48-9999-4f19-a162-89ae5066800e" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content>TW7194001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4650621c-a28d-488d-b8f9-1add9f920a46" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="49f1239a-1654-4631-b4bd-e3de6610ac70" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8842d643-e01f-484b-b5bb-9ef46d5c67e8" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="240d254a-24df-4306-aa3b-7470e837abe0" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b8100f2a-d966-4424-8074-de4bc7deae98" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1c439db1-e5de-4093-9c69-18eef4f4001f" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1404fb8e-c465-46e1-bbd7-eb9a87753992" name="hcpcsCode"><con:configuration><path>lineItems[1].hcpcsCode</path><content>A9276</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="77656327-d46a-4065-802a-6dc1162d4fde" name="itemNumber"><con:configuration><path>lineItems[1].itemNumber</path><content>TW7194001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a7743180-737a-4a7b-81fa-489fc8c95024" name="extendedUnits"><con:configuration><path>lineItems[1].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3963990b-2869-4a93-8783-4df96724de27" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0d0e0a97-36e2-4088-b5be-a90a41b14573" name="incrementalBilling"><con:configuration><path>lineItems[1].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d345a5e-c42a-4ba4-a30c-18959f885d57" name="cycleBilling"><con:configuration><path>lineItems[1].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19a660b5-e4fe-4c77-a16e-bce35db89f92" name="minimumCycleQuantity"><con:configuration><path>lineItems[1].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36140" id="b1081378-64b0-4985-8d23-b91f5f14aed9"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36140" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "3",
            "hcpcsCode": "K0553",
            "itemNumber": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "B127"
                }
            ]
        },
        {
            "extendedUnits": "0",
            "hcpcsCode": "K0553",
            "itemNumber": "EDSTSGL041",
            "lineItemID": "0002",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "B187"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3ec0edcd-390f-49f6-a3b8-afea2646abf2" name="Valid HTTP Status Codes_13"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7576e6f9-aadb-4c5a-85fc-d0dabb6b3b95" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="45777568-6e12-4167-94df-d88e4d399a3e" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>K0553</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31ddf051-ddf1-4a68-8d05-708c7fed0700" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9d42d8ce-076e-4e14-acc4-334519b7219c" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a43f016-3511-4e62-88e9-04709e29102f" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B127</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f1433b1d-b3cc-4626-94aa-51953e851a69" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="87047bad-f315-4b1f-b072-3c7314721dd9" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="37adbaaf-ac60-4fc7-97a1-25ade0673b15" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="066284a9-5cd6-4509-8c8d-679aed665495" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1bdf9fb3-eb4a-412f-949f-a45066b2baa9" name="hcpcsCode"><con:configuration><path>lineItems[1].hcpcsCode</path><content>K0553</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="271b4b75-e2eb-4c4f-846c-6e5c4e6786c4" name="itemNumber"><con:configuration><path>lineItems[1].itemNumber</path><content>EDSTSGL041</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b11db3dd-5c4a-45c4-b024-a155833a7ef3" name="extendedUnits"><con:configuration><path>lineItems[1].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9674e725-c8ec-4794-a8e8-ea5496f06119" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="423a2c7b-127f-4df7-853e-725b99bd58e7" name="incrementalBilling"><con:configuration><path>lineItems[1].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a44bfd54-6944-4d4c-bbad-e383a7a963a6" name="cycleBilling"><con:configuration><path>lineItems[1].cycleBilling</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="158d03b9-d842-4e58-bf44-65c007b50119" name="minimumCycleQuantity"><con:configuration><path>lineItems[1].minimumCycleQuantity</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36114" id="90fe0ca6-1b5c-4553-b27c-c4f2a02af685"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36114" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "3",
            "hcpcsCode": "K0553",
            "itemNumber": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "B127"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7c325c62-e782-40f8-8cb4-0ea079d7d9a4" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="26534442-c973-4244-b45a-f284d55d1f8f" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="526d6023-f17d-423f-9043-d557beb4e9b0" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>K0553</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c9e918f-15b5-4e37-995d-e6fc4124a779" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9538dfbe-e040-4c35-b166-f8dabc8f52c2" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7ec57547-dee8-46b0-95c1-8bdd2af2dc69" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B127</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6ae20fd8-46a6-403d-b1ef-4c70b377da38" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5cfc2e30-80d8-46a9-a5ca-249568407e1c" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81a76a91-18fa-4aac-b4bb-e5cadca41965" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36115" id="bb8cf319-61ce-4d0d-bd86-bc88c181ca61"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36115" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "5",
            "hcpcsCode": "K0554",
            "itemNumber": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "A633"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7be80218-5cf6-443c-b978-5b1240c21d4e" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5b6ea01f-e003-4625-8fba-1f66a01d4cb4" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="53d331cf-9de0-4beb-b1dc-ce3f830e5827" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>K0554</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eaafe6fa-398f-4c8b-9a44-eda96df2960a" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3ee18858-90d8-4e11-8abc-5e33adaf335f" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b59d3ad4-0c0e-462f-b1e1-96a47c887a93" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>A633</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="023fd229-8220-47bd-832d-19f857bf08eb" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7ac9d32d-2e2f-4927-8566-b99ec93b457d" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="52cd5e1d-75f2-4719-96b9-e04d86ff4a38" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36116" id="1ba065e6-709e-48eb-a239-22154231bd90"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36116" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "2",
            "hcpcsCode": "123rtf",
            "itemNumber": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "A012"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d50eb413-75f2-40d2-bac4-c3506109a5d2" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3afad2c7-40ab-43c1-b187-b1bb30c2195e" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="51fb6c43-4a42-4bca-b3c7-5d3ea5d5f407" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>123rtf</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5915769a-5cc9-4cf1-82fb-84de87492b76" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2dd5b6a-7f78-4da4-b558-cda66969607e" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f0c83951-fb6a-4fc3-a5a4-56ea20946043" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>A012</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9413f2c5-e5f8-4fee-8f35-538a99a3f1b5" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2153fac9-6f33-43ce-828c-001ff1a79bee" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e7ff81a3-ac9d-44c9-93bb-d8b360a2dc5f" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36117" id="a9af797a-90dd-4425-ae0d-0e58c9ce66b9"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36117" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "1",
            "hcpcsCode": "K0553",
            "itemNumber": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "B197"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2f135ac6-be00-4ecf-bd79-ddc9ee1e4dda" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3eb9b48b-d558-4e11-a1b7-7c911a3df09b" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f2ab43a3-2b89-494a-b8ac-f7ac848e1e5d" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>K0553</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="827c020f-bfa3-42c6-ab35-9cd3f11fe097" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7d4be748-89cf-45ac-a451-3b1a42c2eb04" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="87f02e08-42a6-4ce7-b994-685a2079c109" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B197</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="891f1332-8be6-44d2-8c62-997a9da6717c" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="70356056-cfca-4502-b21b-e32795ce7c3a" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fea275aa-488c-4a56-90ee-fcaed176e605" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36118" id="48381a0d-ce56-42f5-ab3d-34aac1b6259f"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36118" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "0",
            "hcpcsCode": "K0554",
            "itemNumber": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "A633"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b1d02255-f60f-4e92-97b0-cb2c3854b474" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="845768ee-4e0b-4b17-a7f4-bb95e9acd2d4" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="06b7ddc6-faec-4b7e-bccd-f6eec2a2d478" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>K0554</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ae5783e3-1daf-4b64-9def-98ba37fa0e7e" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bebd7974-5593-4d30-b624-cdc9200577be" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bfa88317-3542-4f6e-972c-8570a205a038" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>A633</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="33caad77-8b59-4602-95a5-d7d9c336ed61" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9461fe27-8a78-4821-9426-fe830c97d074" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="16ec01d1-2f66-4966-b92c-2d187894b2ab" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36119" id="b6732231-0048-4eee-bed8-31025d9cbd7f"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36119" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "4",
            "hcpcsCode": "TEST@1",
            "itemNumber": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "SDE#09"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f3da9831-09f3-4ff4-83d8-aab268f6360f" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3c21c092-1e42-4c27-a6a3-7573b256b7f3" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="966aa118-83d0-4be0-a8f8-a1a47bd6639e" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>TEST@1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4831cfcd-18f5-43e5-bf53-a65c91647eda" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="605bba7e-b2d7-4e0a-a5df-869743bf0afc" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d10838da-5127-47ff-8cc7-a57e62a70cc2" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>SDE#09</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b66899bd-7f7e-4748-9a44-6436d0e6860d" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f9253d8f-f616-47ea-8f01-d61e7f192052" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="89d39799-a9a5-4a55-92b3-4215be9baf14" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36120" id="699a2d31-09db-4481-92d1-456dda0bd8f7"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36120" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "-5",
            "hcpcsCode": "RT#$23",
            "itemNumber": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "TR#353"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ac0a548b-1c83-4dc4-bc0a-62d49a511a31" name="Valid HTTP Status Codes_8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c8cf263b-6ffe-48e1-a086-154bfaf465a0" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e76bc996-1445-4faa-9c8f-4bba931117b4" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>RT#$23</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ed6bd2a2-c2de-450f-9c1f-06f7e1e4ce8d" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="128d6853-e892-48d8-96a6-873ea7311527" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>-5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="67988f14-b9e1-4437-a36f-f444e728c70e" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>TR#353</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b74bcd01-8fab-48c1-bdd5-9e15bb502175" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="92827f45-2ba9-40f2-b206-de88be2857ad" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ea2148be-fa09-40f8-9dbb-e3a1878de5ce" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36121" id="4686dae7-c8d0-49f2-abd9-aa89454dc0ad"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36121" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "",
            "hcpcsCode": "A9276",
            "itemNumber": "TW7194001",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "A072"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6c38627c-bbed-4b35-8d58-2ccc34381ede" name="Valid HTTP Status Codes_9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="74b11fd6-33b7-4efe-9ff9-15170cff0e33" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9c619e21-5174-45fc-8d27-44361b0a4c8c" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>A9276</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5e09fa23-5f08-4659-aae0-4e708c15897d" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content>TW7194001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b971a354-ac24-481c-926d-3b1848d08508" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d17b481a-3ac0-4208-b86f-2dbc5cd1162e" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>A072</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b9230555-0326-451b-b2d1-e18d82cbdd68" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e3b38aa6-94c0-4bf5-8f9c-965daed231ff" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fac12a0c-89fc-4893-8ece-75ffc60ad6ae" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36122" id="80ed6601-8ca4-49c9-82fc-421db186e745"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36122" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "",
            "hcpcsCode": "K0553",
            "itemNumber": "EDSTSOR003",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "B187"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ae29912d-b0c5-4548-ab65-1e2825848af4" name="Valid HTTP Status Codes_10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c606ed88-170a-4b0e-8963-30e28b61fb85" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1b68c0fc-15cd-4286-858f-d8a6b39525d1" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>K0553</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69bc1522-2d59-45e3-8fb5-49722b839305" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content>EDSTSOR003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0cc59b1-e4e8-4a0f-8ab0-e03e8c0207a3" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9a63ae26-4592-4939-827c-7a0bb21643c3" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e6aca215-171b-4c42-9059-d445fb5a362e" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="efaac66d-7025-422c-8646-fa3e6a7ca732" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8c360073-d2b5-4ccb-bf33-5ccc9f1ec4b4" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36123" id="8600bea7-35b7-487d-a152-75b06242cf47"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36123" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "",
            "hcpcsCode": "K0553",
            "itemNumber": "EDSTSGL041",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "B187"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b70df043-384a-4467-9dd1-8431e68c7107" name="Valid HTTP Status Codes_11"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5d77ac88-ff06-470f-bb05-aa827c2df6cc" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f8a95a36-ebf0-49b5-b18a-5791fcb60bf1" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>K0553</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="88eb1f6a-d01c-4e31-bed6-380d738eac5f" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content>EDSTSGL041</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d9f6f6a5-343c-4107-a1ed-d8aa3b1b6215" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="34a695ab-cee0-4348-b4d2-7fc849eaff40" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a7f0d146-86a9-4e83-bac4-fef7d5ad270a" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="163ff26e-c6e5-4b5f-983d-f2bcc48aa2ab" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="93b9f89c-2b96-462e-8824-304fb7010736" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36124" id="30dd004f-f102-4ef7-b9a3-456f36cdc5bd"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36124" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "",
            "hcpcsCode": "123rtf",
            "itemNumber": "TW7194001",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "A072"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="16b03b68-7199-4dac-8153-82237fc1db31" name="Valid HTTP Status Codes_12"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c189f321-861f-4cfd-9d25-91e76f4f60f1" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cb8388df-d07e-49a8-bcd6-ca6b732faabe" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>123rtf</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="482cf409-573e-4003-bc7a-2c7ec54f27c9" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content>TW7194001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f253c050-b698-48bf-aa49-802347326686" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="071adf07-dadf-411e-be06-1c72c553d41f" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>A072</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e316fdee-a8c1-4cb2-bd91-fefbb74a95ec" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="03dd770c-09b2-49c4-96bb-f4327e5068d0" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f5ec9b41-8f5a-47b2-9cc8-3f584ddc81e7" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36125" id="2c65c80a-3b27-4c77-9d09-8a2fd46a978d"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36125" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "",
            "hcpcsCode": "TEST@1",
            "itemNumber": "EDSTSGL043",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "SDE#09"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="767fc509-8191-470d-93a0-e0b845b55196" name="Valid HTTP Status Codes_13"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="33e637dc-f62f-40be-ae0e-727df3a17e8f" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3aedc4fd-d0eb-4557-81dd-df033280df35" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>TEST@1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e2335d9-30be-4677-8f8c-2fd055dd5aa4" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content>EDSTSGL043</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9a2bea72-dbec-40e4-8379-9fbf5bd55309" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c15cc476-fbe3-4765-a5de-1018b2e7118c" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>SDE#09</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="410536f7-dda1-41f0-8e02-6796c9a370d4" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="865a4b10-d401-40c8-89a7-3e5358991712" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e8692f5f-7cfd-4549-9d57-b7d04a4e831c" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36126" id="013bcade-31f8-4a4c-bed3-c3053e21c1f7"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36126" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "",
            "hcpcsCode": "RT#$23",
            "itemNumber": "V009",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "TR#353"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a3d4ab97-8486-4349-ab37-921c42e66ee3" name="Valid HTTP Status Codes_14"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ade80759-193b-4b23-b219-6aa04bf9968a" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7b151cac-9b3f-43e6-ae08-beda2b1b0266" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>RT#$23</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="df6c2d70-9a54-49f5-ad63-62aa8575b57c" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content>V009</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f5a20a0f-59e2-4e5d-9706-8360bdb62712" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6ab3844b-5b35-4203-a0bd-410ca3900ad1" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>TR#353</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cb21d875-4514-4c86-b77f-01b0f605113d" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0360cfad-e99a-425e-b02f-e63563f2c5d5" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cb999c2b-58aa-4150-af71-a10164fb9c80" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36127" id="ed8852fa-704e-42d1-aef3-b43d40d0bef5"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36127" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "",
            "hcpcsCode": "A9276",
            "itemNumber": "TW7194001",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "B187"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9670c8b6-2aa8-4dee-a88e-cdb84d02f2a6" name="Valid HTTP Status Codes_15"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be1d2ff4-4281-4b91-a5ac-12703bcbaee3" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e939c0a3-c7be-4269-ac5e-8b91750d7e61" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>A9276</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4b3d02ff-ec96-45e7-9817-2cd3649cacfd" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content>TW7194001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="39c36f98-9f13-4e7f-a4bc-8e37d3329503" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ed49980c-a082-438d-98bd-85ef0d670dca" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b59f1af1-e700-4e98-ba4e-c508cff02d77" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4f503a85-1885-4fff-80ff-0351bee6ee8f" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c8a6c137-25b1-4298-9d66-1d7f0a4a1362" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36128" id="a2f10211-b5b0-43a2-b9bb-b009db095d21"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL" methodName="DetermineBillingIndicator" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36128" id="6f6dd2f6-20e7-4619-9196-19a777932e76" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "extendedUnits": "",
            "hcpcsCode": "K0553",
            "itemNumber": "TW7194001",
            "lineItemID": "0001",
            "payers": [
                {
                    "assignedOrder": "Primary",
                    "id": "7e78cc3f-ffc0-632f-e053-2c97f4a1aa6f",
                    "planName": "B187"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBillingIndicator/DetermineBillingIndicator/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="230f79ba-d7cb-4817-bb30-bcc1f7b0a34d" name="Valid HTTP Status Codes_16"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f65de160-5332-4b89-98fd-65579b1eb6ad" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="28bc4d6f-feea-4c4a-9920-941a7c57fd34" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>K0553</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0414f4f3-032f-4b12-a8f4-58ebc6d3ec84" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content>TW7194001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a51b584-26db-4618-87ac-2b21bfa30d11" name="extendedUnits"><con:configuration><path>lineItems[0].extendedUnits</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55e8579b-6770-4e40-8ff4-fbf2ae8840b6" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="564788e8-bf29-4b2b-8704-b004fc656559" name="incrementalBilling"><con:configuration><path>lineItems[0].incrementalBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b6964f56-1b53-4d32-8631-1ed01f6bb3f8" name="cycleBilling"><con:configuration><path>lineItems[0].cycleBilling</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="08b381dc-e687-417f-a2fa-c5c575d01d81" name="minimumCycleQuantity"><con:configuration><path>lineItems[0].minimumCycleQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="a3e8007f-b33a-4b0a-9b00-f05e29f337d7" name="DetermineEdgeparkCompanyLimits"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="9e9a50d9-ab23-431d-b6e8-cd44fddec773" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineEdgeparkCompanyLimits" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DetermineEdgeparkCompanyLimits_SingleLineItem" id="0ace9ada-0f65-4730-9196-ee28e8c8d84a"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits_Input.xls"
def outputfile = projectDir + "/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits_SingleLineItem_Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("SingleLineItem")
Sheet jsonInput = wb.getSheet("JSON-SingleLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"limitQuantity",sheet1);
addCell(2,0,"limitDays",sheet1);
addCell(3,0,"limitsValid",sheet1);
addCell(4,0,"PASS/FAIL",sheet1);
addCell(5,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                 //Input for Line Item ID                                                             
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for hcpcsCode                                   
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents().toString()                                                                                                                                          
                                                                                     
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json  
                        addCell(0,i,json.limitsResponse[0].lineItemID.toString(),sheet1);                                   
                          // get limitQuantity from response json                               
                        addCell(1,i,json.limitsResponse[0].limitQuantity.toString(),sheet1);                                   
                          // get limitDays from response json                                   
                        addCell(2,i,json.limitsResponse[0].limitDays.toString(),sheet1); 
                        // get limitsValid from response json                                   
                        addCell(3,i,json.limitsResponse[0].limitsValid.toString(),sheet1);
                                                                                                   
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(3,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"limitsResponse[0].lineItemID","lineItemID")

                           limitQuantity = sh.getCell(4,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"limitsResponse[0].limitQuantity","limitQuantity")

                          limitDays = sh.getCell(5,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays,"limitsResponse[0].limitDays","limitDays")

                       limitsValid = sh.getCell(6,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitsValid,"limitsResponse[0].limitsValid","limitsValid")
                       
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(4,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(5,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(4,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

           }             
     
catch(Exception e)
{

             log.info(e)                         
}

finally

{
    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="groovy" name="DetermineEdgeparkCompanyLimits_MultiLineItem" id="8b6dde91-02d6-48e1-ab5a-0c903bed4335"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits_Input.xls"
def outputfile = projectDir + "/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits_MultiLineItem_Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("MultiLineItem")
Sheet jsonInput = wb.getSheet("JSON-MultiLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID1",sheet1);
addCell(1,0,"limitQuantity",sheet1);
addCell(2,0,"limitDays",sheet1);
addCell(3,0,"limitsValid",sheet1);
addCell(4,0,"lineItemID2",sheet1);
addCell(5,0,"limitQuantity",sheet1);
addCell(6,0,"limitDays",sheet1);
addCell(7,0,"limitsValid",sheet1);
addCell(8,0,"PASS/FAIL",sheet1);
addCell(9,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                 //Input for Line Item ID 1                                                            
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for hcpcsCode                                   
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents().toString()                                                                                                                                          
                                   //Input for Line Item ID 2                                                            
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(3,i).getContents()
                                 //Input for hcpcsCode                                   
                                requestTemplet.content.lineItems[1].hcpcsCode = sh.getCell(4,i).getContents().toString()                                                     
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID 1 from response json  
                        addCell(0,i,json.limitsResponse[0].lineItemID.toString(),sheet1);                                   
                          // get limitQuantity from response json                               
                        addCell(1,i,json.limitsResponse[0].limitQuantity.toString(),sheet1);                                   
                          // get limitDays from response json                                   
                        addCell(2,i,json.limitsResponse[0].limitDays.toString(),sheet1); 
                        // get limitsValid from response json                                   
                        addCell(3,i,json.limitsResponse[0].limitsValid.toString(),sheet1);

                         // get lineItemID 2 from response json  
                        addCell(4,i,json.limitsResponse[1].lineItemID.toString(),sheet1);                                   
                          // get limitQuantity from response json                               
                        addCell(5,i,json.limitsResponse[1].limitQuantity.toString(),sheet1);                                   
                          // get limitDays from response json                                   
                        addCell(6,i,json.limitsResponse[1].limitDays.toString(),sheet1); 
                        // get limitsValid from response json                                   
                        addCell(7,i,json.limitsResponse[1].limitsValid.toString(),sheet1);
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values for LineItem 1
                          lineItemID = sh.getCell(5,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"limitsResponse[0].lineItemID","lineItemID")

                           limitQuantity = sh.getCell(6,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"limitsResponse[0].limitQuantity","limitQuantity")

                          limitDays = sh.getCell(7,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays,"limitsResponse[0].limitDays","limitDays")

                       limitsValid = sh.getCell(8,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitsValid,"limitsResponse[0].limitsValid","limitsValid")

                        //get the expected values for LineItem 2
                          lineItemID = sh.getCell(9,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"limitsResponse[1].lineItemID","lineItemID")

                           limitQuantity = sh.getCell(10,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"limitsResponse[1].limitQuantity","limitQuantity")

                          limitDays = sh.getCell(11,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays,"limitsResponse[1].limitDays","limitDays")

                       limitsValid = sh.getCell(12,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitsValid,"limitsResponse[1].limitsValid","limitsValid")
                       
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(8,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(9,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(8,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

           }             
     
catch(Exception e)
{

             log.info(e)                         
}

finally

{
    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request" id="f39be33a-93a4-4628-aabd-f40ebaaae362"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL" methodName="DetermineEdgeparkCompanyLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="8e1823b7-0b90-4a25-9b4a-56b1fb7cceef" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "K0553",
            "lineItemID": "L001"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39488" id="0e8f874d-03d0-4d12-ac7d-e4c9f23066e6"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL" methodName="DetermineEdgeparkCompanyLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39488" id="8e1823b7-0b90-4a25-9b4a-56b1fb7cceef" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A9276",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "A4253",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1d4ad9f6-080b-4194-b6c9-0db5207af137" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="22546aba-9bc7-49ee-9174-b2df7bede49e" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="369bc073-a337-478e-b629-05669dff9501" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>120</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e6765993-a53a-4ce7-9cb8-2116deb6a811" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="76bdcb97-0d78-4512-b62b-6372cec1cd41" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="985b3b49-c0b6-4f2d-8624-9a43159696c6" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="00f841ec-9043-40f1-8567-0b3cc319e352" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>20</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5a6642aa-2b71-48e0-b980-a6569f4b5cc3" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9ef2e3f6-fd13-44b5-a997-ff1db095bc03" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39489" id="7d5f352f-2340-46c7-85a9-a50d948d5220"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL" methodName="DetermineEdgeparkCompanyLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39489" id="8e1823b7-0b90-4a25-9b4a-56b1fb7cceef" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "E0603",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "A4259",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c167052c-e881-43b7-8ebf-f537a7244369" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0804782d-eb0d-4a13-8c7d-9deca7d05ce3" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9e2a3ad5-4c5e-4bb9-809f-5364731c4701" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f1d998a3-2b1d-47ae-ae73-e88fd4933074" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>365</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e6cc873b-925f-4e8f-935b-2b89f452e254" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f5ab9a10-9bed-4e04-a14d-42569740322f" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7c90cb9e-451a-40bf-9d09-9b195e8b14a9" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="98474500-5002-4b21-8463-31056e9d0d4b" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0561164-ac44-4fa4-b2d5-78b4b06afbf7" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39490" id="7f09dc2f-808c-4210-a197-bd88ec6d7dd8"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL" methodName="DetermineEdgeparkCompanyLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39490" id="8e1823b7-0b90-4a25-9b4a-56b1fb7cceef" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A9276",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="366c1403-9171-4a7a-ac63-9049461c392f" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8c596f81-f7f4-49bd-9507-31ac810bc29e" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2aed6c03-b268-4992-abfc-f3fbccd1f279" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>120</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="201f3e4d-c1c4-4ffc-8537-0163c4643c9a" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="60fda98c-153e-494e-9adb-b16994853957" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b7e80b44-092d-49ba-a282-923ebb9b5f5d" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2b3b997f-f5f8-42a8-a1b8-d74b0e7aa69d" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7b2910ee-fc13-4816-91e4-232034ccbce3" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aaf63540-c541-4b03-99ec-d14978dea4ab" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39491" id="277cb94c-9b21-4681-ac7d-59262bec606c"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL" methodName="DetermineEdgeparkCompanyLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39491" id="8e1823b7-0b90-4a25-9b4a-56b1fb7cceef" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "K0554",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0f8e18f7-3d3f-49a9-a0e6-2a1542067f3e" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fb099dc3-f607-4c0b-a77d-30f3b600ba74" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="090d1fb8-fa43-4897-8ba4-baa8759c576d" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3208d4f9-33a0-42e5-a75e-e485dc57bc8c" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2b6775bf-5e20-48b0-bb10-7c65d87d6a24" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fa4d1d7b-9105-4603-825c-39651fc07e32" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3970b776-25fa-4b3b-91c9-8a90a38707a1" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9be66e10-9c5a-4f4c-985a-68e185737cfe" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c27f933e-a800-4354-baa0-e0d9cfef9c47" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39482" id="b02ea8fd-3bcb-470f-b961-24ca4070dfaf"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL" methodName="DetermineEdgeparkCompanyLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39482" id="8e1823b7-0b90-4a25-9b4a-56b1fb7cceef" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A9276",
            "lineItemID": "L001"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="02b24b2b-1e4b-429b-8b30-878887809829" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e46012b4-3a86-440e-9eb1-8bb1ffeb858b" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e5016a96-e025-434f-82f3-115747fbbfbc" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>120</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="608aeeda-d592-4dbf-bfd8-a51b464ec4eb" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4eb7ba00-9886-4ef5-a2f7-85e53a77aa30" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39483" id="2c7d009d-dea9-4ee7-a91f-9a0160056757"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL" methodName="DetermineEdgeparkCompanyLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39483" id="8e1823b7-0b90-4a25-9b4a-56b1fb7cceef" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "E0603",
            "lineItemID": "L001"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fee20eac-c865-41a0-83dc-d9838a4f9c4c" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b985c8a0-3c24-4ea8-bceb-5aeaac4e491c" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7e7d26f-08a1-4d6c-bb9f-7f31b375e2cd" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7bbc94ad-2d42-43bb-944f-63d3aaba9a2a" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>365</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8f481f80-5f5e-4154-aefc-44d0f4bbde9a" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39484" id="cde029c3-d616-4ee4-81ec-329dc44c1149"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL" methodName="DetermineEdgeparkCompanyLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39484" id="8e1823b7-0b90-4a25-9b4a-56b1fb7cceef" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4253",
            "lineItemID": "L001"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f37a1222-3441-477e-872b-c6b5a28ebb79" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c1c4f935-a1a5-4cc4-ba04-1740b7bc1e0c" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a002c4ac-cf10-4676-8670-afedece15214" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>20</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e9a8ad85-fbdf-4eae-8025-855595143fab" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8bf12b38-3175-4952-86bc-a7ea49c07aa8" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39485" id="1d35e1c5-00b3-442b-9a30-bfa99019bf6e"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL" methodName="DetermineEdgeparkCompanyLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39485" id="8e1823b7-0b90-4a25-9b4a-56b1fb7cceef" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4259",
            "lineItemID": "L001"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3c94ce07-e1e5-4542-913e-41fabe995e1e" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="90fd956d-2374-40a9-ac26-200306dfe399" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a409115-07e8-4177-b433-a9ff81fa51d8" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cead02f2-74a5-43da-855a-d8b1023411d8" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0affa6d2-7ec3-4bb0-b6c9-dca0e36bcc80" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39486" id="c2d8b338-f0dc-45cf-88c6-cb6d11bd0256"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL" methodName="DetermineEdgeparkCompanyLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39486" id="8e1823b7-0b90-4a25-9b4a-56b1fb7cceef" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="33890175-5c60-4728-b130-86a03a57620e" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="358edbe3-1409-45bd-8905-737ae501078a" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d9f5bea8-24ec-4e1e-9957-cf5ccc4b11ef" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="52c71013-7884-45a4-9654-17d0661c4a43" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="11941aa2-27a8-495e-a65c-5d28eb8c03fc" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39487" id="4fe3c646-b139-4885-906e-358c2ee60749"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL" methodName="DetermineEdgeparkCompanyLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39487" id="8e1823b7-0b90-4a25-9b4a-56b1fb7cceef" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "K0553",
            "lineItemID": "L001"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineEdgeparkCompanyLimits/DetermineEdgeparkCompanyLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b998a26d-24e7-44a7-bdae-5af0622e543d" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="95f5f17e-4941-4b54-80dd-460b40a2af43" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c60861e2-0bc3-46b6-b6f3-9ddd4fda0523" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8b4f3213-4ddc-4cc5-890f-738ce60adf7c" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b4a470bd-071b-4883-8db6-39c7151b42b6" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="0f65d53a-b25b-4842-86b2-738b1b079dbd" name="DetermineAllowableShippingCarriersAndMethods"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="f26a8caa-602d-410e-8e19-0e7db68ddfc8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineAllowableShippingCarriersAndMethods" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DetermineAllowableShippingCarriersAndMethods_SingleCode" id="9f7a8a29-991d-4db6-9a39-3589bec32812"><con:settings/><con:config><script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_Input_Groovy.xls"
def outputfile = projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_Single Code_Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("Input - Single Code")
Sheet jsonInput = wb.getSheet("JSON-Single Code")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"messageCode",sheet1);
addCell(1,0,"description",sheet1);
addCell(2,0,"messageType",sheet1);

addCell(3,0,"code",sheet1);
addCell(4,0,"methodCode",sheet1);
addCell(5,0,"saveAsCertified",sheet1);
addCell(6,0,"methodCode",sheet1);
addCell(7,0,"saveAsCertified",sheet1);
addCell(8,0,"methodCode",sheet1);
addCell(9,0,"saveAsCertified",sheet1);
addCell(10,0,"recommendedCarrierRank",sheet1);
addCell(11,0,"regionalCarrier",sheet1);

addCell(12,0,"recommendedCarrier",sheet1);
addCell(13,0,"recommendedShippingMethod",sheet1);

addCell(14,0,"PASS/FAIL",sheet1);
addCell(15,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

//try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                //Input                                 
                                requestTemplet.content.allowableShippingRequest.poBox = sh.getCell(2,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.physicalAddress = sh.getCell(3,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.hazmat = sh.getCell(4,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.proofOfDelivery = sh.getCell(5,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.addressOutsideContiguousStates = sh.getCell(6,i).getContents().toString()                                
                                requestTemplet.content.allowableShippingRequest.uspsPreferred = sh.getCell(7,i).getContents().toString()                               
                                 
                                 //Input for shippingCarriers - code [0]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].code = sh.getCell(8,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].methodCode = sh.getCell(9,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].transitTimeInDays = sh.getCell(10,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].methodCode = sh.getCell(11,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].transitTimeInDays = sh.getCell(12,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].methodCode = sh.getCell(13,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].transitTimeInDays = sh.getCell(14,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].recommendedCarrierRank = sh.getCell(15,i).getContents()                            
               				
              
	                             //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)                             
                         //teststep cloned: End
                         
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                          // get response for message
                          //initialize the cel postion for messages array
                          int celmsg=0;
                          //Get the array size for messages
                        for(int arrmsg=0; arrmsg<json.shippingOrder.messages.size(); arrmsg++)
                        {
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageCode.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].description.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageType.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        }
					
                        //get response for code  
                        //Check the existence of the array: allowedShippingCarriers                        
                          if (json.shippingOrder.allowedShippingCarriers != null)
                         {
		                        //initialize the cel postion for code, methodCode & recommendedCarrierRank
		                         int celcode=3; celmethodCode=4; celCrank=10; 
		                         int cCode, cMetdCode, cCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcode=0; arrcode<json.shippingOrder.allowedShippingCarriers.size(); arrcode++)
		                        {                    	
		                        		cCode=celcode
		                        		cMetdCode=celmethodCode
		                        		cCrank=celCrank
		                        		addCell(cCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].code.toString(),sheet1);		                        		
			                        		
				                        		//Get the array size for shippingMethods
				                        		for(int arrmethodCode=0; arrmethodCode<json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods.size(); arrmethodCode++)
				                        		{ 				                        		            		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].methodCode.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;		                        		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].saveAsCertified.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;				                        		
				                       		} 
			                       	addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].recommendedCarrierRank.toString(),sheet1);
			                       	cCrank=cCrank+1;							     
							     addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].regionalCarrier.toString(),sheet1); 
							    
							    //Increment the cel position for code, methodCode & recommendedCarrierRank 
							     celcode=celcode+9;
							     celmethodCode=celmethodCode+9;
							    celCrank=celCrank+9;						   							     
		                         }       					                     
			              }  
			              addCell(12,i,json.shippingOrder.recommendedCarrier.toString(),sheet1); 
                             addCell(13,i,json.shippingOrder.recommendedShippingMethod.toString(),sheet1); 
                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values for message
                              //initialize the cel postion for messages array for assertion                      
                                int celmsgass=16;
						//check the existence of messages
            		if(json.shippingOrder.messages.toString()!= "[]")
            		{            		         
		                        String messageCode = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageCode,"shippingOrder.messages[0].messageCode","messageCode")
		                        celmsgass=celmsgass+1;
		                       
		                        String description = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,description,"shippingOrder.messages[0].description","description")  
		                        celmsgass=celmsgass+1;                     
		                        
		                        String messageType = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageType,"shippingOrder.messages[0].messageType","messageType")
		                        celmsgass=celmsgass+1;
		                        
            		}
                             //get the expected values for code
                               
                             //check the existence of array allowedShippingCarriers                         
                          if (json.shippingOrder.allowedShippingCarriers != null)
                        	 {
                        	 	//initialize the cell postion used for assertion for code, methodCode & recommendedCarrierRank
		                         int AssForcelcode=19; AssForcelmethodCode=20; AssForcelCrank=26;
		                         int AssForCode, AssForMetdCode, AssForCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcdres=0; arrcdres<json.shippingOrder.allowedShippingCarriers.size(); arrcdres++)
		                        { 	 
		                        		AssForCode=AssForcelcode
		                        		AssForMetdCode=AssForcelmethodCode
		                        		AssForCrank=AssForcelCrank                       		
								 code = sh.getCell(AssForCode,i).getContents().toString() 								                
								addAssertionJsonPathMatch(testStepForAssertion,code,"shippingOrder.allowedShippingCarriers["+arrcdres+"].code","code")                                            
		                       		//check the existence of array shippingMethods
		                       		if (json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods != null)  
		                       			{    
		                       				//Get the array size for shippingMethods                 
				                        		for(int arrmtcd=0; arrmtcd<json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods.size(); arrmtcd++)
				                        		{              		
				                        		String methodCode = sh.getCell(AssForMetdCode,i).getContents().toString()
			                     			addAssertionJsonPathMatch(testStepForAssertion,methodCode,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].methodCode","methodCode")                       
			                      			AssForMetdCode=AssForMetdCode+1;			                      				
			                      			String saveAsCertified = sh.getCell(AssForMetdCode,i).getContents().toString()
				                        		addAssertionJsonPathMatch(testStepForAssertion,saveAsCertified,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].saveAsCertified","saveAsCertified"); 
				                        		AssForMetdCode=AssForMetdCode+1;
				                       		} 
		                       			}
			                       	   String recommendedCarrierRank = sh.getCell(AssForCrank,i).getContents().toString()			                       	   
				                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrierRank,"shippingOrder.allowedShippingCarriers["+arrcdres+"].recommendedCarrierRank","recommendedCarrierRank")
				                       AssForCrank=AssForCrank+1;				                       
				                       String regionalCarrier = sh.getCell(AssForCrank,i).getContents().toString()
				                       addAssertionJsonPathMatch(testStepForAssertion,regionalCarrier,"shippingOrder.allowedShippingCarriers["+arrcdres+"].regionalCarrier","regionalCarrier")
								
								//increment the cell postion used for assertion for code, methodCode & recommendedCarrierRank	                       	
							     AssForcelcode=AssForcelcode+9;
							     AssForcelmethodCode=AssForcelmethodCode+9;
							     AssForcelCrank=AssForcelCrank+9;							   							     
		                         }       					                     
			              }  
			             recommendedCarrier = sh.getCell(28,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrier,"shippingOrder.recommendedCarrier","recommendedCarrier")
	                       recommendedShippingMethod = sh.getCell(29,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedShippingMethod,"shippingOrder.recommendedShippingMethod","recommendedShippingMethod")
								                       						
                                //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(14,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(15,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(14,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"
          
/*}
     
catch(Exception e)
{

       log.info(e)                         
}

finally

{*/
    //close workbook
     wb.close();
     wb1.close();     

//}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

} 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}]]></script></con:config></con:testStep><con:testStep type="groovy" name="DetermineAllowableShippingCarriersAndMethods_TwoCodes" id="54763c86-1aac-4aa9-9304-350bf75d20bb"><con:settings/><con:config><script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_Input_Groovy.xls"
def outputfile = projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_2 Codes_Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("Input - 2 Codes")
Sheet jsonInput = wb.getSheet("JSON-2 Codes")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"messageCode",sheet1);
addCell(1,0,"description",sheet1);
addCell(2,0,"messageType",sheet1);

addCell(3,0,"code",sheet1);
addCell(4,0,"methodCode",sheet1);
addCell(5,0,"saveAsCertified",sheet1);
addCell(6,0,"methodCode",sheet1);
addCell(7,0,"saveAsCertified",sheet1);
addCell(8,0,"methodCode",sheet1);
addCell(9,0,"saveAsCertified",sheet1);
addCell(10,0,"recommendedCarrierRank",sheet1);
addCell(11,0,"regionalCarrier",sheet1);

addCell(12,0,"code",sheet1);
addCell(13,0,"methodCode",sheet1);
addCell(14,0,"saveAsCertified",sheet1);
addCell(15,0,"methodCode",sheet1);
addCell(16,0,"saveAsCertified",sheet1);
addCell(17,0,"methodCode",sheet1);
addCell(18,0,"saveAsCertified",sheet1);
addCell(19,0,"recommendedCarrierRank",sheet1);
addCell(20,0,"regionalCarrier",sheet1);

addCell(21,0,"recommendedCarrier",sheet1);
addCell(22,0,"recommendedShippingMethod",sheet1);

addCell(23,0,"PASS/FAIL",sheet1);
addCell(24,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

//try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                //Input                                 
                                requestTemplet.content.allowableShippingRequest.poBox = sh.getCell(2,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.physicalAddress = sh.getCell(3,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.hazmat = sh.getCell(4,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.proofOfDelivery = sh.getCell(5,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.addressOutsideContiguousStates = sh.getCell(6,i).getContents().toString()                                
                                requestTemplet.content.allowableShippingRequest.uspsPreferred = sh.getCell(7,i).getContents().toString()                               
                                 
                                 //Input for shippingCarriers - code [0]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].code = sh.getCell(8,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].methodCode = sh.getCell(9,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].transitTimeInDays = sh.getCell(10,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].methodCode = sh.getCell(11,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].transitTimeInDays = sh.getCell(12,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].methodCode = sh.getCell(13,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].transitTimeInDays = sh.getCell(14,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].recommendedCarrierRank = sh.getCell(15,i).getContents()                            

               				//Input for shippingCarriers - code [1]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].code = sh.getCell(16,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[0].methodCode = sh.getCell(17,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[0].transitTimeInDays = sh.getCell(18,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[1].methodCode = sh.getCell(19,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[1].transitTimeInDays = sh.getCell(20,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[2].methodCode = sh.getCell(21,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[2].transitTimeInDays = sh.getCell(22,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].recommendedCarrierRank = sh.getCell(23,i).getContents()                            
               				
              
	                             //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)                             
                         //teststep cloned: End
                         
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                          // get response for message
                          //initialize the cel postion for messages array
                          int celmsg=0;
                          //Get the array size for messages
                        for(int arrmsg=0; arrmsg<json.shippingOrder.messages.size(); arrmsg++)
                        {
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageCode.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].description.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageType.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        }
					
                        //get response for code                                       
                         //Check the existence of the array: allowedShippingCarriers                        
                          if (json.shippingOrder.allowedShippingCarriers != null)
                         {
		                        //initialize the cel postion for code, methodCode & recommendedCarrierRank
		                         int celcode=3; celmethodCode=4; celCrank=10; 
		                         int cCode, cMetdCode, cCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcode=0; arrcode<json.shippingOrder.allowedShippingCarriers.size(); arrcode++)
		                        {                    	
		                        		cCode=celcode
		                        		cMetdCode=celmethodCode
		                        		cCrank=celCrank
		                        		addCell(cCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].code.toString(),sheet1);		                        		
			                        		
				                        		//Get the array size for shippingMethods
				                        		for(int arrmethodCode=0; arrmethodCode<json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods.size(); arrmethodCode++)
				                        		{ 				                        		            		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].methodCode.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;		                        		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].saveAsCertified.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;				                        		
				                       		} 
			                       	addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].recommendedCarrierRank.toString(),sheet1);
			                       	cCrank=cCrank+1;							     
							     addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].regionalCarrier.toString(),sheet1); 
							    
							    //Increment the cel position for code, methodCode & recommendedCarrierRank 
							     celcode=celcode+9;
							     celmethodCode=celmethodCode+9;
							    celCrank=celCrank+9;						   							     
		                         }       					                     
			              }  
			              addCell(21,i,json.shippingOrder.recommendedCarrier.toString(),sheet1); 
                             addCell(22,i,json.shippingOrder.recommendedShippingMethod.toString(),sheet1);                   

               
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values for msg
					 //initialize the cel postion for messages array for assertion                      
                                int celmsgass=24;
						//check the existence of messages
            		if(json.shippingOrder.messages.toString()!= "[]")
            		{            		         
		                        String messageCode = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageCode,"shippingOrder.messages[0].messageCode","messageCode")
		                        celmsgass=celmsgass+1;
		                       
		                        String description = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,description,"shippingOrder.messages[0].description","description")  
		                        celmsgass=celmsgass+1;                     
		                        
		                        String messageType = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageType,"shippingOrder.messages[0].messageType","messageType")
		                        celmsgass=celmsgass+1;
		                        
            		}
                             //get the expected values for code
                            //check the existence of array allowedShippingCarriers                         
                          if (json.shippingOrder.allowedShippingCarriers != null)
                        	 {
                        	 	//initialize the cell postion used for assertion for code, methodCode & recommendedCarrierRank
		                          int AssForcelcode=27; AssForcelmethodCode=28; AssForcelCrank=34;
		                         int AssForCode, AssForMetdCode, AssForCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcdres=0; arrcdres<json.shippingOrder.allowedShippingCarriers.size(); arrcdres++)
		                        { 	 
		                        		AssForCode=AssForcelcode
		                        		AssForMetdCode=AssForcelmethodCode
		                        		AssForCrank=AssForcelCrank                       		
								 code = sh.getCell(AssForCode,i).getContents().toString() 								                
								addAssertionJsonPathMatch(testStepForAssertion,code,"shippingOrder.allowedShippingCarriers["+arrcdres+"].code","code")                                            
		                       		//check the existence of array shippingMethods
		                       		if (json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods != null)  
		                       			{    
		                       				//Get the array size for shippingMethods                 
				                        		for(int arrmtcd=0; arrmtcd<json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods.size(); arrmtcd++)
				                        		{              		
				                        		String methodCode = sh.getCell(AssForMetdCode,i).getContents().toString()
			                     			addAssertionJsonPathMatch(testStepForAssertion,methodCode,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].methodCode","methodCode")                       
			                      			AssForMetdCode=AssForMetdCode+1;			                      				
			                      			String saveAsCertified = sh.getCell(AssForMetdCode,i).getContents().toString()
				                        		addAssertionJsonPathMatch(testStepForAssertion,saveAsCertified,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].saveAsCertified","saveAsCertified"); 
				                        		AssForMetdCode=AssForMetdCode+1;
				                       		} 
		                       			}
			                       	   String recommendedCarrierRank = sh.getCell(AssForCrank,i).getContents().toString()			                       	   
				                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrierRank,"shippingOrder.allowedShippingCarriers["+arrcdres+"].recommendedCarrierRank","recommendedCarrierRank")
				                       AssForCrank=AssForCrank+1;				                       
				                       String regionalCarrier = sh.getCell(AssForCrank,i).getContents().toString()
				                       addAssertionJsonPathMatch(testStepForAssertion,regionalCarrier,"shippingOrder.allowedShippingCarriers["+arrcdres+"].regionalCarrier","regionalCarrier")
								
								//increment the cell postion used for assertion for code, methodCode & recommendedCarrierRank	                       	
							     AssForcelcode=AssForcelcode+9;
							     AssForcelmethodCode=AssForcelmethodCode+9;
							     AssForcelCrank=AssForcelCrank+9;							   							     
		                         }       					                     
			              }  
			             recommendedCarrier = sh.getCell(45,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrier,"shippingOrder.recommendedCarrier","recommendedCarrier")
	                       recommendedShippingMethod = sh.getCell(46,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedShippingMethod,"shippingOrder.recommendedShippingMethod","recommendedShippingMethod")
					                            
                       	                       						
                                //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(23,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(24,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(23,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"
          
/*}
     
catch(Exception e)
{

       log.info(e)                         
}

finally

{*/
    //close workbook
     wb.close();
     wb1.close();     

//}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

} 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}]]></script></con:config></con:testStep><con:testStep type="groovy" name="DetermineAllowableShippingCarriersAndMethods_ThreeCodes" id="315a0f6e-5451-407c-a6e3-635a20feeba7"><con:settings/><con:config><script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_Input_Groovy.xls"
def outputfile = projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_3 Codes_Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("Input - 3 Codes")
Sheet jsonInput = wb.getSheet("JSON-3 Codes")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"messageCode",sheet1);
addCell(1,0,"description",sheet1);
addCell(2,0,"messageType",sheet1);

addCell(3,0,"code",sheet1);
addCell(4,0,"methodCode",sheet1);
addCell(5,0,"saveAsCertified",sheet1);
addCell(6,0,"methodCode",sheet1);
addCell(7,0,"saveAsCertified",sheet1);
addCell(8,0,"methodCode",sheet1);
addCell(9,0,"saveAsCertified",sheet1);
addCell(10,0,"recommendedCarrierRank",sheet1);
addCell(11,0,"regionalCarrier",sheet1);

addCell(12,0,"code",sheet1);
addCell(13,0,"methodCode",sheet1);
addCell(14,0,"saveAsCertified",sheet1);
addCell(15,0,"methodCode",sheet1);
addCell(16,0,"saveAsCertified",sheet1);
addCell(17,0,"methodCode",sheet1);
addCell(18,0,"saveAsCertified",sheet1);
addCell(19,0,"recommendedCarrierRank",sheet1);
addCell(20,0,"regionalCarrier",sheet1);

addCell(21,0,"code",sheet1);
addCell(22,0,"methodCode",sheet1);
addCell(23,0,"saveAsCertified",sheet1);
addCell(24,0,"methodCode",sheet1);
addCell(25,0,"saveAsCertified",sheet1);
addCell(26,0,"methodCode",sheet1);
addCell(27,0,"saveAsCertified",sheet1);
addCell(28,0,"recommendedCarrierRank",sheet1);
addCell(29,0,"regionalCarrier",sheet1);

addCell(30,0,"recommendedCarrier",sheet1);
addCell(31,0,"recommendedShippingMethod",sheet1);

addCell(32,0,"PASS/FAIL",sheet1);
addCell(33,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

//try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                //Input                                 
                                requestTemplet.content.allowableShippingRequest.poBox = sh.getCell(2,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.physicalAddress = sh.getCell(3,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.hazmat = sh.getCell(4,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.proofOfDelivery = sh.getCell(5,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.addressOutsideContiguousStates = sh.getCell(6,i).getContents().toString()                                
                                requestTemplet.content.allowableShippingRequest.uspsPreferred = sh.getCell(7,i).getContents().toString()                               
                                 
                                 //Input for shippingCarriers - code [0]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].code = sh.getCell(8,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].methodCode = sh.getCell(9,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].transitTimeInDays = sh.getCell(10,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].methodCode = sh.getCell(11,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].transitTimeInDays = sh.getCell(12,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].methodCode = sh.getCell(13,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].transitTimeInDays = sh.getCell(14,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].recommendedCarrierRank = sh.getCell(15,i).getContents()                            

               				//Input for shippingCarriers - code [1]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].code = sh.getCell(16,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[0].methodCode = sh.getCell(17,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[0].transitTimeInDays = sh.getCell(18,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[1].methodCode = sh.getCell(19,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[1].transitTimeInDays = sh.getCell(20,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[2].methodCode = sh.getCell(21,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[2].transitTimeInDays = sh.getCell(22,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].recommendedCarrierRank = sh.getCell(23,i).getContents()                            
               				
              					//Input for shippingCarriers - code [2]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].code = sh.getCell(24,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[0].methodCode = sh.getCell(25,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[0].transitTimeInDays = sh.getCell(26,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[1].methodCode = sh.getCell(27,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[1].transitTimeInDays = sh.getCell(28,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[2].methodCode = sh.getCell(29,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[2].transitTimeInDays = sh.getCell(30,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].recommendedCarrierRank = sh.getCell(31,i).getContents()                            
               				
              
	                             //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)                             
                         //teststep cloned: End
                         
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                          // get response for message
                          //initialize the cel postion for messages array
                          int celmsg=0;
                          //Get the array size for messages
                        for(int arrmsg=0; arrmsg<json.shippingOrder.messages.size(); arrmsg++)
                        {
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageCode.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].description.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageType.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        }
					
                        //get response for code                         	
                         //Check the existence of the array: allowedShippingCarriers                        
                          if (json.shippingOrder.allowedShippingCarriers != null)
                         {
		                        //initialize the cel postion for code, methodCode & recommendedCarrierRank
		                         int celcode=3; celmethodCode=4; celCrank=10; 
		                         int cCode, cMetdCode, cCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcode=0; arrcode<json.shippingOrder.allowedShippingCarriers.size(); arrcode++)
		                        {                    	
		                        		cCode=celcode
		                        		cMetdCode=celmethodCode
		                        		cCrank=celCrank
		                        		addCell(cCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].code.toString(),sheet1);		                        		
			                        		
				                        		//Get the array size for shippingMethods
				                        		for(int arrmethodCode=0; arrmethodCode<json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods.size(); arrmethodCode++)
				                        		{ 				                        		            		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].methodCode.toString(),sheet1); 
				                        		cMetdCode=cMetdCode+1;		                        		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].saveAsCertified.toString(),sheet1); 
				                        		cMetdCode=cMetdCode+1;				                        		
				                       		} 
			                       	addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].recommendedCarrierRank.toString(),sheet1);
			                       	cCrank=cCrank+1;							     
							     addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].regionalCarrier.toString(),sheet1); 
							    
							    //Increment the cel position for code, methodCode & recommendedCarrierRank 
							     celcode=celcode+9;
							     celmethodCode=celmethodCode+9;
							    celCrank=celCrank+9;							   							     
		                         }       					                     
			              }  
			              addCell(30,i,json.shippingOrder.recommendedCarrier.toString(),sheet1); 
                             addCell(31,i,json.shippingOrder.recommendedShippingMethod.toString(),sheet1); 
                             
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values for msg
					 //initialize the cel postion for messages array for assertion                      
                                int celmsgass=32;
						//check the existence of messages
            		if(json.shippingOrder.messages.toString()!= "[]")
            		{            		         
		                        String messageCode = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageCode,"shippingOrder.messages[0].messageCode","messageCode")
		                        celmsgass=celmsgass+1;
		                       
		                        String description = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,description,"shippingOrder.messages[0].description","description")  
		                        celmsgass=celmsgass+1;                     
		                        
		                        String messageType = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageType,"shippingOrder.messages[0].messageType","messageType")
		                        celmsgass=celmsgass+1;
		                        
            		}
                             //get the expected values for code                            
                         //check the existence of array allowedShippingCarriers                         
                          if (json.shippingOrder.allowedShippingCarriers != null)
                        	 {
                        	 	//initialize the cell postion used for assertion for code, methodCode & recommendedCarrierRank		                        
		                          int AssForcelcode=35; AssForcelmethodCode=36; AssForcelCrank=42;
		                         int AssForCode, AssForMetdCode, AssForCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcdres=0; arrcdres<json.shippingOrder.allowedShippingCarriers.size(); arrcdres++)
		                        { 	 
		                        		AssForCode=AssForcelcode
		                        		AssForMetdCode=AssForcelmethodCode
		                        		AssForCrank=AssForcelCrank                       		
								 code = sh.getCell(AssForCode,i).getContents().toString() 								                
								addAssertionJsonPathMatch(testStepForAssertion,code,"shippingOrder.allowedShippingCarriers["+arrcdres+"].code","code")                                            
		                       		//check the existence of array shippingMethods
		                       		if (json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods != null)  
		                       			{    
		                       				//Get the array size for shippingMethods                 
				                        		for(int arrmtcd=0; arrmtcd<json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods.size(); arrmtcd++)
				                        		{              		
				                        		String methodCode = sh.getCell(AssForMetdCode,i).getContents().toString()
			                     			addAssertionJsonPathMatch(testStepForAssertion,methodCode,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].methodCode","methodCode")                       
			                      			AssForMetdCode=AssForMetdCode+1;			                      				
			                      			String saveAsCertified = sh.getCell(AssForMetdCode,i).getContents().toString()
				                        		addAssertionJsonPathMatch(testStepForAssertion,saveAsCertified,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].saveAsCertified","saveAsCertified"); 
				                        		AssForMetdCode=AssForMetdCode+1;
				                       		} 
		                       			}
			                       	   String recommendedCarrierRank = sh.getCell(AssForCrank,i).getContents().toString()			                       	   
				                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrierRank,"shippingOrder.allowedShippingCarriers["+arrcdres+"].recommendedCarrierRank","recommendedCarrierRank")
				                       AssForCrank=AssForCrank+1;				                       
				                       String regionalCarrier = sh.getCell(AssForCrank,i).getContents().toString()
				                       addAssertionJsonPathMatch(testStepForAssertion,regionalCarrier,"shippingOrder.allowedShippingCarriers["+arrcdres+"].regionalCarrier","regionalCarrier")
								
								//increment the cell postion used for assertion for code, methodCode & recommendedCarrierRank	                       	
							     AssForcelcode=AssForcelcode+9;
							     AssForcelmethodCode=AssForcelmethodCode+9;
							     AssForcelCrank=AssForcelCrank+9;		
							     			   							     
		                         }       					                     
			              }  
			             recommendedCarrier = sh.getCell(62,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrier,"shippingOrder.recommendedCarrier","recommendedCarrier")
	                       recommendedShippingMethod = sh.getCell(63,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedShippingMethod,"shippingOrder.recommendedShippingMethod","recommendedShippingMethod")
					                            
                       	                       						
                                //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(32,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(33,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(32,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"
          
/*}
     
catch(Exception e)
{

       log.info(e)                         
}

finally

{*/
    //close workbook
     wb.close();
     wb1.close();     

//}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

} 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}]]></script></con:config></con:testStep><con:testStep type="groovy" name="DetermineAllowableShippingCarriersAndMethods_FourCodes" id="16575ea5-6169-4a1d-8ae1-471b17d85d70"><con:settings/><con:config><script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_Input_Groovy.xls"
def outputfile = projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_4 Codes_Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("Input - 4 Codes")
Sheet jsonInput = wb.getSheet("JSON-4 Codes")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"messageCode",sheet1);
addCell(1,0,"description",sheet1);
addCell(2,0,"messageType",sheet1);

addCell(3,0,"code",sheet1);
addCell(4,0,"methodCode",sheet1);
addCell(5,0,"saveAsCertified",sheet1);
addCell(6,0,"methodCode",sheet1);
addCell(7,0,"saveAsCertified",sheet1);
addCell(8,0,"methodCode",sheet1);
addCell(9,0,"saveAsCertified",sheet1);
addCell(10,0,"recommendedCarrierRank",sheet1);
addCell(11,0,"regionalCarrier",sheet1);

addCell(12,0,"code",sheet1);
addCell(13,0,"methodCode",sheet1);
addCell(14,0,"saveAsCertified",sheet1);
addCell(15,0,"methodCode",sheet1);
addCell(16,0,"saveAsCertified",sheet1);
addCell(17,0,"methodCode",sheet1);
addCell(18,0,"saveAsCertified",sheet1);
addCell(19,0,"recommendedCarrierRank",sheet1);
addCell(20,0,"regionalCarrier",sheet1);

addCell(21,0,"code",sheet1);
addCell(22,0,"methodCode",sheet1);
addCell(23,0,"saveAsCertified",sheet1);
addCell(24,0,"methodCode",sheet1);
addCell(25,0,"saveAsCertified",sheet1);
addCell(26,0,"methodCode",sheet1);
addCell(27,0,"saveAsCertified",sheet1);
addCell(28,0,"recommendedCarrierRank",sheet1);
addCell(29,0,"regionalCarrier",sheet1);

addCell(30,0,"code",sheet1);
addCell(31,0,"methodCode",sheet1);
addCell(32,0,"saveAsCertified",sheet1);
addCell(33,0,"methodCode",sheet1);
addCell(34,0,"saveAsCertified",sheet1);
addCell(35,0,"methodCode",sheet1);
addCell(36,0,"saveAsCertified",sheet1);
addCell(37,0,"recommendedCarrierRank",sheet1);
addCell(38,0,"regionalCarrier",sheet1);

addCell(39,0,"recommendedCarrier",sheet1);
addCell(40,0,"recommendedShippingMethod",sheet1);

addCell(41,0,"PASS/FAIL",sheet1);
addCell(42,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

//try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                //Input                                 
                                requestTemplet.content.allowableShippingRequest.poBox = sh.getCell(2,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.physicalAddress = sh.getCell(3,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.hazmat = sh.getCell(4,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.proofOfDelivery = sh.getCell(5,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.addressOutsideContiguousStates = sh.getCell(6,i).getContents().toString()                                
                                requestTemplet.content.allowableShippingRequest.uspsPreferred = sh.getCell(7,i).getContents().toString()                               
                                 
                                 //Input for shippingCarriers - code [0]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].code = sh.getCell(8,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].methodCode = sh.getCell(9,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].transitTimeInDays = sh.getCell(10,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].methodCode = sh.getCell(11,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].transitTimeInDays = sh.getCell(12,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].methodCode = sh.getCell(13,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].transitTimeInDays = sh.getCell(14,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].recommendedCarrierRank = sh.getCell(15,i).getContents()                            

               				//Input for shippingCarriers - code [1]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].code = sh.getCell(16,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[0].methodCode = sh.getCell(17,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[0].transitTimeInDays = sh.getCell(18,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[1].methodCode = sh.getCell(19,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[1].transitTimeInDays = sh.getCell(20,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[2].methodCode = sh.getCell(21,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[2].transitTimeInDays = sh.getCell(22,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].recommendedCarrierRank = sh.getCell(23,i).getContents()                            
               				
              					//Input for shippingCarriers - code [2]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].code = sh.getCell(24,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[0].methodCode = sh.getCell(25,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[0].transitTimeInDays = sh.getCell(26,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[1].methodCode = sh.getCell(27,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[1].transitTimeInDays = sh.getCell(28,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[2].methodCode = sh.getCell(29,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[2].transitTimeInDays = sh.getCell(30,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].recommendedCarrierRank = sh.getCell(31,i).getContents()                            
               				
              					//Input for shippingCarriers - code [3]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[3].code = sh.getCell(32,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[3].shippingMethods[0].methodCode = sh.getCell(33,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[3].shippingMethods[0].transitTimeInDays = sh.getCell(34,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[3].shippingMethods[1].methodCode = sh.getCell(35,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[3].shippingMethods[1].transitTimeInDays = sh.getCell(36,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[3].shippingMethods[2].methodCode = sh.getCell(37,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[3].shippingMethods[2].transitTimeInDays = sh.getCell(38,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[3].recommendedCarrierRank = sh.getCell(39,i).getContents()                            
               				
	                             //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)                             
                         //teststep cloned: End
                         
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                          // get response for message
                          //initialize the cel postion for messages array
                          int celmsg=0;
                          //Get the array size for messages
                        for(int arrmsg=0; arrmsg<json.shippingOrder.messages.size(); arrmsg++)
                        {
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageCode.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].description.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageType.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        }

					//get response for code                         	
                         //Check the existence of the array: allowedShippingCarriers                        
                          if (json.shippingOrder.allowedShippingCarriers != null)
                         {
		                        //initialize the cel postion for code, methodCode & recommendedCarrierRank
		                         int celcode=3; celmethodCode=4; celCrank=10;
		                         int cCode, cMetdCode, cCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcode=0; arrcode<json.shippingOrder.allowedShippingCarriers.size(); arrcode++)
		                        {                    	
		                        		cCode=celcode
		                        		cMetdCode=celmethodCode
		                        		cCrank=celCrank
		                        		addCell(cCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].code.toString(),sheet1);		                        		
			                        		
				                        		//Get the array size for shippingMethods
				                        		for(int arrmethodCode=0; arrmethodCode<json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods.size(); arrmethodCode++)
				                        		{ 				                        		            		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].methodCode.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;		                        		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].saveAsCertified.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;				                        		
				                       		} 
			                       	addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].recommendedCarrierRank.toString(),sheet1);
			                       	cCrank=cCrank+1;							     
							     addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].regionalCarrier.toString(),sheet1); 
							    
							    //Increment the cel position for code, methodCode & recommendedCarrierRank 
							     celcode=celcode+9;
							     celmethodCode=celmethodCode+9;
							    celCrank=celCrank+9;							   							     
		                         }       					                     
			              }  
			              addCell(39,i,json.shippingOrder.recommendedCarrier.toString(),sheet1); 
                             addCell(40,i,json.shippingOrder.recommendedShippingMethod.toString(),sheet1);                                          

                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                        //get the expected values for msg
						 //initialize the cel postion for messages array for assertion                      
                                int celmsgass=40;
						//check the existence of messages
            		if(json.shippingOrder.messages.toString()!= "[]")
            		{            		         
		                        String messageCode = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageCode,"shippingOrder.messages[0].messageCode","messageCode")
		                        celmsgass=celmsgass+1;
		                       
		                        String description = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,description,"shippingOrder.messages[0].description","description")  
		                        celmsgass=celmsgass+1;                     
		                        
		                        String messageType = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageType,"shippingOrder.messages[0].messageType","messageType")
		                        celmsgass=celmsgass+1;
		                        
            		}
                             //get the expected values for code                            
                         //check the existence of array allowedShippingCarriers                         
                          if (json.shippingOrder.allowedShippingCarriers != null)
                        	 {
                        	 	//initialize the cell postion used for assertion for code, methodCode & recommendedCarrierRank
		                          int AssForcelcode=43; AssForcelmethodCode=44; AssForcelCrank=50;
		                         int AssForCode, AssForMetdCode, AssForCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcdres=0; arrcdres<json.shippingOrder.allowedShippingCarriers.size(); arrcdres++)
		                        { 	 
		                        		AssForCode=AssForcelcode
		                        		AssForMetdCode=AssForcelmethodCode
		                        		AssForCrank=AssForcelCrank                       		
								 code = sh.getCell(AssForCode,i).getContents().toString() 								                
								addAssertionJsonPathMatch(testStepForAssertion,code,"shippingOrder.allowedShippingCarriers["+arrcdres+"].code","code")                                            
		                       		//check the existence of array shippingMethods
		                       		if (json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods != null)  
		                       			{    
		                       				//Get the array size for shippingMethods                 
				                        		for(int arrmtcd=0; arrmtcd<json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods.size(); arrmtcd++)
				                        		{              		
				                        		String methodCode = sh.getCell(AssForMetdCode,i).getContents().toString()
			                     			addAssertionJsonPathMatch(testStepForAssertion,methodCode,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].methodCode","methodCode")                       
			                      			AssForMetdCode=AssForMetdCode+1;			                      				
			                      			String saveAsCertified = sh.getCell(AssForMetdCode,i).getContents().toString()
				                        		addAssertionJsonPathMatch(testStepForAssertion,saveAsCertified,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].saveAsCertified","saveAsCertified"); 
				                        		AssForMetdCode=AssForMetdCode+1;
				                       		} 
		                       			}
			                       	   String recommendedCarrierRank = sh.getCell(AssForCrank,i).getContents().toString()			                       	   
				                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrierRank,"shippingOrder.allowedShippingCarriers["+arrcdres+"].recommendedCarrierRank","recommendedCarrierRank")
				                       AssForCrank=AssForCrank+1;				                       
				                       String regionalCarrier = sh.getCell(AssForCrank,i).getContents().toString()
				                       addAssertionJsonPathMatch(testStepForAssertion,regionalCarrier,"shippingOrder.allowedShippingCarriers["+arrcdres+"].regionalCarrier","regionalCarrier")
								
								//increment the cell postion used for assertion for code, methodCode & recommendedCarrierRank	                       	
							     AssForcelcode=AssForcelcode+9;
							     AssForcelmethodCode=AssForcelmethodCode+9;
							     AssForcelCrank=AssForcelCrank+9;							   							     
		                         }       					                     
			              }  
			             recommendedCarrier = sh.getCell(79,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrier,"shippingOrder.recommendedCarrier","recommendedCarrier")
	                       recommendedShippingMethod = sh.getCell(80,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedShippingMethod,"shippingOrder.recommendedShippingMethod","recommendedShippingMethod")
					             
                       	                       						
                                //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(41,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(42,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(41,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"
          
/*}
     
catch(Exception e)
{

       log.info(e)                         
}

finally

{*/
    //close workbook
     wb.close();
     wb1.close();     

//}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

} 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}]]></script></con:config></con:testStep><con:testStep type="groovy" name="DetermineAllowableShippingCarriersAndMethods_SingleCode_RunOnFriday" id="fc061b92-219d-4031-b3c6-3a034029530c"><con:settings/><con:config><script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_Input_Groovy_Run on Friday.xls"
def outputfile = projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_Single Code_Run on Friday_Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("Input - Single Code")
Sheet jsonInput = wb.getSheet("JSON-Single Code")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"messageCode",sheet1);
addCell(1,0,"description",sheet1);
addCell(2,0,"messageType",sheet1);

addCell(3,0,"code",sheet1);
addCell(4,0,"methodCode",sheet1);
addCell(5,0,"saveAsCertified",sheet1);
addCell(6,0,"methodCode",sheet1);
addCell(7,0,"saveAsCertified",sheet1);
addCell(8,0,"methodCode",sheet1);
addCell(9,0,"saveAsCertified",sheet1);
addCell(10,0,"recommendedCarrierRank",sheet1);
addCell(11,0,"regionalCarrier",sheet1);

addCell(12,0,"recommendedCarrier",sheet1);
addCell(13,0,"recommendedShippingMethod",sheet1);

addCell(14,0,"PASS/FAIL",sheet1);
addCell(15,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

//try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                                                        
                                //Input                                 
                                requestTemplet.content.allowableShippingRequest.poBox = sh.getCell(2,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.physicalAddress = sh.getCell(3,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.hazmat = sh.getCell(4,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.proofOfDelivery = sh.getCell(5,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.addressOutsideContiguousStates = sh.getCell(6,i).getContents().toString()                                
                                requestTemplet.content.allowableShippingRequest.uspsPreferred = sh.getCell(7,i).getContents().toString()                               
                                 
                                 //Input for shippingCarriers - code [0]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].code = sh.getCell(8,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].methodCode = sh.getCell(9,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].transitTimeInDays = sh.getCell(10,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].methodCode = sh.getCell(11,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].transitTimeInDays = sh.getCell(12,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].methodCode = sh.getCell(13,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].transitTimeInDays = sh.getCell(14,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].recommendedCarrierRank = sh.getCell(15,i).getContents()                            
               				              
	                             //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)                             
                         //teststep cloned: End
                         
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)                    
                                  
                          // get response for message
                          //initialize the cel postion for messages array
                          int celmsg=0;
                          //Get the array size for messages
                        for(int arrmsg=0; arrmsg<json.shippingOrder.messages.size(); arrmsg++)
                        {
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageCode.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].description.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageType.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        }
					
                        //get response for code 
                          //Check the existence of the array: allowedShippingCarriers                        
                          if (json.shippingOrder.allowedShippingCarriers != null)
                         {
		                        //initialize the cel postion for code, methodCode & recommendedCarrierRank
		                         int celcode=3; celmethodCode=4; celCrank=10;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcode=0; arrcode<json.shippingOrder.allowedShippingCarriers.size(); arrcode++)
		                        {                    	
		                        		addCell(celcode,i,json.shippingOrder.allowedShippingCarriers[arrcode].code.toString(),sheet1);		                        		
			                        		
				                        		//Get the array size for shippingMethods
				                        		for(int arrmethodCode=0; arrmethodCode<json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods.size(); arrmethodCode++)
				                        		{              		
				                        		addCell(celmethodCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].methodCode.toString(),sheet1); 
				                        		celmethodCode=celmethodCode+1;		                        		
				                        		addCell(celmethodCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].saveAsCertified.toString(),sheet1); 
				                        		celmethodCode=celmethodCode+1;
				                       		} 
			                       	addCell(celCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].recommendedCarrierRank.toString(),sheet1);
			                       	celCrank=celCrank+1;							     
							     addCell(celCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].regionalCarrier.toString(),sheet1); 
							    
							    //Increment the cel position for code, methodCode & recommendedCarrierRank 
							     celcode=celcode+9;
							     celmethodCode=celmethodCode+5;
							    celCrank=celCrank+8;							   							     
		                         }       					                     
			              }  
			              addCell(12,i,json.shippingOrder.recommendedCarrier.toString(),sheet1); 
                             addCell(13,i,json.shippingOrder.recommendedShippingMethod.toString(),sheet1);                                                        
                                        
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values for message
                          //initialize the cel postion for messages array for assertion                      
                                int celmsgass=16;
						//check the existence of messages
            		if(json.shippingOrder.messages.toString()!= "[]")
            		{            		         
		                        String messageCode = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageCode,"shippingOrder.messages[0].messageCode","messageCode")
		                        celmsgass=celmsgass+1;
		                       
		                        String description = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,description,"shippingOrder.messages[0].description","description")  
		                        celmsgass=celmsgass+1;                     
		                        
		                        String messageType = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageType,"shippingOrder.messages[0].messageType","messageType")
		                        celmsgass=celmsgass+1;
		                        
            		}
                       
					//get the expected values for code  
				 	 //check the existence of array allowedShippingCarriers                         
                          if (json.shippingOrder.allowedShippingCarriers != null)
                        	 {
                        	 	//initialize the cell postion used for assertion for code, methodCode & recommendedCarrierRank
		                          int AssForcelcode=19; AssForcelmethodCode=20; AssForcelCrank=26;
		                         int AssForCode, AssForMetdCode, AssForCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcdres=0; arrcdres<json.shippingOrder.allowedShippingCarriers.size(); arrcdres++)
		                        { 	 
		                        		AssForCode=AssForcelcode
		                        		AssForMetdCode=AssForcelmethodCode
		                        		AssForCrank=AssForcelCrank                       		
								 code = sh.getCell(AssForCode,i).getContents().toString() 								                
								addAssertionJsonPathMatch(testStepForAssertion,code,"shippingOrder.allowedShippingCarriers["+arrcdres+"].code","code")                                            
		                       		//check the existence of array shippingMethods
		                       		if (json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods != null)  
		                       			{    
		                       				//Get the array size for shippingMethods                 
				                        		for(int arrmtcd=0; arrmtcd<json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods.size(); arrmtcd++)
				                        		{              		
				                        		String methodCode = sh.getCell(AssForMetdCode,i).getContents().toString()
			                     			addAssertionJsonPathMatch(testStepForAssertion,methodCode,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].methodCode","methodCode")                       
			                      			AssForMetdCode=AssForMetdCode+1;			                      				
			                      			String saveAsCertified = sh.getCell(AssForMetdCode,i).getContents().toString()
				                        		addAssertionJsonPathMatch(testStepForAssertion,saveAsCertified,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].saveAsCertified","saveAsCertified"); 
				                        		AssForMetdCode=AssForMetdCode+1;
				                       		} 
		                       			}
			                       	   String recommendedCarrierRank = sh.getCell(AssForCrank,i).getContents().toString()			                       	   
				                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrierRank,"shippingOrder.allowedShippingCarriers["+arrcdres+"].recommendedCarrierRank","recommendedCarrierRank")
				                       AssForCrank=AssForCrank+1;				                       
				                       String regionalCarrier = sh.getCell(AssForCrank,i).getContents().toString()
				                       addAssertionJsonPathMatch(testStepForAssertion,regionalCarrier,"shippingOrder.allowedShippingCarriers["+arrcdres+"].regionalCarrier","regionalCarrier")
								
								//increment the cell postion used for assertion for code, methodCode & recommendedCarrierRank	                       	
							     AssForcelcode=AssForcelcode+9;
							     AssForcelmethodCode=AssForcelmethodCode+9;
							     AssForcelCrank=AssForcelCrank+9;							   							     
		                         }       					                     
			              }  
						 recommendedCarrier = sh.getCell(28,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrier,"shippingOrder.recommendedCarrier","recommendedCarrier")
	                       recommendedShippingMethod = sh.getCell(29,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedShippingMethod,"shippingOrder.recommendedShippingMethod","recommendedShippingMethod")
						                      						
                                //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(14,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(15,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(14,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"
          
/*}
     
catch(Exception e)
{

       log.info(e)                         
}

finally

{*/
    //close workbook
     wb.close();
     wb1.close();     

//}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

} 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}]]></script></con:config></con:testStep><con:testStep type="groovy" name="DetermineAllowableShippingCarriersAndMethods_TwoCodes_RunOnFriday" id="1e6aed30-d330-439c-afae-2957db42d25a"><con:settings/><con:config><script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_Input_Groovy_Run on Friday.xls"
def outputfile = projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_2 Codes_Run on Friday_Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("Input - 2 Codes")
Sheet jsonInput = wb.getSheet("JSON-2 Codes")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"messageCode",sheet1);
addCell(1,0,"description",sheet1);
addCell(2,0,"messageType",sheet1);

addCell(3,0,"code",sheet1);
addCell(4,0,"methodCode",sheet1);
addCell(5,0,"saveAsCertified",sheet1);
addCell(6,0,"methodCode",sheet1);
addCell(7,0,"saveAsCertified",sheet1);
addCell(8,0,"methodCode",sheet1);
addCell(9,0,"saveAsCertified",sheet1);
addCell(10,0,"recommendedCarrierRank",sheet1);
addCell(11,0,"regionalCarrier",sheet1);

addCell(12,0,"code",sheet1);
addCell(13,0,"methodCode",sheet1);
addCell(14,0,"saveAsCertified",sheet1);
addCell(15,0,"methodCode",sheet1);
addCell(16,0,"saveAsCertified",sheet1);
addCell(17,0,"methodCode",sheet1);
addCell(18,0,"saveAsCertified",sheet1);
addCell(19,0,"recommendedCarrierRank",sheet1);
addCell(20,0,"regionalCarrier",sheet1);

addCell(21,0,"recommendedCarrier",sheet1);
addCell(22,0,"recommendedShippingMethod",sheet1);

addCell(23,0,"PASS/FAIL",sheet1);
addCell(24,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

//try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                //Input                                 
                                requestTemplet.content.allowableShippingRequest.poBox = sh.getCell(2,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.physicalAddress = sh.getCell(3,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.hazmat = sh.getCell(4,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.proofOfDelivery = sh.getCell(5,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.addressOutsideContiguousStates = sh.getCell(6,i).getContents().toString()                                
                                requestTemplet.content.allowableShippingRequest.uspsPreferred = sh.getCell(7,i).getContents().toString()                               
                                 
                                 //Input for shippingCarriers - code [0]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].code = sh.getCell(8,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].methodCode = sh.getCell(9,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].transitTimeInDays = sh.getCell(10,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].methodCode = sh.getCell(11,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].transitTimeInDays = sh.getCell(12,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].methodCode = sh.getCell(13,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].transitTimeInDays = sh.getCell(14,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].recommendedCarrierRank = sh.getCell(15,i).getContents()                            

               				//Input for shippingCarriers - code [1]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].code = sh.getCell(16,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[0].methodCode = sh.getCell(17,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[0].transitTimeInDays = sh.getCell(18,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[1].methodCode = sh.getCell(19,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[1].transitTimeInDays = sh.getCell(20,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[2].methodCode = sh.getCell(21,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[2].transitTimeInDays = sh.getCell(22,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].recommendedCarrierRank = sh.getCell(23,i).getContents()                            
               				
              
	                             //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)                             
                         //teststep cloned: End
                         
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                          // get response for message
                          //initialize the cel postion for messages array
                          int celmsg=0;
                          //Get the array size for messages
                        for(int arrmsg=0; arrmsg<json.shippingOrder.messages.size(); arrmsg++)
                        {
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageCode.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].description.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageType.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        }
					
                        //get response for code                                       
			 		//Check the existence of the array: allowedShippingCarriers                        
                          if (json.shippingOrder.allowedShippingCarriers != null)
                         {
		                        //initialize the cel postion for code, methodCode & recommendedCarrierRank
		                         int celcode=3; celmethodCode=4; celCrank=10;
		                         int cCode, cMetdCode, cCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcode=0; arrcode<json.shippingOrder.allowedShippingCarriers.size(); arrcode++)
		                        {                    	
		                        		cCode=celcode
		                        		cMetdCode=celmethodCode
		                        		cCrank=celCrank
		                        		addCell(cCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].code.toString(),sheet1);		                        		
			                        		
				                        		//Get the array size for shippingMethods
				                        		for(int arrmethodCode=0; arrmethodCode<json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods.size(); arrmethodCode++)
				                        		{ 				                        		            		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].methodCode.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;		                        		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].saveAsCertified.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;				                        		
				                       		} 
			                       	addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].recommendedCarrierRank.toString(),sheet1);
			                       	cCrank=cCrank+1;							     
							     addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].regionalCarrier.toString(),sheet1); 
							    
							    //Increment the cel position for code, methodCode & recommendedCarrierRank 
							     celcode=celcode+9;
							     celmethodCode=celmethodCode+9;
							    celCrank=celCrank+9;							   							     
		                         }       					                     
			              }  
			              addCell(21,i,json.shippingOrder.recommendedCarrier.toString(),sheet1); 
                             addCell(22,i,json.shippingOrder.recommendedShippingMethod.toString(),sheet1); 
               
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values for msg
						  //initialize the cel postion for messages array for assertion                      
                                int celmsgass=24;
						//check the existence of messages
            		if(json.shippingOrder.messages.toString()!= "[]")
            		{            		         
		                        String messageCode = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageCode,"shippingOrder.messages[0].messageCode","messageCode")
		                        celmsgass=celmsgass+1;
		                       
		                        String description = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,description,"shippingOrder.messages[0].description","description")  
		                        celmsgass=celmsgass+1;                     
		                        
		                        String messageType = sh.getCell(celmsgass,i).getContents().toString()
		                        addAssertionJsonPathMatch(testStepForAssertion,messageType,"shippingOrder.messages[0].messageType","messageType")
		                        celmsgass=celmsgass+1;
		                        
            		}
                             //get the expected values for code
                            //check the existence of array allowedShippingCarriers                         
                          if (json.shippingOrder.allowedShippingCarriers != null)
                        	 {
                        	 	//initialize the cell postion used for assertion for code, methodCode & recommendedCarrierRank
		                          int AssForcelcode=27; AssForcelmethodCode=28; AssForcelCrank=34;
		                         int AssForCode, AssForMetdCode, AssForCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcdres=0; arrcdres<json.shippingOrder.allowedShippingCarriers.size(); arrcdres++)
		                        { 	 
		                        		AssForCode=AssForcelcode
		                        		AssForMetdCode=AssForcelmethodCode
		                        		AssForCrank=AssForcelCrank                       		
								 code = sh.getCell(AssForCode,i).getContents().toString() 								                
								addAssertionJsonPathMatch(testStepForAssertion,code,"shippingOrder.allowedShippingCarriers["+arrcdres+"].code","code")                                            
		                       		//check the existence of array shippingMethods
		                       		if (json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods != null)  
		                       			{    
		                       				//Get the array size for shippingMethods                 
				                        		for(int arrmtcd=0; arrmtcd<json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods.size(); arrmtcd++)
				                        		{              		
				                        		String methodCode = sh.getCell(AssForMetdCode,i).getContents().toString()
			                     			addAssertionJsonPathMatch(testStepForAssertion,methodCode,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].methodCode","methodCode")                       
			                      			AssForMetdCode=AssForMetdCode+1;			                      				
			                      			String saveAsCertified = sh.getCell(AssForMetdCode,i).getContents().toString()
				                        		addAssertionJsonPathMatch(testStepForAssertion,saveAsCertified,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].saveAsCertified","saveAsCertified"); 
				                        		AssForMetdCode=AssForMetdCode+1;
				                       		} 
		                       			}
			                       	   String recommendedCarrierRank = sh.getCell(AssForCrank,i).getContents().toString()			                       	   
				                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrierRank,"shippingOrder.allowedShippingCarriers["+arrcdres+"].recommendedCarrierRank","recommendedCarrierRank")
				                       AssForCrank=AssForCrank+1;				                       
				                       String regionalCarrier = sh.getCell(AssForCrank,i).getContents().toString()
				                       addAssertionJsonPathMatch(testStepForAssertion,regionalCarrier,"shippingOrder.allowedShippingCarriers["+arrcdres+"].regionalCarrier","regionalCarrier")
								
								//increment the cell postion used for assertion for code, methodCode & recommendedCarrierRank	                       	
							     AssForcelcode=AssForcelcode+9;
							     AssForcelmethodCode=AssForcelmethodCode+9;
							     AssForcelCrank=AssForcelCrank+9;							   							     
		                         }       					                     
			              }
			             recommendedCarrier = sh.getCell(45,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrier,"shippingOrder.recommendedCarrier","recommendedCarrier")
	                       recommendedShippingMethod = sh.getCell(46,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedShippingMethod,"shippingOrder.recommendedShippingMethod","recommendedShippingMethod")
					                            
                       	                       						
                                //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(23,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(24,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(23,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"
          
/*}
     
catch(Exception e)
{

       log.info(e)                         
}

finally

{*/
    //close workbook
     wb.close();
     wb1.close();     

//}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

} 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}]]></script></con:config></con:testStep><con:testStep type="groovy" name="DetermineAllowableShippingCarriersAndMethods_ThreeCodes_RunOnFriday" id="2e41a35c-223a-4be7-931c-ed69c611f6fe"><con:settings/><con:config><script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_Input_Groovy_Run on Friday.xls"
def outputfile = projectDir + "/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods_3 Codes_Run on Friday_Output.xls"



//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("Input - 3 Codes")
Sheet jsonInput = wb.getSheet("JSON-3 Codes")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"messageCode",sheet1);
addCell(1,0,"description",sheet1);
addCell(2,0,"messageType",sheet1);

addCell(3,0,"code",sheet1);
addCell(4,0,"methodCode",sheet1);
addCell(5,0,"saveAsCertified",sheet1);
addCell(6,0,"methodCode",sheet1);
addCell(7,0,"saveAsCertified",sheet1);
addCell(8,0,"methodCode",sheet1);
addCell(9,0,"saveAsCertified",sheet1);
addCell(10,0,"recommendedCarrierRank",sheet1);
addCell(11,0,"regionalCarrier",sheet1);

addCell(12,0,"code",sheet1);
addCell(13,0,"methodCode",sheet1);
addCell(14,0,"saveAsCertified",sheet1);
addCell(15,0,"methodCode",sheet1);
addCell(16,0,"saveAsCertified",sheet1);
addCell(17,0,"methodCode",sheet1);
addCell(18,0,"saveAsCertified",sheet1);
addCell(19,0,"recommendedCarrierRank",sheet1);
addCell(20,0,"regionalCarrier",sheet1);

addCell(21,0,"code",sheet1);
addCell(22,0,"methodCode",sheet1);
addCell(23,0,"saveAsCertified",sheet1);
addCell(24,0,"methodCode",sheet1);
addCell(25,0,"saveAsCertified",sheet1);
addCell(26,0,"methodCode",sheet1);
addCell(27,0,"saveAsCertified",sheet1);
addCell(28,0,"recommendedCarrierRank",sheet1);
addCell(29,0,"regionalCarrier",sheet1);

addCell(30,0,"recommendedCarrier",sheet1);
addCell(31,0,"recommendedShippingMethod",sheet1);

addCell(32,0,"PASS/FAIL",sheet1);
addCell(33,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

//try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                //Input                                 
                                requestTemplet.content.allowableShippingRequest.poBox = sh.getCell(2,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.physicalAddress = sh.getCell(3,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.hazmat = sh.getCell(4,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.proofOfDelivery = sh.getCell(5,i).getContents().toString()
                                requestTemplet.content.allowableShippingRequest.addressOutsideContiguousStates = sh.getCell(6,i).getContents().toString()                                
                                requestTemplet.content.allowableShippingRequest.uspsPreferred = sh.getCell(7,i).getContents().toString()                               
                                 
                                 //Input for shippingCarriers - code [0]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].code = sh.getCell(8,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].methodCode = sh.getCell(9,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[0].transitTimeInDays = sh.getCell(10,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].methodCode = sh.getCell(11,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[1].transitTimeInDays = sh.getCell(12,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].methodCode = sh.getCell(13,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].shippingMethods[2].transitTimeInDays = sh.getCell(14,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[0].recommendedCarrierRank = sh.getCell(15,i).getContents()                            

               				//Input for shippingCarriers - code [1]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].code = sh.getCell(16,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[0].methodCode = sh.getCell(17,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[0].transitTimeInDays = sh.getCell(18,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[1].methodCode = sh.getCell(19,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[1].transitTimeInDays = sh.getCell(20,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[2].methodCode = sh.getCell(21,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].shippingMethods[2].transitTimeInDays = sh.getCell(22,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[1].recommendedCarrierRank = sh.getCell(23,i).getContents()                            
               				
              					//Input for shippingCarriers - code [2]                                                                                                                                                                                                                                                                     
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].code = sh.getCell(24,i).getContents().toString()	                                                                                                                                                          
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[0].methodCode = sh.getCell(25,i).getContents().toString()	                                                                                           
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[0].transitTimeInDays = sh.getCell(26,i).getContents().toString()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[1].methodCode = sh.getCell(27,i).getContents().toString()                                              
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[1].transitTimeInDays = sh.getCell(28,i).getContents().toString()                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[2].methodCode = sh.getCell(29,i).getContents().toString()                                                         
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].shippingMethods[2].transitTimeInDays = sh.getCell(30,i).getContents()	                                
	                                requestTemplet.content.allowableShippingRequest.shippingCarriers[2].recommendedCarrierRank = sh.getCell(31,i).getContents()                            
               				
              
	                             //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)                             
                         //teststep cloned: End
                         
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                          // get response for message
                         //initialize the cel postion for messages array
                          int celmsg=0;
                          //Get the array size for messages
                        for(int arrmsg=0; arrmsg<json.shippingOrder.messages.size(); arrmsg++)
                        {
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageCode.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].description.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        		addCell(celmsg,i,json.shippingOrder.messages[arrmsg].messageType.toString(),sheet1); 
                        		celmsg=celmsg+1;
                        }
					
                        //get response for code 
                        //Check the existence of the array: allowedShippingCarriers                        
                          if (json.shippingOrder.allowedShippingCarriers != null)
                         {
		                        //initialize the cel postion for code, methodCode & recommendedCarrierRank
		                         int celcode=3; celmethodCode=4; celCrank=10;
		                         int cCode, cMetdCode, cCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcode=0; arrcode<json.shippingOrder.allowedShippingCarriers.size(); arrcode++)
		                        {                    	
		                        		cCode=celcode
		                        		cMetdCode=celmethodCode
		                        		cCrank=celCrank
		                        		addCell(cCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].code.toString(),sheet1);		                        		
			                        		
				                        		//Get the array size for shippingMethods
				                        		for(int arrmethodCode=0; arrmethodCode<json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods.size(); arrmethodCode++)
				                        		{ 				                        		            		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].methodCode.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;		                        		
				                        		addCell(cMetdCode,i,json.shippingOrder.allowedShippingCarriers[arrcode].shippingMethods[arrmethodCode].saveAsCertified.toString(),sheet1); 
				                        		//log.info cMetdCode	
				                        		cMetdCode=cMetdCode+1;				                        		
				                       		} 
			                       	addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].recommendedCarrierRank.toString(),sheet1);
			                       	cCrank=cCrank+1;							     
							     addCell(cCrank,i,json.shippingOrder.allowedShippingCarriers[arrcode].regionalCarrier.toString(),sheet1); 
							    
							    //Increment the cel position for code, methodCode & recommendedCarrierRank 
							     celcode=celcode+9;
							     celmethodCode=celmethodCode+9;
							    celCrank=celCrank+9;						   							     
		                         }       					                     
			              }  
			              addCell(30,i,json.shippingOrder.recommendedCarrier.toString(),sheet1); 
                             addCell(31,i,json.shippingOrder.recommendedShippingMethod.toString(),sheet1);                       	
                                    
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                            //get the expected values for msg
						//check the existence of array allowedShippingCarriers                         
                          if (json.shippingOrder.allowedShippingCarriers != null)
                        	 {
                        	 	//initialize the cell postion used for assertion for code, methodCode & recommendedCarrierRank
		                          int AssForcelcode=35; AssForcelmethodCode=36; AssForcelCrank=42;
		                         int AssForCode, AssForMetdCode, AssForCrank;
		                         //Get the array size for allowedShippingCarriers
		                        for(int arrcdres=0; arrcdres<json.shippingOrder.allowedShippingCarriers.size(); arrcdres++)
		                        { 	 
		                        		AssForCode=AssForcelcode
		                        		AssForMetdCode=AssForcelmethodCode
		                        		AssForCrank=AssForcelCrank                       		
								 code = sh.getCell(AssForCode,i).getContents().toString() 								                
								addAssertionJsonPathMatch(testStepForAssertion,code,"shippingOrder.allowedShippingCarriers["+arrcdres+"].code","code")                                            
		                       		//check the existence of array shippingMethods
		                       		if (json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods != null)  
		                       			{    
		                       				//Get the array size for shippingMethods                 
				                        		for(int arrmtcd=0; arrmtcd<json.shippingOrder.allowedShippingCarriers[arrcdres].shippingMethods.size(); arrmtcd++)
				                        		{              		
				                        		String methodCode = sh.getCell(AssForMetdCode,i).getContents().toString()
			                     			addAssertionJsonPathMatch(testStepForAssertion,methodCode,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].methodCode","methodCode")                       
			                      			AssForMetdCode=AssForMetdCode+1;			                      				
			                      			String saveAsCertified = sh.getCell(AssForMetdCode,i).getContents().toString()
				                        		addAssertionJsonPathMatch(testStepForAssertion,saveAsCertified,"shippingOrder.allowedShippingCarriers["+arrcdres+"].shippingMethods["+arrmtcd+"].saveAsCertified","saveAsCertified"); 
				                        		AssForMetdCode=AssForMetdCode+1;
				                       		} 
		                       			}
			                       	   String recommendedCarrierRank = sh.getCell(AssForCrank,i).getContents().toString()			                       	   
				                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrierRank,"shippingOrder.allowedShippingCarriers["+arrcdres+"].recommendedCarrierRank","recommendedCarrierRank")
				                       AssForCrank=AssForCrank+1;				                       
				                       String regionalCarrier = sh.getCell(AssForCrank,i).getContents().toString()
				                       addAssertionJsonPathMatch(testStepForAssertion,regionalCarrier,"shippingOrder.allowedShippingCarriers["+arrcdres+"].regionalCarrier","regionalCarrier")
								
								//increment the cell postion used for assertion for code, methodCode & recommendedCarrierRank	                       	
							     AssForcelcode=AssForcelcode+9;
							     AssForcelmethodCode=AssForcelmethodCode+9;
							     AssForcelCrank=AssForcelCrank+9;							   							     
		                         }       					                     
			              }  
			             recommendedCarrier = sh.getCell(62,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrier,"shippingOrder.recommendedCarrier","recommendedCarrier")
	                       recommendedShippingMethod = sh.getCell(63,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,recommendedShippingMethod,"shippingOrder.recommendedShippingMethod","recommendedShippingMethod")
					             
                       	                       						
                                //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(32,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(33,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(32,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"
          
/*}
     
catch(Exception e)
{

       log.info(e)                         
}

finally

{*/
    //close workbook
     wb.close();
     wb1.close();     

//}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

} 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}]]></script></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request" id="a1b6cef1-8543-4b8f-9c97-1063edbf2509"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "",
        "hazmat": "",
        "physicalAddress": "",
        "poBox": "",
        "proofOfDelivery": "",
        "shippingCarriers": [
            {
                "code": "",
                "recommendedCarrierRank": "",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": ""
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40431" id="a6e930d4-0739-4f8f-9416-97d40c2c0b9e"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40431" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "true",
        "hazmat": "false",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "6",
                "recommendedCarrierRank": "20",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "NDAM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "SDAR",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="621d8b27-d5e5-40a6-8924-d464f407d8c5" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b16adb3-2e9d-4c89-9ca8-1c4e3db4033d" name="code"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].code</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="93a72c03-02cd-4ec4-865e-c7e4007b2553" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].methodCode</path><content>NDAM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="14bb000f-aaeb-4dd1-82fc-d8fb1f4516af" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="984ca2f3-e655-41b2-ba53-87eb3aeb19aa" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].methodCode</path><content>SDAR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="26b6e83e-3c3d-49b6-8c3e-7528c71a5b60" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="58d06c5f-5f93-45f4-b798-868bcd94db0f" name="recommendedCarrierRank"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].recommendedCarrierRank</path><content>20</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7925566c-dfc1-4cbc-aea6-76eb9d8664ac" name="regionalCarrier"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].regionalCarrier</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1bdf6a0d-8961-410d-a6d7-80f13df3e4c7" name="recommendedCarrier"><con:configuration><path>shippingOrder.recommendedCarrier</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="01e9d304-7fe6-4111-98b3-a93245765673" name="recommendedShippingMethod"><con:configuration><path>shippingOrder.recommendedShippingMethod</path><content>SDAR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40432" id="7197f0db-9022-475d-91ff-50822402096f"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40432" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "true",
        "hazmat": "false",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "9",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "NDAM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "10",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "NDAR",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a92c1bce-4731-4e9e-9909-f0f7a10cec87" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7390b1cf-d3f5-4ab8-ad99-0f0444558487" name="recommendedCarrier"><con:configuration><path>shippingOrder.recommendedCarrier</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3f650e6e-8411-4190-9a96-755655cb467e" name="recommendedShippingMethod"><con:configuration><path>shippingOrder.recommendedShippingMethod</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40435" id="92c11930-e199-46fc-b2d7-27d8f6c96f1d"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40435" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "false",
        "hazmat": "false",
        "physicalAddress": "true",
        "poBox": "false",
        "proofOfDelivery": "true",
        "shippingCarriers": [
            {
                "code": "5",
                "recommendedCarrierRank": "40",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "DRVR",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "10",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "DRVR",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "true"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="812677f4-6397-4714-94fc-6f17ec961268" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fc6be9f3-13c0-47ac-8087-fa9736785e0a" name="code"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].code</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5f77ee25-259c-42d3-852e-1ba092672ee1" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].methodCode</path><content>GRND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c7caa6e-e8a0-4ce9-b5ae-57ccf94492f2" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].saveAsCertified</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4d206871-dea7-429a-b70e-7ca02aeb5e75" name="recommendedCarrierRank"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].recommendedCarrierRank</path><content>40</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="96b74edb-38c1-4491-9c91-b524cdf9ac4c" name="regionalCarrier"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].regionalCarrier</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8bf66775-8866-4203-b7b1-64e78d87aa1b" name="recommendedCarrier"><con:configuration><path>shippingOrder.recommendedCarrier</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="88bfc6b1-6a2d-4e3c-8211-3c77504196ad" name="recommendedShippingMethod"><con:configuration><path>shippingOrder.recommendedShippingMethod</path><content>GRND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40437" id="70e112c1-33d7-4f90-a4f2-e5437fa84e6c"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40437" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "false",
        "hazmat": "true",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "5",
                "recommendedCarrierRank": "40",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "USPM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "11",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "USPM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d206356a-4b95-4194-a88e-11aea4047d27" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4e2d8c53-c24e-4463-a6da-991733a97374" name="messageCode"><con:configuration><path>shippingOrder.messages[0].messageCode</path><content>1003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="477e6864-e5a9-427e-92c7-53b404931e90" name="description"><con:configuration><path>shippingOrder.messages[0].description</path><content>UNABLE_TO_SHIP_HAZMAT</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a7a1c8cd-3808-40dc-ade4-f5ad910f54a3" name="messageType"><con:configuration><path>shippingOrder.messages[0].messageType</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfcaba72-e842-4e28-b30b-8b218fb63f44" name="code"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].code</path><content>11</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="70f75bd9-6f1a-432c-9253-f4254b71cf88" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].methodCode</path><content>USPM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2b69de11-ac0d-43dd-9856-5680632da3cb" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="28390ae5-9185-4a71-ae1f-6ecf55beb09f" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d254a26-6191-4f2d-922d-bc492951c5d6" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="239e1dc7-3212-460f-b049-186005881bde" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[2].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0da4cc43-b73a-4d6b-a02b-bfba5eb7665a" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[2].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f59bcda8-2671-4525-b2d3-084ca191e8a3" name="recommendedCarrierRank"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].recommendedCarrierRank</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="03b36bb4-5f40-42fc-89af-a45e98c1bc8f" name="regionalCarrier"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].regionalCarrier</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="489f8eba-b43d-43a7-919d-61e27b44e1be" name="recommendedCarrier"><con:configuration><path>shippingOrder.recommendedCarrier</path><content>11</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3651d944-25a4-46d3-9a53-c3f074873d07" name="recommendedShippingMethod"><con:configuration><path>shippingOrder.recommendedShippingMethod</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40439" id="405ff4c6-a495-480d-8223-245dc34cc556"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40439" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "true",
        "hazmat": "true",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "true",
        "shippingCarriers": [
            {
                "code": "7",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "6",
                "recommendedCarrierRank": "20",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="285a37c4-f750-484d-8beb-f413d8dbc55c" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a9ef1aa8-07af-49c8-ba39-254d4bcfd295" name="messageCode"><con:configuration><path>shippingOrder.messages[0].messageCode</path><content>1004</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="15076f25-62de-433f-b095-9b34f28aca27" name="description"><con:configuration><path>shippingOrder.messages[0].description</path><content>HAZMAT_ITEM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85f58812-266b-4d64-9193-c6fd26171394" name="messageType"><con:configuration><path>shippingOrder.messages[0].messageType</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d8578fe3-81a9-4d03-8d36-849f6dea1692" name="recommendedCarrier"><con:configuration><path>shippingOrder.recommendedCarrier</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="13f73d7c-a142-499f-a2f9-c0639d7c45a1" name="recommendedShippingMethod"><con:configuration><path>shippingOrder.recommendedShippingMethod</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40441" id="d38e1dd4-ac1d-4e32-8044-ea7415aa89a8"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40441" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "true",
        "hazmat": "false",
        "physicalAddress": "false",
        "poBox": "true",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "5",
                "recommendedCarrierRank": "40",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "USPM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "11",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "USPM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="692eade8-f179-4809-b227-dcbc1c6db64f" name="Valid HTTP Status Codes_8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fe66a1d5-5d3b-40f4-a64e-e1c037cad170" name="messageCode"><con:configuration><path>shippingOrder.messages[0].messageCode</path><content>1002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e0ed5c1b-fcb3-4ee8-aa6b-a4c1cda0de26" name="description"><con:configuration><path>shippingOrder.messages[0].description</path><content>PO_BOX</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="79223386-ddc6-456c-b40f-27b56fa9e7a2" name="messageType"><con:configuration><path>shippingOrder.messages[0].messageType</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fc825470-aaf5-4646-8106-bdbd121dd97f" name="recommendedCarrier"><con:configuration><path>shippingOrder.recommendedCarrier</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="016bc47d-4c23-4f2a-9e41-be7e1feab414" name="recommendedShippingMethod"><con:configuration><path>shippingOrder.recommendedShippingMethod</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40445" id="549939da-a01e-4282-8795-6b3c2ecbecf4"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40445" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "false",
        "hazmat": "false",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "9",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "5",
                "recommendedCarrierRank": "13",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "USPM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1cdb7567-b963-4393-a8f0-7449a9828ae8" name="Valid HTTP Status Codes_9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8f652297-edd7-4c5e-a8b9-da34136d123c" name="code"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].code</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f776d0c7-e09f-464d-9b99-d72e9d1a1d78" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].methodCode</path><content>GRND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="05c44b08-335a-4bae-9927-f2721bd0f3c4" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="342532da-6300-4839-ad8e-c4ee933c16f3" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="14d8c3da-8011-44c1-b358-8b1104b8d139" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2001cb8e-bf51-4ffe-a3f4-a8e5250a906e" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[2].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b412da09-2a8f-48a4-9848-b0e8de8947f1" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[2].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3b07e1cf-31df-46ca-b02e-41727f53fa75" name="recommendedCarrierRank"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].recommendedCarrierRank</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="53b2490b-368e-46a9-a26b-501c080c0a56" name="regionalCarrier"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].regionalCarrier</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="24d530dd-870e-4c61-97a9-b5a7441365e9" name="code"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].code</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2417bee5-c66c-4bd9-ab5a-77d9727dae4d" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].shippingMethods[0].methodCode</path><content>USPM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19c76078-6bd1-40b8-9122-9776eae11823" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].shippingMethods[0].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="315d1d1c-56a3-4ce1-adc3-5c52e1d23f97" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].shippingMethods[1].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="953d88bc-72b5-4ecb-8657-1cceb3f50350" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].shippingMethods[1].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ad80c002-4216-4cc1-b0b9-77c18af57751" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].shippingMethods[2].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b182ccc2-5c0f-4020-be85-2e2d27b43c23" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].shippingMethods[2].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b312979d-4e10-47c7-8227-15d4e8d8f627" name="recommendedCarrierRank"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].recommendedCarrierRank</path><content>13</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4bc25f25-0e3d-4c4a-b276-c0c852422573" name="regionalCarrier"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].regionalCarrier</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7995ae4d-c06e-4c28-a2f3-2f0a5f001f02" name="recommendedCarrier"><con:configuration><path>shippingOrder.recommendedCarrier</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="02a6d54c-610d-409d-bc84-79abec8c8447" name="recommendedShippingMethod"><con:configuration><path>shippingOrder.recommendedShippingMethod</path><content>GRND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40443" id="f150a540-34e2-43fd-a568-587d7bc7699a"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40443" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "false",
        "hazmat": "false",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "1",
                "recommendedCarrierRank": "0",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "4",
                "recommendedCarrierRank": "30",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "NDAR",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "NDAM",
                        "transitTimeInDays": "null"
                    }
                ]
            },
            {
                "code": "7",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="faaa9c20-cff6-4891-89db-c03ff0c897c2" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c54c0c31-de84-46eb-ba21-e58271b6a3e5" name="code"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].code</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c4a08ff-2cfa-4b55-8e51-f5769ce166f1" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].methodCode</path><content>GRND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9dc84e7f-3ca6-4f4f-89dc-5221a1e759f1" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="05d58ecf-6535-4d80-a106-c39aedeafa34" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f16deaa0-f778-4890-837f-6ac332a96f12" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="09506cdf-25d8-469b-8005-c30d0dc936bf" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[2].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b1a7ff8e-7468-4f54-9440-9011f4633c3c" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[2].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c7c726c6-78a1-4a52-8d15-e1bb77a5ed19" name="recommendedCarrierRank"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].recommendedCarrierRank</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="08c72537-998e-41ff-9221-dad07bb6ad0d" name="regionalCarrier"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].regionalCarrier</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eea833cf-e75b-4c69-9c6b-d45af2d3a641" name="code"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].code</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="62039847-a97f-434c-87cf-3feedc928dcd" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].shippingMethods[0].methodCode</path><content>GRND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0db42f54-37cd-4585-b74e-3e163972877a" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].shippingMethods[0].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c6e6d641-445d-48e9-a0b1-2306f4a8e2d7" name="recommendedCarrierRank"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].recommendedCarrierRank</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="92f075c5-799d-4cfa-85d7-f5dc7ccae5e9" name="regionalCarrier"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].regionalCarrier</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b3a2463f-8c2d-4fbf-890f-eb7545632086" name="code"><con:configuration><path>shippingOrder.allowedShippingCarriers[2].code</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4e2d5610-89d3-481c-8e9c-d7bcf8e09468" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[2].shippingMethods[0].methodCode</path><content>GRND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ec72c07d-5fc5-498e-8733-d82df727f238" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[2].shippingMethods[0].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cbfc95d2-9d1b-4860-9457-f5bbe0a50da5" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[2].shippingMethods[1].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="28571dcb-0980-4bbf-9238-b79a73704a07" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[2].shippingMethods[1].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="11396991-24e4-4548-8a02-571125be0f1c" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[2].shippingMethods[2].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fc82ba6e-8fbc-473a-b884-44cba3b44cba" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[2].shippingMethods[2].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7d05317c-498a-45ca-88d2-d09ce31e3cc1" name="recommendedCarrierRank"><con:configuration><path>shippingOrder.allowedShippingCarriers[2].recommendedCarrierRank</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5f825df1-e78d-4dd5-b365-8f60911eec17" name="regionalCarrier"><con:configuration><path>shippingOrder.allowedShippingCarriers[2].regionalCarrier</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="770a3527-1810-4a8d-b8a6-0fc78240d653" name="recommendedCarrier"><con:configuration><path>shippingOrder.recommendedCarrier</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="778890d4-faee-4488-a007-fb19eb410ba6" name="recommendedShippingMethod"><con:configuration><path>shippingOrder.recommendedShippingMethod</path><content>GRND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40444" id="07e0c5c8-1225-4fec-ab95-ccd318249842"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllowableShippingCarriersAndMethods/DetermineAllowableShippingCarriersAndMethods/WADL" methodName="DetermineAllowableShippingCarriersAndMethods" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40444" id="2463e841-bc19-43fa-b650-c9740ca73d74" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "11214804",
    "allowableShippingRequest": {
        "addressOutsideContiguousStates": "false",
        "hazmat": "false",
        "physicalAddress": "false",
        "poBox": "false",
        "proofOfDelivery": "false",
        "shippingCarriers": [
            {
                "code": "6",
                "recommendedCarrierRank": "20",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "NDAM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "NDAR",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "4",
                "recommendedCarrierRank": "70",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "NDAM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "NDAR",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "9",
                "recommendedCarrierRank": "10",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "GRND",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            },
            {
                "code": "5",
                "recommendedCarrierRank": "40",
                "regionalCarrier": false,
                "shippingMethods": [
                    {
                        "methodCode": "USPM",
                        "transitTimeInDays": "null"
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    },
                    {
                        "methodCode": "",
                        "transitTimeInDays": ""
                    }
                ]
            }
        ],
        "uspsPreferred": "false"
    },
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-02-21T18:12:28.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="270744c5-2089-4145-b35d-15c7532d3f25" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e3a1d598-fbc6-4544-8df4-545d1ae0a560" name="code"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].code</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6007f739-045b-43e8-8357-be8c0e0807d0" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].methodCode</path><content>NDAM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b1a6d4b3-7cf2-4df8-be59-e7f6fa982fb2" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[0].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69ca07a5-4c7c-46ec-8a50-d22e999ba8ca" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].methodCode</path><content>NDAR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="072941f2-3f29-43a1-83ca-956d9d20e4dc" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[1].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cd9f87ad-3ed2-4fa4-bb1e-e8b078873fce" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[2].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4ba3b2d1-a71a-4625-a8ff-c3620775d035" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].shippingMethods[2].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7e226781-be13-4bbe-b0e0-a7d77cde4b25" name="recommendedCarrierRank"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].recommendedCarrierRank</path><content>20</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5660f54d-de38-4e28-a560-83f30f2e2864" name="regionalCarrier"><con:configuration><path>shippingOrder.allowedShippingCarriers[0].regionalCarrier</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="503edd2d-3ab4-4b1d-9f65-ef0a93f0338d" name="code"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].code</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a8e1f48b-19fc-4a15-80ac-b973cfbcfb12" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].shippingMethods[0].methodCode</path><content>NDAM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="192c1c36-a59f-4772-bf10-dee1135f6491" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].shippingMethods[0].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="224b9447-72d4-43d3-be44-572f9a84774f" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].shippingMethods[1].methodCode</path><content>NDAR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bc909122-035c-43d1-a2a9-2cae40bed823" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].shippingMethods[1].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="01d4a1f8-9162-4e06-8350-34cec38c8de5" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].shippingMethods[2].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bbcf36e8-ecba-49e3-be85-4bdb868902d0" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].shippingMethods[2].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fd3c8a5c-4645-41a6-92c3-803552fc8af8" name="recommendedCarrierRank"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].recommendedCarrierRank</path><content>70</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cb755777-0d30-4444-83d8-9834927365b4" name="regionalCarrier"><con:configuration><path>shippingOrder.allowedShippingCarriers[1].regionalCarrier</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8b96e83a-529a-4936-a89e-d3f977ecc149" name="code"><con:configuration><path>shippingOrder.allowedShippingCarriers[2].code</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e9db78f6-61c5-48af-a6d2-3d3cee826cae" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[2].shippingMethods[0].methodCode</path><content>GRND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e86bb40d-bdb6-44e7-be2d-36bfc561d44b" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[2].shippingMethods[0].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d958f18c-8b36-43b3-b2c4-771f44d0bea0" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[2].shippingMethods[1].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aad21201-b89c-4d17-ac0a-cf2831b184e0" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[2].shippingMethods[1].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="851c04a9-555f-4c09-a637-990023eee526" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[2].shippingMethods[2].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0dfca003-065d-422b-8dc0-93a29a28adb4" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[2].shippingMethods[2].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9b2fa2cd-8d3d-4cb5-8d8e-9d2ffb26af51" name="recommendedCarrierRank"><con:configuration><path>shippingOrder.allowedShippingCarriers[2].recommendedCarrierRank</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="075ee0ce-da66-4328-8747-910573d8681b" name="regionalCarrier"><con:configuration><path>shippingOrder.allowedShippingCarriers[2].regionalCarrier</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c9fffa59-bcf0-455c-a92c-5101e464db71" name="code"><con:configuration><path>shippingOrder.allowedShippingCarriers[3].code</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d2e088e-66e4-4772-b929-c4d27cb81bd9" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[3].shippingMethods[0].methodCode</path><content>USPM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5e786f8e-2336-4f0b-bd0d-90920d0a4026" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[3].shippingMethods[0].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4bbf802b-8471-43e8-8e69-20f4ce38e679" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[3].shippingMethods[1].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9a36aa26-43b7-4b53-950a-78a4ff3a9c81" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[3].shippingMethods[1].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2683eef-12f5-4435-b338-58fbee3231a1" name="methodCode"><con:configuration><path>shippingOrder.allowedShippingCarriers[3].shippingMethods[2].methodCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ec0d0b16-caec-4e9f-9e81-364273db04e4" name="saveAsCertified"><con:configuration><path>shippingOrder.allowedShippingCarriers[3].shippingMethods[2].saveAsCertified</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7fba4bbd-686f-4935-8b41-9bc4099ddf58" name="recommendedCarrierRank"><con:configuration><path>shippingOrder.allowedShippingCarriers[3].recommendedCarrierRank</path><content>40</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="577afb86-5241-4ae1-8f7f-262622ee5802" name="regionalCarrier"><con:configuration><path>shippingOrder.allowedShippingCarriers[3].regionalCarrier</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bf39d4d2-fb6f-45dd-883a-809ecac72905" name="recommendedCarrier"><con:configuration><path>shippingOrder.recommendedCarrier</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0d70ded3-04f9-437e-9a4c-1fa891fa0223" name="recommendedShippingMethod"><con:configuration><path>shippingOrder.recommendedShippingMethod</path><content>GRND</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="6739e659-3f95-4581-b6e3-290ba9d5e0d1" name="DetermineStaticProperties"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="aa824931-e73f-4239-a7d3-f1c4be79e174" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineStaticProperties" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Determine Static Value Table" id="6d2367ed-e34d-4d4a-a6af-0b6330a7cf9c"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/Determine Static Value Table/Determine Static Value Table_Input_Groovy.xls"
def outputfile = projectDir + "/Determine Static Value Table/Determine Static Value Table_Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("Input")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"propertyName",sheet1);
addCell(1,0,"propertyValue",sheet1);
addCell(2,0,"propertyName",sheet1);
addCell(3,0,"propertyValue",sheet1);
addCell(4,0,"propertyName",sheet1);
addCell(5,0,"propertyValue",sheet1);

addCell(6,0,"PASS/FAIL",sheet1);
addCell(7,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                 //Input for staticPropertyKey                                                                                                                       
                                requestTemplet.content.staticPropertyKeys = new JsonSlurper().parseText(sh.getCell(1,i).getContents())                                                  
                                                          
                                                                                       
                                  //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                             
                           // get methodcode1 from response json 
                           if(json.staticPropertiesList[0])
                        { 
                          addCell(0,i,json.staticPropertiesList[0].propertyName.toString(),sheet1);
                          addCell(1,i,json.staticPropertiesList[0].propertyValue.toString(),sheet1); 
                        }
                            // get methodcode2 from response json 
                         if(json.staticPropertiesList[1])
                        { 
                        addCell(2,i,json.staticPropertiesList[1].propertyName.toString(),sheet1); 
                          addCell(3,i,json.staticPropertiesList[1].propertyValue.toString(),sheet1)
                        }
                        
                           // get methodcode3 from response json 
                           if(json.staticPropertiesList[2])
                           {
                        addCell(4,i,json.staticPropertiesList[2].propertyName.toString(),sheet1);
                          addCell(5,i,json.staticPropertiesList[2].propertyValue.toString(),sheet1)                                                        
                           }
                                                       
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                             if(json.staticPropertiesList[0])
                             {
                          propertyName = sh.getCell(2,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,propertyName,"staticPropertiesList[0].propertyName","propertyName")
                           propertyValue = sh.getCell(3,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,propertyValue,"staticPropertiesList[0].propertyValue","propertyValue")
                             }
                             

					if(json.staticPropertiesList[1])
                             {
                        propertyName = sh.getCell(4,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,propertyName,"staticPropertiesList[1].propertyName","propertyName")
                           propertyValue = sh.getCell(5,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,propertyValue,"staticPropertiesList[1].propertyValue","propertyValue")
                             }
                             
						if(json.staticPropertiesList[2])
                             {
                         propertyName = sh.getCell(6,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,propertyName,"staticPropertiesList[2].propertyName","propertyName")
                           propertyValue = sh.getCell(7,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,propertyValue,"staticPropertiesList[2].propertyValue","propertyValue")
                             }
					
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(6,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(7,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(6,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

            }             
     
catch(Exception e)
{

             log.info(e)                         
}

finally

{
    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request" id="5558db43-2416-47ad-bf65-2be5936e6800"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineStaticProperties/DetermineStaticProperties/WADL" methodName="DetermineStaticProperties" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="3d75bfb7-e255-4131-b021-8fb03b1fd56d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "staticPropertyKeys": [
        
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineStaticProperties/DetermineStaticProperties/WADL</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST_40850" id="029c668a-5bde-4eeb-8c04-995a12dc0b59"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineStaticProperties/DetermineStaticProperties/WADL" methodName="DetermineStaticProperties" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST_40850" id="3d75bfb7-e255-4131-b021-8fb03b1fd56d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "staticPropertyKeys": [
        "eligiblityWindowToConsolidateCommunication",
        "declineReorderCommunicationDateFutureDays",
        "eligibliltyWindowToAddToCartAndCommunicate"
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineStaticProperties/DetermineStaticProperties/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fa4f6d77-37f3-41f4-9df9-cd1c8f476fe0" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="09f3da3f-2f7f-4b70-ac15-cccb543e851b" name="propertyName"><con:configuration><path>staticPropertiesList[0].propertyName</path><content>eligiblityWindowToConsolidateCommunication</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e5fe9ce5-6a5b-4abe-9565-64a55fa04c18" name="propertyValue"><con:configuration><path>staticPropertiesList[0].propertyValue</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c8f42d5-b6c3-49a5-b9f4-c0b7bd77ecd0" name="propertyName"><con:configuration><path>staticPropertiesList[1].propertyName</path><content>declineReorderCommunicationDateFutureDays</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="80c3182c-6284-4f12-bb35-84151b0fcf0c" name="propertyValue"><con:configuration><path>staticPropertiesList[1].propertyValue</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3f028112-27e4-4ff5-a1bc-afba55ea1a58" name="propertyName"><con:configuration><path>staticPropertiesList[2].propertyName</path><content>eligibliltyWindowToAddToCartAndCommunicate</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="17906a46-8c71-4bee-8a1a-80590545f3de" name="propertyValue"><con:configuration><path>staticPropertiesList[2].propertyValue</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST_40851" id="c7a06e68-f910-4f8c-a6d3-4804fd75dfe4"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineStaticProperties/DetermineStaticProperties/WADL" methodName="DetermineStaticProperties" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST_40851" id="3d75bfb7-e255-4131-b021-8fb03b1fd56d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "staticPropertyKeys": [
        "eligiblityWindowToConsolidateCommunication",
        "declineReorderCommunicationDate"
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineStaticProperties/DetermineStaticProperties/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1643acaa-42d3-4db9-9b4c-332eb3c3ae6a" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="64e4d338-e1f4-40e5-a9fe-6f0b078cab2f" name="propertyName"><con:configuration><path>staticPropertiesList[0].propertyName</path><content>eligiblityWindowToConsolidateCommunication</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c221a7bf-19f1-4820-a2ae-d3ce45ef2ad4" name="propertyValue"><con:configuration><path>staticPropertiesList[0].propertyValue</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST_40852" id="88963f58-a03d-43bc-9ffa-c9feaf8bb604"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineStaticProperties/DetermineStaticProperties/WADL" methodName="DetermineStaticProperties" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST_40852" id="3d75bfb7-e255-4131-b021-8fb03b1fd56d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "staticPropertyKeys": [
        "declineReorder",
        "CommunicationDateFutureDays",
        "\ndeclineReorderFutureDays"
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineStaticProperties/DetermineStaticProperties/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2343c8ed-e61e-4d42-84bd-867caab37c62" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST_40853" id="48c4f8fe-a2fe-4bc0-b468-4f6602e25342"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineStaticProperties/DetermineStaticProperties/WADL" methodName="DetermineStaticProperties" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST_40853" id="3d75bfb7-e255-4131-b021-8fb03b1fd56d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "staticPropertyKeys": [
        
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineStaticProperties/DetermineStaticProperties/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="eb411607-f455-4429-90d4-50b27d0d5b91" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d7146ce-4821-4235-949e-02fd50039987" name="propertyName"><con:configuration><path>staticPropertiesList[0].propertyName</path><content>eligiblityWindowToConsolidateCommunication</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="10785d2b-1bee-4d93-b92f-62df8e14569b" name="propertyValue"><con:configuration><path>staticPropertiesList[0].propertyValue</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e0028ff-c4a0-493b-a39f-0b5c3c6ce463" name="propertyName"><con:configuration><path>staticPropertiesList[1].propertyName</path><content>eligibliltyWindowToAddToCartAndCommunicate</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b94b936e-6214-419a-9bd5-612c56e29393" name="propertyValue"><con:configuration><path>staticPropertiesList[1].propertyValue</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6f0f057b-2b59-44d0-830f-2d676fa4231b" name="propertyName"><con:configuration><path>staticPropertiesList[2].propertyName</path><content>declineReorderCommunicationDateFutureDays</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8d71c557-5f73-4edb-a579-44ef353682b8" name="propertyValue"><con:configuration><path>staticPropertiesList[2].propertyValue</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="62554a74-90e4-4385-bd76-452da0289ffa" name="DetermineInsuranceVerificationFields"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="56768dc7-f29b-46b9-92de-fa908a2977ac" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineInsuranceVerificationFields" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DetermineInsuranceVerificationFields_Single Lineitems" id="fff2c499-d6a8-4d1e-93f2-bec329403413"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields_singleLineItem-Input.xls"
def outputfile = projectDir + "/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields_singleLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"PayerID",sheet1);
addCell(2,0,"contactMethod",sheet1);
addCell(3,0,"groupNumber",sheet1);
addCell(4,0,"policyNumber",sheet1);
addCell(5,0,"payerType",sheet1);
addCell(6,0,"planType",sheet1);
addCell(7,0,"medicalGroup",sheet1);
addCell(8,0,"effectiveDateOfPolicy",sheet1);
addCell(9,0,"terminationDateOfPolicy",sheet1);
addCell(10,0,"planYearStartDate",sheet1);
addCell(11,0,"planYearType",sheet1);
addCell(12,0,"relationToPolicyHolder",sheet1);
addCell(13,0,"insuranceStreetAddress",sheet1);
addCell(14,0,"insuranceCity",sheet1);
addCell(15,0,"insuranceState",sheet1);
addCell(16,0,"insuranceZip",sheet1);
addCell(17,0,"deductibleAmount",sheet1);
addCell(18,0,"deductibleMet",sheet1);
addCell(19,0,"outOfPocketAmount",sheet1);
addCell(20,0,"outOfPocketMet",sheet1);
addCell(21,0,"inNetwork",sheet1);
addCell(22,0,"policyHoldersStreetAddress",sheet1);
addCell(23,0,"policyHoldersCity",sheet1);
addCell(24,0,"policyHoldersState",sheet1);
addCell(25,0,"policyHoldersZip",sheet1);
addCell(26,0,"maximumAnnualBenefitAmount",sheet1);
addCell(27,0,"maximumAnnualBenefitMet",sheet1);
addCell(28,0,"coInsurance",sheet1);
addCell(29,0,"coPayAmount",sheet1);
addCell(30,0,"coPayType",sheet1);
addCell(31,0,"pharmacyBenefit",sheet1);
addCell(32,0,"PASS/FAIL",sheet1);
addCell(33,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                //  Input for Line Item ID
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
						//  Input for Line Customer State
                                requestTemplet.content.lineItems[0].customerState = sh.getCell(2,i).getContents()                                
                                      //Input for productID
                                requestTemplet.content.lineItems[0].productCategory = sh.getCell(3,i).getContents()
                                 //  Input for Product Category
                                requestTemplet.content.lineItems[0].productSubCategory1 = sh.getCell(4,i).getContents()                              
                                 // Input for Plan
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(5,i).getContents()
                                  // Input for ID
                                requestTemplet.content.lineItems[0].payers[0].id =sh.getCell(6,i).getContents()

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request_Lineitems');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request_Lineitems");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json                                 
                        addCell(0,i,json.insuranceVerificationFields[0].lineItemID,sheet1);                                   
                          // get PayerID from response json                                   
                        addCell(1,i,json.insuranceVerificationFields[0].payerID,sheet1);   
                          // get contactMethod from response json                           
                         addCell(2,i,json.insuranceVerificationFields[0].verificationField.contactMethod.toString(),sheet1);  
                         // get groupNumber from response json                               
                        addCell(3,i,json.insuranceVerificationFields[0].verificationField.groupNumber.toString(),sheet1);
                          // get policyNumber from response json         
                        addCell(4,i,json.insuranceVerificationFields[0].verificationField.policyNumber.toString(),sheet1);
                          // get payerType from response json         
                        addCell(5,i,json.insuranceVerificationFields[0].verificationField.payerType.toString(),sheet1);
                           // get planType from response json
                        addCell(6,i,json.insuranceVerificationFields[0].verificationField.planType.toString(),sheet1);
                          // get medicalGroup from response json         
                        addCell(7,i,json.insuranceVerificationFields[0].verificationField.medicalGroup.toString(),sheet1);
                           // get effectiveDateOfPolicy from response json         
                        addCell(8,i,json.insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy.toString(),sheet1);
                           // get terminationDateOfPolicy from response json
                         addCell(9,i,json.insuranceVerificationFields[0].verificationField.terminationDateOfPolicy.toString(),sheet1);
                            // get planYearStartDate from response json         
                         addCell(10,i,json.insuranceVerificationFields[0].verificationField.planYearStartDate.toString(),sheet1);
                            // get planYearType from response json         
                         addCell(11,i,json.insuranceVerificationFields[0].verificationField.planYearType.toString(),sheet1);
                            // get relationToPolicyHolder from response json         
                         addCell(12,i,json.insuranceVerificationFields[0].verificationField.relationToPolicyHolder.toString(),sheet1);
                            // get insuranceStreetAddress from response json         
                         addCell(13,i,json.insuranceVerificationFields[0].verificationField.insuranceStreetAddress.toString(),sheet1);
                           // get insuranceCity from response json         
                         addCell(14,i,json.insuranceVerificationFields[0].verificationField.insuranceCity.toString(),sheet1);
                           // get insuranceState from response json
                         addCell(15,i,json.insuranceVerificationFields[0].verificationField.insuranceState.toString(),sheet1);
                           // get insuranceZip from response json         
                         addCell(16,i,json.insuranceVerificationFields[0].verificationField.insuranceZip.toString(),sheet1);
                           // get deductibleAmount from response json         
                        addCell(17,i,json.insuranceVerificationFields[0].verificationField.deductibleAmount.toString(),sheet1);
                           // get deductibleMet from response json         
                        addCell(18,i,json.insuranceVerificationFields[0].verificationField.deductibleMet.toString(),sheet1);
                           // get outOfPocketAmount from response json         
                        addCell(19,i,json.insuranceVerificationFields[0].verificationField.outOfPocketAmount.toString(),sheet1);
                           // get outOfPocketMet from response json         
                        addCell(20,i,json.insuranceVerificationFields[0].verificationField.outOfPocketMet.toString(),sheet1);
                           // get inNetwork from response json         
                        addCell(21,i,json.insuranceVerificationFields[0].verificationField.inNetwork.toString(),sheet1);
                          // get policyHoldersStreetAddress from response json         
                        addCell(22,i,json.insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress.toString(),sheet1);
                           // get policyHoldersCity from response json         
                        addCell(23,i,json.insuranceVerificationFields[0].verificationField.policyHoldersCity.toString(),sheet1);
                          // get policyHoldersState from response json         
                        addCell(24,i,json.insuranceVerificationFields[0].verificationField.policyHoldersState.toString(),sheet1);
                           // get policyHoldersZip from response json         
                        addCell(25,i,json.insuranceVerificationFields[0].verificationField.policyHoldersZip.toString(),sheet1);
                           // get maximumAnnualBenefitAmount from response json          
                        addCell(26,i,json.insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount.toString(),sheet1);
                            // get maximumAnnualBenefitMet from response json         
                        addCell(27,i,json.insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet.toString(),sheet1);
                            // get coInsurance from response json         
                        addCell(28,i,json.insuranceVerificationFields[0].verificationField.coInsurance.toString(),sheet1);
                            // get coPayAmount from response json         
                        addCell(29,i,json.insuranceVerificationFields[0].verificationField.coPayAmount.toString(),sheet1);
                            // get coPayType from response json         
                        addCell(30,i,json.insuranceVerificationFields[0].verificationField.coPayType.toString(),sheet1);
                             // get pharmacyBenefit from response json         
                        addCell(31,i,json.insuranceVerificationFields[0].verificationField.pharmacyBenefit.toString(),sheet1);
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(7,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"insuranceVerificationFields[0].lineItemID","lineItemID")

                          payerID = sh.getCell(8,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID,"insuranceVerificationFields[0].payerID","payerID")

                         contactMethod = sh.getCell(9,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,contactMethod,"insuranceVerificationFields[0].verificationField.contactMethod","contactMethod")

                         groupNumber = sh.getCell(10,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,groupNumber,"insuranceVerificationFields[0].verificationField.groupNumber","groupNumber")

                         policyNumber = sh.getCell(11,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,policyNumber,"insuranceVerificationFields[0].verificationField.policyNumber","policyNumber")

                          payerType = sh.getCell(12,i).getContents().toString()
                         addAssertionJsonPathMatch(testStepForAssertion,payerType,"insuranceVerificationFields[0].verificationField.payerType","payerType")

                          planType= sh.getCell(13,i).getContents().toString()
                         addAssertionJsonPathMatch(testStepForAssertion,planType,"insuranceVerificationFields[0].verificationField.planType","planType")

                          medicalGroup = sh.getCell(14,i).getContents().toString()
                         addAssertionJsonPathMatch(testStepForAssertion,medicalGroup,"insuranceVerificationFields[0].verificationField.medicalGroup","medicalGroup")

                           effectiveDateOfPolicy = sh.getCell(15,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,effectiveDateOfPolicy,"insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy","effectiveDateOfPolicy")

                           terminationDateOfPolicy = sh.getCell(16,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,terminationDateOfPolicy,"insuranceVerificationFields[0].verificationField.terminationDateOfPolicy","terminationDateOfPolicy")

                            planYearStartDate = sh.getCell(17,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,planYearStartDate,"insuranceVerificationFields[0].verificationField.planYearStartDate","planYearStartDate")

                            planYearType = sh.getCell(18,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,planYearType,"insuranceVerificationFields[0].verificationField.planYearType","planYearType")

                            relationToPolicyHolder = sh.getCell(19,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,relationToPolicyHolder,"insuranceVerificationFields[0].verificationField.relationToPolicyHolder","relationToPolicyHolder")

                            insuranceStreetAddress = sh.getCell(20,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceStreetAddress,"insuranceVerificationFields[0].verificationField.insuranceStreetAddress","insuranceStreetAddress")

                            insuranceCity = sh.getCell(21,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceCity,"insuranceVerificationFields[0].verificationField.insuranceCity","insuranceCity")

                            insuranceState = sh.getCell(22,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceState,"insuranceVerificationFields[0].verificationField.insuranceState","insuranceState")

                            insuranceZip = sh.getCell(23,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceZip,"insuranceVerificationFields[0].verificationField.insuranceZip","insuranceZip")

                            deductibleAmount = sh.getCell(24,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,deductibleAmount,"insuranceVerificationFields[0].verificationField.deductibleAmount","deductibleAmount")

                            deductibleMet = sh.getCell(25,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,deductibleMet,"insuranceVerificationFields[0].verificationField.deductibleMet","deductibleMet")

                           outOfPocketAmount = sh.getCell(26,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,outOfPocketAmount,"insuranceVerificationFields[0].verificationField.outOfPocketAmount","outOfPocketAmount")

                           outOfPocketMet = sh.getCell(27,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,outOfPocketMet,"insuranceVerificationFields[0].verificationField.outOfPocketMet","outOfPocketMet")

                           inNetwork = sh.getCell(28,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,inNetwork,"insuranceVerificationFields[0].verificationField.inNetwork","inNetwork")

                           policyHoldersStreetAddress = sh.getCell(29,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersStreetAddress,"insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress","policyHoldersStreetAddress")

                           policyHoldersCity = sh.getCell(30,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersCity,"insuranceVerificationFields[0].verificationField.policyHoldersCity","policyHoldersCity")

                           policyHoldersState = sh.getCell(31,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersState,"insuranceVerificationFields[0].verificationField.policyHoldersState","policyHoldersState")

                           policyHoldersZip = sh.getCell(32,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersZip,"insuranceVerificationFields[0].verificationField.policyHoldersZip","policyHoldersZip")

                           maximumAnnualBenefitAmount = sh.getCell(33,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,maximumAnnualBenefitAmount,"insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount","maximumAnnualBenefitAmount")

                           maximumAnnualBenefitMet = sh.getCell(34,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,maximumAnnualBenefitMet,"insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet","maximumAnnualBenefitMet")

                           coInsurance = sh.getCell(35,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,coInsurance,"insuranceVerificationFields[0].verificationField.coInsurance","coInsurance")

                           coPayAmount = sh.getCell(36,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,coPayAmount,"insuranceVerificationFields[0].verificationField.coPayAmount","coPayAmount")

                           coPayType = sh.getCell(37,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,coPayType,"insuranceVerificationFields[0].verificationField.coPayType","coPayType")

                           pharmacyBenefit = sh.getCell(38,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,pharmacyBenefit,"insuranceVerificationFields[0].verificationField.pharmacyBenefit","pharmacyBenefit")

                            
                     
                            //dynamic asserstion :End

                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(32,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(33,i,e.message,sheet1);

                                                } 


                                   }

 

                                }

 
                                else{

                                   addCell(32,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="groovy" name="DetermineInsuranceVerificationFields_Multi Lineitems" id="1f0c08d8-edfd-4c67-8248-e49404331e2e"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields_multiLineItem-Input.xls"
def outputfile = projectDir + "/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields_multiLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"PayerID",sheet1);
addCell(2,0,"contactMethod",sheet1);
addCell(3,0,"groupNumber",sheet1);
addCell(4,0,"policyNumber",sheet1);
addCell(5,0,"payerType",sheet1);
addCell(6,0,"planType",sheet1);
addCell(7,0,"medicalGroup",sheet1);
addCell(8,0,"effectiveDateOfPolicy",sheet1);
addCell(9,0,"terminationDateOfPolicy",sheet1);
addCell(10,0,"planYearStartDate",sheet1);
addCell(11,0,"planYearType",sheet1);
addCell(12,0,"relationToPolicyHolder",sheet1);
addCell(13,0,"insuranceStreetAddress",sheet1);
addCell(14,0,"insuranceCity",sheet1);
addCell(15,0,"insuranceState",sheet1);
addCell(16,0,"insuranceZip",sheet1);
addCell(17,0,"deductibleAmount",sheet1);
addCell(18,0,"deductibleMet",sheet1);
addCell(19,0,"outOfPocketAmount",sheet1);
addCell(20,0,"outOfPocketMet",sheet1);
addCell(21,0,"inNetwork",sheet1);
addCell(22,0,"policyHoldersStreetAddress",sheet1);
addCell(23,0,"policyHoldersCity",sheet1);
addCell(24,0,"policyHoldersState",sheet1);
addCell(25,0,"policyHoldersZip",sheet1);
addCell(26,0,"maximumAnnualBenefitAmount",sheet1);
addCell(27,0,"maximumAnnualBenefitMet",sheet1);
addCell(28,0,"coInsurance",sheet1);
addCell(29,0,"coPayAmount",sheet1);
addCell(30,0,"coPayType",sheet1);
addCell(31,0,"pharmacyBenefit",sheet1);
addCell(32,0,"lineItemID1",sheet1);
addCell(33,0,"PayerID1",sheet1);
addCell(34,0,"contactMethod1",sheet1);
addCell(35,0,"groupNumber1",sheet1);
addCell(36,0,"policyNumber1",sheet1);
addCell(37,0,"payerType1",sheet1);
addCell(38,0,"planType1",sheet1);
addCell(39,0,"medicalGroup1",sheet1);
addCell(40,0,"effectiveDateOfPolicy1",sheet1);
addCell(41,0,"terminationDateOfPolicy1",sheet1);
addCell(42,0,"planYearStartDate1",sheet1);
addCell(43,0,"planYearType1",sheet1);
addCell(44,0,"relationToPolicyHolder1",sheet1);
addCell(45,0,"insuranceStreetAddress1",sheet1);
addCell(46,0,"insuranceCity1",sheet1);
addCell(47,0,"insuranceState1",sheet1);
addCell(48,0,"insuranceZip1",sheet1);
addCell(49,0,"deductibleAmount1",sheet1);
addCell(50,0,"deductibleMet1",sheet1);
addCell(51,0,"outOfPocketAmount1",sheet1);
addCell(52,0,"outOfPocketMet1",sheet1);
addCell(53,0,"inNetwork1",sheet1);
addCell(54,0,"policyHoldersStreetAddress1",sheet1);
addCell(55,0,"policyHoldersCity1",sheet1);
addCell(56,0,"policyHoldersState1",sheet1);
addCell(57,0,"policyHoldersZip1",sheet1);
addCell(58,0,"maximumAnnualBenefitAmount1",sheet1);
addCell(59,0,"maximumAnnualBenefitMet1",sheet1);
addCell(60,0,"coInsurance1",sheet1);
addCell(61,0,"coPayAmount1",sheet1);
addCell(62,0,"coPayType1",sheet1);
addCell(63,0,"pharmacyBenefit1",sheet1);
addCell(64,0,"PASS/FAIL",sheet1);
addCell(65,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                                    
                                   //Input for LineItem1                        
                                  //Input for LineItemID
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                  //Input for productID
                                requestTemplet.content.lineItems[0].productCategory = sh.getCell(2,i).getContents()
                                 //  Input for Product Category
                                requestTemplet.content.lineItems[0].productSubCategory1 = sh.getCell(3,i).getContents()                              
                                 // Input for Plan
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(4,i).getContents()
                                 // Input for ID
                                requestTemplet.content.lineItems[0].payers[0].id =sh.getCell(5,i).getContents()

                               //Input for LineItem2
                                   //Input for LineItemID
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(6,i).getContents()
                                  //Input for productID
                                requestTemplet.content.lineItems[1].productCategory = sh.getCell(7,i).getContents()
                                 //  Input for Product Category
                                requestTemplet.content.lineItems[1].productSubCategory1 = sh.getCell(8,i).getContents()                              
                                 // Input for Plan
                                requestTemplet.content.lineItems[1].payers[0].planName = sh.getCell(9,i).getContents()
                                 // Input for ID
                                requestTemplet.content.lineItems[1].payers[0].id =sh.getCell(10,i).getContents()


                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request_Lineitems');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request_Lineitems");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                        
                   
                            // get lineItemID from response json                                  
                        addCell(0,i,json.insuranceVerificationFields[0].lineItemID.toString(),sheet1);                                   
                          // get PayerID from response json                                    
                        addCell(1,i,json.insuranceVerificationFields[0].payerID.toString(),sheet1);   
                          // get contactMethod from response json         
                        addCell(2,i,json.insuranceVerificationFields[0].verificationField.contactMethod.toString(),sheet1);  
                         // get groupNumber from response json         
                        addCell(3,i,json.insuranceVerificationFields[0].verificationField.groupNumber.toString(),sheet1);
                          // get policyNumber from response json         
                        addCell(4,i,json.insuranceVerificationFields[0].verificationField.policyNumber.toString(),sheet1);
                          // get payerType from response json         
                        addCell(5,i,json.insuranceVerificationFields[0].verificationField.payerType.toString(),sheet1);
                           // get planType from response json
                        addCell(6,i,json.insuranceVerificationFields[0].verificationField.planType.toString(),sheet1);
                          // get medicalGroup from response json         
                        addCell(7,i,json.insuranceVerificationFields[0].verificationField.medicalGroup.toString(),sheet1);
                           // get effectiveDateOfPolicy from response json         
                        addCell(8,i,json.insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy.toString(),sheet1);
                           // get terminationDateOfPolicy from response json
                         addCell(9,i,json.insuranceVerificationFields[0].verificationField.terminationDateOfPolicy.toString(),sheet1);
                            // get planYearStartDate from response json         
                         addCell(10,i,json.insuranceVerificationFields[0].verificationField.planYearStartDate.toString(),sheet1);
                            // get planYearType from response json         
                         addCell(11,i,json.insuranceVerificationFields[0].verificationField.planYearType.toString(),sheet1);
                            // get relationToPolicyHolder from response json         
                         addCell(12,i,json.insuranceVerificationFields[0].verificationField.relationToPolicyHolder.toString(),sheet1);
                            // get insuranceStreetAddress from response json         
                         addCell(13,i,json.insuranceVerificationFields[0].verificationField.insuranceStreetAddress.toString(),sheet1);
                           // get insuranceCity from response json         
                         addCell(14,i,json.insuranceVerificationFields[0].verificationField.insuranceCity.toString(),sheet1);
                           // get insuranceState from response json
                         addCell(15,i,json.insuranceVerificationFields[0].verificationField.insuranceState.toString(),sheet1);
                           // get insuranceZip from response json         
                         addCell(16,i,json.insuranceVerificationFields[0].verificationField.insuranceZip.toString(),sheet1);
                           // get deductibleAmount from response json         
                        addCell(17,i,json.insuranceVerificationFields[0].verificationField.deductibleAmount.toString(),sheet1);
                           // get deductibleMet from response json         
                        addCell(18,i,json.insuranceVerificationFields[0].verificationField.deductibleMet.toString(),sheet1);
                           // get outOfPocketAmount from response json         
                        addCell(19,i,json.insuranceVerificationFields[0].verificationField.outOfPocketAmount.toString(),sheet1);
                           // get outOfPocketMet from response json         
                        addCell(20,i,json.insuranceVerificationFields[0].verificationField.outOfPocketMet.toString(),sheet1);
                           // get inNetwork from response json         
                        addCell(21,i,json.insuranceVerificationFields[0].verificationField.inNetwork.toString(),sheet1);
                          // get policyHoldersStreetAddress from response json         
                        addCell(22,i,json.insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress.toString(),sheet1);
                           // get policyHoldersCity from response json         
                        addCell(23,i,json.insuranceVerificationFields[0].verificationField.policyHoldersCity.toString(),sheet1);
                          // get policyHoldersState from response json         
                        addCell(24,i,json.insuranceVerificationFields[0].verificationField.policyHoldersState.toString(),sheet1);
                           // get policyHoldersZip from response json         
                        addCell(25,i,json.insuranceVerificationFields[0].verificationField.policyHoldersZip.toString(),sheet1);
                           // get maximumAnnualBenefitAmount from response json          
                        addCell(26,i,json.insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount.toString(),sheet1);
                            // get maximumAnnualBenefitMet from response json         
                        addCell(27,i,json.insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet.toString(),sheet1);
                            // get coInsurance from response json         
                        addCell(28,i,json.insuranceVerificationFields[0].verificationField.coInsurance.toString(),sheet1);
                            // get coPayAmount from response json         
                        addCell(29,i,json.insuranceVerificationFields[0].verificationField.coPayAmount.toString(),sheet1);
                            // get coPayType from response json         
                        addCell(30,i,json.insuranceVerificationFields[0].verificationField.coPayType.toString(),sheet1);
                             // get pharmacyBenefit from response json         
                        addCell(31,i,json.insuranceVerificationFields[0].verificationField.pharmacyBenefit.toString(),sheet1);
                        
                            // get lineItemID from response json         
                        addCell(32,i,json.insuranceVerificationFields[1].lineItemID.toString(),sheet1);   
                           // get PayerID from response json         
                        addCell(33,i,json.insuranceVerificationFields[1].payerID.toString(),sheet1);   
                          // get contactMethod from response json         
                        addCell(34,i,json.insuranceVerificationFields[1].verificationField.contactMethod.toString(),sheet1);  
                         // get groupNumber from response json         
                        addCell(35,i,json.insuranceVerificationFields[1].verificationField.groupNumber.toString(),sheet1);
                          // get policyNumber from response json         
                        addCell(36,i,json.insuranceVerificationFields[1].verificationField.policyNumber.toString(),sheet1);
                          // get payerType from response json         
                        addCell(37,i,json.insuranceVerificationFields[1].verificationField.payerType.toString(),sheet1);
                           // get planType from response json
                        addCell(38,i,json.insuranceVerificationFields[1].verificationField.planType.toString(),sheet1);
                          // get medicalGroup from response json         
                        addCell(39,i,json.insuranceVerificationFields[1].verificationField.medicalGroup.toString(),sheet1);
                           // get effectiveDateOfPolicy from response json         
                        addCell(40,i,json.insuranceVerificationFields[1].verificationField.effectiveDateOfPolicy.toString(),sheet1);
                           // get terminationDateOfPolicy from response json
                         addCell(41,i,json.insuranceVerificationFields[1].verificationField.terminationDateOfPolicy.toString(),sheet1);
                            // get planYearStartDate from response json          
                         addCell(42,i,json.insuranceVerificationFields[1].verificationField.planYearStartDate.toString(),sheet1);
                            // get planYearType from response json         
                         addCell(43,i,json.insuranceVerificationFields[1].verificationField.planYearType.toString(),sheet1);
                            // get relationToPolicyHolder from response json         
                         addCell(44,i,json.insuranceVerificationFields[1].verificationField.relationToPolicyHolder.toString(),sheet1);
                            // get insuranceStreetAddress from response json         
                         addCell(45,i,json.insuranceVerificationFields[1].verificationField.insuranceStreetAddress.toString(),sheet1);
                           // get insuranceCity from response json         
                         addCell(46,i,json.insuranceVerificationFields[1].verificationField.insuranceCity.toString(),sheet1);
                           // get insuranceState from response json
                         addCell(47,i,json.insuranceVerificationFields[1].verificationField.insuranceState.toString(),sheet1);
                           // get insuranceZip from response json         
                         addCell(48,i,json.insuranceVerificationFields[1].verificationField.insuranceZip.toString(),sheet1);
                           // get deductibleAmount from response json         
                        addCell(49,i,json.insuranceVerificationFields[1].verificationField.deductibleAmount.toString(),sheet1);
                           // get deductibleMet from response json         
                        addCell(50,i,json.insuranceVerificationFields[1].verificationField.deductibleMet.toString(),sheet1);
                           // get outOfPocketAmount from response json         
                        addCell(51,i,json.insuranceVerificationFields[1].verificationField.outOfPocketAmount.toString(),sheet1);
                           // get outOfPocketMet from response json         
                        addCell(52,i,json.insuranceVerificationFields[1].verificationField.outOfPocketMet.toString(),sheet1);
                           // get inNetwork from response json         
                        addCell(53,i,json.insuranceVerificationFields[1].verificationField.inNetwork.toString(),sheet1);
                          // get policyHoldersStreetAddress from response json         
                        addCell(54,i,json.insuranceVerificationFields[1].verificationField.policyHoldersStreetAddress.toString(),sheet1);
                           // get policyHoldersCity from response json         
                        addCell(55,i,json.insuranceVerificationFields[1].verificationField.policyHoldersCity.toString(),sheet1);
                          // get policyHoldersState from response json         
                        addCell(56,i,json.insuranceVerificationFields[1].verificationField.policyHoldersState.toString(),sheet1);
                           // get policyHoldersZip from response json         
                        addCell(57,i,json.insuranceVerificationFields[1].verificationField.policyHoldersZip.toString(),sheet1);
                           // get maximumAnnualBenefitAmount from response json         
                        addCell(58,i,json.insuranceVerificationFields[1].verificationField.maximumAnnualBenefitAmount.toString(),sheet1);
                            // get maximumAnnualBenefitMet from response json         
                        addCell(59,i,json.insuranceVerificationFields[1].verificationField.maximumAnnualBenefitMet.toString(),sheet1);
                            // get coInsurance from response json         
                        addCell(60,i,json.insuranceVerificationFields[1].verificationField.coInsurance.toString(),sheet1);
                            // get coPayAmount from response json         
                        addCell(61,i,json.insuranceVerificationFields[1].verificationField.coPayAmount.toString(),sheet1);
                            // get coPayType from response json         
                        addCell(62,i,json.insuranceVerificationFields[1].verificationField.coPayType.toString(),sheet1);
                             // get pharmacyBenefit from response json         
                        addCell(63,i,json.insuranceVerificationFields[1].verificationField.pharmacyBenefit.toString(),sheet1);
 
                   
                                                   
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(11,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"insuranceVerificationFields[0].lineItemID","lineItemID")

                          payerID = sh.getCell(12,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID,"insuranceVerificationFields[0].payerID","payerID")

                         contactMethod = sh.getCell(13,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,contactMethod,"insuranceVerificationFields[0].verificationField.contactMethod","contactMethod")

                         groupNumber = sh.getCell(14,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,groupNumber,"insuranceVerificationFields[0].verificationField.groupNumber","groupNumber")

                         policyNumber = sh.getCell(15,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,policyNumber,"insuranceVerificationFields[0].verificationField.policyNumber","policyNumber")

                          payerType = sh.getCell(16,i).getContents().toString()
                         addAssertionJsonPathMatch(testStepForAssertion,payerType,"insuranceVerificationFields[0].verificationField.payerType","payerType")

                          planType= sh.getCell(17,i).getContents().toString()
                         addAssertionJsonPathMatch(testStepForAssertion,planType,"insuranceVerificationFields[0].verificationField.planType","planType")

                          medicalGroup = sh.getCell(18,i).getContents().toString()
                         addAssertionJsonPathMatch(testStepForAssertion,medicalGroup,"insuranceVerificationFields[0].verificationField.medicalGroup","medicalGroup")

                           effectiveDateOfPolicy = sh.getCell(19,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,effectiveDateOfPolicy,"insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy","effectiveDateOfPolicy")

                           terminationDateOfPolicy = sh.getCell(20,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,terminationDateOfPolicy,"insuranceVerificationFields[0].verificationField.terminationDateOfPolicy","terminationDateOfPolicy")

                            planYearStartDate = sh.getCell(21,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,planYearStartDate,"insuranceVerificationFields[0].verificationField.planYearStartDate","planYearStartDate")

                            planYearType = sh.getCell(22,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,planYearType,"insuranceVerificationFields[0].verificationField.planYearType","planYearType")

                            relationToPolicyHolder = sh.getCell(23,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,relationToPolicyHolder,"insuranceVerificationFields[0].verificationField.relationToPolicyHolder","relationToPolicyHolder")

                            insuranceStreetAddress = sh.getCell(24,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceStreetAddress,"insuranceVerificationFields[0].verificationField.insuranceStreetAddress","insuranceStreetAddress")

                            insuranceCity = sh.getCell(25,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceCity,"insuranceVerificationFields[0].verificationField.insuranceCity","insuranceCity")

                            insuranceState = sh.getCell(26,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceState,"insuranceVerificationFields[0].verificationField.insuranceState","insuranceState")

                            insuranceZip = sh.getCell(27,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceZip,"insuranceVerificationFields[0].verificationField.insuranceZip","insuranceZip")

                            deductibleAmount = sh.getCell(28,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,deductibleAmount,"insuranceVerificationFields[0].verificationField.deductibleAmount","deductibleAmount")

                            deductibleMet = sh.getCell(29,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,deductibleMet,"insuranceVerificationFields[0].verificationField.deductibleMet","deductibleMet")

                           outOfPocketAmount = sh.getCell(30,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,outOfPocketAmount,"insuranceVerificationFields[0].verificationField.outOfPocketAmount","outOfPocketAmount")

                           outOfPocketMet = sh.getCell(31,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,outOfPocketMet,"insuranceVerificationFields[0].verificationField.outOfPocketMet","outOfPocketMet")

                           inNetwork = sh.getCell(32,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,inNetwork,"insuranceVerificationFields[0].verificationField.inNetwork","inNetwork")

                           policyHoldersStreetAddress = sh.getCell(33,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersStreetAddress,"insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress","policyHoldersStreetAddress")

                           policyHoldersCity= sh.getCell(34,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersCity,"insuranceVerificationFields[0].verificationField.policyHoldersCity","policyHoldersCity")

                           policyHoldersState = sh.getCell(35,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersState,"insuranceVerificationFields[0].verificationField.policyHoldersState","policyHoldersState")

                           policyHoldersZip = sh.getCell(36,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersZip,"insuranceVerificationFields[0].verificationField.policyHoldersZip","policyHoldersZip")

                           maximumAnnualBenefitAmount = sh.getCell(37,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,maximumAnnualBenefitAmount,"insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount","maximumAnnualBenefitAmount")

                           maximumAnnualBenefitMet = sh.getCell(38,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,maximumAnnualBenefitMet,"insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet","maximumAnnualBenefitMet")

                           coInsurance = sh.getCell(39,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,coInsurance,"insuranceVerificationFields[0].verificationField.coInsurance","coInsurance")

                           coPayAmount = sh.getCell(40,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,coPayAmount,"insuranceVerificationFields[0].verificationField.coPayAmount","coPayAmount")

                           coPayType = sh.getCell(41,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,coPayType,"insuranceVerificationFields[0].verificationField.coPayType","coPayType")

                           pharmacyBenefit = sh.getCell(42,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,pharmacyBenefit,"insuranceVerificationFields[0].verificationField.pharmacyBenefit","pharmacyBenefit")

                            //get the expected values
                          lineItemID1 = sh.getCell(43,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"insuranceVerificationFields[1].lineItemID","lineItemID")

                         payerID1 = sh.getCell(44,i).getContents().toString()
                      addAssertionJsonPathMatch(testStepForAssertion,payerID1,"insuranceVerificationFields[1].payerID","payerID")

                         contactMethod1 = sh.getCell(45,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,contactMethod1,"insuranceVerificationFields[1].verificationField.contactMethod","contactMethod")

                         groupNumber1 = sh.getCell(46,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,groupNumber1,"insuranceVerificationFields[1].verificationField.groupNumber","groupNumber")

                         policyNumber1 = sh.getCell(47,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,policyNumber1,"insuranceVerificationFields[1].verificationField.policyNumber","policyNumber")

                           payerType1 = sh.getCell(48,i).getContents().toString()
                         addAssertionJsonPathMatch(testStepForAssertion,payerType1,"insuranceVerificationFields[1].verificationField.payerType","payerType")

                          planType1 = sh.getCell(49,i).getContents().toString()
                         addAssertionJsonPathMatch(testStepForAssertion,planType1,"insuranceVerificationFields[1].verificationField.planType","planType")

                          medicalGroup1 = sh.getCell(50,i).getContents().toString()
                         addAssertionJsonPathMatch(testStepForAssertion,medicalGroup1,"insuranceVerificationFields[1].verificationField.medicalGroup","medicalGroup")

                           effectiveDateOfPolicy1 = sh.getCell(51,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,effectiveDateOfPolicy1,"insuranceVerificationFields[1].verificationField.effectiveDateOfPolicy","effectiveDateOfPolicy")

                           terminationDateOfPolicy1 = sh.getCell(52,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,terminationDateOfPolicy1,"insuranceVerificationFields[1].verificationField.terminationDateOfPolicy","terminationDateOfPolicy")

                            planYearStartDate1 = sh.getCell(53,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,planYearStartDate1,"insuranceVerificationFields[1].verificationField.planYearStartDate","planYearStartDate")

                            planYearType1 = sh.getCell(54,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,planYearType1,"insuranceVerificationFields[1].verificationField.planYearType","planYearType")

                            relationToPolicyHolder1 = sh.getCell(55,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,relationToPolicyHolder1,"insuranceVerificationFields[1].verificationField.relationToPolicyHolder","relationToPolicyHolder")

                            insuranceStreetAddress1 = sh.getCell(56,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceStreetAddress1,"insuranceVerificationFields[1].verificationField.insuranceStreetAddress","insuranceStreetAddress")

                            insuranceCity1 = sh.getCell(57,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceCity1,"insuranceVerificationFields[1].verificationField.insuranceCity","insuranceCity")

                            insuranceState1 = sh.getCell(58,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceState1,"insuranceVerificationFields[1].verificationField.insuranceState","insuranceState")

                            insuranceZip1 = sh.getCell(59,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceZip1,"insuranceVerificationFields[1].verificationField.insuranceZip","insuranceZip")

                            deductibleAmount1 = sh.getCell(60,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,deductibleAmount1,"insuranceVerificationFields[1].verificationField.deductibleAmount","deductibleAmount")

                            deductibleMet1 = sh.getCell(61,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,deductibleMet1,"insuranceVerificationFields[1].verificationField.deductibleMet","deductibleMet")

                           outOfPocketAmount1 = sh.getCell(62,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,outOfPocketAmount1,"insuranceVerificationFields[1].verificationField.outOfPocketAmount","outOfPocketAmount")

                           outOfPocketMet1 = sh.getCell(63,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,outOfPocketMet1,"insuranceVerificationFields[1].verificationField.outOfPocketMet","outOfPocketMet")

                           inNetwork1 = sh.getCell(64,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,inNetwork1,"insuranceVerificationFields[1].verificationField.inNetwork","inNetwork")
 
                           policyHoldersStreetAddress1 = sh.getCell(65,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersStreetAddress1,"insuranceVerificationFields[1].verificationField.policyHoldersStreetAddress","policyHoldersStreetAddress")

                            policyHoldersCity1 = sh.getCell(66,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersCity1,"insuranceVerificationFields[1].verificationField.policyHoldersCity","policyHoldersCity")
 
                           policyHoldersState1 = sh.getCell(67,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersState1,"insuranceVerificationFields[1].verificationField.policyHoldersState","policyHoldersState")

                           policyHoldersZip1 = sh.getCell(68,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersZip1,"insuranceVerificationFields[1].verificationField.policyHoldersZip","policyHoldersZip")
 
                           maximumAnnualBenefitAmount1 = sh.getCell(69,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,maximumAnnualBenefitAmount1,"insuranceVerificationFields[1].verificationField.maximumAnnualBenefitAmount","maximumAnnualBenefitAmount")

                           maximumAnnualBenefitMet1 = sh.getCell(70,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,maximumAnnualBenefitMet1,"insuranceVerificationFields[1].verificationField.maximumAnnualBenefitMet","maximumAnnualBenefitMet")
 
                           coInsurance1 = sh.getCell(71,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,coInsurance1,"insuranceVerificationFields[1].verificationField.coInsurance","coInsurance")

                            coPayAmount1 = sh.getCell(72,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,coPayAmount1,"insuranceVerificationFields[1].verificationField.coPayAmount","coPayAmount")

                           coPayType1 = sh.getCell(73,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,coPayType1,"insuranceVerificationFields[1].verificationField.coPayType","coPayType")

                           pharmacyBenefit1 = sh.getCell(74,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,pharmacyBenefit1,"insuranceVerificationFields[1].verificationField.pharmacyBenefit","pharmacyBenefit")

 
                              //dynamic asserstion :End

                            assertionResult = testStepForAssertion.getAssertionStatus()

             if(assertionResult.toString().equals("FAILED")){

 
                                      addCell(64,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                 for( e in assertion.errors ){

 
                                                   addCell(65,i,e.message,sheet1);
 

                                               } 
 

                                   }

 

                                }

 

                                else{

 
                                   addCell(64,i,"PASS",sheet1);
 

                                }
 

       }

 
        wb1.write();

                log.info "TestCase Execution Completed successfull"

 

                }             
        

catch(Exception e)
{

           log.info(e)                         


}

finally
{

     //close workbook
     wb.close();
     wb1.close();     

}

 
  //Method code
   def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {

           def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

   //Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
 

}

 

//method to delete

def cleanUp(String requestName){


                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){


                                   testCase.removeTestStep(testStep)

 

                }

 
       
             //remove the teststep::End

 

}

 

//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="groovy" name="DetermineInsuranceVerificationFields_Single Payer" id="394b6f9e-ce3c-488d-a2d0-92e16f2f8bb9"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields_singlePayer-Input.xls"
def outputfile = projectDir + "/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields_singlePayer-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"PayerID",sheet1);
addCell(2,0,"contactMethod",sheet1);
addCell(3,0,"groupNumber",sheet1);
addCell(4,0,"policyNumber",sheet1);
addCell(5,0,"payerType",sheet1);
addCell(6,0,"planType",sheet1);
addCell(7,0,"medicalGroup",sheet1);
addCell(8,0,"effectiveDateOfPolicy",sheet1);
addCell(9,0,"terminationDateOfPolicy",sheet1);
addCell(10,0,"planYearStartDate",sheet1);
addCell(11,0,"planYearType",sheet1);
addCell(12,0,"relationToPolicyHolder",sheet1);
addCell(13,0,"insuranceStreetAddress",sheet1);
addCell(14,0,"insuranceCity",sheet1);
addCell(15,0,"insuranceState",sheet1);
addCell(16,0,"insuranceZip",sheet1);
addCell(17,0,"deductibleAmount",sheet1);
addCell(18,0,"deductibleMet",sheet1);
addCell(19,0,"outOfPocketAmount",sheet1);
addCell(20,0,"outOfPocketMet",sheet1);
addCell(21,0,"inNetwork",sheet1);
addCell(22,0,"policyHoldersStreetAddress",sheet1);
addCell(23,0,"policyHoldersCity",sheet1);
addCell(24,0,"policyHoldersState",sheet1);
addCell(25,0,"policyHoldersZip",sheet1);
addCell(26,0,"maximumAnnualBenefitAmount",sheet1);
addCell(27,0,"maximumAnnualBenefitMet",sheet1);
addCell(28,0,"coInsurance",sheet1);
addCell(29,0,"coPayAmount",sheet1);
addCell(30,0,"coPayType",sheet1);
addCell(31,0,"pharmacyBenefit",sheet1);
addCell(32,0,"PASS/FAIL",sheet1);
addCell(33,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                //Input for Plan for Payer1                                                                                                   
                         requestTemplet.content.payers[0].planName = sh.getCell(1,i).getContents()
                               //Input for payerID for Payer1                                                          
                         requestTemplet.content.payers[0].id = sh.getCell(2,i).getContents()

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request_Payerlist');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request_Payerlist");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json                                 
                        addCell(0,i,json.insuranceVerificationFields[0].lineItemID,sheet1);                                   
                          // get PayerID from response json                                   
                        addCell(1,i,json.insuranceVerificationFields[0].payerID,sheet1);   
                          // get contactMethod from response json                           
                         addCell(2,i,json.insuranceVerificationFields[0].verificationField.contactMethod.toString(),sheet1);  
                         // get groupNumber from response json                               
                        addCell(3,i,json.insuranceVerificationFields[0].verificationField.groupNumber.toString(),sheet1);
                          // get policyNumber from response json         
                        addCell(4,i,json.insuranceVerificationFields[0].verificationField.policyNumber.toString(),sheet1);
                          // get payerType from response json         
                        addCell(5,i,json.insuranceVerificationFields[0].verificationField.payerType.toString(),sheet1);
                           // get planType from response json
                        addCell(6,i,json.insuranceVerificationFields[0].verificationField.planType.toString(),sheet1);
                          // get medicalGroup from response json         
                        addCell(7,i,json.insuranceVerificationFields[0].verificationField.medicalGroup.toString(),sheet1);
                           // get effectiveDateOfPolicy from response json         
                        addCell(8,i,json.insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy.toString(),sheet1);
                           // get terminationDateOfPolicy from response json
                         addCell(9,i,json.insuranceVerificationFields[0].verificationField.terminationDateOfPolicy.toString(),sheet1);
                            // get planYearStartDate from response json         
                         addCell(10,i,json.insuranceVerificationFields[0].verificationField.planYearStartDate.toString(),sheet1);
                            // get planYearType from response json         
                         addCell(11,i,json.insuranceVerificationFields[0].verificationField.planYearType.toString(),sheet1);
                            // get relationToPolicyHolder from response json         
                         addCell(12,i,json.insuranceVerificationFields[0].verificationField.relationToPolicyHolder.toString(),sheet1);
                            // get insuranceStreetAddress from response json         
                         addCell(13,i,json.insuranceVerificationFields[0].verificationField.insuranceStreetAddress.toString(),sheet1);
                           // get insuranceCity from response json         
                         addCell(14,i,json.insuranceVerificationFields[0].verificationField.insuranceCity.toString(),sheet1);
                           // get insuranceState from response json
                         addCell(15,i,json.insuranceVerificationFields[0].verificationField.insuranceState.toString(),sheet1);
                           // get insuranceZip from response json         
                         addCell(16,i,json.insuranceVerificationFields[0].verificationField.insuranceZip.toString(),sheet1);
                           // get deductibleAmount from response json         
                        addCell(17,i,json.insuranceVerificationFields[0].verificationField.deductibleAmount.toString(),sheet1);
                           // get deductibleMet from response json         
                        addCell(18,i,json.insuranceVerificationFields[0].verificationField.deductibleMet.toString(),sheet1);
                           // get outOfPocketAmount from response json         
                        addCell(19,i,json.insuranceVerificationFields[0].verificationField.outOfPocketAmount.toString(),sheet1);
                           // get outOfPocketMet from response json         
                        addCell(20,i,json.insuranceVerificationFields[0].verificationField.outOfPocketMet.toString(),sheet1);
                           // get inNetwork from response json         
                        addCell(21,i,json.insuranceVerificationFields[0].verificationField.inNetwork.toString(),sheet1);
                          // get policyHoldersStreetAddress from response json         
                        addCell(22,i,json.insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress.toString(),sheet1);
                           // get policyHoldersCity from response json         
                        addCell(23,i,json.insuranceVerificationFields[0].verificationField.policyHoldersCity.toString(),sheet1);
                          // get policyHoldersState from response json         
                        addCell(24,i,json.insuranceVerificationFields[0].verificationField.policyHoldersState.toString(),sheet1);
                           // get policyHoldersZip from response json         
                        addCell(25,i,json.insuranceVerificationFields[0].verificationField.policyHoldersZip.toString(),sheet1);
                           // get maximumAnnualBenefitAmount from response json          
                        addCell(26,i,json.insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount.toString(),sheet1);
                            // get maximumAnnualBenefitMet from response json         
                        addCell(27,i,json.insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet.toString(),sheet1);
                            // get coInsurance from response json         
                        addCell(28,i,json.insuranceVerificationFields[0].verificationField.coInsurance.toString(),sheet1);
                            // get coPayAmount from response json         
                        addCell(29,i,json.insuranceVerificationFields[0].verificationField.coPayAmount.toString(),sheet1);
                            // get coPayType from response json         
                        addCell(30,i,json.insuranceVerificationFields[0].verificationField.coPayType.toString(),sheet1);
                             // get pharmacyBenefit from response json         
                        addCell(31,i,json.insuranceVerificationFields[0].verificationField.pharmacyBenefit.toString(),sheet1);
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(3,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"insuranceVerificationFields[0].lineItemID","lineItemID")

                          payerID = sh.getCell(4,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID,"insuranceVerificationFields[0].payerID","payerID")

                         contactMethod = sh.getCell(5,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,contactMethod,"insuranceVerificationFields[0].verificationField.contactMethod","contactMethod")

                         groupNumber = sh.getCell(6,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,groupNumber,"insuranceVerificationFields[0].verificationField.groupNumber","groupNumber")

                         policyNumber = sh.getCell(7,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,policyNumber,"insuranceVerificationFields[0].verificationField.policyNumber","policyNumber")

                          payerType = sh.getCell(8,i).getContents().toString()
                         addAssertionJsonPathMatch(testStepForAssertion,payerType,"insuranceVerificationFields[0].verificationField.payerType","payerType")

                          planType= sh.getCell(9,i).getContents().toString()
                         addAssertionJsonPathMatch(testStepForAssertion,planType,"insuranceVerificationFields[0].verificationField.planType","planType")

                          medicalGroup = sh.getCell(10,i).getContents().toString()
                         addAssertionJsonPathMatch(testStepForAssertion,medicalGroup,"insuranceVerificationFields[0].verificationField.medicalGroup","medicalGroup")

                           effectiveDateOfPolicy = sh.getCell(11,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,effectiveDateOfPolicy,"insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy","effectiveDateOfPolicy")

                           terminationDateOfPolicy = sh.getCell(12,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,terminationDateOfPolicy,"insuranceVerificationFields[0].verificationField.terminationDateOfPolicy","terminationDateOfPolicy")

                            planYearStartDate = sh.getCell(13,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,planYearStartDate,"insuranceVerificationFields[0].verificationField.planYearStartDate","planYearStartDate")

                            planYearType = sh.getCell(14,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,planYearType,"insuranceVerificationFields[0].verificationField.planYearType","planYearType")

                            relationToPolicyHolder = sh.getCell(15,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,relationToPolicyHolder,"insuranceVerificationFields[0].verificationField.relationToPolicyHolder","relationToPolicyHolder")

                            insuranceStreetAddress = sh.getCell(16,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceStreetAddress,"insuranceVerificationFields[0].verificationField.insuranceStreetAddress","insuranceStreetAddress")

                            insuranceCity = sh.getCell(17,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceCity,"insuranceVerificationFields[0].verificationField.insuranceCity","insuranceCity")

                            insuranceState = sh.getCell(18,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceState,"insuranceVerificationFields[0].verificationField.insuranceState","insuranceState")

                            insuranceZip = sh.getCell(19,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceZip,"insuranceVerificationFields[0].verificationField.insuranceZip","insuranceZip")

                            deductibleAmount = sh.getCell(20,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,deductibleAmount,"insuranceVerificationFields[0].verificationField.deductibleAmount","deductibleAmount")

                            deductibleMet = sh.getCell(21,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,deductibleMet,"insuranceVerificationFields[0].verificationField.deductibleMet","deductibleMet")

                           outOfPocketAmount = sh.getCell(22,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,outOfPocketAmount,"insuranceVerificationFields[0].verificationField.outOfPocketAmount","outOfPocketAmount")

                           outOfPocketMet = sh.getCell(23,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,outOfPocketMet,"insuranceVerificationFields[0].verificationField.outOfPocketMet","outOfPocketMet")

                           inNetwork = sh.getCell(24,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,inNetwork,"insuranceVerificationFields[0].verificationField.inNetwork","inNetwork")

                           policyHoldersStreetAddress = sh.getCell(25,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersStreetAddress,"insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress","policyHoldersStreetAddress")

                           policyHoldersCity = sh.getCell(26,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersCity,"insuranceVerificationFields[0].verificationField.policyHoldersCity","policyHoldersCity")

                           policyHoldersState = sh.getCell(27,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersState,"insuranceVerificationFields[0].verificationField.policyHoldersState","policyHoldersState")

                           policyHoldersZip = sh.getCell(28,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersZip,"insuranceVerificationFields[0].verificationField.policyHoldersZip","policyHoldersZip")

                           maximumAnnualBenefitAmount = sh.getCell(29,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,maximumAnnualBenefitAmount,"insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount","maximumAnnualBenefitAmount")

                           maximumAnnualBenefitMet = sh.getCell(30,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,maximumAnnualBenefitMet,"insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet","maximumAnnualBenefitMet")

                           coInsurance = sh.getCell(31,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,coInsurance,"insuranceVerificationFields[0].verificationField.coInsurance","coInsurance")

                           coPayAmount = sh.getCell(32,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,coPayAmount,"insuranceVerificationFields[0].verificationField.coPayAmount","coPayAmount")

                           coPayType = sh.getCell(33,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,coPayType,"insuranceVerificationFields[0].verificationField.coPayType","coPayType")

                           pharmacyBenefit = sh.getCell(34,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,pharmacyBenefit,"insuranceVerificationFields[0].verificationField.pharmacyBenefit","pharmacyBenefit")

                            
                     
                            //dynamic asserstion :End

                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(32,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(33,i,e.message,sheet1);

                                                } 


                                   }

 

                                }

 
                                else{

                                   addCell(32,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="groovy" name="DetermineInsuranceVerificationFields_Multi Payer" id="778d4d94-dd93-4845-98cc-57ffded99976"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields_multipayer-Input.xls"
def outputfile = projectDir + "/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields_multiPayer-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"PayerID",sheet1);
addCell(2,0,"contactMethod",sheet1);
addCell(3,0,"groupNumber",sheet1);
addCell(4,0,"policyNumber",sheet1);
addCell(5,0,"payerType",sheet1);
addCell(6,0,"planType",sheet1);
addCell(7,0,"medicalGroup",sheet1);
addCell(8,0,"effectiveDateOfPolicy",sheet1);
addCell(9,0,"terminationDateOfPolicy",sheet1);
addCell(10,0,"planYearStartDate",sheet1);
addCell(11,0,"planYearType",sheet1);
addCell(12,0,"relationToPolicyHolder",sheet1);
addCell(13,0,"insuranceStreetAddress",sheet1);
addCell(14,0,"insuranceCity",sheet1);
addCell(15,0,"insuranceState",sheet1);
addCell(16,0,"insuranceZip",sheet1);
addCell(17,0,"deductibleAmount",sheet1);
addCell(18,0,"deductibleMet",sheet1);
addCell(19,0,"outOfPocketAmount",sheet1);
addCell(20,0,"outOfPocketMet",sheet1);
addCell(21,0,"inNetwork",sheet1);
addCell(22,0,"policyHoldersStreetAddress",sheet1);
addCell(23,0,"policyHoldersCity",sheet1);
addCell(24,0,"policyHoldersState",sheet1);
addCell(25,0,"policyHoldersZip",sheet1);
addCell(26,0,"maximumAnnualBenefitAmount",sheet1);
addCell(27,0,"maximumAnnualBenefitMet",sheet1);
addCell(28,0,"coInsurance",sheet1);
addCell(29,0,"coPayAmount",sheet1);
addCell(30,0,"coPayType",sheet1);
addCell(31,0,"pharmacyBenefit",sheet1);
addCell(32,0,"lineItemID1",sheet1);
addCell(33,0,"PayerID1",sheet1);
addCell(34,0,"contactMethod1",sheet1);
addCell(35,0,"groupNumber1",sheet1);
addCell(36,0,"policyNumber1",sheet1);
addCell(37,0,"payerType1",sheet1);
addCell(38,0,"planType1",sheet1);
addCell(39,0,"medicalGroup1",sheet1);
addCell(40,0,"effectiveDateOfPolicy1",sheet1);
addCell(41,0,"terminationDateOfPolicy1",sheet1);
addCell(42,0,"planYearStartDate1",sheet1);
addCell(43,0,"planYearType1",sheet1);
addCell(44,0,"relationToPolicyHolder1",sheet1);
addCell(45,0,"insuranceStreetAddress1",sheet1);
addCell(46,0,"insuranceCity1",sheet1);
addCell(47,0,"insuranceState1",sheet1);
addCell(48,0,"insuranceZip1",sheet1);
addCell(49,0,"deductibleAmount1",sheet1);
addCell(50,0,"deductibleMet1",sheet1);
addCell(51,0,"outOfPocketAmount1",sheet1);
addCell(52,0,"outOfPocketMet1",sheet1);
addCell(53,0,"inNetwork1",sheet1);
addCell(54,0,"policyHoldersStreetAddress1",sheet1);
addCell(55,0,"policyHoldersCity1",sheet1);
addCell(56,0,"policyHoldersState1",sheet1);
addCell(57,0,"policyHoldersZip1",sheet1);
addCell(58,0,"maximumAnnualBenefitAmount1",sheet1);
addCell(59,0,"maximumAnnualBenefitMet1",sheet1);
addCell(60,0,"coInsurance1",sheet1);
addCell(61,0,"coPayAmount1",sheet1);
addCell(62,0,"coPayType1",sheet1);
addCell(63,0,"pharmacyBenefit1",sheet1);
addCell(64,0,"PASS/FAIL",sheet1);
addCell(65,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                //Input for Plan for Payer1                                                                  
                         requestTemplet.content.payers[0].planName = sh.getCell(1,i).getContents()
                               //Input for payerID for Payer1                              
                         requestTemplet.content.payers[0].id = sh.getCell(2,i).getContents()

                               //Input for Plan for Payer2                               
                          requestTemplet.content.payers[1].planName = sh.getCell(3,i).getContents()
                              //Input for payerID for Payer2                              
                          requestTemplet.content.payers[1].id = sh.getCell(4,i).getContents()

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request_Payerlist');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request_Payerlist");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                        
                   
                            // get lineItemID from response json                                  
                        addCell(0,i,json.insuranceVerificationFields[0].lineItemID.toString(),sheet1);                                   
                          // get PayerID from response json                                    
                        addCell(1,i,json.insuranceVerificationFields[0].payerID.toString(),sheet1);   
                          // get contactMethod from response json         
                        addCell(2,i,json.insuranceVerificationFields[0].verificationField.contactMethod.toString(),sheet1);  
                         // get groupNumber from response json         
                        addCell(3,i,json.insuranceVerificationFields[0].verificationField.groupNumber.toString(),sheet1);
                          // get policyNumber from response json         
                        addCell(4,i,json.insuranceVerificationFields[0].verificationField.policyNumber.toString(),sheet1);
                          // get payerType from response json         
                        addCell(5,i,json.insuranceVerificationFields[0].verificationField.payerType.toString(),sheet1);
                           // get planType from response json
                        addCell(6,i,json.insuranceVerificationFields[0].verificationField.planType.toString(),sheet1);
                          // get medicalGroup from response json         
                        addCell(7,i,json.insuranceVerificationFields[0].verificationField.medicalGroup.toString(),sheet1);
                           // get effectiveDateOfPolicy from response json         
                        addCell(8,i,json.insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy.toString(),sheet1);
                           // get terminationDateOfPolicy from response json
                         addCell(9,i,json.insuranceVerificationFields[0].verificationField.terminationDateOfPolicy.toString(),sheet1);
                            // get planYearStartDate from response json         
                         addCell(10,i,json.insuranceVerificationFields[0].verificationField.planYearStartDate.toString(),sheet1);
                            // get planYearType from response json         
                         addCell(11,i,json.insuranceVerificationFields[0].verificationField.planYearType.toString(),sheet1);
                            // get relationToPolicyHolder from response json         
                         addCell(12,i,json.insuranceVerificationFields[0].verificationField.relationToPolicyHolder.toString(),sheet1);
                            // get insuranceStreetAddress from response json         
                         addCell(13,i,json.insuranceVerificationFields[0].verificationField.insuranceStreetAddress.toString(),sheet1);
                           // get insuranceCity from response json         
                         addCell(14,i,json.insuranceVerificationFields[0].verificationField.insuranceCity.toString(),sheet1);
                           // get insuranceState from response json
                         addCell(15,i,json.insuranceVerificationFields[0].verificationField.insuranceState.toString(),sheet1);
                           // get insuranceZip from response json         
                         addCell(16,i,json.insuranceVerificationFields[0].verificationField.insuranceZip.toString(),sheet1);
                           // get deductibleAmount from response json         
                        addCell(17,i,json.insuranceVerificationFields[0].verificationField.deductibleAmount.toString(),sheet1);
                           // get deductibleMet from response json         
                        addCell(18,i,json.insuranceVerificationFields[0].verificationField.deductibleMet.toString(),sheet1);
                           // get outOfPocketAmount from response json         
                        addCell(19,i,json.insuranceVerificationFields[0].verificationField.outOfPocketAmount.toString(),sheet1);
                           // get outOfPocketMet from response json         
                        addCell(20,i,json.insuranceVerificationFields[0].verificationField.outOfPocketMet.toString(),sheet1);
                           // get inNetwork from response json         
                        addCell(21,i,json.insuranceVerificationFields[0].verificationField.inNetwork.toString(),sheet1);
                          // get policyHoldersStreetAddress from response json         
                        addCell(22,i,json.insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress.toString(),sheet1);
                           // get policyHoldersCity from response json         
                        addCell(23,i,json.insuranceVerificationFields[0].verificationField.policyHoldersCity.toString(),sheet1);
                          // get policyHoldersState from response json         
                        addCell(24,i,json.insuranceVerificationFields[0].verificationField.policyHoldersState.toString(),sheet1);
                           // get policyHoldersZip from response json         
                        addCell(25,i,json.insuranceVerificationFields[0].verificationField.policyHoldersZip.toString(),sheet1);
                           // get maximumAnnualBenefitAmount from response json          
                        addCell(26,i,json.insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount.toString(),sheet1);
                            // get maximumAnnualBenefitMet from response json         
                        addCell(27,i,json.insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet.toString(),sheet1);
                            // get coInsurance from response json         
                        addCell(28,i,json.insuranceVerificationFields[0].verificationField.coInsurance.toString(),sheet1);
                            // get coPayAmount from response json         
                        addCell(29,i,json.insuranceVerificationFields[0].verificationField.coPayAmount.toString(),sheet1);
                            // get coPayType from response json         
                        addCell(30,i,json.insuranceVerificationFields[0].verificationField.coPayType.toString(),sheet1);
                             // get pharmacyBenefit from response json         
                        addCell(31,i,json.insuranceVerificationFields[0].verificationField.pharmacyBenefit.toString(),sheet1);
                        
                            // get lineItemID from response json         
                        addCell(32,i,json.insuranceVerificationFields[1].lineItemID.toString(),sheet1);   
                           // get PayerID from response json         
                        addCell(33,i,json.insuranceVerificationFields[1].payerID.toString(),sheet1);   
                          // get contactMethod from response json         
                        addCell(34,i,json.insuranceVerificationFields[1].verificationField.contactMethod.toString(),sheet1);  
                         // get groupNumber from response json         
                        addCell(35,i,json.insuranceVerificationFields[1].verificationField.groupNumber.toString(),sheet1);
                          // get policyNumber from response json         
                        addCell(36,i,json.insuranceVerificationFields[1].verificationField.policyNumber.toString(),sheet1);
                          // get payerType from response json         
                        addCell(37,i,json.insuranceVerificationFields[1].verificationField.payerType.toString(),sheet1);
                           // get planType from response json
                        addCell(38,i,json.insuranceVerificationFields[1].verificationField.planType.toString(),sheet1);
                          // get medicalGroup from response json         
                        addCell(39,i,json.insuranceVerificationFields[1].verificationField.medicalGroup.toString(),sheet1);
                           // get effectiveDateOfPolicy from response json         
                        addCell(40,i,json.insuranceVerificationFields[1].verificationField.effectiveDateOfPolicy.toString(),sheet1);
                           // get terminationDateOfPolicy from response json
                         addCell(41,i,json.insuranceVerificationFields[1].verificationField.terminationDateOfPolicy.toString(),sheet1);
                            // get planYearStartDate from response json          
                         addCell(42,i,json.insuranceVerificationFields[1].verificationField.planYearStartDate.toString(),sheet1);
                            // get planYearType from response json         
                         addCell(43,i,json.insuranceVerificationFields[1].verificationField.planYearType.toString(),sheet1);
                            // get relationToPolicyHolder from response json         
                         addCell(44,i,json.insuranceVerificationFields[1].verificationField.relationToPolicyHolder.toString(),sheet1);
                            // get insuranceStreetAddress from response json         
                         addCell(45,i,json.insuranceVerificationFields[1].verificationField.insuranceStreetAddress.toString(),sheet1);
                           // get insuranceCity from response json         
                         addCell(46,i,json.insuranceVerificationFields[1].verificationField.insuranceCity.toString(),sheet1);
                           // get insuranceState from response json
                         addCell(47,i,json.insuranceVerificationFields[1].verificationField.insuranceState.toString(),sheet1);
                           // get insuranceZip from response json         
                         addCell(48,i,json.insuranceVerificationFields[1].verificationField.insuranceZip.toString(),sheet1);
                           // get deductibleAmount from response json         
                        addCell(49,i,json.insuranceVerificationFields[1].verificationField.deductibleAmount.toString(),sheet1);
                           // get deductibleMet from response json         
                        addCell(50,i,json.insuranceVerificationFields[1].verificationField.deductibleMet.toString(),sheet1);
                           // get outOfPocketAmount from response json         
                        addCell(51,i,json.insuranceVerificationFields[1].verificationField.outOfPocketAmount.toString(),sheet1);
                           // get outOfPocketMet from response json         
                        addCell(52,i,json.insuranceVerificationFields[1].verificationField.outOfPocketMet.toString(),sheet1);
                           // get inNetwork from response json         
                        addCell(53,i,json.insuranceVerificationFields[1].verificationField.inNetwork.toString(),sheet1);
                          // get policyHoldersStreetAddress from response json         
                        addCell(54,i,json.insuranceVerificationFields[1].verificationField.policyHoldersStreetAddress.toString(),sheet1);
                           // get policyHoldersCity from response json         
                        addCell(55,i,json.insuranceVerificationFields[1].verificationField.policyHoldersCity.toString(),sheet1);
                          // get policyHoldersState from response json         
                        addCell(56,i,json.insuranceVerificationFields[1].verificationField.policyHoldersState.toString(),sheet1);
                           // get policyHoldersZip from response json         
                        addCell(57,i,json.insuranceVerificationFields[1].verificationField.policyHoldersZip.toString(),sheet1);
                           // get maximumAnnualBenefitAmount from response json         
                        addCell(58,i,json.insuranceVerificationFields[1].verificationField.maximumAnnualBenefitAmount.toString(),sheet1);
                            // get maximumAnnualBenefitMet from response json         
                        addCell(59,i,json.insuranceVerificationFields[1].verificationField.maximumAnnualBenefitMet.toString(),sheet1);
                            // get coInsurance from response json         
                        addCell(60,i,json.insuranceVerificationFields[1].verificationField.coInsurance.toString(),sheet1);
                            // get coPayAmount from response json         
                        addCell(61,i,json.insuranceVerificationFields[1].verificationField.coPayAmount.toString(),sheet1);
                            // get coPayType from response json         
                        addCell(62,i,json.insuranceVerificationFields[1].verificationField.coPayType.toString(),sheet1);
                             // get pharmacyBenefit from response json         
                        addCell(63,i,json.insuranceVerificationFields[1].verificationField.pharmacyBenefit.toString(),sheet1);
 
                   
                                                   
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(5,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"insuranceVerificationFields[0].lineItemID","lineItemID")

                          payerID = sh.getCell(6,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID,"insuranceVerificationFields[0].payerID","payerID")

                         contactMethod = sh.getCell(7,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,contactMethod,"insuranceVerificationFields[0].verificationField.contactMethod","contactMethod")

                         groupNumber = sh.getCell(8,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,groupNumber,"insuranceVerificationFields[0].verificationField.groupNumber","groupNumber")

                         policyNumber = sh.getCell(9,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,policyNumber,"insuranceVerificationFields[0].verificationField.policyNumber","policyNumber")

                          payerType = sh.getCell(10,i).getContents().toString()
                         addAssertionJsonPathMatch(testStepForAssertion,payerType,"insuranceVerificationFields[0].verificationField.payerType","payerType")

                          planType= sh.getCell(11,i).getContents().toString()
                         addAssertionJsonPathMatch(testStepForAssertion,planType,"insuranceVerificationFields[0].verificationField.planType","planType")

                          medicalGroup = sh.getCell(12,i).getContents().toString()
                         addAssertionJsonPathMatch(testStepForAssertion,medicalGroup,"insuranceVerificationFields[0].verificationField.medicalGroup","medicalGroup")

                           effectiveDateOfPolicy = sh.getCell(13,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,effectiveDateOfPolicy,"insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy","effectiveDateOfPolicy")

                           terminationDateOfPolicy = sh.getCell(14,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,terminationDateOfPolicy,"insuranceVerificationFields[0].verificationField.terminationDateOfPolicy","terminationDateOfPolicy")

                            planYearStartDate = sh.getCell(15,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,planYearStartDate,"insuranceVerificationFields[0].verificationField.planYearStartDate","planYearStartDate")

                            planYearType = sh.getCell(16,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,planYearType,"insuranceVerificationFields[0].verificationField.planYearType","planYearType")

                            relationToPolicyHolder = sh.getCell(17,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,relationToPolicyHolder,"insuranceVerificationFields[0].verificationField.relationToPolicyHolder","relationToPolicyHolder")

                            insuranceStreetAddress = sh.getCell(18,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceStreetAddress,"insuranceVerificationFields[0].verificationField.insuranceStreetAddress","insuranceStreetAddress")

                            insuranceCity = sh.getCell(19,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceCity,"insuranceVerificationFields[0].verificationField.insuranceCity","insuranceCity")

                            insuranceState = sh.getCell(20,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceState,"insuranceVerificationFields[0].verificationField.insuranceState","insuranceState")

                            insuranceZip = sh.getCell(21,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceZip,"insuranceVerificationFields[0].verificationField.insuranceZip","insuranceZip")

                            deductibleAmount = sh.getCell(22,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,deductibleAmount,"insuranceVerificationFields[0].verificationField.deductibleAmount","deductibleAmount")

                            deductibleMet = sh.getCell(23,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,deductibleMet,"insuranceVerificationFields[0].verificationField.deductibleMet","deductibleMet")

                           outOfPocketAmount = sh.getCell(24,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,outOfPocketAmount,"insuranceVerificationFields[0].verificationField.outOfPocketAmount","outOfPocketAmount")

                           outOfPocketMet = sh.getCell(25,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,outOfPocketMet,"insuranceVerificationFields[0].verificationField.outOfPocketMet","outOfPocketMet")

                           inNetwork = sh.getCell(26,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,inNetwork,"insuranceVerificationFields[0].verificationField.inNetwork","inNetwork")

                           policyHoldersStreetAddress = sh.getCell(27,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersStreetAddress,"insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress","policyHoldersStreetAddress")

                           policyHoldersCity= sh.getCell(28,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersCity,"insuranceVerificationFields[0].verificationField.policyHoldersCity","policyHoldersCity")

                           policyHoldersState = sh.getCell(29,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersState,"insuranceVerificationFields[0].verificationField.policyHoldersState","policyHoldersState")

                           policyHoldersZip = sh.getCell(30,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersZip,"insuranceVerificationFields[0].verificationField.policyHoldersZip","policyHoldersZip")

                           maximumAnnualBenefitAmount = sh.getCell(31,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,maximumAnnualBenefitAmount,"insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount","maximumAnnualBenefitAmount")

                           maximumAnnualBenefitMet = sh.getCell(32,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,maximumAnnualBenefitMet,"insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet","maximumAnnualBenefitMet")

                           coInsurance = sh.getCell(33,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,coInsurance,"insuranceVerificationFields[0].verificationField.coInsurance","coInsurance")

                           coPayAmount = sh.getCell(34,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,coPayAmount,"insuranceVerificationFields[0].verificationField.coPayAmount","coPayAmount")

                           coPayType = sh.getCell(35,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,coPayType,"insuranceVerificationFields[0].verificationField.coPayType","coPayType")

                           pharmacyBenefit = sh.getCell(36,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,pharmacyBenefit,"insuranceVerificationFields[0].verificationField.pharmacyBenefit","pharmacyBenefit")

                            //get the expected values
                          lineItemID1 = sh.getCell(37,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"insuranceVerificationFields[1].lineItemID","lineItemID")

                         payerID1 = sh.getCell(38,i).getContents().toString()
                      addAssertionJsonPathMatch(testStepForAssertion,payerID1,"insuranceVerificationFields[1].payerID","payerID")

                         contactMethod1 = sh.getCell(39,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,contactMethod1,"insuranceVerificationFields[1].verificationField.contactMethod","contactMethod")

                         groupNumber1 = sh.getCell(40,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,groupNumber1,"insuranceVerificationFields[1].verificationField.groupNumber","groupNumber")

                         policyNumber1 = sh.getCell(41,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,policyNumber1,"insuranceVerificationFields[1].verificationField.policyNumber","policyNumber")

                           payerType1 = sh.getCell(42,i).getContents().toString()
                         addAssertionJsonPathMatch(testStepForAssertion,payerType1,"insuranceVerificationFields[1].verificationField.payerType","payerType")

                          planType1 = sh.getCell(43,i).getContents().toString()
                         addAssertionJsonPathMatch(testStepForAssertion,planType1,"insuranceVerificationFields[1].verificationField.planType","planType")

                          medicalGroup1 = sh.getCell(44,i).getContents().toString()
                         addAssertionJsonPathMatch(testStepForAssertion,medicalGroup1,"insuranceVerificationFields[1].verificationField.medicalGroup","medicalGroup")

                           effectiveDateOfPolicy1 = sh.getCell(45,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,effectiveDateOfPolicy1,"insuranceVerificationFields[1].verificationField.effectiveDateOfPolicy","effectiveDateOfPolicy")

                           terminationDateOfPolicy1 = sh.getCell(46,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,terminationDateOfPolicy1,"insuranceVerificationFields[1].verificationField.terminationDateOfPolicy","terminationDateOfPolicy")

                            planYearStartDate1 = sh.getCell(47,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,planYearStartDate1,"insuranceVerificationFields[1].verificationField.planYearStartDate","planYearStartDate")

                            planYearType1 = sh.getCell(48,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,planYearType1,"insuranceVerificationFields[1].verificationField.planYearType","planYearType")

                            relationToPolicyHolder1 = sh.getCell(49,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,relationToPolicyHolder1,"insuranceVerificationFields[1].verificationField.relationToPolicyHolder","relationToPolicyHolder")

                            insuranceStreetAddress1 = sh.getCell(50,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceStreetAddress1,"insuranceVerificationFields[1].verificationField.insuranceStreetAddress","insuranceStreetAddress")

                            insuranceCity1 = sh.getCell(51,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceCity1,"insuranceVerificationFields[1].verificationField.insuranceCity","insuranceCity")

                            insuranceState1 = sh.getCell(52,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceState1,"insuranceVerificationFields[1].verificationField.insuranceState","insuranceState")

                            insuranceZip1 = sh.getCell(53,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,insuranceZip1,"insuranceVerificationFields[1].verificationField.insuranceZip","insuranceZip")

                            deductibleAmount1 = sh.getCell(54,i).getContents().toString()
                           addAssertionJsonPathMatch(testStepForAssertion,deductibleAmount1,"insuranceVerificationFields[1].verificationField.deductibleAmount","deductibleAmount")

                            deductibleMet1 = sh.getCell(55,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,deductibleMet1,"insuranceVerificationFields[1].verificationField.deductibleMet","deductibleMet")

                           outOfPocketAmount1 = sh.getCell(56,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,outOfPocketAmount1,"insuranceVerificationFields[1].verificationField.outOfPocketAmount","outOfPocketAmount")

                           outOfPocketMet1 = sh.getCell(57,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,outOfPocketMet1,"insuranceVerificationFields[1].verificationField.outOfPocketMet","outOfPocketMet")

                           inNetwork1 = sh.getCell(58,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,inNetwork1,"insuranceVerificationFields[1].verificationField.inNetwork","inNetwork")
 
                           policyHoldersStreetAddress1 = sh.getCell(59,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersStreetAddress1,"insuranceVerificationFields[1].verificationField.policyHoldersStreetAddress","policyHoldersStreetAddress")

                            policyHoldersCity1 = sh.getCell(60,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersCity1,"insuranceVerificationFields[1].verificationField.policyHoldersCity","policyHoldersCity")
 
                           policyHoldersState1 = sh.getCell(61,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersState1,"insuranceVerificationFields[1].verificationField.policyHoldersState","policyHoldersState")

                           policyHoldersZip1 = sh.getCell(62,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,policyHoldersZip1,"insuranceVerificationFields[1].verificationField.policyHoldersZip","policyHoldersZip")
 
                           maximumAnnualBenefitAmount1 = sh.getCell(63,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,maximumAnnualBenefitAmount1,"insuranceVerificationFields[1].verificationField.maximumAnnualBenefitAmount","maximumAnnualBenefitAmount")

                           maximumAnnualBenefitMet1 = sh.getCell(64,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,maximumAnnualBenefitMet1,"insuranceVerificationFields[1].verificationField.maximumAnnualBenefitMet","maximumAnnualBenefitMet")
 
                           coInsurance1 = sh.getCell(65,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,coInsurance1,"insuranceVerificationFields[1].verificationField.coInsurance","coInsurance")

                            coPayAmount1 = sh.getCell(66,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,coPayAmount1,"insuranceVerificationFields[1].verificationField.coPayAmount","coPayAmount")

                           coPayType1 = sh.getCell(67,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,coPayType1,"insuranceVerificationFields[1].verificationField.coPayType","coPayType")

                           pharmacyBenefit1 = sh.getCell(68,i).getContents().toString()
                          addAssertionJsonPathMatch(testStepForAssertion,pharmacyBenefit1,"insuranceVerificationFields[1].verificationField.pharmacyBenefit","pharmacyBenefit")

 
                              //dynamic asserstion :End

                            assertionResult = testStepForAssertion.getAssertionStatus()

             if(assertionResult.toString().equals("FAILED")){

 
                                      addCell(64,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                 for( e in assertion.errors ){

 
                                                   addCell(65,i,e.message,sheet1);
 

                                               } 
 

                                   }

 

                                }

 

                                else{

 
                                   addCell(64,i,"PASS",sheet1);
 

                                }
 

       }

 
        wb1.write();

                log.info "TestCase Execution Completed successfull"

 

                }             
        

catch(Exception e)
{

           log.info(e)                         


}

finally
{

     //close workbook
     wb.close();
     wb1.close();     

}

 
  //Method code
   def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {

           def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

   //Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
 

}

 

//method to delete

def cleanUp(String requestName){


                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){


                                   testCase.removeTestStep(testStep)

 

                }

 
       
             //remove the teststep::End

 

}

 

//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request_Lineitems" id="6d4e2b2d-6aea-4b6a-8f30-8c9f7a1aa5b4"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request_Lineitems" id="c68db7a1-9c35-4880-b24d-c2a800d69b6e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "customerState": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "id": "3F5862189",
                    "planName": "B191"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "Diabetes Testing"
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request_Payerlist" id="17d5363d-1650-46a3-9539-3c5fed1c9dd6"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request_Payerlist" id="5c5114b4-7b03-4021-994a-e9912d86d051" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-09-19T04:48:33.000+0530"
        }
    },
    "payers": [
        {
            "id": "4F53484E2101",
            "planName": "0098"
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42037" id="e521df8f-a1e6-4ea4-9f5f-13b6c0b54e46"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42037" id="5c5114b4-7b03-4021-994a-e9912d86d051" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-09-19T04:48:33.000+0530"
        }
    },
    "payers": [
        {
            "id": "4F53484E2082",
            "planName": "B191"
        },
        {
            "id": "4F53484E2083",
            "planName": "9007"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c9eb9c98-882c-4ea2-9a80-60ee74613401" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e913d7ec-3e4f-442b-99e5-3685240a2d44" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a0447600-563d-4163-b1dd-b11bc8512f31" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>4F53484E2082</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2873ce56-1b00-471a-9f85-f25f567bbec2" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="21525a9c-d883-4ad9-9b4b-b4094f70c9c7" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="02f943f2-d083-49eb-9bbf-16028be578e9" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3439261d-7860-436a-af06-115ca3bf0414" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="37a4a7df-e80d-4ef5-852d-041a033dbf59" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0123e10c-2eea-48e4-b1d6-6ee1b67531e1" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c8acdf2a-6e29-4a57-bc00-40d8ed6d1ee0" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aacdaa41-1350-4925-99bf-023a954ee462" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="db87e922-a7b0-46d9-b61b-7a6bd37c665e" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="16195c20-3429-49be-baae-25148f2d9705" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a6049c7-95d2-43c5-a2f4-eefb1831c2f4" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f7f3cd4c-934b-44e0-b030-1845653eadb8" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="63b920ff-e91d-42ac-985e-d04b26779f40" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="03f08524-b160-421f-b387-f83f3e900a87" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f0e0aa2f-3f5a-4347-ae64-bb4acadcff0a" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d6101661-6234-468f-83ab-92433d018d60" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e03a36df-5994-437c-86e9-2e60d456ca8d" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0ef10f62-9e64-49e5-b021-a786cced86b8" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5866428a-99e6-400c-bf7c-d478cd825e6b" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f2c58df1-93bc-423c-ae06-2dfca725782d" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="278fc821-fe2f-4fc3-84e8-db89700ca145" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="570686a7-64f7-403e-b92e-8e3ae4e984cc" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="899be839-a8f3-4904-908c-88858f8badc4" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1b6bf26d-8c5c-4d6e-9838-d42ab20a47cc" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e682a059-384f-4951-8489-8510bb60549b" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="169fd564-e12f-4474-b537-7a66f71db523" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="91538802-59f4-4a6d-a1e7-086c6d54d5df" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="011c527d-5879-43e3-9440-f2a16ef22518" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9ebff34c-889e-4201-a495-38050652dcd4" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f0707284-fd63-4e9e-9f72-7d08dcdffe29" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="17930b0c-b6e4-434f-8856-aa132b2dd9eb" name="lineItemID"><con:configuration><path>insuranceVerificationFields[1].lineItemID</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d5de998b-0dfc-4403-9584-583b1893b3c3" name="payerID"><con:configuration><path>insuranceVerificationFields[1].payerID</path><content>4F53484E2083</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b9608002-cf22-4613-8a86-4834b65692d3" name="contactMethod"><con:configuration><path>insuranceVerificationFields[1].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7c837de-7bfb-4985-9e21-3c0e7fe90155" name="groupNumber"><con:configuration><path>insuranceVerificationFields[1].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2286928f-a577-4331-8ffc-de9437a26b42" name="policyNumber"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9a2d2d2b-8eef-41a2-9e57-f4f531447aae" name="payerType"><con:configuration><path>insuranceVerificationFields[1].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e7165c2b-3c60-4910-bc20-6e6537497c4d" name="planType"><con:configuration><path>insuranceVerificationFields[1].verificationField.planType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="746f0b8a-6fad-4bbc-b1cc-bc08db40c167" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[1].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b45d1a6e-d62c-465a-b0d7-4b9adf8be77a" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[1].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b14530b-b31c-4f7a-95fe-b79bf01e46f3" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[1].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7c69e8f9-1911-4821-aae7-1f98420c745c" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[1].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2a53bc3-0ddc-4127-a27a-dca9d37ef25d" name="planYearType"><con:configuration><path>insuranceVerificationFields[1].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d853386c-e44e-49f8-a01c-ec70758fe80c" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[1].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4f5a7b30-eaee-463a-a059-3841b0df91e1" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b7f28da4-b8b4-4acb-90c2-228ae1d9f3cd" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a6a78caf-362a-4512-932c-ada65fd6c498" name="insuranceState"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="105c94dd-5c11-4a55-bc71-9683b3806da7" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f3335f9-89ff-42bc-ae51-68b8062b992a" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42df4009-d5b1-47be-b177-8916824ffc5a" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a5011ef3-854f-4588-bace-56616854ea84" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c134873e-ae47-46c2-992f-573b22998433" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2b9da610-8be9-4332-b29c-6769b5df786e" name="inNetwork"><con:configuration><path>insuranceVerificationFields[1].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="56eb4f2c-a617-43bd-b439-534bb9ea136a" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a78cec8-a991-4b37-b76d-8844bac222bb" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="687bf258-5f5c-46e8-bf80-b7619142cf95" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5d123b53-de88-4d14-94ab-2e3b2a7fc4ff" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="468191a7-9bf2-4f1f-b468-6f6fe67d4611" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="79036d9e-4399-4728-87db-9959bfc7fa20" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="35698b78-0c38-4ea5-a9d4-de935d0c3afb" name="coInsurance"><con:configuration><path>insuranceVerificationFields[1].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ace44b05-92fa-42c4-9da3-0192f0e8a31d" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="526109ee-86ee-4894-9989-a3387c833648" name="coPayType"><con:configuration><path>insuranceVerificationFields[1].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0abfa67a-cf2c-4537-af57-5862dab6ade6" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[1].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42038" id="3150d820-8018-4de2-88e6-951748e16b36"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42038" id="5c5114b4-7b03-4021-994a-e9912d86d051" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-09-19T04:48:33.000+0530"
        }
    },
    "payers": [
        {
            "id": "4F53484E2084",
            "planName": "9007"
        },
        {
            "id": "4F53484E2085",
            "planName": "6277"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="37889ab7-5878-4963-bccf-74dad85d0f2a" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="722af6e3-7fda-440d-8de3-fb2f1ffd0049" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f241049c-7995-4330-bd9f-6565c39ae165" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>4F53484E2084</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9c8f0eb1-b5ef-4e28-8862-2e4aa7018d9d" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fafa6325-78fe-46d9-84b9-d4706179ea2c" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="664c3e45-01ed-4de7-82dc-554c6a72b6bb" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="10e804a1-41d4-4ab7-a156-ea5ce2dd0929" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="10466a7d-e44d-4e20-9bd9-602bcb6d776c" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f5b6b128-bd70-40ec-852b-0fb33776e473" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="017a17a7-3946-490d-b5ac-be13287a39b2" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6c5c3890-2e4b-4a13-84b7-f23f6b646d81" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="739da33a-6ab7-432e-b875-2f87b0cfae11" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="df7405b1-b440-4b47-a149-791f538ac008" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4c847e9e-2fa4-4679-8cca-c5902a74066f" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6f8e1818-3cea-46fe-a894-bbf4429647e6" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cfab1137-c663-46d5-a100-57765e4756fe" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fb6f6e89-2582-43ae-8ede-4b07e8501889" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4438e8cf-2382-4526-91a9-c704c15e6d2f" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69380f0c-f172-481a-a401-7a04d71a4127" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a7333926-10dc-4310-b933-f820dcc41160" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ff8be63f-becd-4e88-9298-e0bd469b631c" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d6fa7e9e-321a-400f-ab56-11b166c12bd0" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="23f8312a-8c25-4f1e-b21c-b6d42825c2d1" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fb76d430-0bbc-4cd7-8f5c-02045bccc50f" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b2ebfd9b-b7db-4dcf-8950-c2da8833bde8" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fd814520-ee6d-426b-9246-7eaa82098506" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42a82794-8a3d-4ad1-9858-18b9b525ab32" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d6debf73-a027-41ee-93b8-ae5643f65b0a" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a6bb7d13-0d11-478f-b728-4c7a9646be78" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2fd7b7d1-09ed-496a-8aa9-b82fd7b84839" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3c4cddfd-f834-4bcb-81bf-4bdbfd97085c" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="64632642-3756-4db6-977e-2a7c3c869a76" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4b349f2b-549a-4de3-a2b6-66a3df35a019" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4c28ba1c-4267-4bea-95e5-2eb01e32e9ad" name="lineItemID"><con:configuration><path>insuranceVerificationFields[1].lineItemID</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e4fc60a3-3004-4a4d-894b-2330d465ac5b" name="payerID"><con:configuration><path>insuranceVerificationFields[1].payerID</path><content>4F53484E2085</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1b30315c-5c99-4f67-a4eb-71b53a7d4089" name="contactMethod"><con:configuration><path>insuranceVerificationFields[1].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7b5f3318-da5d-4107-8693-cbc7035deb25" name="groupNumber"><con:configuration><path>insuranceVerificationFields[1].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="339f81ac-23df-424f-8768-e354bad914aa" name="policyNumber"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bd35b669-1570-4dbc-a5ce-1fafcb28e0e5" name="payerType"><con:configuration><path>insuranceVerificationFields[1].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="320fb7f4-fe75-4ec6-8c68-218829b542aa" name="planType"><con:configuration><path>insuranceVerificationFields[1].verificationField.planType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="12662dd3-871a-468c-8973-68ce57823070" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[1].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f7c423d7-84e4-4218-9150-4f67ac7860ff" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[1].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7dad2322-b5dc-4333-838d-28a2f0c6b5a0" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[1].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dd1ec6d7-dcfd-4d27-865b-46dc7380798f" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[1].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="946fa302-4926-4a2b-a2ec-0ac215aacbd2" name="planYearType"><con:configuration><path>insuranceVerificationFields[1].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f28d6f7-de69-4927-91fe-8193754eacfb" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[1].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3ecc175f-9114-4a0d-a82a-088c191e4cac" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="128a4293-7dc8-43f3-a42b-6ff08c38bdc2" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2dbdf97-d5b7-4719-a07b-e4802021d84c" name="insuranceState"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6bf735f8-de01-4927-a0f2-4a618a4466dc" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="46f4a62e-9faa-475d-a765-cff43e105cc7" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.deductibleAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="38cb6d25-6e8e-40bf-96b1-d897d0f9f74b" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.deductibleMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8d16e23a-062b-48d0-9832-f8e522828c5a" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.outOfPocketAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69071d71-5eb7-4dbf-b76a-06ca46072bb4" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.outOfPocketMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="998f37f5-e6a6-4c9f-aab3-810b7e60bda2" name="inNetwork"><con:configuration><path>insuranceVerificationFields[1].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f7d0b8e8-6483-4a8b-b003-76c16eb5de39" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="566056a7-8a25-4304-a013-e9c961d0a142" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b5b54832-505e-4826-a6b7-dc0acd8ac47e" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="efc6aac3-515a-4c92-bcad-8cbd664a748f" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="126680f1-4401-4563-87b5-23baad9b75fe" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ac59053f-653d-4511-8a8f-820589320d79" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8d0cff82-e135-4256-8337-39fa059804e3" name="coInsurance"><con:configuration><path>insuranceVerificationFields[1].verificationField.coInsurance</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="857d97dc-ee61-4faf-86ca-6977d1710656" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="817ac136-5267-4856-bb5c-37d626e93bb3" name="coPayType"><con:configuration><path>insuranceVerificationFields[1].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="03082e03-b091-41f7-80c7-6a5b9e52aeab" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[1].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42039" id="608dd4c5-b8ea-4108-b426-bb534883ebb3"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42039" id="5c5114b4-7b03-4021-994a-e9912d86d051" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-09-19T04:48:33.000+0530"
        }
    },
    "payers": [
        {
            "id": "4F53484E2086",
            "planName": "B191"
        },
        {
            "id": "4F53484E2087",
            "planName": "B191"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="16960938-6489-4b52-b44c-5d47560051ff" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9953adab-3d71-4001-8af1-c1efe4989d66" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a958c8bc-4df5-4f5d-919f-bb7593954071" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>4F53484E2086</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="66c98ddb-90b2-44a5-98db-5512b03437cf" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9285e994-5ea4-478f-a057-44c8c2ecb7db" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e259eda9-5d45-4b3d-b971-9643ac9d6483" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="245fedfa-6e6b-4c59-9ef3-444b64c4eb8e" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="97a051fc-7861-410c-9908-115bbada9159" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9cb71770-ae6b-411b-aaed-26d2cd64fa38" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="435b666f-9c4f-42ba-a513-834ffb4699ab" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="26d30315-2442-4d47-bbb7-326a78d8ee78" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e6128c07-4507-48f9-b49e-87700d092efc" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f618810-8be8-48d9-a8f3-0e340445ee55" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="39692e49-22db-4698-8d73-882143492902" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="844226df-2a26-4fc6-9f95-0081b08bd80a" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be1d3549-0042-474b-9ff2-7ef21fca0242" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0f7356b5-84c1-4fb9-96a2-25642a31ae7d" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="edd5e4b0-c1e5-488a-b34f-f80ecd1957ca" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8bf510fe-24c1-4f44-af94-49ccb234db27" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2459fb56-631e-4108-a2da-3b76f176e60f" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7906177f-5821-4c91-b98d-16e0fac08ede" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3a911035-9a0a-427a-9976-b71d364200a7" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0fb1dcfd-df33-40f0-9d03-b5002f054c74" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dc70eae4-1b33-4284-bbb5-87d423a4bebf" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="95819d10-23e8-42c7-ad71-74e512413dfc" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="10a7583d-c96e-4a2e-b078-5c067b06e72c" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bee1ccdd-12ab-4e82-a494-48d3cf80127b" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a4f0a52e-5e88-46ee-a116-00062378b1f2" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d3e7adc5-2e7d-477e-9a69-c1468574ebd6" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cf252e04-89a1-4128-af63-8fc0d6026613" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7b5b375f-b034-423c-8617-d5cab0aa4681" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eab04b15-32f7-42ad-b304-7ea216d78351" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="74958ed7-614b-4f0a-a310-21d600b695ed" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bf6a084e-c0a6-462b-ab48-3a298566e424" name="lineItemID"><con:configuration><path>insuranceVerificationFields[1].lineItemID</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f4819c9a-0075-4468-98ab-f6ded801d4c6" name="payerID"><con:configuration><path>insuranceVerificationFields[1].payerID</path><content>4F53484E2087</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="261de00b-d68d-45dc-becb-40e846f1d67a" name="contactMethod"><con:configuration><path>insuranceVerificationFields[1].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dce67890-2274-40c9-91fb-8ac9acb68f79" name="groupNumber"><con:configuration><path>insuranceVerificationFields[1].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b283ea5d-7d51-49a7-b6f4-eff63426b238" name="policyNumber"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19862210-4e45-4895-9218-c1ac327ad7d2" name="payerType"><con:configuration><path>insuranceVerificationFields[1].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c69f3c80-a436-4c87-8b4e-45f9893b60a5" name="planType"><con:configuration><path>insuranceVerificationFields[1].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85f05b8b-e201-47c4-a45d-8f48a87bc447" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[1].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="35399a85-8a04-4bca-9215-e9a998124a5b" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[1].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d362f652-4ab2-4c18-86df-8a1689239a53" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[1].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="24458d2a-285d-4fc7-be27-33654e25a3c0" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[1].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a16642f0-8c2f-4005-9f71-6cdb36e4649a" name="planYearType"><con:configuration><path>insuranceVerificationFields[1].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cb4d5781-d4b5-48c8-a5f5-e5e1744ca532" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[1].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e5bf3c49-e008-429b-b2a6-111786656e70" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e3ffd5bc-86d1-4bb8-b7a4-ec5b50fc522b" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fc35fd5d-3ac6-46d3-8788-efa5dac99488" name="insuranceState"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7a4ffa7f-325c-4061-841d-405a798a3839" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6d3ac553-05b9-4f82-86fd-74f9d187b0f6" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a9b05dd5-5036-44ff-8af5-0967a3789e1e" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cc0329a9-4380-4d40-88ea-4b8dce56ef23" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b42e7577-ab13-494c-bc9d-2ee137aea29c" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42a6d206-5af8-4253-9cd9-44bf451a6db2" name="inNetwork"><con:configuration><path>insuranceVerificationFields[1].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6bba7154-baab-40fe-bc8f-4864fb14d52a" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f68b6270-fb33-4cef-bf13-7b84270e2a5d" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6b879977-5182-465c-9dd4-1b4906393ec2" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9c6293a3-92c9-4ba3-a5a6-e70a6058e565" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="282741f6-0db2-4600-b632-e8ac526d6733" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9d4d792b-f9e2-4351-88d3-7f2289e86832" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c21688a4-7e07-4b04-9414-96af07ea8b8c" name="coInsurance"><con:configuration><path>insuranceVerificationFields[1].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0fd84d08-f776-460d-b3fb-e814203ffc65" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b8cd2c78-e014-47b0-8492-709719342097" name="coPayType"><con:configuration><path>insuranceVerificationFields[1].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="023f1fa4-fd61-468d-8934-2f5f8b633dc2" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[1].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42040" id="d6a73887-ec44-4669-be54-22903c8a7dce"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42040" id="5c5114b4-7b03-4021-994a-e9912d86d051" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-09-19T04:48:33.000+0530"
        }
    },
    "payers": [
        {
            "id": "4F53484E2089",
            "planName": "null"
        },
        {
            "id": "4F53484E2090",
            "planName": "null"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3c618154-e790-460a-a2ec-5d6eaff149c9" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c055418a-c3b3-4f78-8c9d-057d3de1e8c3" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0e56dc2a-a2d0-4f36-8274-d29f1bc1850c" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>4F53484E2089</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d155d6b2-693a-42e8-b0d5-cdf7271d2c1b" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aea3219e-da58-44fe-a39a-5de1f33cbe4b" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9edffa05-a86c-4350-96bd-65862033fc8f" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c2a015ee-5eb7-4006-8ba9-74df6539da59" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef09fa22-9d9d-4178-afe4-448f1f937ca7" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="21c1c79a-74af-47e3-834f-d0473d811564" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fbea8e0c-c9d1-4f57-a8db-3db03eb7c480" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0e7a85e1-2503-42b3-abe8-577dcbc9571e" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d5a2c2b7-34b6-43c1-88bc-cf4478f6e7fa" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3da35fad-e957-4444-9e69-b0dddd627a8e" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="39f78d9f-d1dd-4f3e-b6d2-e91e18a5c141" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="77cf95e1-694d-422e-a3f4-8aeedbf259ae" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5ac06419-0fe8-4fc8-8987-3aa57f5a55b1" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81de5dc7-9eec-4555-b0b0-2714d60021b2" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="767983f3-8a25-4c91-8d3c-73e56a11e39c" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1eb2117c-083f-49d5-baaf-9f1b09813dd2" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="95e1e753-d959-413b-b05c-798c86de4d0f" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2725c772-0b8a-44c9-a607-4270b0d3e021" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="21182bd3-8437-4b55-a601-83747b34f3e5" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ca332ada-baea-4fe0-99fc-fc7be57d273f" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="73d2fc8f-eb6f-44bb-87fd-b04f7f93f018" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4f8b93e5-7eda-45e5-8727-a1dfca7ea56d" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e0f0630-de2b-4f08-b348-e2567a7f155c" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c77a83d3-d004-4513-8b71-f7eafe871098" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6f0bfdce-c994-4912-bc60-aacad04dcf15" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e4441c73-fc5f-4566-b08f-c584fd27c423" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="609b5e73-4f02-48ec-bbb6-37c17168f4be" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aa2d0ef7-0fdb-4cd2-aae6-ba0193041830" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4c42176f-53b4-45b0-834d-049d879b6973" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2602253-35ab-4ceb-9f71-2a1b835338ef" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="15cb2845-5bfe-4e0f-a19b-6e05f3fccbf9" name="lineItemID"><con:configuration><path>insuranceVerificationFields[1].lineItemID</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1577cb9d-d379-40c7-9a41-7f7526187986" name="payerID"><con:configuration><path>insuranceVerificationFields[1].payerID</path><content>4F53484E2090</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3e1d90ab-1787-4858-815b-48a52c8c1fc7" name="contactMethod"><con:configuration><path>insuranceVerificationFields[1].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f8acd50-5f4c-43e6-bc0b-52c6bb0fbeab" name="groupNumber"><con:configuration><path>insuranceVerificationFields[1].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2a1297dd-7c5d-4378-b6ef-9034f2826323" name="policyNumber"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="184ccd16-d71f-4181-baf5-2e9d3941912a" name="payerType"><con:configuration><path>insuranceVerificationFields[1].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e05f388-6fd2-409b-9009-918fcebc2814" name="planType"><con:configuration><path>insuranceVerificationFields[1].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8fd8fca8-596f-4180-80ec-621e551c53e5" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[1].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="88da45b1-5c02-4be4-9194-4f3a0e26475b" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[1].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="22197e80-6aa2-4d71-805e-57f413a94e01" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[1].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8527c4df-41ac-4161-8aef-3fd6d00f8747" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[1].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b2e471af-f5f7-4cbd-b892-fadde4402ad1" name="planYearType"><con:configuration><path>insuranceVerificationFields[1].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="db26c4e2-95db-4c65-9bfa-502ca1320bb5" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[1].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="726511cf-4684-4b36-8a88-b431f69267cd" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fa4433c4-be7a-4b0c-bbe6-fc72821ff42f" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69a1581d-7f2c-4859-b63e-4975b0ff4275" name="insuranceState"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3ba51eb9-bb57-4bb4-9ebb-3d7d9aa0e38a" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7f4f7df4-289e-4c0b-8dec-08b8c694e6e4" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="86336496-cc45-414a-bbf8-3b2d8782020f" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a3c23f0d-edd6-4c95-bfde-64caaa871bf4" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b56b0499-1479-4059-a2b0-b4d337252ca0" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="17e23383-566d-411a-833d-c279519dae6f" name="inNetwork"><con:configuration><path>insuranceVerificationFields[1].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9209053c-25fe-441c-9b0e-8e49a03a69d9" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="610955cf-dd5f-4e82-8526-7bc9579e7e1b" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b73428b1-06d7-4136-8f38-5271ba953e54" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bc2006eb-17ac-48bd-9aab-02548b9f2240" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="06173aa5-e5d1-40a5-bc7a-7404a24eba50" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e108b0cc-ac93-4fad-8609-ee59f9fcef2c" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d3d7f005-2fc9-4397-910e-93b3672ca247" name="coInsurance"><con:configuration><path>insuranceVerificationFields[1].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="332f9b98-02c0-41ba-9b5a-37cd3dbe5cf1" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b1f652c8-8a40-4d3f-b364-0d463c72f70f" name="coPayType"><con:configuration><path>insuranceVerificationFields[1].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef831b3c-ef0b-4ab6-ae22-55149d168778" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[1].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42032" id="8691561a-87c0-4cff-b740-0615cfccd14e"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42032" id="5c5114b4-7b03-4021-994a-e9912d86d051" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-09-19T04:48:33.000+0530"
        }
    },
    "payers": [
        {
            "id": "4F53484E2092",
            "planName": "9993"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="201e6954-a8cb-4215-a1e9-f491cca6c98c" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="01f223cc-e228-477d-b043-78b48532dd80" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1db479b7-2b9d-4c5c-b738-5f62c0a5f9eb" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>4F53484E2092</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="407fc45b-5fcc-46c5-8519-9bf0a49e784e" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d3e7f82f-e846-4118-aa13-411dab7d5c3f" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="813c833e-738c-477f-a7dd-a3bc4be0285d" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1930a10a-61cb-46df-bcbc-df43bc4b23b2" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e77ec79-f828-48d2-b539-23007f3d8ffb" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a6df61b0-1239-4e01-acf7-dc96b4c24e80" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8cac07fb-51be-4a37-b2a7-ccdeb1d4c263" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d5bbfcdc-84a3-4937-8df1-57b5bff8df43" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="90db9873-08dc-4c9c-9549-9269915f2178" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bd312ac8-a7a5-487a-8542-121a724be4d9" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5fd84018-24be-4f91-96c9-494053b0f5cc" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3e09383f-0c9f-4d0b-88c1-4e13314e3b44" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b8857848-7051-4dcd-8226-7a8dfeb8aa23" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a9f10c64-7bf2-4f7a-aa1b-49fbec37cc7e" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7b55f4fb-c8a2-402a-bb41-ccd83ea479fe" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f56aef6a-78bf-487a-bd5b-60e21b080dc7" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ca411f09-e863-49af-a714-5085aa0c9d36" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eaa7b167-3bfb-48f7-a08f-ca4682d468ff" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="79121d35-17bd-4040-aaef-eb5cdee80fb2" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e5e58ccc-7d1a-482a-974a-3f9bcd70e443" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="12912f6a-fea5-4fc0-b54c-fc6acf42c8fc" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="982a7912-0d2a-4196-8812-39af2d8f95e1" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0945e848-ffee-43cf-b507-f84f5df2aeaf" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cd8ddcc6-39ba-4089-b49b-e2fd85d51b81" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0d1d2d7f-36ab-4490-b247-5a95f8b02207" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f73495f9-1975-4047-b9a8-e8df2c53fb9b" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="600e93dd-41fb-42a9-abd8-0042fb177962" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2469be65-f368-4112-813f-c7ddb24490ea" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="62e790c2-e39c-4d26-8654-b3b5c9e2695c" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1a6a4233-6912-4fa7-ba9b-647673bb0b41" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42033" id="d502c360-3f84-4bae-a55a-f094309e77cb"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42033" id="5c5114b4-7b03-4021-994a-e9912d86d051" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-09-19T04:48:33.000+0530"
        }
    },
    "payers": [
        {
            "id": "4F53484E2097",
            "planName": "9168"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0242500f-8b95-4b34-9bfd-f688c76c9fba" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d4bba4f4-54d6-456d-a63c-b2f5eb13a927" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="206c407f-0934-4de8-a0d4-412a08d4060a" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>4F53484E2097</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="036244d5-2b14-424f-b126-aa634222d69c" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b78cc14f-7434-4f41-98b9-02131e4a88d4" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bc414e2b-a727-4d34-909a-928f82c09073" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a399d097-ca1e-4954-baf4-e03ab2041000" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f020719f-61ef-4519-b4e8-20261e95749d" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="960fbe24-9913-4679-a1c3-78b5b07539b9" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="004aa6f5-6cab-437d-b10e-dee8e7a12d93" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="685ebe50-2bfa-4a6e-ba93-c6ea55744579" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5ee5a9a5-7208-49e3-8a59-a57a3ccae99b" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="627dbdb2-3115-4679-b5f7-2f8280caa0b0" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="140c1803-22cf-41eb-ad78-9104e54007d8" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fb574ec7-4426-4f94-bfe2-b558823fc63a" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b8e277a4-a581-4c01-a116-30eca57f3185" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="30dd5333-8687-4a5a-bf57-da6c46bc56d9" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7ff3d2c3-87c1-4982-9970-a70d5b69c53c" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9c63f368-cf6b-408f-b7ee-679b3174b653" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e53788af-4393-4a84-a97d-2544ad76f03e" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f897ebfb-5bf0-4d8c-ae0d-a6b2edf07a40" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d146e36f-a067-4f8c-8f64-e13c0b77f6d3" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b362e943-1394-415b-974a-2ae7a3559d13" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2cb23696-877a-4a0b-a25c-b40ef9d5f050" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="61903a45-9753-40ce-8398-dd0286602eba" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1dbe471a-9013-40b3-8de4-7166ef8195b0" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="49f32d2d-f610-4151-b4cc-4bc3a389bd02" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a1c11d08-2276-4579-9cdf-8dfa2a82b190" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bf44044c-e33e-4442-9e95-f9055486806a" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="87211c5a-c430-4bd9-81e6-69616eb7301a" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e8c99c20-c34d-4645-b391-a3a89db1dbd5" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f0f3a29f-f677-4e28-834f-27861db486d4" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b25ec16f-f892-48aa-bda5-c6c08d50de9e" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42034" id="0be38d42-2a8d-4e86-92c1-eb6183ab59cb"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42034" id="5c5114b4-7b03-4021-994a-e9912d86d051" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-09-19T04:48:33.000+0530"
        }
    },
    "payers": [
        {
            "id": "4F53484E2099",
            "planName": "null"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c508fcc7-5fea-41f9-9a6f-359000868634" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="77eadc81-ed5d-4796-bd8e-2e979385eac4" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="710f256f-db25-4d57-8908-0aa9c7dada45" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>4F53484E2099</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="326335f2-51ed-49c8-afc9-a567fdd092e7" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bd08d8d0-4f72-4ccc-beda-bf6133da24f4" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2edefb34-33b6-416b-bde6-9024de7ebd7f" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="91d35e8a-f8d0-4202-bf50-7530a9f92c60" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="afeb30ea-d02b-4479-9a60-3b6351a83ac7" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fe7cbd07-9e4d-4203-8e3d-00172247b9ac" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ebc8636e-2567-437e-b261-be373ea94a2e" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="86540b16-1d20-4eab-8d1b-f1bbc2980fb3" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5f3704a5-5d5c-46b7-a2f7-1c73a473c78b" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e9d735cb-d056-4db8-94df-b8766f9ee113" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="62f58469-e43e-474f-8361-9ad4deae8e46" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e954456b-106a-4cc8-a60d-12a9c33f384f" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e8712ca-80e3-470e-85dc-e2d744681b59" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e09f3d1d-7470-46a6-9f09-25dbd2b668d1" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8acd7918-d38f-4c4a-988b-b9fa76c64ce4" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="80c9f1a4-3557-4abd-b1a5-d22d6e48b63e" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e690fce0-f53f-4f5d-833e-d3cac7baa3c9" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e5881fe-9735-4250-a076-20ed29723200" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0de66aaa-32ef-4659-9f5e-6333230598f8" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="206729e7-4e14-48cd-8d56-df0f5c4ccf51" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85094432-2cf7-49f8-9c42-cde2627b8f94" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85505a82-c847-4df9-a4d2-8e60ee35ab04" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="709fe0a1-c18a-4183-8935-b4b293faab10" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="997a7b46-e713-459c-bc5a-71968c7e927f" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="61ca416b-71d9-4f3a-9fa9-a0294ba3e57b" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="50167cf6-9072-4e7b-be46-1c401b67db45" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f5374baa-0283-42a4-bd54-e8cca4190ec4" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5d4ee652-ae26-49ce-8fb4-f6ea1cb94ff7" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c4f59976-c62a-4a14-b31e-8932842bd264" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="89a48f45-cee8-4bb9-a889-d5187e5579a0" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42035" id="64da6c63-15d2-4f32-b5ec-8d368c1a6555"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42035" id="5c5114b4-7b03-4021-994a-e9912d86d051" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-09-19T04:48:33.000+0530"
        }
    },
    "payers": [
        {
            "id": "4F53484E2100",
            "planName": "B191"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bacf3d41-4893-40e3-b201-952fc7c182fc" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="df9c0c18-3069-45c8-968d-177134919106" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1eb0f425-b260-433c-b33a-351613a0f672" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>4F53484E2100</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85138cec-c1a1-4c9b-90e6-666f3b354e9b" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bec0caaa-46bb-41d5-abc5-434404f9159e" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3e42c601-8516-4cc2-b058-2d0ecfcd6812" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bd34dbcf-295a-42de-b6e1-4c683ad144a1" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="49e45fac-bb40-43bf-a4db-0c44464413d3" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5f312383-2b0e-4d96-9c03-ccb20c3a5c35" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="75858690-1323-41d6-82d8-77ae9a616935" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b152f6b0-c391-4907-ab03-c4d0c29b024d" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d10144c6-4f45-4936-8c9e-7b2d4f5c7865" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3041cbc4-eec0-42fe-9d05-db7e68202ef8" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="77f766ef-3f7c-4bbf-ab8b-1285cd1b0a21" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e746ae36-67f3-46da-979d-92c23bbafcb5" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6be91cc6-5c57-4516-8612-83e9fb5d5726" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="94e742fe-0f4a-4db4-b0db-b2cc173e6ecf" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f45fefa2-1b9a-4702-a381-d67d6d7ac0a6" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="373024d4-4701-40b2-acb3-3bd768030a3b" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="41e95f01-03b8-4ffb-9739-eb95d173b916" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c2297aa9-d84d-4e50-a43f-68fc817b8349" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a3b898e7-cd32-41b6-bb3f-b40aafd4d12e" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c6ea3985-1b20-4852-baa9-1f31178c6af3" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b71347b9-2c0e-40df-bb56-cda045ce9d4a" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e65c6a35-96b2-4580-8a38-ffbce8d0df5e" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ec686275-5e04-475a-aafb-915960c39a67" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b15cfde4-fc90-49fe-8c1f-6a5c5e375d4f" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ba64156b-3af5-497a-96c8-491b379ef73f" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="70b11eb5-e930-40bc-93a5-86e5cea8773e" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="daf8766c-199c-4361-952a-81d7bed9a151" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f59b42c1-9210-4447-9fe2-f9bb2ddc8bf9" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a85b9769-4cbb-4bfa-8674-7168ba0eeb1b" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1355868d-75b5-4998-b9c2-c57acb16a419" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42036" id="8cb62c62-d02a-48d9-9332-3f0076db40ee"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42036" id="5c5114b4-7b03-4021-994a-e9912d86d051" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-09-19T04:48:33.000+0530"
        }
    },
    "payers": [
        {
            "id": "4F53484E2101",
            "planName": "0098"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3ae3e754-08cd-41a7-a666-86ca7ce47e08" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cac30f3a-4966-43f8-99fd-97d76659e1ab" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0e40f59c-7e66-4566-9ad6-b1cd867b7457" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>4F53484E2101</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7f7548df-5795-4cfe-b598-64745085f52a" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2474d662-5578-4634-a251-bd727fed5f31" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8c5dfcab-72a9-4321-9727-c30742083a51" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e7d6cb18-62f8-4d85-ab71-a33ca809e7b7" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8ed45e12-ec4f-41c9-b66c-b663d49c1584" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9b5280f7-4cb2-4715-8e65-3b6286c3eb71" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4fc346e3-a6af-45a8-ba44-4b79162312b8" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="38088dc6-6f59-49d9-84f1-d810ed0478d5" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cb9ec753-6fb8-4d0c-9ffa-f0ab39aad201" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2bc333ba-6839-421e-8859-3e82f2a1b636" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="607be637-d62c-4d81-a320-416f50b01690" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b4248b59-e23b-4c58-b1ab-9cd03bde0f41" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfcfbe11-aa51-4f3a-a7b5-7586840aa518" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d23f47cd-2505-46af-8443-1ca4e9a7f801" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f67a8e8d-2efd-4316-aead-9552a4771daf" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c018729b-73df-4e3a-9fdf-872e60b7a923" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="10ded737-f70c-4ac5-a108-4a1b26cdb6d6" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d8280118-b22c-4c70-b255-a4c1272fdac9" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="713a2ba0-f198-4abe-86d1-046bcf1705ec" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="74736585-4e95-48e0-9e6d-ac0d1f9516fe" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8a3961b5-8cf2-47b6-9d78-56e4011a531d" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8a85e4e7-04e4-4b78-957c-97d625400385" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="49c7a85c-14d9-4ce3-b373-461efb0dab47" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9eface9f-01d9-494c-806e-4499ef7e82b7" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4d4705a3-55b8-4994-be46-b7ea0e9c5668" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="12780b4b-204d-4820-9771-4c34e9eefa35" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="329f8d86-4cea-47ea-913b-527eb4523bdd" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1fdcc670-5375-46fc-8f3f-e378d5162a4e" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e5384288-3207-4923-9656-8c2f3d2b1faf" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="93b0b1e8-70ca-4832-8473-4285f30e5282" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42026" id="65da6d44-c635-401c-8c6b-285224638f99"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42026" id="c68db7a1-9c35-4880-b24d-c2a800d69b6e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "dateOfService": "2018-01-01T22:07:00.000+0000",
            "lineItemID": "0001",
            "payers": [
                {
                    "financialResponsiblePayer": true,
                    "id": "3F5862084",
                    "planName": "6277"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Breast Pump Unit",
            "productSubCategory3": "Breast Pump Accessories"
        },
        {
            "dateOfService": "2018-01-01T22:07:00.000+0000",
            "lineItemID": "0002",
            "payers": [
                {
                    "financialResponsiblePayer": true,
                    "id": "3F5862085",
                    "planName": "7118"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Breast Pump Unit",
            "productSubCategory3": "Breast Pump Accessories"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="77711cd1-85d6-47a2-9be3-419a302c4062" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0896c26f-7023-4ae1-82ac-9f877ebd7312" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="da38cf07-b2f7-41aa-9bd8-b3ca23effa55" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>3F5862084</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b03a5cd-8cd8-4705-a635-1a0c11a13f6e" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="45dd1a5a-1a46-4be6-a5c3-c83033a89323" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5f1558a8-f4d8-490b-87bf-945bf5464ac9" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9e56f699-c0e7-4b86-bca3-66c0c9378cb1" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ad0ef55f-9c40-4baf-9988-0b01c6fdb0be" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04351d1e-7ae5-4b31-a61f-1e580ef83aa6" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2dfb5490-374f-465b-90ac-6f53a9c8daa7" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fac90469-3a7f-4b95-af3c-0233b7bda725" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b3a88add-a996-4aed-af1e-bafeb2926544" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="77663682-5c8b-481c-8907-2cdf30a49352" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bbd9b3bb-30ab-40fa-86b4-90a6355f3af1" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9fcb86b3-acf2-48af-80fa-84198c49304f" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="197eda7e-c9cd-4b98-9e7f-640de8ca6240" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7386c320-ef04-44d3-8604-acfe1c937b59" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="290ebe4f-2741-42e3-9373-700f34dc9ec4" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="58b8387c-eaa2-4e82-9fa4-92890b9b3e87" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="25cf7433-67a7-4337-87da-a9ea543f3185" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c87848f7-48a3-4a25-9952-ae3ff1bc5bb0" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c167e7e8-e6a3-4e1c-97ab-22476fd00c8e" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b80801a-064c-449b-ac7c-78a15238293d" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1a6262ad-0c81-43fa-ba3e-3a6556d1cf32" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dd67258f-cdb5-462a-84c8-02375fafbb26" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b2bd1c84-6d69-4955-888b-8d25fe26069e" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2330880b-2719-46a0-becb-3d79fc74bc9c" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85ba17bd-9493-4ab3-94ac-2d5ed174e252" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="148a2a4b-00c6-4db0-b460-9e470ddfd6f6" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2004975e-4027-4395-9b9c-37232e89d57b" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="102634ca-9644-471c-9b85-014275ce3f4d" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="083ff3c8-32de-4af9-9879-6d9b09fa8da9" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="24d8bfed-496d-47f7-b5a6-24fb3d0392c3" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="75e4ad5e-7289-424b-9f38-d13addf8774f" name="lineItemID"><con:configuration><path>insuranceVerificationFields[1].lineItemID</path><content>0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b6421713-dc14-4bae-99ba-01d126946969" name="payerID"><con:configuration><path>insuranceVerificationFields[1].payerID</path><content>3F5862085</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3551e7e5-92d9-42cf-9da7-ea0af4cca882" name="contactMethod"><con:configuration><path>insuranceVerificationFields[1].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bacb5191-ab03-4112-90f7-6e29e55dfaac" name="groupNumber"><con:configuration><path>insuranceVerificationFields[1].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="09a40e68-7767-46dc-a2ac-9b344599891f" name="policyNumber"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="52eef8e4-a0de-4ff0-aaeb-165225fdab5e" name="payerType"><con:configuration><path>insuranceVerificationFields[1].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="da6347b3-5c0e-4769-a3e2-9d00265a82a1" name="planType"><con:configuration><path>insuranceVerificationFields[1].verificationField.planType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="63ed0b31-50dc-41d9-a9c3-ff234f5c0598" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[1].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a9c7f134-4fc8-41f7-8cc9-c0fc32970a25" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[1].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8076321e-f7c5-4155-864b-711cf2fd7c90" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[1].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="62337508-7f2a-4069-8cbc-7c44f8528ebb" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[1].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f35205ce-0fb3-4e3f-ad40-70f2f55a9087" name="planYearType"><con:configuration><path>insuranceVerificationFields[1].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d3692e1-43ba-4cdf-9131-144fabde983c" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[1].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="00eb1afc-e26b-4c38-aa55-664764b8cf59" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9da1677f-5731-4398-8af7-1692b0393d94" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7dc7eac7-4537-4a9e-8292-3e6eeb123adc" name="insuranceState"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="105728b1-9122-4dd5-9b74-02f203ee7af5" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e345fe0e-5ba3-4b28-9233-cb00eb18ca8d" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.deductibleAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4cb8efb3-181c-478f-8fed-913ed763fb33" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.deductibleMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f8af175-f8b8-4abc-a420-67ed89bfa9c7" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.outOfPocketAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="41d9ce5c-ac41-4868-b4f4-9c5867d0c34d" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.outOfPocketMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="da903aa4-5840-4a45-864a-b6e0bee35620" name="inNetwork"><con:configuration><path>insuranceVerificationFields[1].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="52ac3067-4a26-4506-bb7c-f579adab1cfe" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2d999794-981b-4905-b72e-567131864738" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d76fe2ad-4cc4-4414-a6f8-93c72f2def6c" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5095f48b-af56-45ac-9f5d-e40719449a75" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="78b30961-78bc-4e0b-9e49-59f2f4d7e867" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0d320be2-87ad-4c8c-8bd5-6bd4b571fa29" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="376d6cea-73a5-4f1f-8ed6-b68b34aedc09" name="coInsurance"><con:configuration><path>insuranceVerificationFields[1].verificationField.coInsurance</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f99901ec-8fb8-48ab-aaf1-b86c187ea4b5" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9778a403-1dd5-413c-8eba-345060253352" name="coPayType"><con:configuration><path>insuranceVerificationFields[1].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e56deb73-68be-4f97-a588-b126858112e4" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[1].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42027" id="44ea250e-0744-40ff-80e5-9ecf8a71f758"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42027" id="c68db7a1-9c35-4880-b24d-c2a800d69b6e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "dateOfService": "2018-01-01T22:07:00.000+0000",
            "lineItemID": "0001",
            "payers": [
                {
                    "financialResponsiblePayer": true,
                    "id": "3F5862086",
                    "planName": "7118"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Breast Pump Unit",
            "productSubCategory3": "Breast Pump Accessories"
        },
        {
            "dateOfService": "2018-01-01T22:07:00.000+0000",
            "lineItemID": "0002",
            "payers": [
                {
                    "financialResponsiblePayer": true,
                    "id": "3F5862087",
                    "planName": "B190"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Breast Pump Unit",
            "productSubCategory3": "Breast Pump Accessories"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2d5d59df-5f3f-4a8a-afdb-0fce52bfe80b" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="72171af2-4e61-4603-b2f4-72633aa27b7b" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="23182ab9-4602-400c-aa62-ed734eda7259" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>3F5862086</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5eb40004-291f-4f06-9af2-c20829b7c67e" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9e627007-42d3-4f9f-b353-350e42a0b233" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c61164df-f212-4aee-a1e8-e99e97770ea8" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bf1c1ca5-29b0-421d-b5ee-8ed6e395d9b4" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="45e85eee-736e-49aa-a2b4-9f383705f032" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d47557cc-02fb-4e0e-8e84-2fe2d536f32e" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81614212-11df-4335-9d1a-9a23b569dcf6" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c41164c3-e09c-4fc6-98ed-4b8a70d37a17" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8be613a5-f209-41f6-94f5-33d335510daa" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8866b4e3-6ce9-453f-8f51-dbfc71f9bcbe" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fb6a3a8b-64cb-4444-b89f-7fdd25d84ef7" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1bf307e6-ee4f-4450-90a2-89c314d671bc" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bfdc9631-083f-4015-bb12-6296bd11001b" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="52a854dc-271a-4b5b-bbd7-cca9b44a8e1b" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d9b302b-9eee-4e78-aaeb-a5a52c22b6c0" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1c98b018-1fc0-4344-af12-aa873473ae91" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="321943f9-5f60-4e49-b10f-db55b444c8e3" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="30d1f31c-221d-4c02-9e9f-f4feaf1aa391" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d94940ce-746b-4429-9553-aaa1fb7bbf4b" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d570dd73-ec0b-447a-9d54-b5aa486f6e1c" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f093f16f-f081-4d17-a476-e0567d49f572" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="73eeec9d-1ec9-47bb-8317-cf867a9e3d01" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="473b3e91-0c2a-4743-b192-3e12f25145fb" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="32acd6cf-99d3-4f9f-917a-f24296098568" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8603286d-4864-4651-9854-f92cd60625d4" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c400381-fd33-4579-82b7-2885dcd4f034" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1376d133-340b-44f2-9175-d3ee7588df41" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3f4a1aa9-0ddb-4c77-8b54-b9059a6ffeda" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1a66678a-2566-48d1-a099-8e46b2494021" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a838af02-d7e7-4e81-98fa-00054841ee83" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5399bc9a-363d-4fc6-933e-a897242541cf" name="lineItemID"><con:configuration><path>insuranceVerificationFields[1].lineItemID</path><content>0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfac0dd2-1f8a-42c1-bd7a-b0a1dba8110f" name="payerID"><con:configuration><path>insuranceVerificationFields[1].payerID</path><content>3F5862087</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c379337f-1139-4338-9531-7c490d52ef8b" name="contactMethod"><con:configuration><path>insuranceVerificationFields[1].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e4009fe2-6a01-487e-b8a6-3ff8191f88cf" name="groupNumber"><con:configuration><path>insuranceVerificationFields[1].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cb929353-ce48-4bda-a84e-edfcb4b7e1c2" name="policyNumber"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2171b40a-1e48-4e3c-aa48-5a59b71e977a" name="payerType"><con:configuration><path>insuranceVerificationFields[1].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d8246ded-d587-48ce-a345-5cf3829f0777" name="planType"><con:configuration><path>insuranceVerificationFields[1].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="90151778-3814-4b82-aaad-aeb6b38e4d70" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[1].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4b376d5d-f0a4-4fad-9f88-52b9f2589392" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[1].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c10f6a6e-6d91-40f3-a171-4b4db0b543e2" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[1].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="96d0930e-0b15-432a-adca-c6e2e0d59d3c" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[1].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7a054e56-2020-4131-b211-a65a905e367b" name="planYearType"><con:configuration><path>insuranceVerificationFields[1].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8124db6a-e0b6-42c9-88cd-4de9efd8cf06" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[1].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d3205b4b-abaf-4649-a84d-2cfeba5ceace" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a4c45fbe-2b64-4cdc-9562-da641c2bd3bb" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="66320fd4-5bda-4205-8e89-9b125bc5b6ec" name="insuranceState"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="14659958-01e8-4c61-8420-3af9fef2d6de" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="308afc90-e95d-48ec-9dff-fd22cf53194d" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="71724ef7-ffd1-4864-a25a-547477f72ccf" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f01798f9-4edc-4c53-a876-7352a8d933a7" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="334e38e6-7c8b-4a72-a006-a5d11270af9a" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a58f1369-4270-4237-9232-3a33e0a13d60" name="inNetwork"><con:configuration><path>insuranceVerificationFields[1].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="49a1b66e-78e8-4e21-9888-a3d205619c4b" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e84a8089-b24a-4bd5-86fc-4f65f9d17b94" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2dd32f3-9130-48b7-959c-0300e1d2d822" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a55b0a8d-59ba-405b-a97a-d829aeb9471d" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7e2ae258-5cf4-4b85-8122-6ea4fda57f56" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4ce4ead8-05a5-4490-846d-d4c40d3945d7" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f8ec7714-c962-40bf-9e80-7e3a49b71a92" name="coInsurance"><con:configuration><path>insuranceVerificationFields[1].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b3231255-71ee-4168-afe3-73efad8df229" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="58180fca-8d92-45c3-ba5e-4106df43b061" name="coPayType"><con:configuration><path>insuranceVerificationFields[1].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fbfaa98e-c433-465a-8779-1b3493d8188b" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[1].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42028" id="78cf40e9-a0b5-44fc-af99-211688f7d97a"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42028" id="c68db7a1-9c35-4880-b24d-c2a800d69b6e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "dateOfService": "2018-01-01T22:07:00.000+0000",
            "lineItemID": "0001",
            "payers": [
                {
                    "financialResponsiblePayer": true,
                    "id": "3F5862088",
                    "planName": "B191"
                }
            ],
            "productCategory": "Breast Pumps",
            "productSubCategory1": "Breast Pumpss",
            "productSubCategory2": "Breast Pump Unit",
            "productSubCategory3": "Breast Pump Accessories"
        },
        {
            "dateOfService": "2018-01-01T22:07:00.000+0000",
            "lineItemID": "0002",
            "payers": [
                {
                    "financialResponsiblePayer": true,
                    "id": "3F5862089",
                    "planName": "B190"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "Breast Pump Unit",
            "productSubCategory3": "Breast Pump Accessories"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="92a575ff-848e-4ba1-81a0-b973cd03e8eb" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c67ef549-f396-4231-a95d-e1a6ef1eb67d" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a7ba2d83-274c-4141-8785-0b67a4ca26d5" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>3F5862088</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="72a84ba1-e675-4084-8a5f-2aa6658629c4" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dd7e14b2-8fa7-4c40-bd6d-216bbacadc6b" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="abfa4445-5df1-4585-ba82-fd2f801753a6" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="294182bf-058f-46bc-87d6-0cd2ac335a47" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="89fbbc9e-b097-42d8-aed0-de73ff979065" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d076191d-b2e1-4a70-899a-1a3f4ad8b47d" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5b21aae1-3024-4b24-b58c-4954d78591b6" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="375fc86d-6102-4683-9f02-e01fc4683d7c" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="12065cd5-5efb-4613-b03f-15a169f47762" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f33921d2-f4a5-4767-b20c-1290042af1d7" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f6b89fcf-a700-47b2-9f82-8f0ebedd9e9f" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c01eacda-b152-4064-bd9d-2d46ced86c18" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d803388c-0671-4ae6-abde-c6ad13433c7a" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="72c3165b-1f0e-4f96-ae13-41b6a7a15989" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="97664bb6-145e-4d80-a8ad-e3d72033b994" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="009ae0af-5f5b-4f01-80b5-6cfebf77877d" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fffea21d-8011-49bf-b8c1-0587bbe76101" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="426148d0-9392-4778-86b7-1ce4319b9ac7" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0208c18e-f5b3-4934-969b-e2b65b0184d7" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a82573f-3347-46f5-b232-fa95f40fb5f1" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7115b694-9c56-4721-92c7-1780f6d495d6" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9483d42b-4614-45db-90ff-5432d9fe9c0a" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9e6617f0-6d31-4787-ac86-e4ae7b0c3693" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="53439a10-dec2-4e4f-afeb-2fdefd550e5b" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dcfb35cf-3ced-45c4-acb1-daaaa5f14a47" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3a4eee18-49f2-467c-87fc-94275fa44425" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ec350ae9-fe56-4843-8389-585d00667e9e" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aa22b5fc-9dd4-48c9-84ab-aca1fd08c84e" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="14f2efcb-1dea-4189-b949-173793b75aa9" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b2a8cc6e-6c4b-4475-a0fd-f67fe192f4d2" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d59153bd-9935-49dc-be02-5c70636b9424" name="lineItemID"><con:configuration><path>insuranceVerificationFields[1].lineItemID</path><content>0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c2fd159f-7702-459a-b124-e9fae0fabe2e" name="payerID"><con:configuration><path>insuranceVerificationFields[1].payerID</path><content>3F5862089</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="809c2561-9e48-456b-a7a8-93bac129fe1d" name="contactMethod"><con:configuration><path>insuranceVerificationFields[1].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="00094950-6c41-45c5-a3e4-278c8307b593" name="groupNumber"><con:configuration><path>insuranceVerificationFields[1].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a02b25ae-9217-4ab9-84fc-75f6bbb19baf" name="policyNumber"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5a79df34-2a42-4c35-a2e7-29b2fe6d34d5" name="payerType"><con:configuration><path>insuranceVerificationFields[1].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be45ba9d-8a1b-4a80-a40d-dc1ad0301af1" name="planType"><con:configuration><path>insuranceVerificationFields[1].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3ea7f9ba-a5aa-4122-bc80-82f605b59f10" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[1].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1183bb49-c44a-46fa-9e08-b2220ab3e175" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[1].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6c4d58df-7d33-4687-b605-6d489cc016a2" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[1].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="47b174cc-f73d-4d72-8a79-25f0a551db06" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[1].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c95a533f-95d2-46cb-b498-49d5827a2e52" name="planYearType"><con:configuration><path>insuranceVerificationFields[1].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04f6e70c-e7fa-4adc-bb95-98e58a8d3390" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[1].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d0e4b231-933b-40d4-aad5-aee2ca065db0" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c39ec938-862d-4e5b-9ebe-91e4dbc75b26" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f98fe89d-44b3-4c1f-938b-26f0f8092390" name="insuranceState"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7690b1d6-8aa8-4104-8e76-2a8d7a898396" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="170f365b-02d2-478b-99f8-503eadb2d725" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="913a071b-238c-4fe8-b4c4-e321358ac68b" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="45688116-14c3-4a44-9691-ca38c6036de6" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8f17960f-d955-4c4e-b1f3-1c7c19f8047e" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b2b42721-cea6-4f37-b6ce-a04e6826bb47" name="inNetwork"><con:configuration><path>insuranceVerificationFields[1].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c6eb126e-ee53-4c9f-b753-f1335b6e0370" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5f36bc19-a899-41a8-9408-353d9aa34d76" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="de369c2c-65f2-438b-bbb5-c81a4d283307" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c2fe320f-220d-4c15-8eb5-e1b022e121b2" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ffa20daa-7271-4550-9292-47940f69da17" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="194b284d-9f52-4f21-b72c-81cbc221830f" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="76e91682-c09a-491f-9bf8-257d8a68b330" name="coInsurance"><con:configuration><path>insuranceVerificationFields[1].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="72e53f9e-08fc-4b36-ab99-32da78fb7e71" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="080e20b5-d45c-49f9-b9d2-e2ffca36451b" name="coPayType"><con:configuration><path>insuranceVerificationFields[1].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7ae882a1-e42b-4bdc-a186-7dbe47315f53" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[1].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42029" id="2676c197-1c49-4812-b25d-0e9aac5dab55"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42029" id="c68db7a1-9c35-4880-b24d-c2a800d69b6e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "dateOfService": "2018-01-01T22:07:00.000+0000",
            "lineItemID": "0001",
            "payers": [
                {
                    "financialResponsiblePayer": true,
                    "id": "3F5862090",
                    "planName": "null"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Breast Pump Unit",
            "productSubCategory3": "Breast Pump Accessories"
        },
        {
            "dateOfService": "2018-01-01T22:07:00.000+0000",
            "lineItemID": "0002",
            "payers": [
                {
                    "financialResponsiblePayer": true,
                    "id": "3F5862091",
                    "planName": "null"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Breast Pump Unit",
            "productSubCategory3": "Breast Pump Accessories"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="147872f2-2ae7-45e0-8d6c-06dd209d04e1" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0a4cbd60-dc7c-47cd-a8bd-cabd1b51773b" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c54e64e7-41ea-4302-ab46-6527c7fa304f" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>3F5862090</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fb16430b-8838-454c-a8e2-fe1443b59044" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0466e204-23e1-40d4-a273-45960812d693" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e618b95d-a467-4001-a18a-7f0a72ef4855" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cbf0381d-b60a-410a-adb9-500c95ad6ba2" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="93a0d4da-fce5-459c-a509-833a117f7f4b" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bba99376-b86a-4a99-8254-df9139242487" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1bb25e6b-c0e7-49c9-9469-6df742230c19" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a512f6c2-0530-471d-ba7b-83f939a4fa78" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0d9e30d8-2dc1-40db-98a8-63b04f08a1b4" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="728ed79d-46ea-42ff-99f8-b89167c58169" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="64521161-0146-4375-bbb2-551d65c6d2ab" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9c650c48-c99c-49ec-a3ab-ab4c52793ff5" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9ad97d97-efb4-4596-b578-240981c6ac88" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="df195f37-e1c9-4873-a807-8ebdf2c181bb" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6836a8fc-f365-46ea-80e2-d3a322685c06" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4424bff1-3617-463b-8b56-72b382bec077" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2258a67d-1b0f-4b52-83a9-cff8977b07d3" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a480d429-f349-47b9-bab5-3336a80d58b2" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8357a3a3-1c21-44ed-a12d-1423edb5d0d0" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="40d55827-ccbb-45c1-a7d4-5af2a958315d" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7c6c2aca-e45d-47d6-86df-f2fab337a291" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2bc7e916-d4bb-42cc-b8a9-c394e41da4f2" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c076df60-cb51-4b4e-b2ab-bc6218bc375e" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="de43171e-28f2-4115-8235-a697f9deec98" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9d2dce23-86c1-49b1-908f-9d7ad5fb015b" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="298ce803-038c-4753-8c82-49af87c7db50" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d684f4d4-ec4c-4c84-a538-9a9c93bc3e20" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="038dd140-1cc2-4751-ac08-d4a22c6e8251" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d91cc2a0-3c2c-451b-8f6d-9d2c4260e304" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="107823a1-de20-4299-ac6e-c08778bf730d" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2d891acd-b29f-4472-abd5-bb6e85e25e24" name="lineItemID"><con:configuration><path>insuranceVerificationFields[1].lineItemID</path><content>0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fe064e1b-49b4-425f-90bd-3a53108b2797" name="payerID"><con:configuration><path>insuranceVerificationFields[1].payerID</path><content>3F5862091</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2a6084f-ef0f-4b29-930b-c32e5c51d817" name="contactMethod"><con:configuration><path>insuranceVerificationFields[1].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a3dbd040-dc72-448f-8335-b222fee98d9c" name="groupNumber"><con:configuration><path>insuranceVerificationFields[1].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dd2afdbb-7266-49c6-b65c-bfceb8c1a612" name="policyNumber"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0f7dced-de6c-4449-ac13-8ce337ffe21e" name="payerType"><con:configuration><path>insuranceVerificationFields[1].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4ecc2fa5-7169-498c-bff9-1ed617f5962a" name="planType"><con:configuration><path>insuranceVerificationFields[1].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eecc58b1-8004-4a92-97a1-63257cf885c7" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[1].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="12fd3202-e9c3-499b-80df-db5fa655e733" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[1].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="02945084-0341-4943-9309-1786f46027e2" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[1].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e522293b-aafe-4ce7-be29-44427296dfe0" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[1].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7b13056c-f1b7-4154-b622-7e679e3cafa0" name="planYearType"><con:configuration><path>insuranceVerificationFields[1].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e6ad66da-6d08-414a-a02a-12cf62b40de4" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[1].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bff170ad-447b-447f-9730-1d9428c811d5" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0c36e1cb-6607-40ef-9fc4-e54d49f82a23" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d974c0ab-b6ec-4a04-8de0-1166e85d70ca" name="insuranceState"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="77338ad4-fe69-4420-b132-943bd0af7a08" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9bbb7bbb-d548-484e-aa7e-0d5f241aa7e9" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9c309377-dedd-4d73-9a95-e2c3ac2c5464" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7014f02f-5278-4d8e-9213-565bf798d924" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a4cca58e-f1a5-4bd6-951a-6841df7a62a0" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b9618b0f-ec18-433a-b812-3a50efb59a8d" name="inNetwork"><con:configuration><path>insuranceVerificationFields[1].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1ccb84ea-fbfe-4c35-b523-6c44ab08827e" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="09f921d5-d8bd-4ba9-9431-25ac7b64956d" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8ceca6c5-383e-4bdb-a385-dda04c8db4f4" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dc5ee84b-aaaa-40ba-992b-7107c174d1b2" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="30eac91c-204e-40ee-a91f-bcb0591317a9" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aeee4d2b-3cb2-4d01-be43-9326dc999eaa" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5de07549-2446-402f-9965-2f3820102205" name="coInsurance"><con:configuration><path>insuranceVerificationFields[1].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d9a6bb5-c01e-484d-9f6c-8c08cd4178a7" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3fd9698b-1487-48a2-885f-59e319a0fbfb" name="coPayType"><con:configuration><path>insuranceVerificationFields[1].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b07ba0c0-e61b-4aa0-970c-2ad956ef04e7" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[1].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42030" id="1b937fa7-c697-404d-9f00-c867f76d6fed"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42030" id="c68db7a1-9c35-4880-b24d-c2a800d69b6e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "dateOfService": "2018-01-01T22:07:00.000+0000",
            "lineItemID": "0001",
            "payers": [
                {
                    "financialResponsiblePayer": true,
                    "id": "3F5862092",
                    "planName": "7400"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "Breast Pump Unit",
            "productSubCategory3": "Breast Pump Accessories"
        },
        {
            "dateOfService": "2018-01-01T22:07:00.000+0000",
            "lineItemID": "0002",
            "payers": [
                {
                    "financialResponsiblePayer": true,
                    "id": "3F5862093",
                    "planName": "9168"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "Breast Pump Unit",
            "productSubCategory3": "Breast Pump Accessories"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ecce46c2-530b-400b-8470-aaf41932f09f" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="434f3f39-d015-466d-801f-ac9a1f5dab9b" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="91fbecf7-5279-4acb-86ba-49ff3d49cb31" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>3F5862092</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="227b9460-08a8-4bbc-a618-40b5f46d23ed" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e0899f54-1069-441e-b381-129a939c895b" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e688ce90-efca-4b0d-94dc-5fdc12ea5293" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e5a6ab91-295b-4e0a-a5f5-fca563d7431f" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="581c1770-0735-4024-8f04-b865b3180567" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0f3c6b8e-ea46-46a1-9f39-91afb90def2c" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cc717ed4-5973-4cf5-b4fe-b21bf069aca2" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="754ccf9e-7da3-409b-be9a-bb2fe8b50553" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8dc0afc5-8b2e-4025-b854-c927b734215e" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3a823a51-d2bd-4b18-9777-f56aff27bf5b" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="72290c6c-40e9-40f9-a728-ed5f35f80ea4" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cd5033d6-ffc2-45bf-a00e-e764b59b99e1" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="18b2f1ae-658c-4eed-90d0-09947e3c9a77" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="72e4eb15-3cb6-453b-82e8-9fa749337940" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4e434b7d-4e45-4293-9f08-2175d55c2e3d" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="87e51975-fc66-449e-b683-50d0bb0b5589" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2d8b6cd0-8f69-422f-a64f-911e0f006767" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d6def955-add4-4675-8905-e6ad23a13cc3" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81af3e69-a615-46f9-84b9-23133f9cfab6" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04c0fc80-add6-41e1-96d2-7e9782250c9f" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1e42472b-d9dc-4f9e-bb78-76744ee613e9" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="332f68c0-8b26-45d5-8bc6-5f97fd61e8e4" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="868c377a-22d7-4928-867b-3fa99f82b810" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6b5eff3c-e723-47b6-9dfb-b6f2d5e0e51e" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="18734191-a2e4-4bb5-aec8-40532215a593" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="72ac71d5-a633-41f1-b80c-16d6f0b76cc3" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="89faca8a-4f6e-4e8b-9b6b-7bd5952c8557" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ab13476f-c106-4585-a38e-ba627fb95f8c" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="739234b6-be81-4805-9956-0ccbf8651c0f" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eeb84bd6-6998-4d90-8f94-f1ea4e8ff152" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bfc49030-14c7-445b-9cf2-92ecdd9b2bf0" name="lineItemID"><con:configuration><path>insuranceVerificationFields[1].lineItemID</path><content>0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dc6ac0d7-5328-45ad-89b0-54c0f7277f6e" name="payerID"><con:configuration><path>insuranceVerificationFields[1].payerID</path><content>3F5862093</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ab764e0a-e75e-4e2f-a516-f599889f133e" name="contactMethod"><con:configuration><path>insuranceVerificationFields[1].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9cb19477-cd26-4194-b958-becfabc132e2" name="groupNumber"><con:configuration><path>insuranceVerificationFields[1].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f0f1f09d-7de6-4074-9192-6998dc48c532" name="policyNumber"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f70694f-2dc7-4ca6-8094-25ef4bf54cd4" name="payerType"><con:configuration><path>insuranceVerificationFields[1].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="048dc677-d94c-4409-9bca-cadde2dda88b" name="planType"><con:configuration><path>insuranceVerificationFields[1].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bd554011-6664-4af5-89ce-9b690913859a" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[1].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e81e584a-22a5-49ad-8463-dadce90785ca" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[1].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f30d0c79-8d44-40fd-bbac-3aadf9ed9968" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[1].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b3b10b3a-2b57-4418-9644-c882b6d9f3bb" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[1].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f2cc093c-b141-4a4a-86f5-e60f72dc9311" name="planYearType"><con:configuration><path>insuranceVerificationFields[1].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b01e1f90-cbc9-44de-9278-1faf8cf4a34d" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[1].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bc7e0fd4-6f17-4ce2-b94d-f86f23c1c169" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0633eb6e-a017-4115-95f0-bfe91e6cc830" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="944c2d10-b2b5-42e3-be28-a8a66b45cc43" name="insuranceState"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4481c4a5-a4bb-4ebf-8ec8-ca20b3c5d875" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2a83b412-1c12-4bbe-b13a-5dd8c633ec05" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fd1f55ea-f465-43e2-b315-6ca786fa1273" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="220c09c1-6c65-484f-b430-59bc027039c1" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef089fdb-dbfd-4890-b2ce-86f56449f452" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0f44437c-597d-40fc-b422-b06da2b4d665" name="inNetwork"><con:configuration><path>insuranceVerificationFields[1].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="181b535b-2ab5-4d3f-a339-f084ca3459e9" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="17d25aad-1994-47f9-af26-c3a8f4d2e4a9" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="763b8327-a803-4934-9fd3-242719ef35a1" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4d2aaf3a-b7ee-48bd-b67f-a7e16020286c" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="10d60b8d-d25b-4c68-92a3-45fce411730b" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0c5f624a-7251-40ff-bcc4-b371bb701725" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b3f5214c-4104-44ec-a2eb-16f1fa4fc4bd" name="coInsurance"><con:configuration><path>insuranceVerificationFields[1].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e3287da3-0574-4e05-810a-32a6e07763bd" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="663ee894-0ea5-41ab-b623-83ed134e7e26" name="coPayType"><con:configuration><path>insuranceVerificationFields[1].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ae849884-2956-4004-ada3-d5e9082abce6" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[1].verificationField.pharmacyBenefit</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42031" id="87668f21-5a87-4f6b-8517-6ac32853cf84"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42031" id="c68db7a1-9c35-4880-b24d-c2a800d69b6e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "dateOfService": "2018-01-01T22:07:00.000+0000",
            "lineItemID": "0001",
            "payers": [
                {
                    "financialResponsiblePayer": true,
                    "id": "3F5862094",
                    "planName": "9168"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Breast Pump Unit",
            "productSubCategory3": "Breast Pump Accessories"
        },
        {
            "dateOfService": "2018-01-01T22:07:00.000+0000",
            "lineItemID": "0002",
            "payers": [
                {
                    "financialResponsiblePayer": true,
                    "id": "null",
                    "planName": "7400"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Breast Pump Unit",
            "productSubCategory3": "Breast Pump Accessories"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e488c452-eb63-45c4-84f9-15b230d3c980" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="959079c3-ec6c-4ffd-af8b-f673f670e82a" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b25b1150-2aa3-4ab2-96a8-6a457aa144fd" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>3F5862094</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ac614d99-b95f-4399-a480-573cd068e57a" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8b2b0739-208c-476d-85e3-b7426cf3e6a0" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a9438689-e0e9-404c-9065-b14462110325" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="70599a11-7653-4f03-bb76-b71c9107f307" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="40f73db2-9d8e-4673-a5de-3176f1e22f81" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="919391bc-25cc-41e8-a592-e79c71c97645" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2536e6c9-a600-4bca-9bee-f96cf6e01759" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="38d8b6b6-e2a1-4db7-a060-92531cdb5022" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b59b192c-65fe-46b1-8943-2c71703e4488" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="39893cea-730b-465a-b0b7-20e349bfaa9a" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="82e6ea4f-2045-4f98-ad2b-45def9d976a4" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6ee35a4b-10e0-4af8-bce0-ca987b87f23c" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ba530c38-a6d1-4090-8625-e63fc852f5b8" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e174affe-d58c-482d-b199-5d509b2a7d4e" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be4648f2-f9c1-4b4f-b3b1-7066abf60c3f" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="982a7703-1f19-47da-9a0a-5c2aa897e7d4" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9a76dff6-a103-4b76-884c-5991e83b772a" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fb74dccd-b207-4ec3-b120-08176e5fa17c" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="82651a60-1140-433b-9a6e-3352c1b02d4f" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="25584e68-9fa7-4acc-872b-cf573cee5524" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c719bbf6-b27e-4d35-b333-dab91e7eb31d" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="68c1e8c0-1011-4406-ac86-d1fed6502bd7" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="72e986d9-7530-475e-be03-90939e431014" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2cb3e73-8632-4242-80c7-6d309186f18b" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="597061ed-af30-4df6-8de9-bc34c3b62432" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6bb0de49-dac4-412b-a4fb-079177bd6626" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="32994c79-4dea-4620-a174-67faede808a2" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="497bab1c-b2ae-4473-b9b7-0d1dfbc50528" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="43fbb972-0096-4142-af31-8c28e68b2068" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="553bf796-fd68-44a5-8c17-9a7ce2269d43" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="87c2fb36-9509-413f-840d-200257fc93b9" name="lineItemID"><con:configuration><path>insuranceVerificationFields[1].lineItemID</path><content>0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c42437f6-de0e-42df-b0ed-12632f4b9b35" name="payerID"><con:configuration><path>insuranceVerificationFields[1].payerID</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6954727e-f162-4c3a-925e-a47461da19a6" name="contactMethod"><con:configuration><path>insuranceVerificationFields[1].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1e1dffbd-8a42-4b4a-8848-4165c52b7246" name="groupNumber"><con:configuration><path>insuranceVerificationFields[1].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8ebd3554-e915-4499-bff7-02a21ae600db" name="policyNumber"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d55231a3-c770-4101-97c9-c5c484ced54d" name="payerType"><con:configuration><path>insuranceVerificationFields[1].verificationField.payerType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="037fa31b-849f-49fb-9b8e-cd03d90809dd" name="planType"><con:configuration><path>insuranceVerificationFields[1].verificationField.planType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7106f41e-5f3b-48b2-a8b8-fbf04e2965e4" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[1].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e90a1cb2-d63d-4038-925a-9863c47bd155" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[1].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="abab0c08-d8e2-44ab-a430-6f0cf2654028" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[1].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9ce9ec41-f4cc-4a0c-b79f-16943b53da14" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[1].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0ac4946c-1199-4a77-b1bc-40927f46b833" name="planYearType"><con:configuration><path>insuranceVerificationFields[1].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ca0a89b4-c9fd-4480-8ffe-a680196573bd" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[1].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="15ccc6a6-0afb-46ce-953d-6e80c7155df4" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b39e1c7f-f517-495c-a1ea-c5db89b28752" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cc7310d8-11c6-49b3-bed3-fda52f634999" name="insuranceState"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f0c28bf-bec8-4045-b6bb-b7962246d290" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[1].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a38696cb-05d6-4047-8280-d67eebebd34c" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="89c782bd-1580-4ce5-ab24-48ff5a788dce" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e9ca00ed-a95f-4a83-9c13-c8f00260cea1" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="465b121a-042e-497f-aaf2-4715b6c1fb4b" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="adb92d77-7fae-4d93-8315-cf3704868c52" name="inNetwork"><con:configuration><path>insuranceVerificationFields[1].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be01c260-701b-47ba-bb20-f89cf1d08215" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dcac1c57-b531-4350-ad8f-8f6e6ad43ca3" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c12e8584-1410-47f0-8fc7-9a623471bea7" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8c3c8235-5aa0-4eb2-a83d-a72a489756da" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[1].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c3ea9ddc-3462-4016-8d2c-28a927b6e123" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="866b7c7a-03eb-4c1f-8e25-06fdb685c5d4" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[1].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="76fa8b74-56b7-4dd5-82ba-805799e00f93" name="coInsurance"><con:configuration><path>insuranceVerificationFields[1].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="06a0a260-38a9-4478-8e21-fe854ac01d5a" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[1].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dd82b60d-4087-480f-8c49-22c4caf2a690" name="coPayType"><con:configuration><path>insuranceVerificationFields[1].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="182a135f-935f-4352-8dd4-e6aac05b5f53" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[1].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42016" id="2bd6a76b-65b2-4a12-b805-4ad8890d50e5"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42016" id="c68db7a1-9c35-4880-b24d-c2a800d69b6e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "customerState": "TX",
            "lineItemID": "0001",
            "payers": [
                {
                    "id": "3F5862194",
                    "planName": "6399"
                }
            ],
            "productCategory": "",
            "productSubCategory1": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="03fc48b6-d0c4-4fd6-a1fd-61a8b8cdb728" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a41443e0-dac2-45f2-b591-239e4508e448" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81decf56-3c5b-4046-b060-73e6133e455c" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>3F5862194</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="75bf5a66-9851-4ed5-b3ee-516ab10304b4" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="069d717c-9b55-4837-b9eb-6f1b84b790fe" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bf1ae294-1f08-477e-b1fe-dec3208c14ae" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="033c1e1a-8b72-4a96-96cd-6e4a90951400" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d03c51a3-38aa-43ef-82e2-44ac77bf7a33" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="98ff7bca-8522-4e48-96f3-8416375a840a" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1dd34b95-95c7-4ad4-9c72-997d584268c0" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="df34c31f-5db0-45ee-99c4-8616dd7b15b3" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7bb62dc3-187e-440d-9f2a-b77261d7ca9f" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4129f2e2-be0e-4c76-9582-4d24b4ad2fcd" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="49e5ac2f-09fa-4b33-b33c-bccafba21a35" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2897c632-aeed-4f26-bd7b-c48a228b63cf" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2a3bfc73-9a0a-4217-83c4-cd2d811278eb" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="058ccc31-c0b4-40c6-bb16-fc949625e65f" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b4f62e58-8a21-4cc5-9094-8a7e7885d174" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c0f631b2-4f42-43ee-8142-eeb2bba9822b" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="353800a4-e09e-4299-aefa-1cca437dbd9d" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c380e9f7-dde1-4515-a097-b89a58fd2429" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e5894d6f-3f42-46f9-b74b-bfbb904a0780" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1b2da811-f2ab-43b5-8e10-1470b12a36ca" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="71b06b55-0b28-45fb-b850-74d70636c8b2" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e33431f6-2498-4970-9ffd-806f5af4c354" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d549967b-0a09-4c54-9ce0-b228dcb3fb1e" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7d25f8a3-1256-458d-9586-095407f87014" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c50d49f0-c61f-4de5-9042-49a6a534627c" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3cc4cbae-505c-4285-b504-9408eca42b76" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a16b9f6a-f69a-4664-9649-455f37020f3c" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b98e58dc-7b11-4bab-a0c0-effbc730bbd8" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfb56949-ef2d-4dcd-a6ab-767a3f4420f1" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="14afe721-45a1-4024-8ab7-ba69ac0d4f37" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42017" id="5dcf0fdc-787c-442e-81ac-b861df4d22a9"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42017" id="c68db7a1-9c35-4880-b24d-c2a800d69b6e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "customerState": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "id": "3F5862179",
                    "planName": "9168"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "Diabetes Testing"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="951d0342-2977-4a94-9e8a-abb33c8948af" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ccc8aaaf-1558-4b4a-bd4e-1b525be646d6" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1a8f184a-4e17-485c-8023-def587b064c1" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>3F5862179</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e3b6a93c-dd9e-47a3-bc01-3828a3ed4ca4" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a92e0870-e00a-4753-a480-29174d251ba4" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="60ae6f60-9c39-47b2-9c0b-42c0edc802d0" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="afdd5428-b35e-4ac4-ba05-d3c585db8ad8" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2f18d09-8fa0-42e3-97e0-882428a2534f" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3e8d1483-e519-4901-b77b-c36f41debc5a" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e62892f-1449-4d6e-8d1e-17bf5e270e83" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f4c69173-cd39-43e6-b103-f84e6a5cc0d6" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="46c36f9d-54bf-46c1-8d03-70e2956c583a" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cf630fd9-0c19-4c75-af44-ca807d0f837b" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6c9511c3-dcb9-46f5-ba14-e330b5577a3f" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="76fed524-404b-4f30-b7ba-f1ca94ab337b" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef77bd15-3a99-4467-996b-bb26e159171a" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="15fe9e54-833b-460e-b4b5-a99d7a8292ff" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f57f1402-cfe8-453d-95a5-aba32edaf5bb" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1da60a80-d7df-4391-a49e-1f0c1c8f2d4a" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b494e669-0295-492a-b05b-f88521f1afb8" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce8e27d8-c070-4ec8-ae06-0d695ca10fa2" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7c84617d-d9c5-4ff0-af73-fc2757c1b324" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="70abffb3-d85a-4440-9cb0-047d4fd22c00" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="750bcddf-b642-49fd-bac6-04156cd13bbe" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="52bf82e6-8a49-40f7-9ddc-d5be432dd408" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8d371695-1675-43d6-a4a5-ce25fdec1e49" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bff89797-e95c-4419-836c-9b3bef9b6ddd" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b567f10d-0fb5-497d-ab6e-6ea4cda2501a" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="24412369-1e16-4e93-9b2d-55ab575e6ff3" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5afd1568-494c-4510-8fe5-65ec9cb10c2f" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2ea746ff-4763-4496-9fd0-76e3d29aeefa" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1906bd27-ba66-4c99-b19e-dbac9c734ba1" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5e6dbfa5-becd-41a1-9404-6ca5c2136536" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42018" id="568a46cd-ad69-4e97-99c3-40236085ee74"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42018" id="c68db7a1-9c35-4880-b24d-c2a800d69b6e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "customerState": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "id": "3F5862181",
                    "planName": "8124"
                }
            ],
            "productCategory": "",
            "productSubCategory1": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b98a996d-1f3e-4560-a6ef-98fe2a9ec2a0" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b98bcb15-13af-41be-a834-d2b56f76f166" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e53e34ff-3e85-4427-b708-e1e4fe7fa7c9" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>3F5862181</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bfd6ea5d-a77c-4162-b18d-44f3b4a0c7e0" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4174625f-326a-45ee-9b10-cdfaf133024e" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31eebe38-5e79-4b33-9fbe-409d8dbff574" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="21ba755a-8b19-4d71-89a3-244c1eb6d832" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="83732b40-5627-49f0-9e05-b2278a0104ab" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="11883714-7a6d-48d6-9841-3533225f5571" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4e0d5567-4b20-4af0-a418-2c32ba412be4" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="845e5b01-d40a-415b-a116-be6126bc39e0" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="090fd9be-b8b9-459e-a3fd-dfd2efe65890" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="36d4b50f-0319-40e4-9269-a6b04b32e263" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8123c068-d524-4744-b7de-ae383d341052" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ad609a40-4570-4660-90a2-e7c8194fda1f" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="da94bb2f-38a6-4dd0-9bea-de9521494f51" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="348b18b9-c5c3-4f70-8afe-ed2cff108dad" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="08669864-7769-47a2-9661-18920329f7b7" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1dbf95b4-2f29-4ec5-b216-2d6cbb7a5eb9" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4446b21e-a25d-493a-8ecd-5b75bee5bab4" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="657eeb09-ae46-42c4-82e1-124c65e8cad7" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e5b73e25-4d6b-4976-a246-79f1de581d16" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d1b0a017-3fc5-462f-8ad9-1200b196d8d4" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="de94f315-0383-425a-b466-6d4292bf03fb" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d4286788-51b0-408c-8804-4a78cb518169" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="51a79296-717e-460f-a39f-6fbb7a181cdc" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b09bae53-578d-4d32-bae5-a3fbab7e50c0" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e057495b-4027-4003-9ee1-290228683f82" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b2e1eb69-779b-4cfc-b5bb-8d8e66ae9daa" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31ca6e0c-4b51-4e5a-a11d-101a85d83457" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6673e594-717e-4b5b-9897-994cb514c191" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="18293ccf-fb49-4730-8060-814aa6f59e02" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="83193c07-b8c0-4429-ae11-37475f22955d" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42019" id="d5008aa7-6716-472f-af3d-8e78576302cd"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42019" id="c68db7a1-9c35-4880-b24d-c2a800d69b6e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "customerState": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "id": "3F5862185",
                    "planName": "B191"
                }
            ],
            "productCategory": "",
            "productSubCategory1": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="55fffd0e-3a1d-4a7b-a2e6-4d9ddd562089" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a42fd38e-11f9-413f-b12e-bb6288a95b8f" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c8a01ff6-5214-471b-9958-34472de3f1a0" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>3F5862185</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f084de0f-0e64-4f71-952d-872272cd5b2a" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="961db8c3-e7d8-4ca3-a198-8ef83791a9a3" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b80ec3e7-76cb-4376-9dec-f8608ec2765f" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2fc0a49-97fa-4e78-9d96-b77a05b88cbb" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ee8b152f-8da4-4e6b-8a54-c18f20d0f391" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7f1c14f-1f58-40cc-8ce6-66987ef16b31" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9b246fdd-1b1a-4458-825f-1ea68a8a6a91" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3451cc3f-5364-4f8f-822a-e190287e7131" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="38e10ad5-8447-4fa5-b59e-c261d0facddb" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8eb63f51-51a0-4327-94fa-3b73413a36fd" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55d89c10-516b-491d-a86b-588a30fc8a41" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0a61cb71-36a3-4bd5-8381-ebcf86143c28" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f1e0667d-4eee-4e59-8a53-c6e8878854d7" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="71115a51-ba8a-44f6-a16e-28fcc2ea91b9" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="34c810de-becc-424b-9edb-4fedce2e241d" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4248d7e5-8294-4e7f-9ac5-5a56863ede07" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e32aed4c-11b5-4082-92ba-d6f9d5a3dfb7" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c1fe2ba2-95a4-4b3d-8d04-acc61bb05435" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7c330012-e671-4fd4-990a-60642024bd97" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9e85792e-4414-480b-abc1-81c24e85c5ac" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="80b10d7f-ae51-4fe5-b012-3a2a8c0e736c" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f3c0e125-3f7e-479b-9cd8-d69619a78a17" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0ea4e569-7951-4241-a9ac-f4d2ea3ad8e0" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="70189a60-61c8-4e1c-a09d-d856a98d19f5" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9eed6045-126b-42fe-8d3e-ac5622b703ca" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1531256b-3e73-4622-9860-0c79f8903eba" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c979a39f-5fcc-48bb-bd48-aacb47cbaaf6" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="09fbace0-f4cc-4882-9272-967ec4f412cd" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c3470464-6e67-47e0-9f78-5d8a3382b02d" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="65e4f160-b400-4516-aa78-09652f9f4c05" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42020" id="8ad9ff6a-ac3d-47fc-8c17-0f73839112d8"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42020" id="c68db7a1-9c35-4880-b24d-c2a800d69b6e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "customerState": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "id": "3F5862097",
                    "planName": "null"
                }
            ],
            "productCategory": "",
            "productSubCategory1": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ec8ce24c-9ab4-4b82-816f-2dfba9138e05" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0cb80e09-d1f7-4e69-8b4d-e35c18828abd" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f33d11d-e9c1-4ce0-8870-75e97088296f" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>3F5862097</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f1c78fbf-796a-4cf0-a685-e63bd8b266fb" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="89ea33eb-65f7-45af-bc2a-e0776a29e66f" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31f920f5-ed81-4f6c-8d56-df2710370ba5" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="007430e7-7ebf-4206-9d7a-3e6ede3715db" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7d83b8bf-fecf-4ea7-9308-002245353858" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ea49b5d5-1edd-4afd-8698-fff1652273aa" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5ea8a3fe-62c2-4c41-b220-07f11c6799d3" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="12827582-7f5c-43dd-a8f6-49b69e0b1537" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="abb88610-479f-4ad0-a136-4eff4ea8ab3c" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c773873a-64d3-422a-94cb-cb6b83fd41b9" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8bdeefd1-af6b-462c-9cc7-0d454da76773" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cd1b33e5-c170-4c2d-ae82-ba3af34850e0" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3e08e4f6-93c6-4d86-9436-eec33cb9820b" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a4baa047-2daa-4293-b565-884b6aa40ef5" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f250d7ca-531f-4e08-af50-8a8129ce6724" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="15a89ad1-26ba-4e63-9367-afe2d3f1b135" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69cc641d-6361-4622-8461-68e9e2d6aa6c" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a9797e17-1eb6-40d8-9e1d-51ad649de8db" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2508cb4a-70ee-402c-9c08-6c0ea9100a70" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1344625d-8cca-42d3-8690-877f94238ffd" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="00559a20-ad52-4820-bd6d-290b2d5bf92a" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7fda1cfa-d482-4f92-87b7-5b6c4e2d67eb" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f177bc0d-fe8c-43d4-a280-1c3e94187db0" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b07a4982-3d4a-407b-b07b-c450f36807f1" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a8149946-f794-446a-9596-448259ba3502" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="03c6dc09-b2f7-4517-b80b-c0f8daad933d" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f93a62a4-c25e-4352-8967-2f33eaa3da39" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7ffa9ebc-379d-45bd-aef0-c3fe9a644709" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="68afcbde-c4f5-4c46-98db-2984d36801e3" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4d6de10f-c082-4a43-85c0-3d32836a243e" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42021" id="f1f7f221-da37-499e-ae91-70aeb839e77f"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42021" id="c68db7a1-9c35-4880-b24d-c2a800d69b6e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "customerState": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "id": "3F5862099",
                    "planName": "0001"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "Diabetes Testing"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e0a0b432-faef-4786-9c95-2257af72198c" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="53f4e569-69a1-43e1-abb8-4caff912031c" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="032e497d-303f-4f3b-9e1f-3d239d33a235" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>3F5862099</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a106f52c-d435-47e8-928b-23b0a601ea40" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4147e22c-8eaa-4ec8-bdb5-771f3ff39f9c" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eff56087-efb6-44fd-bfab-e44168530ae0" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b96fa175-3b76-4565-bd0e-10e8d18fda5d" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="35e25bcc-8b0a-4eed-966e-50f253b24c53" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4b8a32ab-2454-4a61-ba09-cbb80b2960fb" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81ae40e7-78c3-4dd7-b3c8-6c2fd327b236" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9b37cc2f-99c5-4af5-abfc-447199d28521" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="87f066b3-b4a7-4f19-95b8-78eeb6051e1d" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5f4d39af-86f2-4b44-b672-b3c74c597d90" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d248980d-f53c-442e-95dd-6967e984ba5f" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eaaf49e6-62a8-46a9-9cd3-85e37737ebea" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a4fc29d2-370b-453c-9224-9c677fb678bd" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e02cf51b-1320-4bff-b8fa-f6144e65c8cd" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3899970b-4abf-4085-b947-ae96ef449a20" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b80c2197-3c37-4a65-88b7-2e93c2f22619" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b8b40bf5-9cac-40df-861b-152d01bd4784" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6233c001-5a61-485f-80f8-cda2f39f0878" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e90ac5a-54a3-498d-99fd-d8a049eb56a3" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1373ca3c-e34d-4da3-a948-d02dd0e711c7" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fe78e9a9-02b0-4452-bde2-61d3780b0861" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef49773d-a1e3-4973-8984-52713f61d6ea" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="429d9844-5f50-43f7-91c1-7f1bda43e1fe" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bd81e0c0-b6d4-4ea9-badf-f4c4f6fd046f" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f0330f3-e512-45b6-b943-aa7686a62a7b" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4ddc49b6-f33a-4391-9ae7-652f61595287" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8087a963-cc2a-4da3-8745-430dcd3dbbea" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4f38a2be-6d65-41ef-89a1-4e6d1a9e9f85" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0700b275-0ec8-4517-88c5-33f142f236fc" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2cd2505-7876-48db-ad2b-59a83523f478" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42022" id="14a462c1-897e-4e97-8d80-bb18d7d0a95f"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42022" id="c68db7a1-9c35-4880-b24d-c2a800d69b6e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "customerState": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "id": "3F5862182",
                    "planName": "8106"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "Diabetes Testing"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8863723b-5b21-4b45-998a-dc9deafb1e85" name="Valid HTTP Status Codes_8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7276c432-2db8-4c6a-8c19-a30352c86db7" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d6b54a4b-b3ce-41ca-bd6a-a4f8cddbcd81" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>3F5862182</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a54fcc49-f430-45db-8eff-df8531b20794" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="433261c2-f46d-436f-8899-7707e7076540" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="05006ec5-49d2-4262-be89-a5adf96329bd" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3bfa2a7b-6c16-4b36-a201-4d647cbb97ee" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2beeb001-4b93-45a3-a5a6-9171535d67f4" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d98ff0e2-5873-439f-8ec6-f2274378def6" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d6c06a54-3c01-43b7-bb2b-bd6bb29d4ed9" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eb0781f5-e648-47d0-8104-058df0ab3298" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d6de4cdb-d959-4255-979e-6892e891f208" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9455a3c5-5ada-44aa-b818-a22282a6c851" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2638e07f-7ee0-4d66-a02d-e79afdf4e19b" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a070f6d-e1f3-4064-86d9-539d89539ed1" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7f4cbcb7-7648-43a8-8b48-af2749dc4c20" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="636a1104-0bf2-4fc9-9519-01b51110d751" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8811d4bc-cb0d-48ab-9bc8-f127d8081114" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8346bc9d-043f-443f-ad14-6a2df36f2391" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8ba66485-66fc-48ca-97e1-e63679bccd36" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ffbe7a93-7923-4433-ab81-d84c6cc7e944" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="27764ced-584a-4787-8b89-032d930a66c7" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="39ee030c-f97a-4843-ad0a-71b597b2e6fd" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bda2ce96-db5f-4496-bfef-9edc679b6fda" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aef6fb8f-45ca-490d-ad6c-d77b3a28df8f" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c2292499-8000-4779-9794-838cff456896" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6c352a06-a43d-4522-bac1-c9deea5da64a" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b17b2312-e67d-4a06-9df3-f71d54f07d64" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5131de6d-ef22-4519-b3f9-933ec4c16767" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9e46b9b9-4513-401c-8e09-86c5528fc5dc" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9c95c4f2-c964-4ba4-ac11-cf39840024d3" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e6800243-6ff7-4135-b02a-1e352fbe2bb9" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6f6c3d7d-7c7a-42ae-bb40-6cbb42152503" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42023" id="82b092b6-b79a-4f47-817b-74b3906848e4"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42023" id="c68db7a1-9c35-4880-b24d-c2a800d69b6e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "customerState": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "id": "3F5862187",
                    "planName": "9168"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "Breast Pumpss"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4fc4907d-10f4-491b-b15e-c6a318cb842a" name="Valid HTTP Status Codes_9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0ec1b679-1da2-46c7-8979-0c7c61d005e5" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="63b2e9a0-371f-465b-8c16-426edfe8611a" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>3F5862187</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2cea73c8-7152-4e23-a59f-6ee893f46472" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fcbb6511-1ad1-497a-b887-a49fdae4c6f2" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce968faa-60dc-431e-b0e0-9ce02eff43a6" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e97332c3-d6ad-40ad-8a0b-5985b24f08b2" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="21a33356-8d9f-4e7d-89bd-03958e93f51d" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="719ec04e-d1d6-4101-b6a2-598d32fafae8" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="20e04978-36a9-4135-86f0-602dafa59902" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="25fff854-c085-4b14-bae5-12fe30aa8b63" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ab51a6e8-6734-467b-918d-80051265a38f" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4114d822-e98b-4cae-a296-f1eede6d7858" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="26d6f118-795e-4478-acf6-74c4aba81806" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5fc3c953-aae5-455e-a348-c9e928a062ca" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4ecda812-7c6b-48cf-96a5-2fd2d1cfb648" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="77d76b7e-d351-4b4d-82a5-bfe5f74cef18" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6884c985-18e6-46d5-a8f4-bf0429133758" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="75b18b2e-7465-491a-b777-c8845786543e" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cd4e4088-9ec9-42d7-819f-49b784756290" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f335667b-068e-4e6d-934a-8798f47426c1" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="836fd209-8277-4003-ae55-cf2f7c4a17a4" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="73bbaee8-c946-450f-b38d-b5fbfe6619fe" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1099b28c-3dde-4865-8560-5dba67870b55" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ed7db606-ea07-4b55-b6d7-9feaa627e9e9" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a02240ca-f966-43b6-ac84-a2f44846dc62" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4ce24dec-c3ad-482e-866e-ca25418839b0" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ad594119-bd39-468b-b19b-1a2a4abd1b04" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9d835316-62ce-444d-aea7-4d20399298d4" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ff9ba6d8-59ff-4c25-9884-74f1edd6684c" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1b877057-f001-4b3a-a514-0c5703db5947" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c70a8ddc-4178-4f8c-86d5-b9f46f3ad21e" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="62333b80-0de7-4024-a54a-22cfa13751cd" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42024" id="0c1281d2-bfd9-45be-a42a-86dbdc6a7f87"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42024" id="c68db7a1-9c35-4880-b24d-c2a800d69b6e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "customerState": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "id": "3F5862188",
                    "planName": "7400"
                }
            ],
            "productCategory": "Breast Pumpss",
            "productSubCategory1": "Breast Pumpss"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="634fe3e0-4c73-4b35-9abc-6881a1cb5a1a" name="Valid HTTP Status Codes_10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f393e63-b2de-4919-8558-eb91b1aaffc9" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="de805a60-4dc3-4540-bc0e-cb7e2fe99688" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>3F5862188</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="789a459e-04ef-43a0-a06a-c39a6bc9be30" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2b9ca962-c061-4794-a2d3-059e195cfa75" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8f68bff5-a8d8-4b1e-84b0-21c25faf1716" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dd4798d2-a83a-475b-85eb-be4219695297" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c7ba3428-5987-461f-86c8-31da03978fcf" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="deaea126-259b-4d7e-be1c-664884329232" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5e7e4ec4-cdd6-4102-8a3d-b042742198ed" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1573b45a-b2b1-436f-8f17-6a4652e4ee48" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="667797f1-770a-49d2-9896-4c7af9ee992a" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f0eeb4ee-df25-4864-8af0-094987184ca5" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a7886adc-3705-4f81-b14c-f8dafe80d572" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0260919d-0a77-4621-b2d8-6ffe1a0ee478" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cf724ba2-d515-47ec-a2e2-0d6fe5358dc2" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="316365ec-c549-4206-9f76-8789c5af0435" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="30cf5bdd-5c65-42ed-823f-3deabc925aff" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1cb1dd28-f2ff-4c6a-ac8f-25ecfd2d200f" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6f030a2e-8adb-4575-8dd7-02a001b73a4a" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2632d170-5a84-4ed2-99ba-1815fb3535c4" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bc3a50d2-62e1-4981-b99c-1b2bc1102085" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a62e6f39-c4e4-4612-9fdf-e32742b892fb" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce1e0ef2-b9d7-43e8-8c79-4adef433b975" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="721e50a0-f83c-4070-9ef3-f868d6797f6d" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9fdca3a9-74e6-4de4-9f46-de0ed2c839db" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d9802328-07d0-42c5-822a-a380bc2a62c6" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="113f9d86-0c88-4ec9-90c3-17cee1751312" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8bf8efab-ba8b-411b-a78b-a65316e337cc" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ed73f409-6262-48ed-aaac-8665f5039c4a" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b1a1bae7-44bc-412e-84fd-73f4704da94f" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b8f172cd-207f-4b68-a2e0-85a2c99fb8c9" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f63eb16-e957-45bc-a781-e0437d00bc99" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42025" id="6939e072-401f-49e9-b1fa-023135aae49f"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL" methodName="DetermineInsuranceVerificationFields" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42025" id="c68db7a1-9c35-4880-b24d-c2a800d69b6e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "customerState": "",
            "lineItemID": "0001",
            "payers": [
                {
                    "id": "3F5862189",
                    "planName": "B191"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "Diabetes Testing"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineInsuranceVerificationFields/DetermineInsuranceVerificationFields/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="848085f3-f5da-4bff-82be-c93bf5d08b0d" name="Valid HTTP Status Codes_11"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a109bbd6-abd2-446d-b143-e59b593354e2" name="lineItemID"><con:configuration><path>insuranceVerificationFields[0].lineItemID</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8892279e-cbc3-4da3-95e8-57abfedc4e1b" name="payerID"><con:configuration><path>insuranceVerificationFields[0].payerID</path><content>3F5862189</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5e9bf92c-fdfc-4de0-b8f6-26954197e008" name="contactMethod"><con:configuration><path>insuranceVerificationFields[0].verificationField.contactMethod</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e154c371-c393-46ad-a8ab-84572bdf52eb" name="groupNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.groupNumber</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="47fb9af8-74f0-4fe5-8758-d3711137f8e1" name="policyNumber"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyNumber</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="26392af2-3c4b-4182-8c6f-b9730db7fe69" name="payerType"><con:configuration><path>insuranceVerificationFields[0].verificationField.payerType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="01aee386-802f-42f6-bbd7-83ad6418db92" name="planType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="257b29e8-ecf5-4a21-8def-e70acc34ffc4" name="medicalGroup"><con:configuration><path>insuranceVerificationFields[0].verificationField.medicalGroup</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b25406e4-4d90-4d4b-a762-f7c422e997de" name="effectiveDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.effectiveDateOfPolicy</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1a717f4f-a843-445d-89bd-029c15154d63" name="terminationDateOfPolicy"><con:configuration><path>insuranceVerificationFields[0].verificationField.terminationDateOfPolicy</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="829e4d53-2c9b-4d1a-b961-7c6923b138c9" name="planYearStartDate"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearStartDate</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="327edd31-890b-456d-81ba-8fe8fa23049b" name="planYearType"><con:configuration><path>insuranceVerificationFields[0].verificationField.planYearType</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8b12cff9-da5a-4bb2-aac3-dbb55fc05ce5" name="relationToPolicyHolder"><con:configuration><path>insuranceVerificationFields[0].verificationField.relationToPolicyHolder</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d9e3aaff-8e26-4d23-a24a-d08d7de8493a" name="insuranceStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceStreetAddress</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5bf55676-6f5e-4457-b312-9b7bcd7c0e21" name="insuranceCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceCity</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1be6f74e-de66-4f3c-96dc-7ed89cccf33b" name="insuranceState"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceState</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="575fc8f0-475f-4c70-a64a-41281439924a" name="insuranceZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.insuranceZip</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3053abaf-92cc-4981-aa8d-9d3585ea5313" name="deductibleAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8beccb94-834d-44ef-a1dd-9edd1ed83f0d" name="deductibleMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.deductibleMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="82cf8303-9e64-4d0a-9d36-97e94eb34b62" name="outOfPocketAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketAmount</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fc73e8f4-c694-4a36-a5af-fd1aeb83505c" name="outOfPocketMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.outOfPocketMet</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cebddf92-e639-4ee9-a73c-1b2b0a0d31fb" name="inNetwork"><con:configuration><path>insuranceVerificationFields[0].verificationField.inNetwork</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e14b5822-5ba6-4922-8fd5-88854f95d085" name="policyHoldersStreetAddress"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersStreetAddress</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="95045cde-3b2b-4202-994e-e66800f500bf" name="policyHoldersCity"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersCity</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="12d4433d-8705-40a5-82e4-f69a9f4b1663" name="policyHoldersState"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersState</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cce3fbfb-075f-4550-b313-9c359f7d8508" name="policyHoldersZip"><con:configuration><path>insuranceVerificationFields[0].verificationField.policyHoldersZip</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e4d9f559-b4ea-4ed9-90b5-6029c32aab28" name="maximumAnnualBenefitAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9a4513f7-dfcc-4234-b59d-16017eedf680" name="maximumAnnualBenefitMet"><con:configuration><path>insuranceVerificationFields[0].verificationField.maximumAnnualBenefitMet</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dddaa243-f376-4590-9788-ddf011c2ba6a" name="coInsurance"><con:configuration><path>insuranceVerificationFields[0].verificationField.coInsurance</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f7feb1ac-ec46-40b9-9e38-ac053f43c71c" name="coPayAmount"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayAmount</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="91bcf31b-224a-475a-9468-4d1075d0d3ad" name="coPayType"><con:configuration><path>insuranceVerificationFields[0].verificationField.coPayType</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="57b8bafa-9b58-4559-9bb9-735b40b4c238" name="pharmacyBenefit"><con:configuration><path>insuranceVerificationFields[0].verificationField.pharmacyBenefit</path><content>O</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="fe3e1955-df25-47e6-a7e9-ef076912eec3" name="DetermineOrderProcessingTime"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b9741b6c-2280-4d3d-bb2d-2288046540ba" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineOrderProcessingTime" searchProperties="true"><con:settings/><con:testStep type="groovy" name="BackOrderRe-processing-inTimeRange" id="8c27d464-e5fb-44a3-b411-9b94dfb26c98"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineBackOrderReprocessing/BackOrderReprocessing-InRange-Input.xls"
def outputfile = projectDir + "/DetermineBackOrderReprocessing/BackOrderReprocessing-InRange-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"withinWarehouseProcessingTimes",sheet1);
addCell(1,0,"PASS/FAIL",sheet1);
addCell(2,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                 //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get withinWarehouseProcessingTimes from response json                                 
                        addCell(0,i,json.withinWarehouseProcessingTimes.toString(),sheet1);                                   
                                                                              
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          withinWarehouseProcessingTimes = sh.getCell(1,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,withinWarehouseProcessingTimes,"withinWarehouseProcessingTimes","withinWarehouseProcessingTimes")
                     
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(1,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(2,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(1,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request" id="693d11d3-7b5d-4f27-8a64-11dfb4db9c01"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineOrderProcessingTime/DetermineOrderProcessingTime/WADL" methodName="DetermineOrderProcessingTime" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="bf726038-cf60-4e66-ad92-467409395dd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="BackOrderRe-processing-OutofTime" id="29f48626-5201-437c-bd99-46718a158770"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineBackOrderReprocessing/BackOrderReprocessing-OutOfRange-Input.xls"
def outputfile = projectDir + "/DetermineBackOrderReprocessing/BackOrderReprocessing-OutOfRange-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"withinWarehouseProcessingTimes",sheet1);
addCell(1,0,"PASS/FAIL",sheet1);
addCell(2,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                 //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get withinWarehouseProcessingTimes from response json                                 
                        addCell(0,i,json.withinWarehouseProcessingTimes.toString(),sheet1);                                   
                                                                              
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          withinWarehouseProcessingTimes = sh.getCell(1,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,withinWarehouseProcessingTimes,"withinWarehouseProcessingTimes","withinWarehouseProcessingTimes")
                     
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(1,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(2,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(1,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="restrequest" name="TC01_CurrentSystemTime_inRange." id="ae852575-7794-4b3d-9356-f8439c6b1772"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineOrderProcessingTime/DetermineOrderProcessingTime/WADL" methodName="DetermineOrderProcessingTime" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC01_CurrentSystemTime_inRange." id="bf726038-cf60-4e66-ad92-467409395dd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineOrderProcessingTime/DetermineOrderProcessingTime/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df1ea9ea-ab1a-483c-b63c-3f3d20157826" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e8a69aa3-d538-4448-93ef-76ccf850614c" name="withinWarehouseProcessingTimes"><con:configuration><path>withinWarehouseProcessingTimes</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC01_CurrentSystemTime_outOfRange." id="a62dadee-1901-4104-adf9-8c482464a703"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineOrderProcessingTime/DetermineOrderProcessingTime/WADL" methodName="DetermineOrderProcessingTime" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC01_CurrentSystemTime_outOfRange." id="bf726038-cf60-4e66-ad92-467409395dd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineOrderProcessingTime/DetermineOrderProcessingTime/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="67dd518a-f149-4e7b-ac5f-549bca23b641" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a2bd781-ef6f-4ee5-b844-08c7ad4d8e9b" name="withinWarehouseProcessingTimes"><con:configuration><path>withinWarehouseProcessingTimes</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="8ddf61e2-671f-4e44-818c-80e658b58f78" name="DeterminePhysicianSpecialtyAndPrimaryCareRequired"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ffc1313a-4bea-42b4-95a4-4917cf1f1d7a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeterminePhysicianSpecialtyAndPrimaryCareRequired" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DeterminePhysicianSpecialtyAndPrimaryCareRequired_Single LineItem" id="69d1de29-419d-4675-bd50-4eaf976232dc"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DeterminePhysicianSpecialtyandPrimaryCareRequired/DeterminePhysicianSpecialtyandPrimaryCareRequired-SingleLineItem-Input.xls"
def outputfile = projectDir + "/DeterminePhysicianSpecialtyandPrimaryCareRequired/DeterminePhysicianSpecialtyandPrimaryCareRequired-SingleLineItem-Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"messageCode",sheet1);
addCell(2,0,"description",sheet1);
addCell(3,0,"physicianID",sheet1);
addCell(4,0,"PASS/FAIL",sheet1);
addCell(5,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                 //Input for Line Item ID                                                             
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents().toString()
                                 //Input for product category                                   
                                requestTemplet.content.lineItems[0].productCategory = sh.getCell(2,i).getContents().toString()
                                //Input for productSubCategory1                                  
                                requestTemplet.content.lineItems[0].productSubCategory1 = sh.getCell(3,i).getContents().toString()
                                //Input for productSubCategory2                                  
                                requestTemplet.content.lineItems[0].productSubCategory2 = sh.getCell(4,i).getContents().toString()
                                //Input for id                                  
                                requestTemplet.content.lineItems[0].payers[0].id = sh.getCell(5,i).getContents().toString()
                                //Input for planName                                  
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(6,i).getContents().toString()
                                //Input for physicianID                                  
                                requestTemplet.content.lineItems[0].physician.physicianID = sh.getCell(7,i).getContents().toString()
                                //Input for taxonomyCode                                  
                                requestTemplet.content.lineItems[0].physician.taxonomyCode = sh.getCell(9,i).getContents().toString()
                                //Input for specialityCode                                  
                                requestTemplet.content.lineItems[0].physician.specialityCode = sh.getCell(8,i).getContents().toString()                                                                                 
                                 //Input for primaryCarePhysician                                  
                                requestTemplet.content.lineItems[0].physician.primaryCarePhysician = sh.getCell(10,i).getContents().toString()
                                                                                    
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json  
                        addCell(0,i,json.lineItems[0].lineItemID.toString(),sheet1);                                   
                          // get messageCode from response json                               
                        addCell(1,i,json.lineItems[0].messages[0].messageCode.toString(),sheet1);                                   
                          // get description from response json                                   
                        addCell(2,i,json.lineItems[0].messages[0].description.toString(),sheet1); 
                        // get applyToDeductableFlag from response json                                 
                        addCell(3,i,json.lineItems[0].physician.physicianID.toString(),sheet1); 
                                                
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(11,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"lineItems[0].lineItemID","lineItemID")

                          messageCode = sh.getCell(12,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,messageCode,"lineItems[0].messages[0].messageCode","messageCode")

                          description = sh.getCell(13,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,description,"lineItems[0].messages[0].description","description")

                       physicianID = sh.getCell(14,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,physicianID,"lineItems[0].physician.physicianID","physicianID")

        
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(4,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(5,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(4,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfully"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="groovy" name="DeterminePhysicianSpecialtyAndPrimaryCareRequired_Multi LineItem" id="337804ce-0233-43bb-8bae-2197c28c8e57"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DeterminePhysicianSpecialtyandPrimaryCareRequired/DeterminePhysicianSpecialtyandPrimaryCareRequired-MultiLineItem-Input.xls"
def outputfile = projectDir + "/DeterminePhysicianSpecialtyandPrimaryCareRequired/DeterminePhysicianSpecialtyandPrimaryCareRequired-MultiLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"messageCode",sheet1);
addCell(2,0,"description",sheet1);
addCell(3,0,"physicianID",sheet1);

addCell(4,0,"lineItemID1",sheet1);
addCell(5,0,"messageCode1",sheet1);
addCell(6,0,"description1",sheet1);
addCell(7,0,"physicianID1",sheet1);

addCell(8,0,"PASS/FAIL",sheet1);
addCell(9,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                 //Input for Line Item ID 1                                                                                                                        
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents().toString()
                                 //Input for product category                                   
                                requestTemplet.content.lineItems[0].productCategory = sh.getCell(2,i).getContents().toString()
                                //Input for productSubCategory1                                  
                                requestTemplet.content.lineItems[0].productSubCategory1 = sh.getCell(3,i).getContents().toString()
                                //Input for productSubCategory2                                  
                                requestTemplet.content.lineItems[0].productSubCategory2 = sh.getCell(4,i).getContents().toString()
                                //Input for id                                  
                                requestTemplet.content.lineItems[0].payers[0].id = sh.getCell(5,i).getContents().toString()
                                //Input for planName                                  
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(6,i).getContents().toString()
                                //Input for physicianID                                  
                                requestTemplet.content.lineItems[0].physician.physicianID = sh.getCell(7,i).getContents().toString()
                                //Input for taxonomyCode                                  
                                requestTemplet.content.lineItems[0].physician.taxonomyCode = sh.getCell(9,i).getContents().toString()
                                //Input for specialityCode                                  
                                requestTemplet.content.lineItems[0].physician.specialityCode = sh.getCell(8,i).getContents().toString()                                                                                 
                                 //Input for primaryCarePhysician                                  
                                requestTemplet.content.lineItems[0].physician.primaryCarePhysician = sh.getCell(10,i).getContents().toString() 

                                //Input for Line Item ID 2                                                                                                                        
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(11,i).getContents().toString()
                                 //Input for product category                                   
                                requestTemplet.content.lineItems[1].productCategory = sh.getCell(12,i).getContents().toString()
                                //Input for productSubCategory1                                  
                                requestTemplet.content.lineItems[1].productSubCategory1 = sh.getCell(13,i).getContents().toString()
                                //Input for productSubCategory2                                  
                                requestTemplet.content.lineItems[1].productSubCategory2 = sh.getCell(14,i).getContents().toString()
                                //Input for id                                  
                                requestTemplet.content.lineItems[1].payers[0].id = sh.getCell(15,i).getContents().toString()
                                //Input for planName                                  
                                requestTemplet.content.lineItems[1].payers[0].planName = sh.getCell(16,i).getContents().toString()
                                //Input for physicianID                                  
                                requestTemplet.content.lineItems[1].physician.physicianID = sh.getCell(17,i).getContents().toString()
                                //Input for taxonomyCode                                  
                                requestTemplet.content.lineItems[1].physician.taxonomyCode = sh.getCell(19,i).getContents().toString()
                                //Input for specialityCode                                  
                                requestTemplet.content.lineItems[1].physician.specialityCode = sh.getCell(18,i).getContents().toString()                                                                                 
                                 //Input for primaryCarePhysician                                  
                                requestTemplet.content.lineItems[1].physician.primaryCarePhysician = sh.getCell(20,i).getContents().toString()                                                        
                                                       
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json  
                        addCell(0,i,json.lineItems[0].lineItemID.toString(),sheet1);                                   
                          // get messageCode from response json                               
                        addCell(1,i,json.lineItems[0].messages[0].messageCode.toString(),sheet1);                                   
                          // get description from response json                                   
                        addCell(2,i,json.lineItems[0].messages[0].description.toString(),sheet1); 
                        // get applyToDeductableFlag from response json                                 
                        addCell(3,i,json.lineItems[0].physician.physicianID.toString(),sheet1); 
                        
                         // get lineItemID2 from response json  
                        addCell(4,i,json.lineItems[1].lineItemID.toString(),sheet1);                                   
                          // get messageCode2 from response json                               
                        addCell(5,i,json.lineItems[1].messages[0].messageCode.toString(),sheet1);                                   
                          // get description2 from response json                                   
                        addCell(6,i,json.lineItems[1].messages[0].description.toString(),sheet1); 
                        // get physicianID2 from response json                                 
                        addCell(7,i,json.lineItems[1].physician.physicianID.toString(),sheet1);  
                                                    
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(21,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"lineItems[0].lineItemID","lineItemID")

                          messageCode = sh.getCell(22,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,messageCode,"lineItems[0].messages[0].messageCode","messageCode")

                          description = sh.getCell(23,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,description,"lineItems[0].messages[0].description","description")

                       physicianID = sh.getCell(24,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,physicianID,"lineItems[0].physician.physicianID","physicianID")

                       //get the expected values
                          lineItemID1 = sh.getCell(25,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"lineItems[1].lineItemID","lineItemID")

                          messageCode1 = sh.getCell(26,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,messageCode1,"lineItems[1].messages[0].messageCode","messageCode")

                          description1 = sh.getCell(27,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,description1,"lineItems[1].messages[0].description","description")

                       physicianID1 = sh.getCell(28,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,physicianID1,"lineItems[1].physician.physicianID","physicianID")



                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(8,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(9,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(8,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfully"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request" id="52f3dd06-0f0c-4507-977b-d1c0f17e2eaa"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2004-02-15T00:14:14.000+0530"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "B747"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "false",
                "specialityCode": "",
                "taxonomyCode": ""
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": ""
        },
        {
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A489"
                }
            ],
            "physician": {
                "physicianID": "P0002",
                "primaryCarePhysician": "true",
                "specialityCode": "Surgery",
                "taxonomyCode": "Pediatric Endocrinology"
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40752" id="590136dc-991e-4bd8-9143-f7383f719d49"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40752" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "B747 "
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "true",
                "specialityCode": "",
                "taxonomyCode": ""
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ad698c8b-c165-4dcc-ab5c-a58c1c144337" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6878e312-06d1-4cda-b53b-5d05aa2d345e" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="32becfcb-e343-47fb-bf06-db0aea46ffed" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cc295dec-e02c-48a6-ba4a-a43bb6c788a7" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="321fa156-836d-49a9-8524-99d721490918" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40753" id="73257147-e2f7-4fda-9de1-2d5718ffd7e1"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40753" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "B747"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "false",
                "specialityCode": "",
                "taxonomyCode": ""
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4e117499-d7e8-4178-8f0b-15842bd21baf" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4554a3a0-0c57-40b2-a898-a431a8f7c8a1" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fe8ec6c5-d6c1-4747-82ad-81e5107d7157" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>OVPV14</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5a61bfd5-b8b6-4568-8f02-5e23eaedefe6" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>Physician must be Primary Care</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8c3ce175-b3d0-494e-b6f2-568487cbdc37" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40754" id="28a1ecc3-ae4e-406b-8134-c48a5fa2ae0b"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40754" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A627"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "true",
                "specialityCode": "",
                "taxonomyCode": ""
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="875ec910-b176-46eb-b603-b0bc27d22ca9" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ff467bae-8a9e-4c67-9af1-28c54da030f0" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0f6a99cf-35a8-4563-89cc-63a8ba19d1e5" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>OVPV15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d3da9f24-3f52-45d3-a3d2-de412b0bb6b7" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>Physician must have Specialty</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ac9dc13a-ad14-481d-87e9-a796f7d224a3" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40755" id="c404b452-7282-41a4-b670-36926325809f"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40755" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A639"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "false",
                "specialityCode": "",
                "taxonomyCode": ""
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bf1b2444-a8c2-444f-92e3-8ffbaef64097" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="370e7dcc-dfd7-4a41-8182-4b6a2df979db" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b937b0cb-322c-4906-8288-3595c77fe69c" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>OVPV15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="23143061-1a7b-425d-8f51-7b3185ee400c" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>Physician must have Specialty</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="80d3e5c2-50ab-4661-9ab6-e5e3b97cd3cf" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40756" id="8fa02318-b7a8-4006-b541-f4642a9a915a"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40756" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A630"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "true",
                "specialityCode": "Endocrinology",
                "taxonomyCode": ""
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7e540859-38b7-4f83-8471-27dd6da211aa" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8613432d-8dba-45cf-9f24-6b5de62f7d16" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f02df50a-fa29-4fa2-a167-e37671e05467" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>OVPV15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c537c745-9d8a-4b3f-9bbd-9ab28b990ece" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>Physician must have Specialty</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2037283d-640d-452a-b34c-d0aa2e0b7763" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40757" id="a4307a73-3ce2-4818-b492-d40f94b5b0c7"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40757" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A214"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "false",
                "specialityCode": "Endocrinology",
                "taxonomyCode": ""
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ebcd9b5-2d0e-40ab-bac5-910025611b7f" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4d6aaf3f-1245-4465-bc2d-28605ba31ca2" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="94d80aec-1165-4b81-8058-2dc8ecd373db" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>OVPV15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="083064d8-6987-42aa-9893-ce9491065378" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>Physician must have Specialty</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e1119b2e-191c-4879-aa79-70064ffc0d74" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40758" id="6c4e9ce4-766b-43f8-a2fb-d2954415266a"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40758" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A616"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "true",
                "specialityCode": "",
                "taxonomyCode": "Pediatric Endocrinology"
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ab164745-ae8c-433b-851f-416e6ee34a5a" name="Valid HTTP Status Codes_8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="02f85b66-5063-4397-9031-108fb67f2324" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="227bfa31-4a2d-409f-8b7f-37b0660d26d4" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>OVPV15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a85ead49-e363-4c12-b105-66db3c2ceabb" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>Physician must have Specialty</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dd487f70-f289-46a9-adb1-d6c8c3b0ba0b" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40759" id="1501916c-ca7b-410c-ad89-d3b05f95cc68"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40759" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "B172"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "false",
                "specialityCode": "",
                "taxonomyCode": "Diabetes &amp; Metabolism"
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="afc0cb08-c0d8-4978-a8c8-cf4fa6f60a6b" name="Valid HTTP Status Codes_9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b3c77373-c11e-4ded-9df4-f42589e756d3" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9c8d052d-e664-4965-811c-02c63f422a49" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>OVPV15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9a56320f-bd07-4098-b940-7667c9d05460" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>Physician must have Specialty</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2470f42-fd37-4ef4-a3f6-b43d173f6a0d" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40760" id="2f915bbc-ae31-4bbd-ad68-a158e79cfa3f"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40760" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A489"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "true",
                "specialityCode": "Surgery",
                "taxonomyCode": "Allopathic &amp; Osteopathic Physicians/Internal Medicine"
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="cdcfe470-767a-4123-a08e-5071e43129d0" name="Valid HTTP Status Codes_10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="18a69249-6d41-4820-ab9f-e505a37098ec" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="56941c8a-abec-460f-b4df-5d4707484666" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>OVPV15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e531d260-f0a3-49c7-a6ac-0ab4057d5861" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>Physician must have Specialty</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="262d291e-e87a-473e-8a36-aba21605eebd" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40761" id="26372cde-c44c-4e66-85e1-d1c23e89a479"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40761" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A627"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "false",
                "specialityCode": "Surgery",
                "taxonomyCode": "Reproductive Endocrinology"
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f20f0293-8853-4890-900a-35ab1aa81047" name="Valid HTTP Status Codes_11"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="953875bb-418b-4b76-a8d2-afb77bdfbccb" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e85a0d11-9341-4045-8cc2-7f2e9bbbe862" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>OVPV15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="86c79d07-3e02-44e6-96ac-6bd527028944" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>Physician must have Specialty</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cc2a9497-231e-40b0-9b0f-f2c3c73618b8" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40762" id="3b44383e-2a49-4141-8bd7-c814b7620f6e"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40762" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A639"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "true",
                "specialityCode": "Endocrinology",
                "taxonomyCode": "Surgery"
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b452e7e8-8c05-44f0-b9c9-e51584fcf909" name="Valid HTTP Status Codes_12"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7e69a424-f098-4369-a6a5-4dafa5788293" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cbce3fec-b515-4071-8398-9f3e1fe3ae81" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>OVPV15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="36d98032-4fac-424a-bf46-5c7576463538" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>Physician must have Specialty</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6d2ddd9c-ed45-4db7-af7d-05ad4288c737" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40763" id="8e0765e6-811a-4dba-9e12-fd4e17674851"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40763" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A630"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "false",
                "specialityCode": "Endocrinology",
                "taxonomyCode": "Surgery"
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f66949d7-d295-4d9b-94f8-980eac59a2a7" name="Valid HTTP Status Codes_13"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2484327f-89be-4c3f-b511-fc9a99745c23" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6533b70f-4d9d-46ae-b843-06d76dfe8b73" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>OVPV15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0fbed09e-3549-43da-9309-c5b4b0867d06" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>Physician must have Specialty</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4554bcb9-872e-4c55-9b29-ec7f484ce9c8" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40764" id="cf291f72-c826-4081-a021-43d75f4fadd4"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40764" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A214"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "true",
                "specialityCode": "Endocrinology",
                "taxonomyCode": "Allopathic &amp; Osteopathic Physicians/Pediatrics"
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Glucose"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="07bbcfe8-73f5-4120-97eb-ef729c9a45d9" name="Valid HTTP Status Codes_14"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bccff0fe-249d-477e-a19c-166cf24ffba2" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a68ccd5-f01e-446e-be9a-3efbb891dde1" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f372135e-3c67-4cf4-a4d4-346b23c125a7" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="51e3370f-d490-498c-987a-9950808fa4fd" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40765" id="c614ca48-29be-4440-bf12-dedf627a4a35"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40765" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A616"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "false",
                "specialityCode": "Endocrinology",
                "taxonomyCode": "Pediatric Endocrinology"
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Glucose"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fff563ab-21e0-4b72-b16c-007b1b9503a4" name="Valid HTTP Status Codes_15"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c4314025-2af0-4a83-b3eb-3836a01ca40a" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eb0e5d16-f4ac-4661-919f-ff489cec692b" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f9216811-553a-4eed-a9ae-9772efca377e" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f5abeae4-0429-46c5-b61f-ed5e6e3e00b8" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40766" id="88cba2a1-34fc-464a-9ba7-9da515693d3c"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40766" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "1000"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "false",
                "specialityCode": "",
                "taxonomyCode": ""
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fe986ac8-ec26-42ef-9599-66df6bf978ed" name="Valid HTTP Status Codes_16"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c61a269-da73-4e14-b1c8-28001709fafd" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e1fb4225-a705-4b2d-8d41-783eed696d75" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="50050c93-747c-4c74-bb26-b6d355693416" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c4191992-194f-4810-af56-ed9bb93f9842" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40587" id="0a637f3d-4083-4429-b8f8-8c1e2268e934"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40587" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2004-02-15T00:14:14.000+0530"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "B747"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "true",
                "specialityCode": "",
                "taxonomyCode": ""
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": ""
        },
        {
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A489"
                }
            ],
            "physician": {
                "physicianID": "P0002",
                "primaryCarePhysician": "true",
                "specialityCode": "",
                "taxonomyCode": ""
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="38385f75-8f67-4625-bce0-8584e67b436d" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9719f87c-4e32-4f8d-973f-10cc4cff2084" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1ff397f6-5b30-49b3-ae9c-310863e67435" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8557ba9c-c3d9-4f23-a049-c79f898dbf0a" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bd1347cb-ca12-4912-8f1c-b1d15002c2a7" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9cb6212d-637f-42ca-9d0d-75370e84d4ae" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="15f54914-c480-4abe-99f7-f65742380e90" name="messageCode"><con:configuration><path>lineItems[1].messages[0].messageCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85c0b5b2-529d-41f9-b84f-a1397541c349" name="description"><con:configuration><path>lineItems[1].messages[0].description</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d4650b0-7978-455e-ab77-723b1571c841" name="physicianID"><con:configuration><path>lineItems[1].physician.physicianID</path><content>P0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40588" id="378ff394-6a2c-4a2f-a828-6b1848e42a63"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40588" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2004-02-15T00:14:14.000+0530"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "B747"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "false",
                "specialityCode": "",
                "taxonomyCode": ""
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": ""
        },
        {
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "B747"
                }
            ],
            "physician": {
                "physicianID": "P0002",
                "primaryCarePhysician": "false",
                "specialityCode": "",
                "taxonomyCode": ""
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="72a76608-3c59-4c87-b323-5b3325a814cc" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cf6b14b0-7521-4b32-a3b4-c155737e63ff" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e53a33cf-7369-4a0c-a50f-d06417a1bf44" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>OVPV14</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cdc875dc-3c44-4c99-8fdb-f5cd63cd04e5" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>Physician must be Primary Care</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="93969a08-2012-4434-9b8b-31474ef599eb" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d8499db-9fe9-4d91-947f-1bf4448e9256" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4ba86ab1-3caa-4e0c-b5bd-93360d170015" name="messageCode"><con:configuration><path>lineItems[1].messages[0].messageCode</path><content>OVPV14</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="20c88b75-26db-417e-882f-2046597e13a3" name="description"><con:configuration><path>lineItems[1].messages[0].description</path><content>Physician must be Primary Care</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="426e40c4-3335-4c2e-9073-e2c22358c5dc" name="physicianID"><con:configuration><path>lineItems[1].physician.physicianID</path><content>P0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40589" id="fc88a236-1e01-4424-95e0-0a37a518c544"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40589" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2004-02-15T00:14:14.000+0530"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A627"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "true",
                "specialityCode": "Surgery",
                "taxonomyCode": "Pediatric Endocrinology"
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        },
        {
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A639"
                }
            ],
            "physician": {
                "physicianID": "P0002",
                "primaryCarePhysician": "true",
                "specialityCode": "Endocrinology",
                "taxonomyCode": "Surgery"
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c57069dd-ebf7-45ec-be0c-8a9c2cd6f078" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dd10a445-409a-40fd-9cf3-4ccbd31ffbcd" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be70f4bd-4bc2-43b7-858a-abe1c72b5385" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>OVPV15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85056732-3d5f-429d-a0b6-ab760b095cee" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>Physician must have Specialty</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9b40f1e4-0016-4d53-b82d-1655466ac0af" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="28eb6a71-2a31-4ea1-8d8a-a45ae52a0016" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8f8e1511-9d4f-47c7-86fc-e694b7d40e0e" name="messageCode"><con:configuration><path>lineItems[1].messages[0].messageCode</path><content>OVPV15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="daff0f95-a3d0-4f67-add6-72b2edace706" name="description"><con:configuration><path>lineItems[1].messages[0].description</path><content>Physician must have Specialty</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2dd5a3e-6137-494f-bc37-6532a4dbbd73" name="physicianID"><con:configuration><path>lineItems[1].physician.physicianID</path><content>P0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40590" id="2c427c6b-e187-49e6-a429-986f33c5dc07"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40590" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2004-02-15T00:14:14.000+0530"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A639"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "false",
                "specialityCode": "Endocrinology",
                "taxonomyCode": ""
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        },
        {
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A630"
                }
            ],
            "physician": {
                "physicianID": "P0002",
                "primaryCarePhysician": "true",
                "specialityCode": "",
                "taxonomyCode": "Pediatric Endocrinology"
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="980bbd42-8ff7-4ffb-9801-495147b5a425" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d1a27f39-24a4-4f56-8d0a-897b4173b856" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="588dabe9-3e86-4ff2-a86f-60f9888f39e8" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>OVPV15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="47225e33-e4e2-431f-953b-27520201d0bd" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>Physician must have Specialty</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1a49bd4d-03e9-4b95-8a05-912940db0b2a" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="73e1900e-3f97-447a-8b67-9281ab675778" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a364c472-d2d3-47b2-ab29-e4dbe14e8e7d" name="messageCode"><con:configuration><path>lineItems[1].messages[0].messageCode</path><content>OVPV15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="573cb078-06f9-45d4-ac6f-2882e6661c07" name="description"><con:configuration><path>lineItems[1].messages[0].description</path><content>Physician must have Specialty</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="61f7c722-7579-463d-97e8-13492139273b" name="physicianID"><con:configuration><path>lineItems[1].physician.physicianID</path><content>P0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40591" id="df1471cd-c624-45af-a2b0-1403150f501d"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40591" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2004-02-15T00:14:14.000+0530"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A630"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "true",
                "specialityCode": "Surgery",
                "taxonomyCode": "Surgery"
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        },
        {
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A214"
                }
            ],
            "physician": {
                "physicianID": "P0002",
                "primaryCarePhysician": "true",
                "specialityCode": "Surgery",
                "taxonomyCode": "Surgery"
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="abd3e399-e8bb-4f19-bb2d-d4e1b3945a09" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8b3d96b9-b057-4aca-b647-a12ae8c23779" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="454fb92c-a7d9-4223-9e89-c398f5d54464" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>OVPV15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="544be9f0-4d3d-45d9-9d1f-e8dd6ddc22e0" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>Physician must have Specialty</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2c186b5d-749c-4e73-8371-cb8114aa91a1" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="caf2e6b0-bec6-405c-b09a-4ac2a309a954" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="881f76b5-1fad-4218-8817-e3c80d9c3347" name="messageCode"><con:configuration><path>lineItems[1].messages[0].messageCode</path><content>OVPV15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a45f73a9-011c-4d7d-b9c7-cd172135d688" name="description"><con:configuration><path>lineItems[1].messages[0].description</path><content>Physician must have Specialty</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5e9c2e82-f60b-45a5-8025-1fc65bb3140f" name="physicianID"><con:configuration><path>lineItems[1].physician.physicianID</path><content>P0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40592" id="6d88d0e3-eb73-45fe-a6f6-4d973e99b3e1"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40592" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2004-02-15T00:14:14.000+0530"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A214"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "false",
                "specialityCode": "Surgery",
                "taxonomyCode": "Surgery"
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        },
        {
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A616"
                }
            ],
            "physician": {
                "physicianID": "P0002",
                "primaryCarePhysician": "false",
                "specialityCode": "Surgery",
                "taxonomyCode": "Surgery"
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e9f31bfe-b538-4cb2-8089-89939235b68b" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e94f0b5f-8fa3-439c-a121-1e744fdaf5b8" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d929df02-9797-4235-96ba-53da7ac2c481" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>OVPV15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0f027e29-ec6f-44cb-87b4-ac91cb3d61ea" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>Physician must have Specialty</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="008446f1-38b3-4558-bece-8b93d10d6776" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04e60bca-7882-49aa-bf2c-348292155ba2" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9ec5c89d-8964-4389-8498-f31be866f82d" name="messageCode"><con:configuration><path>lineItems[1].messages[0].messageCode</path><content>OVPV15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="08c4d2ad-a0bb-4dec-9c17-17f706b6ec5a" name="description"><con:configuration><path>lineItems[1].messages[0].description</path><content>Physician must have Specialty</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8ceffc12-0b61-4ec9-934e-4f109c8065f4" name="physicianID"><con:configuration><path>lineItems[1].physician.physicianID</path><content>P0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40593" id="2e87eb4e-f313-45d5-90e9-9990fe6a44fc"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40593" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2004-02-15T00:14:14.000+0530"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A616"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "true",
                "specialityCode": "Endocrinology",
                "taxonomyCode": "Pediatric Endocrinology"
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        },
        {
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "B172"
                }
            ],
            "physician": {
                "physicianID": "P0002",
                "primaryCarePhysician": "false",
                "specialityCode": "Surgery",
                "taxonomyCode": "Pediatric Endocrinology"
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0b0b162c-acbc-4ee6-8a01-d71eb83ad506" name="Valid HTTP Status Codes_8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4f4a2ea2-fb97-402c-a3ab-7873b02c76e3" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce757bc7-191f-4f6d-99ab-4fce67668b28" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="23b04aac-eb5a-4fad-a48c-4fe15d36f75b" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d4aab818-3d53-466d-939a-c38b33adf67c" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cd191bed-e54f-47ca-914e-c3120c33e182" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="67c8d0dc-6dc1-488d-b1ce-0c072ea06e5d" name="messageCode"><con:configuration><path>lineItems[1].messages[0].messageCode</path><content>OVPV15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bc1e99f6-b739-46ca-b513-b3bfd40830bd" name="description"><con:configuration><path>lineItems[1].messages[0].description</path><content>Physician must have Specialty</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c3a149d4-9b4a-472f-876f-44823e57e477" name="physicianID"><con:configuration><path>lineItems[1].physician.physicianID</path><content>P0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40594" id="e5cf1b87-83f1-4763-9939-a1e1c0437495"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL" methodName="DeterminePhysicianSpecialtyAndPrimaryCareRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40594" id="4cc0062e-fee2-44e1-8964-69274685cef6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2004-02-15T00:14:14.000+0530"
        }
    },
    "lineItems": [
        {
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "B747"
                }
            ],
            "physician": {
                "physicianID": "P0001",
                "primaryCarePhysician": "false",
                "specialityCode": "",
                "taxonomyCode": ""
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": ""
        },
        {
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EF",
                    "planName": "A489"
                }
            ],
            "physician": {
                "physicianID": "P0002",
                "primaryCarePhysician": "true",
                "specialityCode": "Surgery",
                "taxonomyCode": "Pediatric Endocrinology"
            },
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Continuous Glucose Monitors"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePhysicianSpecialtyAndPrimaryCareRequired/DeterminePhysicianSpecialtyAndPrimaryCareRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="65d944fa-09bc-4962-a10e-42557027f462" name="Valid HTTP Status Codes_9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f49d8b35-e2e3-4b2f-8e03-7f9a16da1e33" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="96bf235d-5927-4cb1-8b12-3245550645ef" name="messageCode"><con:configuration><path>lineItems[0].messages[0].messageCode</path><content>OVPV14</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3cf785ad-7fab-4a70-8a16-a0ff14a1c4a9" name="description"><con:configuration><path>lineItems[0].messages[0].description</path><content>Physician must be Primary Care</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e3e5882b-2128-4bbc-a950-d555c402d3ff" name="physicianID"><con:configuration><path>lineItems[0].physician.physicianID</path><content>P0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="39e3b81f-6ec1-4fae-80bc-1b26182eee42" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9d018144-b170-408a-a3fa-f571fc57c3a5" name="messageCode"><con:configuration><path>lineItems[1].messages[0].messageCode</path><content>OVPV15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="50b1c32a-f32b-48f6-9429-fef9d0610e2b" name="description"><con:configuration><path>lineItems[1].messages[0].description</path><content>Physician must have Specialty</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="847cad10-8654-4942-ac93-aae5eb835ce5" name="physicianID"><con:configuration><path>lineItems[1].physician.physicianID</path><content>P0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="e99229b6-cc8e-4dfd-9117-b77d1a46623f" name="DetermineTradeInEligibilityAndAmount"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="6a9dfd96-7946-41cc-82b1-3266eb6d4119" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineTradeInEligibilityAndAmount" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="JSON Request" id="cc30f38e-8c67-40fc-baa4-155eb53116dc"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "TANDEM DIABETES CARE",
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planName": "B180"
                }
            ],
            "tradingInItemManufacturersCode": "Insulet"
        },
        {
            "currentItemManufacturersCode": "MINIMED DISTRIBUTION CENTER",
            "hcpcsCode": "E0784",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planName": "A000"
                }
            ],
            "tradingInItemManufacturersCode": "Insulet"
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="DetermineTradeInEligibilityAndAmount_Single Lineitem" id="6633783e-fb03-4a36-9a69-66e9f6044859"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineTrade-InEligibilityAndAmount/DetermineTradeInEligibilityAndAmount-SingleLineItem-Input.xls"
def outputfile = projectDir + "/DetermineTrade-InEligibilityAndAmount/DetermineTradeInEligibilityAndAmount-SingleLineItem-Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"eligibleForTradeIn",sheet1);
addCell(2,0,"tradeInAmount",sheet1);
addCell(3,0,"PASS/FAIL",sheet1);
addCell(4,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                 //Input for Line Item ID                                                             
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents().toString()
                                 //Input for hcpcsCode                                  
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents().toString()
                                //Input for id                                  
                                requestTemplet.content.lineItems[0].payers[0].id = sh.getCell(3,i).getContents().toString()
                                //Input for planName                                  
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(4,i).getContents().toString()
                                //Input for tradingInItemManufacturersCode                                  
                                requestTemplet.content.lineItems[0].tradingInItemManufacturersCode = sh.getCell(5,i).getContents().toString()
                                //Input for currentItemManufacturersCode                                  
                                requestTemplet.content.lineItems[0].currentItemManufacturersCode = sh.getCell(6,i).getContents().toString()
                                                                                    
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json  
                        addCell(0,i,json.tradeInEligibilityAndAmountResponse[0].lineItemID.toString(),sheet1);                                   
                          // get messageCode from response json                               
                        addCell(1,i,json.tradeInEligibilityAndAmountResponse[0].tradeInAmount.toString(),sheet1);                                   
                          // get description from response json                                   
                        addCell(2,i,json.tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn.toString(),sheet1);  
                                                
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(7,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"tradeInEligibilityAndAmountResponse[0].lineItemID","lineItemID")

                          eligibleForTradeIn = sh.getCell(8,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,eligibleForTradeIn,"tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn","eligibleForTradeIn")

                          tradeInAmount = sh.getCell(9,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,tradeInAmount,"tradeInEligibilityAndAmountResponse[0].tradeInAmount","tradeInAmount")

        
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(3,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(4,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(3,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfully"

 

         }             
     
catch(Exception e)
{
log.info"test execution failed"
                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="groovy" name="DetermineTradeInEligibilityAndAmount_Multi Lineitem" id="91fd8109-0ed2-4655-85a8-f2bb1ec5d04a"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineTrade-InEligibilityAndAmount/DetermineTradeInEligibilityAndAmount-MultiLineItem-Input.xls"
def outputfile = projectDir + "/DetermineTrade-InEligibilityAndAmount/DetermineTradeInEligibilityAndAmount-MultiLineItem-Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"eligibleForTradeIn",sheet1);
addCell(2,0,"tradeInAmount",sheet1);
addCell(3,0,"lineItemID1",sheet1);
addCell(4,0,"eligibleForTradeIn1",sheet1);
addCell(5,0,"tradeInAmount1",sheet1);
addCell(6,0,"PASS/FAIL",sheet1);
addCell(7,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                 //Input for Line Item ID                                                             
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents().toString()
                                 //Input for hcpcsCode                                  
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents().toString()
                                //Input for id                                  
                                requestTemplet.content.lineItems[0].payers[0].id = sh.getCell(3,i).getContents().toString()
                                //Input for planName                                  
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(4,i).getContents().toString()
                                //Input for tradingInItemManufacturersCode                                  
                                requestTemplet.content.lineItems[0].tradingInItemManufacturersCode = sh.getCell(5,i).getContents().toString()
                                //Input for currentItemManufacturersCode                                  
                                requestTemplet.content.lineItems[0].currentItemManufacturersCode = sh.getCell(6,i).getContents().toString()

                                //Input for Line Item ID1                                                         
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(7,i).getContents().toString()
                                 //Input for hcpcsCode1                              
                                requestTemplet.content.lineItems[1].hcpcsCode = sh.getCell(8,i).getContents().toString()
                                //Input for id1                                  
                                requestTemplet.content.lineItems[1].payers[0].id = sh.getCell(9,i).getContents().toString()
                                //Input for planName1                                  
                                requestTemplet.content.lineItems[1].payers[0].planName = sh.getCell(10,i).getContents().toString()
                                //Input for tradingInItemManufacturersCode1                                  
                                requestTemplet.content.lineItems[1].tradingInItemManufacturersCode = sh.getCell(11,i).getContents().toString()
                                //Input for currentItemManufacturersCode1                                  
                                requestTemplet.content.lineItems[1].currentItemManufacturersCode = sh.getCell(12,i).getContents().toString()
                                                                                    
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json  
                        addCell(0,i,json.tradeInEligibilityAndAmountResponse[0].lineItemID.toString(),sheet1);                                   
                          // get tradeInAmount from response json                               
                        addCell(1,i,json.tradeInEligibilityAndAmountResponse[0].tradeInAmount.toString(),sheet1);                                   
                          // get eligibleForTradeIn from response json                                   
                        addCell(2,i,json.tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn.toString(),sheet1);  

                        // get lineItemID1 from response json  
                        addCell(3,i,json.tradeInEligibilityAndAmountResponse[1].lineItemID.toString(),sheet1);                                   
                          // get tradeInAmount from response json                               
                        addCell(4,i,json.tradeInEligibilityAndAmountResponse[1].tradeInAmount.toString(),sheet1);                                   
                          // get eligibleForTradeIn from response json                                   
                        addCell(5,i,json.tradeInEligibilityAndAmountResponse[1].eligibleForTradeIn.toString(),sheet1); 
                        
                                                
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(13,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"tradeInEligibilityAndAmountResponse[0].lineItemID","lineItemID")

                          eligibleForTradeIn = sh.getCell(14,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,eligibleForTradeIn,"tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn","eligibleForTradeIn")

                          tradeInAmount = sh.getCell(15,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,tradeInAmount,"tradeInEligibilityAndAmountResponse[0].tradeInAmount","tradeInAmount")


					//get the expected values
                          lineItemID1 = sh.getCell(16,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"tradeInEligibilityAndAmountResponse[1].lineItemID","lineItemID")

                          eligibleForTradeIn1 = sh.getCell(17,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,eligibleForTradeIn1,"tradeInEligibilityAndAmountResponse[1].eligibleForTradeIn","eligibleForTradeIn")

                          tradeInAmount1 = sh.getCell(18,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,tradeInAmount1,"tradeInEligibilityAndAmountResponse[1].tradeInAmount","tradeInAmount")
        
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(6,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(7,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(6,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfully"

 

         }             
     
catch(Exception e)
{
log.info"test execution failed"
                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41558" id="8f4ddf47-f90d-4758-9b29-187bc4a89151"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41558" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "TANDEM DIABETES CARE",
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planName": "B150"
                }
            ],
            "tradingInItemManufacturersCode": "Insulet"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6246f2cd-fb8c-401f-ad55-fc55aa09dc6d" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e59ccdbe-c44c-4fb4-bff6-f41ece387b6f" name="lineItemID"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c3f071ab-63fd-44b4-923e-a4bb4cdd3fbf" name="eligibleForTradeIn"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="106200a6-c020-4f73-b2b9-63910534dd45" name="tradeInAmount"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].tradeInAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41559" id="0b45d101-2bc9-4a3a-9386-3b8a0f7c4cbe"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41559" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "TANDEM DIABETES CARE",
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planName": "A0761"
                }
            ],
            "tradingInItemManufacturersCode": "Medtronic"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="cbf46cee-29c5-483f-aea5-f5726467aef7" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="91af8347-8f06-45c3-926c-13b7213e5585" name="lineItemID"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c628f795-bd2f-48bd-bdbf-012a68d8f0ab" name="eligibleForTradeIn"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7f93956f-6742-4743-a516-d18bd7851f3b" name="tradeInAmount"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].tradeInAmount</path><content>400.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41560" id="fdda502d-1861-45ea-970b-5b05bec1414a"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41560" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "MINIMED DISTRIBUTION CENT",
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planName": "A0761"
                }
            ],
            "tradingInItemManufacturersCode": "Tandem"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="84ca85a1-50be-4a8d-8b6f-945dd432dd86" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="692459e8-a056-4415-91a6-5eeea5be695d" name="lineItemID"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f9226eef-2859-46b1-a2c4-ffaf0b25f101" name="eligibleForTradeIn"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="602337ed-3dfe-4a04-bc90-e0f77c113491" name="tradeInAmount"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].tradeInAmount</path><content>500.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41561" id="ae20e2c8-28e1-420c-8d4e-6eb228842e66"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41561" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "MINIMED DISTRIBUTION CENTER",
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planName": "A0761"
                }
            ],
            "tradingInItemManufacturersCode": "Insulet"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="eade9ab4-262b-4b25-a525-2fa030397965" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e029ce92-32af-45cb-ab8f-8f5042d39b13" name="lineItemID"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d3a74a05-0153-4ca4-af3f-c5f56753edbd" name="eligibleForTradeIn"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8ab8d44a-58c9-4a7e-b289-b320da2eddd4" name="tradeInAmount"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].tradeInAmount</path><content>300.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41562" id="4b015f83-b978-4074-8aff-342757445352"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41562" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "TANDEM DIABETES CARE",
            "hcpcsCode": "A001",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planName": "B169"
                }
            ],
            "tradingInItemManufacturersCode": "Animas"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="037dabc9-6892-48f1-892e-a205f2b51e67" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e9f03f25-e5c9-4c36-966b-8c9cf16a088b" name="lineItemID"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f3cd53a-4f4c-458e-a8e2-8a4254e72790" name="eligibleForTradeIn"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2fe8cd43-b3a9-4749-990e-6bb9ac586bf0" name="tradeInAmount"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].tradeInAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41563" id="95a6c8d9-bf6c-415d-af6b-51388c6a2bb3"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41563" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "MINIMED DISTRIBUTION CENTER",
            "hcpcsCode": "A001",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planName": "A0761"
                }
            ],
            "tradingInItemManufacturersCode": "Insulet"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="539cdb12-b399-457e-a376-794d2c2573a7" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d839408b-6fda-4e69-9707-5f96366c1dc2" name="lineItemID"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="01d04566-b9b8-4123-a85f-1491023e8587" name="eligibleForTradeIn"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="38d17cc9-419b-41b8-8ac9-edacadf317f9" name="tradeInAmount"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].tradeInAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41564" id="88c1a918-92d4-4e79-84da-0fe5118a13b1"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41564" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "DIABETIC CARE",
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planName": "B168"
                }
            ],
            "tradingInItemManufacturersCode": "Disease"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="674c9f19-eba4-40da-9563-cdda5a2a160e" name="Valid HTTP Status Codes_8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4b194528-c4fb-46c6-b5e4-f49ee68dc723" name="lineItemID"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c7f562d4-5fa6-4cb3-8e9f-402171a3a693" name="eligibleForTradeIn"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="272026bc-42f1-46df-b7f0-e82a9dadae44" name="tradeInAmount"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].tradeInAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41565" id="0a7f11dc-c283-42d6-929e-c293a12d9438"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41565" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "TANDEM DIABETES CARE",
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planName": "B177"
                }
            ],
            "tradingInItemManufacturersCode": "Disease"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3c5ab6e4-1d6f-4ff5-9a3d-65b8ab35d715" name="Valid HTTP Status Codes_9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0caef1c6-8486-4b1a-a220-fcac2c8a3320" name="lineItemID"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d538fdea-8a48-41a4-a3f9-06dbe087d450" name="eligibleForTradeIn"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2102ef61-485a-46a2-95fc-0102ab8409f1" name="tradeInAmount"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].tradeInAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41566" id="b3823172-4c77-4c4a-beb7-b20195401968"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41566" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "TANDEM DIABETES CARE",
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planName": "A0761"
                }
            ],
            "tradingInItemManufacturersCode": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="592538bf-90a4-4028-9c31-b6c83c32feb9" name="Valid HTTP Status Codes_10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1aee3cae-ddc2-4c13-87a5-e9363f497aea" name="lineItemID"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="63d262ea-5a52-472e-abe7-f631c5b9fdc9" name="eligibleForTradeIn"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e315309-572c-45d8-89aa-65a3c802f87a" name="tradeInAmount"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].tradeInAmount</path><content>400.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41570" id="b077f0e9-2be0-4c67-86d5-7637eceda50b"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41570" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "TANDEM DIABETES CARE",
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planName": "B180"
                }
            ],
            "tradingInItemManufacturersCode": "Insulet"
        },
        {
            "currentItemManufacturersCode": "MINIMED DISTRIBUTION CENTER",
            "hcpcsCode": "E0784",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planName": "A000"
                }
            ],
            "tradingInItemManufacturersCode": "Insulet"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="19bcf8ee-9a6c-4ca3-81fa-9b9734969ae0" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ad23e6f1-a002-4a9f-b39b-1c80305321c5" name="lineItemID"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6b060ed1-6618-4e22-bcc0-db5c0ee7ef91" name="eligibleForTradeIn"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="66062786-ad81-4231-a930-662d1e3b6534" name="tradeInAmount"><con:configuration><path>tradeInEligibilityAndAmountResponse[0].tradeInAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b98cbe6-7875-4020-a5ff-3e5ade272e89" name="lineItemID"><con:configuration><path>tradeInEligibilityAndAmountResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b1a7de7c-144f-4982-906f-93f2f4384e61" name="eligibleForTradeIn"><con:configuration><path>tradeInEligibilityAndAmountResponse[1].eligibleForTradeIn</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6d390223-32d4-45dd-a5c1-b90dec5e8ca0" name="tradeInAmount"><con:configuration><path>tradeInEligibilityAndAmountResponse[1].tradeInAmount</path><content>300.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="10c9deac-23f9-4213-a919-187efa4a31dd" name="DetermineIfPPSQuestionsRequired"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="de5f1ab7-c122-41b5-804c-4f91840df8bf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineIfPPSQuestionsRequired" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script-SinglePayer" id="ae27bd2e-ff7c-475a-9233-511d0889b88a"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired-SinglePayer-Input.xls"
def outputfile = projectDir + "/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired-SinglePayer-Output.xls"


//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file 
addCell(0,0,"Order_Source",sheet1);
addCell(1,0,"Plan_Name",sheet1);
addCell(2,0,"PPSQuestionsRequired",sheet1);
addCell(3,0,"PASS/FAIL",sheet1);
addCell(4,0,"FAILED DUE TO",sheet1);


//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
              
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplete = new JsonBuilder(slurper);
                for (i=2;i&lt;rc;i++){
               
                                           // Input for TestCaseName
                              Cell varTestCaseName = sh.getCell(0,i)
                              def TestCaseName = varTestCaseName.getContents()

                                           //Input for Order Source
                              requestTemplete.content.order.source =  sh.getCell(1,i).getContents()                                                                                                         

                                           //Input for Plan Name
                              requestTemplete.content.payers[0].planName =  sh.getCell(2,i).getContents()
                                          
    
                                //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()    
                                def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSON Request");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                         //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                           
  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                               // extract the value of required elements from the json response
                             // get ppsQuestionsRequired from response json   
                              addCell(0,i,requestTemplete.content.order.source.toString(),sheet1);
                              addCell(1,i,requestTemplete.content.payers[0].planName.toString(),sheet1);
                              addCell(2,i,json.ppsQuestionsRequired.toString(),sheet1);
                              
                         
                          //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                       addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
                            
                            //get the expected values
                                 ppsQuestionsRequired = sh.getCell(3,i).getContents().toString() 
                                addAssertionJsonPathMatch(testStepForAssertion,ppsQuestionsRequired,"ppsQuestionsRequired","ppsQuestionsRequired")
 
   
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(3,i,"Fail",sheet1);
              for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(4,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(3,i,"PASS",sheet1); 
                                }
}
wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(false)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-MultiPayer" id="43e6c801-02d8-493b-9762-5597ffa63825"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired-MultiPayer-Input.xls"
def outputfile = projectDir + "/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired-MultiPayer-Output.xls"


//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file 
addCell(0,0,"Order_Source",sheet1);
addCell(1,0,"Plan1_Name",sheet1);
addCell(2,0,"Plan2_Name",sheet1);
addCell(3,0,"PPSQuestionsRequired",sheet1);
addCell(4,0,"PASS/FAIL",sheet1);
addCell(5,0,"FAILED DUE TO",sheet1);


//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
              
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplete = new JsonBuilder(slurper);
                for (i=2;i&lt;rc;i++){
               
                                             // Input for TestCaseName
                              Cell varTestCaseName = sh.getCell(0,i)
                              def TestCaseName = varTestCaseName.getContents()

                                             //Input for Order Source
                              requestTemplete.content.order.source =  sh.getCell(1,i).getContents()                            
          

                                              //Input for Plan1 Name
                              requestTemplete.content.payers[0].planName =  sh.getCell(2,i).getContents()                            
                                                                    

                                              //Input for Plan2 Name
                              requestTemplete.content.payers[1].planName =  sh.getCell(3,i).getContents()
                              
            
    
                                //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()    
                                def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSON Request");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                         //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response                                
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                               // extract the value of required elements from the json response
                             // get ppsQuestionsRequired from response json   
                              addCell(0,i,requestTemplete.content.order.source.toString(),sheet1);
                              addCell(1,i,requestTemplete.content.payers[0].planName.toString(),sheet1);
                              addCell(2,i,requestTemplete.content.payers[1].planName.toString(),sheet1);
                              addCell(3,i,json.ppsQuestionsRequired.toString(),sheet1);
                         
                          //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                       addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
                               
                               //get the expected values                             
                                ppsQuestionsRequired = sh.getCell(4,i).getContents().toString() 
                                addAssertionJsonPathMatch(testStepForAssertion,ppsQuestionsRequired,"ppsQuestionsRequired","ppsQuestionsRequired")
 
   
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(4,i,"Fail",sheet1);
              for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(5,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(4,i,"PASS",sheet1); 
                                }
}
wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(false)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}

</script></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request" id="7da48a49-a496-4355-921a-3a29445076d8"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL" methodName="DetermineIfPPSQuestionsRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="a9c70a88-bd3b-4e9b-a088-5490f94bf8fd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": null,
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "order": {
        "source": "ELECTRONIC"
    },
    "payers": [
        {
            "planName": "A013"
        },
        {
            "planName": "B644"
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41922" id="bacd7a9d-bf6a-4cfe-bdc6-7ac350464aec"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL" methodName="DetermineIfPPSQuestionsRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41922" id="a9c70a88-bd3b-4e9b-a088-5490f94bf8fd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": null,
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "order": {
        "source": "INTERNAL"
    },
    "payers": [
        {
            "planName": "5001"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="13375522-c03f-432f-b260-cbeaa47ed98e" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="68c9e423-5ddf-4a2a-b85c-05ea52fd136e" name="ppsQuestionsRequired"><con:configuration><path>ppsQuestionsRequired</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41923" id="c6ca4e2f-fa3e-47b8-a2af-05e1345482b3"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL" methodName="DetermineIfPPSQuestionsRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41923" id="a9c70a88-bd3b-4e9b-a088-5490f94bf8fd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": null,
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "order": {
        "source": "INTERNAL"
    },
    "payers": [
        {
            "planName": "5002"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4ad88d6b-79d9-4de4-ab49-e73c9958df29" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ec337d59-8bdc-4e18-a258-e1352e720cc0" name="ppsQuestionsRequired"><con:configuration><path>ppsQuestionsRequired</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41924" id="7ccaea2c-5d2b-4ee4-93ae-8f313cb01527"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL" methodName="DetermineIfPPSQuestionsRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41924" id="a9c70a88-bd3b-4e9b-a088-5490f94bf8fd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": null,
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "order": {
        "source": "WEB"
    },
    "payers": [
        {
            "planName": "5003"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="db466870-fbed-4cb4-83f3-23a8193da701" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="83ba2efd-a7c2-4d8a-a72a-9eed3338bda9" name="ppsQuestionsRequired"><con:configuration><path>ppsQuestionsRequired</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41925" id="1e4d50b4-eb96-460a-ad62-c3c0b1b751a5"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL" methodName="DetermineIfPPSQuestionsRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41925" id="a9c70a88-bd3b-4e9b-a088-5490f94bf8fd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": null,
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "order": {
        "source": "INTERNAL"
    },
    "payers": [
        {
            "planName": "5007"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="412851fc-f612-432d-8201-2d1937d4679d" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b6fdb898-fa0b-4851-ae69-2611d2ee483f" name="ppsQuestionsRequired"><con:configuration><path>ppsQuestionsRequired</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41926" id="a86092e8-f602-457b-b5a1-83f1d8430685"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL" methodName="DetermineIfPPSQuestionsRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41926" id="a9c70a88-bd3b-4e9b-a088-5490f94bf8fd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": null,
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "order": {
        "source": "WEB"
    },
    "payers": [
        {
            "planName": "NULL"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="65a47a44-ccd7-44ec-9af6-9186ba75c5b2" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d8a6e241-4599-451a-837e-1d2a338cc06d" name="ppsQuestionsRequired"><con:configuration><path>ppsQuestionsRequired</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41927" id="c6a4b76d-fd9e-4f05-a5de-164a14202aab"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL" methodName="DetermineIfPPSQuestionsRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41927" id="a9c70a88-bd3b-4e9b-a088-5490f94bf8fd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": null,
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "order": {
        "source": "INTERNAL"
    },
    "payers": [
        {
            "planName": "5007"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="47ac10f6-3979-4c2d-a360-fb4c2a2118f1" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="02c73990-ac5b-4449-b2e4-e2f4be14d43a" name="ppsQuestionsRequired"><con:configuration><path>ppsQuestionsRequired</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41928" id="7e46f4a7-8297-4f32-9d3e-42c06dd416c1"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL" methodName="DetermineIfPPSQuestionsRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41928" id="a9c70a88-bd3b-4e9b-a088-5490f94bf8fd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": null,
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "order": {
        "source": "TR234AD"
    },
    "payers": [
        {
            "planName": "5001"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="acea45eb-6a33-4fcb-a4b7-a34fc16ce7fa" name="Valid HTTP Status Codes_8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bc10ef1d-ff31-410c-ac76-e70c8d2e63ed" name="ppsQuestionsRequired"><con:configuration><path>ppsQuestionsRequired</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41929" id="ba999074-d563-4fce-a3a4-3866a2b039b9"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL" methodName="DetermineIfPPSQuestionsRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41929" id="a9c70a88-bd3b-4e9b-a088-5490f94bf8fd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": null,
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "order": {
        "source": "NULL"
    },
    "payers": [
        {
            "planName": "5001"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ba151ffa-1f99-4d38-82b5-38286d343c12" name="Valid HTTP Status Codes_9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b396190b-cbbf-4e3b-aff6-ad6704616f1f" name="ppsQuestionsRequired"><con:configuration><path>ppsQuestionsRequired</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41930" id="a3bffb95-70c0-49a9-82fe-1b9081ae1854"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL" methodName="DetermineIfPPSQuestionsRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41930" id="a9c70a88-bd3b-4e9b-a088-5490f94bf8fd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": null,
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "order": {
        "source": "ELECTRONIC"
    },
    "payers": [
        {
            "planName": "5003"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b2fe12f2-0e32-4564-89f6-e27ada96d966" name="Valid HTTP Status Codes_10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="41ae97a3-1b03-4c16-bea0-3cc27664f579" name="ppsQuestionsRequired"><con:configuration><path>ppsQuestionsRequired</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41931" id="5ed85cee-0b36-4f19-b656-607d3f6e46f6"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL" methodName="DetermineIfPPSQuestionsRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41931" id="a9c70a88-bd3b-4e9b-a088-5490f94bf8fd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": null,
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "order": {
        "source": "ELECTRONIC"
    },
    "payers": [
        {
            "planName": "5007"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="eca9240a-504e-4d37-91f6-411306067145" name="Valid HTTP Status Codes_11"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="160655f0-924c-4fe7-a96c-4f7744e4803a" name="ppsQuestionsRequired"><con:configuration><path>ppsQuestionsRequired</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41932" id="78a1fb81-95e2-4636-97c5-ff81824990ed"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL" methodName="DetermineIfPPSQuestionsRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41932" id="a9c70a88-bd3b-4e9b-a088-5490f94bf8fd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": null,
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "order": {
        "source": "INTERNAL"
    },
    "payers": [
        {
            "planName": "5001"
        },
        {
            "planName": "5002"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a52bfe22-47fd-4ba0-ae17-d1eb2aff9847" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9e4b2e93-fd59-4436-b49b-05c3a34cf958" name="ppsQuestionsRequired"><con:configuration><path>ppsQuestionsRequired</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41933" id="8612b7cf-e08d-4c57-8a39-329e648f2f8c"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL" methodName="DetermineIfPPSQuestionsRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41933" id="a9c70a88-bd3b-4e9b-a088-5490f94bf8fd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": null,
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "order": {
        "source": "WEB"
    },
    "payers": [
        {
            "planName": "5004"
        },
        {
            "planName": "A013"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="5712f44c-43f0-44a2-b8fc-ea761007e057" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="516c32b7-c8b7-4438-ba0e-fc26a059122c" name="ppsQuestionsRequired"><con:configuration><path>ppsQuestionsRequired</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41934" id="576840b1-77b6-47fb-91d1-79d59a777acf"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL" methodName="DetermineIfPPSQuestionsRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41934" id="a9c70a88-bd3b-4e9b-a088-5490f94bf8fd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": null,
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "order": {
        "source": "WEB"
    },
    "payers": [
        {
            "planName": "A013"
        },
        {
            "planName": "5001"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="21ccea2e-fe91-43ea-99ac-5d44ac0d5101" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="987c0f91-5d28-4aba-be13-5ff00688a3cc" name="ppsQuestionsRequired"><con:configuration><path>ppsQuestionsRequired</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41935" id="6445eae2-5851-4d01-88a4-5cb1fdb57cbe"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL" methodName="DetermineIfPPSQuestionsRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41935" id="a9c70a88-bd3b-4e9b-a088-5490f94bf8fd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": null,
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "order": {
        "source": "WEB123"
    },
    "payers": [
        {
            "planName": "A013"
        },
        {
            "planName": "A013"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fe895022-82f1-43fe-bb87-e88c4a8abb7e" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c509c114-79ff-4c81-96e6-f0c00fee1f57" name="ppsQuestionsRequired"><con:configuration><path>ppsQuestionsRequired</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41936" id="6adeeea2-fd91-4b3a-94f0-6f74e7c0d3fd"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL" methodName="DetermineIfPPSQuestionsRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41936" id="a9c70a88-bd3b-4e9b-a088-5490f94bf8fd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": null,
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "order": {
        "source": "NULL"
    },
    "payers": [
        {
            "planName": "5003"
        },
        {
            "planName": "A013"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e32b3c22-6212-4c6b-94dd-be26cff65e2b" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ed889624-6d4d-4db6-b895-104de3648666" name="ppsQuestionsRequired"><con:configuration><path>ppsQuestionsRequired</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41937" id="aadf3c36-6eb5-4997-9163-4b83d2ba14d1"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL" methodName="DetermineIfPPSQuestionsRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41937" id="a9c70a88-bd3b-4e9b-a088-5490f94bf8fd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": null,
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "order": {
        "source": "ELECTRONIC"
    },
    "payers": [
        {
            "planName": "5002"
        },
        {
            "planName": "5003"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f8506cc1-9ce2-43d4-a0ee-57defb546e3c" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3dd28df3-26df-4e13-abdd-dfca0534bb39" name="ppsQuestionsRequired"><con:configuration><path>ppsQuestionsRequired</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41938" id="562c23b9-ad72-4da2-82d8-3632c81f1db4"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL" methodName="DetermineIfPPSQuestionsRequired" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41938" id="a9c70a88-bd3b-4e9b-a088-5490f94bf8fd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": null,
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "order": {
        "source": "ELECTRONIC"
    },
    "payers": [
        {
            "planName": "A013"
        },
        {
            "planName": "B644"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineIfPPSQuestionsRequired/DetermineIfPPSQuestionsRequired/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f676be65-ffbe-4667-8d58-5baf5b28ba8d" name="Valid HTTP Status Codes_8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fce0e6f8-c702-4434-8841-ad11be8b494f" name="ppsQuestionsRequired"><con:configuration><path>ppsQuestionsRequired</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="af7a852d-77a4-47db-81fc-4645e58b3337" name="DetermineAskDaysSupplyOnHand"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="fed5cf9e-944e-4bf9-93a7-9ea62eda3d42" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineAskDaysSupplyOnHand" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="JSON Request" id="699b5213-cf64-4178-be88-53533a9b6479"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAskDaysSupplyOnHand/DetermineAskDaysSupplyOnHand/WADL" methodName="DetermineAskDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="27d9ee80-9d44-4ba0-83e7-6761f397aa0d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "null",
            "lineItemCode": "MNMMT523NAL",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA007",
                    "planName": "null"
                }
            ]
        },
        {
            "hcpcsCode": "E1785",
            "lineItemCode": "MNMMT523NAL",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PA008",
                    "planName": "B861"
                }
            ]
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="AskDaysSupplyOnHand-SingleLineItem" id="fd5caee3-fce1-411f-8c1c-87a410c454d7"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAskDaysSupplyOnHand/DetermineAskDaysSupplyOnHand-SingleLineItem-Input.xls"
def outputfile = projectDir + "/DetermineAskDaysSupplyOnHand/DetermineAskDaysSupplyOnHand-SingleLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"hcpcsCode",sheet1);
addCell(2,0,"id",sheet1);
addCell(3,0,"planName",sheet1);
addCell(4,0,"askDaysSupplyOnHand",sheet1);
addCell(5,0,"PASS/FAIL",sheet1);
addCell(6,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                 //Input for Line Item ID                               
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for hcpcsCode  
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents()                                                                                     
                                                                                     
                                 // Input for Plan
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(3,i).getContents()
                                 // Input for ID
                                requestTemplet.content.lineItems[0].payers[0].id = sh.getCell(4,i).getContents()

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json                                 
                        addCell(0,i,json.lineItems[0].lineItemID,sheet1);                                   
                          // get hcpcsCode from response json                                   
                        addCell(1,i,json.lineItems[0].hcpcsCode,sheet1);  
                         // get hcpcsCode from response json                                   
                        addCell(2,i,json.lineItems[0].payers[0].id,sheet1); 
                         // get hcpcsCode from response json                                   
                        addCell(3,i,json.lineItems[0].payers[0].planName,sheet1);  
                          // get askDaysSupplyOnHand from response json                           
                        addCell(4,i,json.lineItems[0].askDaysSupplyOnHand.toString(),sheet1);  
                                                    
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(5,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"lineItems[0].lineItemID","lineItemID")

                          hcpcsCode = sh.getCell(6,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,hcpcsCode,"lineItems[0].hcpcsCode","hcpcsCode")

                       id = sh.getCell(7,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,id,"lineItems[0].payers[0].id","id")

                       planName = sh.getCell(8,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,planName,"lineItems[0].payers[0].planName","planName")

                         askDaysSupplyOnHand = sh.getCell(9,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,askDaysSupplyOnHand,"lineItems[0].askDaysSupplyOnHand","askDaysSupplyOnHand")
                                                  
                     
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(5,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(6,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(5,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="groovy" name="AskDaysSupplyOnHand-MultiLineItem" id="4c8aaffa-d114-4c41-ac73-90b53d2be2ab"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAskDaysSupplyOnHand/DetermineAskDaysSupplyOnHand-MultiLineItem-Input.xls"
def outputfile = projectDir + "/DetermineAskDaysSupplyOnHand/DetermineAskDaysSupplyOnHand-MultiLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"hcpcsCode",sheet1);
addCell(2,0,"id",sheet1);
addCell(3,0,"planName",sheet1);
addCell(4,0,"askDaysSupplyOnHand",sheet1);
addCell(5,0,"lineItemID",sheet1);
addCell(6,0,"hcpcsCode",sheet1);
addCell(7,0,"id",sheet1);
addCell(8,0,"planName",sheet1);
addCell(9,0,"askDaysSupplyOnHand",sheet1);
addCell(10,0,"PASS/FAIL",sheet1);
addCell(11,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                        //Inputs for LineItem1
                                 //Input for LineItemID                               
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for hcpcsCode  
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents()                                                                                     
                                                                                     
                                 // Input for Plan
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(3,i).getContents()
                                 // Input for ID
                                requestTemplet.content.lineItems[0].payers[0].id = sh.getCell(4,i).getContents()

                        //Inputs for LineItem2
                                //Input for LineItemID                               
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(5,i).getContents()
                                 //Input for hcpcsCode  
                                requestTemplet.content.lineItems[1].hcpcsCode = sh.getCell(6,i).getContents()                                                                                     
                                                                                     
                                 // Input for Plan
                                requestTemplet.content.lineItems[1].payers[0].planName = sh.getCell(7,i).getContents()
                                 // Input for ID
                                requestTemplet.content.lineItems[1].payers[0].id = sh.getCell(8,i).getContents()

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                      //get response for LineItem1            
                           // get lineItemID from response json                                 
                        addCell(0,i,json.lineItems[0].lineItemID,sheet1);                                   
                          // get hcpcsCode from response json                                   
                        addCell(1,i,json.lineItems[0].hcpcsCode,sheet1);  
                         // get hcpcsCode from response json                                   
                        addCell(2,i,json.lineItems[0].payers[0].id,sheet1); 
                         // get hcpcsCode from response json                                   
                        addCell(3,i,json.lineItems[0].payers[0].planName,sheet1);  
                          // get askDaysSupplyOnHand from response json                           
                        addCell(4,i,json.lineItems[0].askDaysSupplyOnHand.toString(),sheet1);
                        
                      //get response for LineItem2  
                          // get lineItemID from response json 
                        addCell(5,i,json.lineItems[1].lineItemID,sheet1);                                   
                          // get hcpcsCode from response json                                   
                        addCell(6,i,json.lineItems[1].hcpcsCode,sheet1);  
                         // get hcpcsCode from response json                                   
                        addCell(7,i,json.lineItems[1].payers[0].id,sheet1); 
                         // get hcpcsCode from response json                                   
                        addCell(8,i,json.lineItems[1].payers[0].planName,sheet1);  
                          // get askDaysSupplyOnHand from response json                           
                        addCell(9,i,json.lineItems[1].askDaysSupplyOnHand.toString(),sheet1);  
                                                    
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(9,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"lineItems[0].lineItemID","lineItemID")

                          hcpcsCode = sh.getCell(10,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,hcpcsCode,"lineItems[0].hcpcsCode","hcpcsCode")

                       id = sh.getCell(11,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,id,"lineItems[0].payers[0].id","id")

                       planName = sh.getCell(12,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,planName,"lineItems[0].payers[0].planName","planName")

                         askDaysSupplyOnHand = sh.getCell(13,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,askDaysSupplyOnHand,"lineItems[0].askDaysSupplyOnHand","askDaysSupplyOnHand")
                                                  
                     lineItemID1 = sh.getCell(14,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"lineItems[1].lineItemID","lineItemID")

                          hcpcsCode1 = sh.getCell(15,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,hcpcsCode1,"lineItems[1].hcpcsCode","hcpcsCode")

                       id1 = sh.getCell(16,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,id1,"lineItems[1].payers[0].id","id")

                       planName1 = sh.getCell(17,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,planName1,"lineItems[1].payers[0].planName","planName")

                         askDaysSupplyOnHand1 = sh.getCell(18,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,askDaysSupplyOnHand1,"lineItems[1].askDaysSupplyOnHand","askDaysSupplyOnHand")
                                                  
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(10,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(11,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(10,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="restrequest" name="EPST-35129" id="7b4b5d9a-754d-47f7-86f5-03e6edfda892"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAskDaysSupplyOnHand/DetermineAskDaysSupplyOnHand/WADL" methodName="DetermineAskDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-35129" id="27d9ee80-9d44-4ba0-83e7-6761f397aa0d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "B861"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAskDaysSupplyOnHand/DetermineAskDaysSupplyOnHand/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8244d2e9-24bb-4aaa-9c56-aa0a87c913a9" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9ca22c29-dc4a-422a-ba0f-a244011d026c" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8c3daa29-ece4-4807-b7ce-40a6403bf01d" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a3982537-8cd3-43bb-91f8-aa7337925070" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="27a61511-30ae-4920-b3e0-9716fad95d0e" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B861</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="18440876-1307-4a8d-882e-0b6d50ee3c48" name="askDaysSupplyOnHand"><con:configuration><path>lineItems[0].askDaysSupplyOnHand</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-35130" id="ca8adb26-c4d7-40b7-b6ab-67575ba3d6fe"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAskDaysSupplyOnHand/DetermineAskDaysSupplyOnHand/WADL" methodName="DetermineAskDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-35130" id="27d9ee80-9d44-4ba0-83e7-6761f397aa0d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA002",
                    "planName": "B864"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAskDaysSupplyOnHand/DetermineAskDaysSupplyOnHand/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25641523-6bbc-4dc1-aab3-8bb0d36e9c57" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1014f576-783d-442c-90dc-ec0bc35e2d05" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b694c7e1-9ee5-4f83-9514-72a7db3d2b6f" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>E0784</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aa54e60a-87bf-410f-bd74-55b4f09eaa78" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8ccdfab1-8e9e-40aa-9689-4312ad7440d6" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B864</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="035ad320-b304-44f1-9993-70960814bbc7" name="askDaysSupplyOnHand"><con:configuration><path>lineItems[0].askDaysSupplyOnHand</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-35131" id="6c396f44-2920-474e-bad1-2ccd1ce272d0"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAskDaysSupplyOnHand/DetermineAskDaysSupplyOnHand/WADL" methodName="DetermineAskDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-35131" id="27d9ee80-9d44-4ba0-83e7-6761f397aa0d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "E0785",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA003",
                    "planName": "B864"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAskDaysSupplyOnHand/DetermineAskDaysSupplyOnHand/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6da0587a-dde8-4f52-85af-4aa81a27a794" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0269e27d-3987-4c1a-8ccd-f2e693df16f4" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42aa7026-03ed-4fef-910e-2240d5583d72" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>E0785</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c3c8319e-bed4-4e0a-bb24-586066d98cc7" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d950fbc5-d939-418a-b69d-a0dc4a1ed841" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B864</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="00de288e-6b8d-4382-b60e-c31d2e3a3542" name="askDaysSupplyOnHand"><con:configuration><path>lineItems[0].askDaysSupplyOnHand</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-35132" id="e8e0c098-8803-430c-a4c7-eb4841f47973"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAskDaysSupplyOnHand/DetermineAskDaysSupplyOnHand/WADL" methodName="DetermineAskDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-35132" id="27d9ee80-9d44-4ba0-83e7-6761f397aa0d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "E0785",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA004",
                    "planName": "A162"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAskDaysSupplyOnHand/DetermineAskDaysSupplyOnHand/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="78a19173-684a-4632-8376-ff3f8b1419e5" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8507682f-5e43-4f37-8563-1cf4bac74122" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1035ca5e-87cc-4329-b6c3-7666ef9ca36d" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>E0785</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="082d757b-8942-46ea-b289-e86ca167d507" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA004</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2a163ab-8f33-46c4-8024-e4c4e210d4c5" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>A162</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c9ab0c9d-b234-4b16-b670-c6a1c21c5388" name="askDaysSupplyOnHand"><con:configuration><path>lineItems[0].askDaysSupplyOnHand</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-35133" id="01f49d2f-98cd-4ed1-ae9b-39269cbe838c"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAskDaysSupplyOnHand/DetermineAskDaysSupplyOnHand/WADL" methodName="DetermineAskDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-35133" id="27d9ee80-9d44-4ba0-83e7-6761f397aa0d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemCode": "MNMMT523NAL",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA005",
                    "planName": "B861"
                }
            ]
        },
        {
            "hcpcsCode": "",
            "lineItemCode": "MNMMT523NAL",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PA006",
                    "planName": "A013"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAskDaysSupplyOnHand/DetermineAskDaysSupplyOnHand/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="93820ef9-5151-4987-9341-9ffce91653d2" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f05379e7-d41b-4b5f-be6e-99cb5dc8579a" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c5a9eaa3-1914-4a9f-866d-741536b994b1" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69bde8f5-063f-42f5-bf7c-a4df69a4872c" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA005</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ba48f1b0-e8b1-4055-a664-8405fdbd7512" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>B861</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="956c5951-1ad6-42fa-b3c5-ecc371a9271d" name="askDaysSupplyOnHand"><con:configuration><path>lineItems[0].askDaysSupplyOnHand</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aa9f17ad-3616-4b6d-8649-012fec573758" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7dbed6e4-6dd2-48a9-b847-1bd6e91d8fa2" name="hcpcsCode"><con:configuration><path>lineItems[1].hcpcsCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="340db287-1f41-4b82-8c9a-330552f9b056" name="id"><con:configuration><path>lineItems[1].payers[0].id</path><content>PA006</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="22d2cd45-47d3-4cb4-8660-8b30288f3c50" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content>A013</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bf30f6a3-6263-4064-9a76-0703a7a02dc5" name="askDaysSupplyOnHand"><con:configuration><path>lineItems[1].askDaysSupplyOnHand</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-35134" id="cf39662c-7987-471e-b474-96da63b5302c"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAskDaysSupplyOnHand/DetermineAskDaysSupplyOnHand/WADL" methodName="DetermineAskDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-35134" id="27d9ee80-9d44-4ba0-83e7-6761f397aa0d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "null",
            "lineItemCode": "MNMMT523NAL",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA007",
                    "planName": "null"
                }
            ]
        },
        {
            "hcpcsCode": "E1785",
            "lineItemCode": "MNMMT523NAL",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PA008",
                    "planName": "B861"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAskDaysSupplyOnHand/DetermineAskDaysSupplyOnHand/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="84e13ae1-b568-4407-90c8-c41e14563e74" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f685504b-8a2b-486f-97c4-987759ada1e8" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b8d68006-de64-4186-993f-1b6bbd2fc8bb" name="hcpcsCode"><con:configuration><path>lineItems[0].hcpcsCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ded1860f-a0cc-4a67-b16b-f8b22558ccea" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA007</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2aef778-1229-40d9-96c0-88f687a40d51" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8ea4a373-8fe8-43d3-9859-23e168cb45a5" name="askDaysSupplyOnHand"><con:configuration><path>lineItems[0].askDaysSupplyOnHand</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6863f652-9f76-43d4-91f3-9ee24e6a28be" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e360ef66-3cb5-4442-9240-093c2b66ea87" name="hcpcsCode"><con:configuration><path>lineItems[1].hcpcsCode</path><content>E1785</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f6bd475b-6193-41dc-babe-db224019070c" name="id"><con:configuration><path>lineItems[1].payers[0].id</path><content>PA008</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="90a743ed-debc-43ef-8cb8-22df591ccf5a" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content>B861</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a34f5f6-4e70-4b17-8a1e-d9ed0f9f9b28" name="askDaysSupplyOnHand"><con:configuration><path>lineItems[1].askDaysSupplyOnHand</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="3fbc5fe6-f8aa-4ddf-a02d-ef165af3ffc0" name="DetermineDaysSupplyOnHand"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="cd087804-41db-45b8-a310-cd4c6336a91e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineDaysSupplyOnHand" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="JSON Request" id="0516858b-ef7b-4e8f-bd62-d58737c9b220"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL" methodName="DetermineDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="057deaed-30b2-4af0-8462-9ff14abcf13a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-01-19T04:48:33.000+0530"
        }
    },
    "order": {
        "lineItems": [
            {
                "daysSupplyOnHand": "-21",
                "lineItemID": "L001"
            },
            {
                "daysSupplyOnHand": "-22",
                "lineItemID": "L002"
            },
            {
                "daysSupplyOnHand": "-9",
                "lineItemID": "L003"
            }
        ],
        "nextEligibleShipDate": "2020-03-03T00:00:00.000+0000"
    }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="DetremineDaysSupplyOnHand-SingleLineItem" id="fbfdf89a-2671-461c-80c9-a723c5c2a126"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand-Input.xls"
def outputfile = projectDir + "/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand-SingleLineItem-Output.xls"
 
//Creating workbook for reading value from Excel Sheet
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults_SingleLineItem")
Sheet jsonInput = wb.getSheet("JSON_SingleLineItem")


//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"Test Case Description",sheet1);
addCell(1,0,"nextEligibleShipDate",sheet1);
addCell(2,0,"lineItemID",sheet1);
addCell(3,0,"daysSupplyOnHand",sheet1);
addCell(4,0,"PASS/FAIL",sheet1);
addCell(5,0,"FAILED DUE TO",sheet1);

//new testStepName

def newTestStep=null

try {

            

               def req = jreq.getContents()
   
                //Assigning request value dynamically

                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplet = new JsonBuilder(slurper);

            
               for (i=2;i&lt;rc;i++){

                                  // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                                                           
                                 //Input for nextEligibleShipDate                                                       
                            requestTemplet.content.order.nextEligibleShipDate= sh.getCell(1,i).getContents().toString()  

                                //Input for lineItemID                                                                       
                            requestTemplet.content.order.lineItems[0].lineItemID = sh.getCell(2,i).getContents()

                               //Input for daysSupplyOnHand                                
                           requestTemplet.content.order.lineItems[0].daysSupplyOnHand = sh.getCell(3,i).getContents().toString()

                        
                             //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                          def getTestCase = testRunner.testCase;
                          def testst = testRunner.testCase.getTestStepByName("JSON Request");                  
                              newTestStep = TestCaseName
                              cleanUp(newTestStep)
                              getTestCase.cloneStep(restRequest,newTestStep)

                                
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)

                          //retrive response
                        
                      def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                             
                        //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)

                                             

                            // get nextEligibleShipDate from response json
                        addCell(0,i,varTestCaseName.getContents().toString(),sheet1)   
                        addCell(1,i,json.order.nextEligibleShipDate.toString(),sheet1); 
                          // get lineItemID from response json          
                        addCell(2,i,json.order.lineItems[0].lineItemID,sheet1);    
                          // get daysSupplyOnHand from response json          
                        addCell(3,i,json.order.lineItems[0].daysSupplyOnHand.toString(),sheet1);   
                         // get lineItemID from response json          
                       

                                    
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);

                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
       
                            //get the expected values                           
                          nextEligibleShipDate = sh.getCell(4,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,nextEligibleShipDate,"order.nextEligibleShipDate","nextEligibleShipDate1")

                         lineItemID = sh.getCell(5,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"order.lineItems[0].lineItemID","lineItemID")

                         daysSupplyOnHand = sh.getCell(6,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,daysSupplyOnHand,"order.lineItems[0].daysSupplyOnHand","daysSupplyOnHand")

                                  
                              //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                      addCell(4,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){

                                 for( e in assertion.errors ){

                                                    addCell(5,i,e.message,sheet1);

                                                }  

                                   }

                                }

                                else{

                                  addCell(4,i,"PASS",sheet1);

                                }

       }

        wb1.write();

                log.info "TestCase Execution Completed successfull"

                }              

            
           
catch(Exception e)

{

                log.info(e)                          

}

finally

{

     //close workbook

     wb.close();
     wb1.close();      

     

}

  //Method code

def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {

          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")

                                assertionType.name = assertionName

                                assertionType.setPath(xPath)

                                assertionType.setExpectedContent(expectedContent)

                                assertionType.setAllowWildcards(true)  

}

   //Method code

def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")

                    StatusCodeAssertionxpath.name = assertionName

                    StatusCodeAssertionxpath.codes=200

}

//method to delete

def cleanUp(String requestName){

                //remove the teststep::Start

                def testCase = testRunner.testCase

                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

                                                testCase.removeTestStep(testStep)

                }

               

                //remove the teststep::End

}

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                Label header = new Label(colmNum,rowNum,lblName);

                sheet1.addCell(header);                

}</script></con:config></con:testStep><con:testStep type="groovy" name="DetremineDaysSupplyOnHand-TwoLineItem" id="3d0fe20a-c3df-43bf-993f-c8b6c1686cfb"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand-Input.xls"
def outputfile = projectDir + "/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand-TwoLineItem-Output.xls"
 
//Creating workbook for reading value from Excel Sheet
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults_TwoLineItem")
Sheet jsonInput = wb.getSheet("JSON_TwoLineItem")


//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"Test Case Description",sheet1);
addCell(1,0,"nextEligibleShipDate",sheet1);
addCell(2,0,"lineItemID1",sheet1);
addCell(3,0,"daysSupplyOnHand1",sheet1);
addCell(4,0,"PASS/FAIL",sheet1);
addCell(5,0,"FAILED DUE TO",sheet1);

//new testStepName

def newTestStep=null

try {

            

               def req = jreq.getContents()
   
                //Assigning request value dynamically

                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplet = new JsonBuilder(slurper);

            
               for (i=2;i&lt;rc;i++){

                                  // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                                                           
                                 //Input for nextEligibleShipDate           
                                  log.info sh.getCell(1,i).getContents().toString()                            
                            requestTemplet.content.order.nextEligibleShipDate= sh.getCell(1,i).getContents().toString()  

                                //Input for lineItemID1
                                 log.info sh.getCell(2,i).getContents().toString()                                      
                            requestTemplet.content.order.lineItems[0].lineItemID = sh.getCell(2,i).getContents()

                               //Input for daysSupplyOnHand1
                                log.info sh.getCell(3,i).getContents().toString()
                           requestTemplet.content.order.lineItems[0].daysSupplyOnHand = sh.getCell(3,i).getContents().toString()

                             //Input for lineItemID1
                                log.info sh.getCell(4,i).getContents().toString()                                      
                            requestTemplet.content.order.lineItems[1].lineItemID = sh.getCell(4,i).getContents()

                               //Input for daysSupplyOnHand1
                               log.info sh.getCell(5,i).getContents().toString()
                           requestTemplet.content.order.lineItems[1].daysSupplyOnHand = sh.getCell(5,i).getContents().toString()


                        
                             //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                          def getTestCase = testRunner.testCase;
                          def testst = testRunner.testCase.getTestStepByName("JSON Request");                  
                              newTestStep = TestCaseName
                              cleanUp(newTestStep)
                              getTestCase.cloneStep(restRequest,newTestStep)

                                
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)

                          //retrive response
                        
                      def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                             
                        //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)

                                             
                           // get nextEligibleShipDate from response json
                        addCell(0,i,varTestCaseName.getContents().toString(),sheet1)   
                        addCell(1,i,json.order.nextEligibleShipDate.toString(),sheet1); 
                           //nextEligibleShipDate1 = subString(nextEligibleShipDate1,1,10)
                             //  log.info "nextEligibleShipDate" +nextEligibleShipDate1
                         // get lineItemID from response json          
                        addCell(2,i,json.order.lineItems[0].lineItemID,sheet1);    
                          // get daysSupplyOnHand from response json          
                        addCell(3,i,json.order.lineItems[0].daysSupplyOnHand.toString(),sheet1);   
                         // get lineItemID from response json          
                         
                         
                                    
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);

                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
       
                            //get the expected values                           
                          nextEligibleShipDate = sh.getCell(6,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,nextEligibleShipDate,"order.nextEligibleShipDate","nextEligibleShipDate")

                         lineItemID = sh.getCell(7,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"order.lineItems[0].lineItemID","lineItemID")

                         daysSupplyOnHand = sh.getCell(8,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,daysSupplyOnHand,"order.lineItems[0].daysSupplyOnHand","daysSupplyOnHand")

                                                          
                              //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                      addCell(4,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){

                                 for( e in assertion.errors ){

                                                    addCell(5,i,e.message,sheet1);

                                                }  

                                   }

                                }

                                else{

                                  addCell(4,i,"PASS",sheet1);

                                }

       }

        wb1.write();

                log.info "TestCase Execution Completed successfull"

                }              

            
           
catch(Exception e)

{

                log.info(e)                          

}

finally

{

     //close workbook

     wb.close();
     wb1.close();      

     

}

  //Method code

def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {

          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")

                                assertionType.name = assertionName

                                assertionType.setPath(xPath)

                                assertionType.setExpectedContent(expectedContent)

                                assertionType.setAllowWildcards(true)  

}

   //Method code

def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")

                    StatusCodeAssertionxpath.name = assertionName

                    StatusCodeAssertionxpath.codes=200

}

//method to delete

def cleanUp(String requestName){

                //remove the teststep::Start

                def testCase = testRunner.testCase

                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

                                                testCase.removeTestStep(testStep)

                }

               

                //remove the teststep::End

}

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                Label header = new Label(colmNum,rowNum,lblName);

                sheet1.addCell(header);                

}</script></con:config></con:testStep><con:testStep type="groovy" name="DetremineDaysSupplyOnHand-ThreeLineItem" id="7b95c7e8-6b6c-4910-916b-982f5e91ecb9"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand-Input.xls"
def outputfile = projectDir + "/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand-ThreeLineItem-Output.xls"
 
//Creating workbook for reading value from Excel Sheet
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults_ThreeLineItem")
Sheet jsonInput = wb.getSheet("JSON_ThreeLineItem")


//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"Test Case Description",sheet1);
addCell(1,0,"nextEligibleShipDate",sheet1);
addCell(2,0,"lineItemID1",sheet1);
addCell(3,0,"daysSupplyOnHand1",sheet1);
addCell(4,0,"PASS/FAIL",sheet1);
addCell(5,0,"FAILED DUE TO",sheet1);

//new testStepName

def newTestStep=null

try {

            

               def req = jreq.getContents()
   
                //Assigning request value dynamically

                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplet = new JsonBuilder(slurper);

            
               for (i=2;i&lt;rc;i++){

                                  // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                                                           
                                 //Input for nextEligibleShipDate           
                                  log.info sh.getCell(1,i).getContents().toString()                            
                            requestTemplet.content.order.nextEligibleShipDate= sh.getCell(1,i).getContents().toString()  

                                //Input for lineItemID1
                                 log.info sh.getCell(2,i).getContents().toString()                                      
                            requestTemplet.content.order.lineItems[0].lineItemID = sh.getCell(2,i).getContents()

                               //Input for daysSupplyOnHand1
                                log.info sh.getCell(3,i).getContents().toString()
                           requestTemplet.content.order.lineItems[0].daysSupplyOnHand = sh.getCell(3,i).getContents().toString()

                             //Input for lineItemID2
                                log.info sh.getCell(4,i).getContents().toString()                                      
                            requestTemplet.content.order.lineItems[1].lineItemID = sh.getCell(4,i).getContents()

                               //Input for daysSupplyOnHand2
                               log.info sh.getCell(5,i).getContents().toString()
                           requestTemplet.content.order.lineItems[1].daysSupplyOnHand = sh.getCell(5,i).getContents().toString()

                           //Input for lineItemID3
                                log.info sh.getCell(6,i).getContents().toString()                                      
                            requestTemplet.content.order.lineItems[2].lineItemID = sh.getCell(6,i).getContents()

                               //Input for daysSupplyOnHand3
                               log.info sh.getCell(7,i).getContents().toString()
                           requestTemplet.content.order.lineItems[2].daysSupplyOnHand = sh.getCell(7,i).getContents().toString()

                       
                             //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                          def getTestCase = testRunner.testCase;
                          def testst = testRunner.testCase.getTestStepByName("JSON Request");                  
                              newTestStep = TestCaseName
                              cleanUp(newTestStep)
                              getTestCase.cloneStep(restRequest,newTestStep)

                                
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)

                          //retrive response
                        
                      def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                             
                        //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)

                                             
                            // get nextEligibleShipDate from response json
                        addCell(0,i,varTestCaseName.getContents().toString(),sheet1)   
                        addCell(1,i,json.order.nextEligibleShipDate.toString(),sheet1); 
                           // get lineItemID from response json          
                        addCell(2,i,json.order.lineItems[0].lineItemID,sheet1);    
                          // get daysSupplyOnHand from response json          
                        addCell(3,i,json.order.lineItems[0].daysSupplyOnHand.toString(),sheet1);   
                         // get lineItemID from response json          
                       
                                    
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);

                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
       
                            //get the expected values                           
                          nextEligibleShipDate = sh.getCell(8,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,nextEligibleShipDate,"order.nextEligibleShipDate","nextEligibleShipDate")

                         lineItemID = sh.getCell(9,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"order.lineItems[0].lineItemID","lineItemID")

                         daysSupplyOnHand = sh.getCell(10,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,daysSupplyOnHand,"order.lineItems[0].daysSupplyOnHand","daysSupplyOnHand")

                        
                                  
                              //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                      addCell(4,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){

                                 for( e in assertion.errors ){

                                                    addCell(5,i,e.message,sheet1);

                                                }  

                                   }

                                }

                                else{

                                  addCell(4,i,"PASS",sheet1);

                                }

       }

        wb1.write();

                log.info "TestCase Execution Completed successfull"

                }              

            
           
catch(Exception e)

{

                log.info(e)                          

}

finally

{

     //close workbook

     wb.close();
     wb1.close();      

     

}

  //Method code

def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {

          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")

                                assertionType.name = assertionName

                                assertionType.setPath(xPath)

                                assertionType.setExpectedContent(expectedContent)

                                assertionType.setAllowWildcards(true)  

}

   //Method code

def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")

                    StatusCodeAssertionxpath.name = assertionName

                    StatusCodeAssertionxpath.codes=200

}

//method to delete

def cleanUp(String requestName){

                //remove the teststep::Start

                def testCase = testRunner.testCase

                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

                                                testCase.removeTestStep(testStep)

                }

               

                //remove the teststep::End

}

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                Label header = new Label(colmNum,rowNum,lblName);

                sheet1.addCell(header);                

}</script></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40793" id="a9084b0d-f484-43b8-bbae-d76add7406c1"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL" methodName="DetermineDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40793" id="057deaed-30b2-4af0-8462-9ff14abcf13a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-01-19T04:48:33.000+0530"
        }
    },
    "order": {
        "lineItems": [
            {
                "daysSupplyOnHand": "13",
                "lineItemID": "L001"
            }
        ],
        "nextEligibleShipDate": "2020-04-25T00:00:00.000+0000\n"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f87434fe-baed-43c8-98ec-f10fd0f0501c" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="25595be2-1d8d-4bd2-a3dd-9d72f9c0b78b" name="nextEligibleShipDate1"><con:configuration><path>order.nextEligibleShipDate</path><content>2020-04-20T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="874b2acb-3e9b-4911-bef8-6e2c6e8c416b" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9b0ffec7-9db2-4f99-8de6-e5af9806d040" name="daysSupplyOnHand"><con:configuration><path>order.lineItems[0].daysSupplyOnHand</path><content>13</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40794" id="13c67929-bd92-445f-9eea-2c378e13ce4e"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL" methodName="DetermineDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40794" id="057deaed-30b2-4af0-8462-9ff14abcf13a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-01-19T04:48:33.000+0530"
        }
    },
    "order": {
        "lineItems": [
            {
                "daysSupplyOnHand": "10",
                "lineItemID": "L001"
            }
        ],
        "nextEligibleShipDate": "null"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="457591b1-26b7-4730-987c-01dd3ffafd07" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4eb4bf64-f25e-45c9-9ebf-a8c573e2aab9" name="nextEligibleShipDate1"><con:configuration><path>order.nextEligibleShipDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d93efeae-d57b-4425-93e0-5d09d3dd51ec" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="791c09b2-2b5a-410e-b243-706a43ce8a15" name="daysSupplyOnHand"><con:configuration><path>order.lineItems[0].daysSupplyOnHand</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40795" id="3e6a03ed-368c-4706-aa98-f997b270b09c"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL" methodName="DetermineDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40795" id="057deaed-30b2-4af0-8462-9ff14abcf13a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-01-19T04:48:33.000+0530"
        }
    },
    "order": {
        "lineItems": [
            {
                "daysSupplyOnHand": "null",
                "lineItemID": "L001"
            }
        ],
        "nextEligibleShipDate": "null"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7199d94d-98e1-4768-8d65-0456f2504826" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="610b5c54-64a0-4963-b06d-827ef5f5b2a2" name="nextEligibleShipDate1"><con:configuration><path>order.nextEligibleShipDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="43b7d4a1-b810-405e-96ff-2ff0bacbaa14" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6c33c180-e79e-47aa-a891-fbcb932199b2" name="daysSupplyOnHand"><con:configuration><path>order.lineItems[0].daysSupplyOnHand</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40796" id="babdee48-472b-41b3-9554-c34f90e4946e"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL" methodName="DetermineDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40796" id="057deaed-30b2-4af0-8462-9ff14abcf13a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-01-19T04:48:33.000+0530"
        }
    },
    "order": {
        "lineItems": [
            {
                "daysSupplyOnHand": "5",
                "lineItemID": "L001"
            }
        ],
        "nextEligibleShipDate": "2019-12-30T00:00:00.000+0000"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8b56ef4a-29a9-48aa-9af9-14f046572da7" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="597ad032-df12-4984-89fe-f984aa5a4410" name="nextEligibleShipDate1"><con:configuration><path>order.nextEligibleShipDate</path><content>2019-12-30T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b19c6f93-088b-4c8b-b333-62f3e9cc64a7" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="47215f1c-2187-4bec-b3b5-989aeb6fbc83" name="daysSupplyOnHand"><con:configuration><path>order.lineItems[0].daysSupplyOnHand</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40797" id="04cb3f3b-6b6a-462a-a7db-63d617ad5b06"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL" methodName="DetermineDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40797" id="057deaed-30b2-4af0-8462-9ff14abcf13a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-01-19T04:48:33.000+0530"
        }
    },
    "order": {
        "lineItems": [
            {
                "daysSupplyOnHand": "12",
                "lineItemID": "L001"
            },
            {
                "daysSupplyOnHand": "6",
                "lineItemID": "L002"
            }
        ],
        "nextEligibleShipDate": "2019-12-15T00:00:00.000+0000"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2d4f9f36-8ee4-4797-b543-fae1ac03deab" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="05c1ff76-6fc3-4d4f-a9a6-c920d36076dd" name="nextEligibleShipDate"><con:configuration><path>order.nextEligibleShipDate</path><content>2020-04-17T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="80066f43-aac8-4d13-b46b-42232c49d48e" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e60e365f-82b7-4afa-91da-b0387f86c66c" name="daysSupplyOnHand"><con:configuration><path>order.lineItems[0].daysSupplyOnHand</path><content>12</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40798" id="fffb1c52-be47-496b-bd8d-17d3291c8778"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL" methodName="DetermineDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40798" id="057deaed-30b2-4af0-8462-9ff14abcf13a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-01-19T04:48:33.000+0530"
        }
    },
    "order": {
        "lineItems": [
            {
                "daysSupplyOnHand": "6",
                "lineItemID": "L001"
            },
            {
                "daysSupplyOnHand": "15",
                "lineItemID": "L002"
            }
        ],
        "nextEligibleShipDate": "2020-01-03T00:00:00.000+0000"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="97c40c4e-a29e-4777-8a27-e40ca36a0ce2" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="501cc228-99b0-4cd2-807f-2521aabc74f6" name="nextEligibleShipDate"><con:configuration><path>order.nextEligibleShipDate</path><content>2020-04-20T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ab514b31-e84d-4975-9f9e-cb6d46448b00" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a7d92251-f3ab-4550-a765-984efbc8e76d" name="daysSupplyOnHand"><con:configuration><path>order.lineItems[0].daysSupplyOnHand</path><content>15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40799" id="1f6971a3-13f7-42b6-ac83-f6a8587100ca"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL" methodName="DetermineDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40799" id="057deaed-30b2-4af0-8462-9ff14abcf13a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-01-19T04:48:33.000+0530"
        }
    },
    "order": {
        "lineItems": [
            {
                "daysSupplyOnHand": "5",
                "lineItemID": "L001"
            },
            {
                "daysSupplyOnHand": "7",
                "lineItemID": "L002"
            }
        ],
        "nextEligibleShipDate": "2020-01-04T00:00:00.000+0000"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d91568b0-280d-44bc-aca6-6a5111f7636f" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0d4321b6-399f-4495-95ce-1e81af56797c" name="nextEligibleShipDate"><con:configuration><path>order.nextEligibleShipDate</path><content>2020-01-04T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fde4eace-9707-46dc-bb69-a4f72d6440fc" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0fce47b-b8a3-4340-aee9-6f0c52b7b155" name="daysSupplyOnHand"><con:configuration><path>order.lineItems[0].daysSupplyOnHand</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40800" id="dfb868f7-2d05-4583-b022-ee18a900b09d"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL" methodName="DetermineDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40800" id="057deaed-30b2-4af0-8462-9ff14abcf13a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-01-19T04:48:33.000+0530"
        }
    },
    "order": {
        "lineItems": [
            {
                "daysSupplyOnHand": "10",
                "lineItemID": "L001"
            },
            {
                "daysSupplyOnHand": "10",
                "lineItemID": "L002"
            }
        ],
        "nextEligibleShipDate": "2020-02-04T00:00:00.000+0000"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1828053f-9983-4175-b837-37b372380809" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e4b32aec-a5e5-4b56-ad33-19f3328931c2" name="nextEligibleShipDate"><con:configuration><path>order.nextEligibleShipDate</path><content>2020-02-04T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="32a0ed4e-5284-4bb4-9960-c22395ced2d1" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="60e6c710-9952-46c1-b550-26e3a2232f04" name="daysSupplyOnHand"><con:configuration><path>order.lineItems[0].daysSupplyOnHand</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40801" id="a6f485fb-89a7-4cd7-a6bf-2e00e1c2393d"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL" methodName="DetermineDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40801" id="057deaed-30b2-4af0-8462-9ff14abcf13a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-01-19T04:48:33.000+0530"
        }
    },
    "order": {
        "lineItems": [
            {
                "daysSupplyOnHand": "-17",
                "lineItemID": "L001"
            },
            {
                "daysSupplyOnHand": "8",
                "lineItemID": "L002"
            }
        ],
        "nextEligibleShipDate": "2020-01-08T00:00:00.000+0000"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8f90d493-ca52-444b-967e-f65696a2ab9c" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="117f844f-e4fa-44a3-86ff-449e5dba20b7" name="nextEligibleShipDate"><con:configuration><path>order.nextEligibleShipDate</path><content>2020-01-08T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="899c4624-12e6-407f-92ee-5d1bf04aa6f8" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9666c897-ae20-4208-a7ca-56e1a0eae3f3" name="daysSupplyOnHand"><con:configuration><path>order.lineItems[0].daysSupplyOnHand</path><content>8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40802" id="1cb07d8f-6380-494f-865f-4f9390cf027d"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL" methodName="DetermineDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40802" id="057deaed-30b2-4af0-8462-9ff14abcf13a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-01-19T04:48:33.000+0530"
        }
    },
    "order": {
        "lineItems": [
            {
                "daysSupplyOnHand": "11",
                "lineItemID": "L001"
            },
            {
                "daysSupplyOnHand": "4",
                "lineItemID": "L002"
            },
            {
                "daysSupplyOnHand": "5",
                "lineItemID": "L003"
            }
        ],
        "nextEligibleShipDate": "2020-01-31T00:00:00.000+0000"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="14930cf5-6a46-430a-949a-bc2996f8a82c" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="58cf6ec0-2ee6-4fe1-b103-bfa0ea97fafe" name="nextEligibleShipDate"><con:configuration><path>order.nextEligibleShipDate</path><content>2020-04-16T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="165973fa-d16a-4f7f-bc13-ea699d91ae63" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0a853ade-9b07-43fe-ab60-df820694968d" name="daysSupplyOnHand"><con:configuration><path>order.lineItems[0].daysSupplyOnHand</path><content>11</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40803" id="3166ff2d-e760-4f70-9c41-c226fe41bfbe"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL" methodName="DetermineDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40803" id="057deaed-30b2-4af0-8462-9ff14abcf13a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-01-19T04:48:33.000+0530"
        }
    },
    "order": {
        "lineItems": [
            {
                "daysSupplyOnHand": "5",
                "lineItemID": "L001"
            },
            {
                "daysSupplyOnHand": "6",
                "lineItemID": "L002"
            },
            {
                "daysSupplyOnHand": "10",
                "lineItemID": "L003"
            }
        ],
        "nextEligibleShipDate": "2020-12-27T00:00:00.000+0000"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="07f2953c-de74-4a46-9948-a093b93c6486" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a3f15562-9454-4066-997a-4db40c0f30bc" name="nextEligibleShipDate"><con:configuration><path>order.nextEligibleShipDate</path><content>2020-12-27T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="52843c2f-fe0b-4137-b918-5996d36d0263" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1167cedd-2e31-475d-a103-c4d18e1e4d9e" name="daysSupplyOnHand"><con:configuration><path>order.lineItems[0].daysSupplyOnHand</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40804" id="528e4a9f-6089-4741-875f-51cf513386f9"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL" methodName="DetermineDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40804" id="057deaed-30b2-4af0-8462-9ff14abcf13a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-01-19T04:48:33.000+0530"
        }
    },
    "order": {
        "lineItems": [
            {
                "daysSupplyOnHand": "7",
                "lineItemID": "L001"
            },
            {
                "daysSupplyOnHand": "11",
                "lineItemID": "L002"
            },
            {
                "daysSupplyOnHand": "14",
                "lineItemID": "L003"
            }
        ],
        "nextEligibleShipDate": "2020-01-30T00:00:00.000+0000"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="653dc78f-d114-4df1-95cd-b2314b105817" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="35dd5977-d566-4437-aa4e-13af600d9176" name="nextEligibleShipDate"><con:configuration><path>order.nextEligibleShipDate</path><content>2020-04-19T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f5c87932-6703-40af-b5eb-f2af807f8e7f" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9a4fbb4e-6040-410f-a420-c71d2cf214c0" name="daysSupplyOnHand"><con:configuration><path>order.lineItems[0].daysSupplyOnHand</path><content>14</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40805" id="4aedeb74-8e08-4cd3-8721-46853211388e"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL" methodName="DetermineDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40805" id="057deaed-30b2-4af0-8462-9ff14abcf13a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-01-19T04:48:33.000+0530"
        }
    },
    "order": {
        "lineItems": [
            {
                "daysSupplyOnHand": "-6",
                "lineItemID": "L001"
            },
            {
                "daysSupplyOnHand": "-17",
                "lineItemID": "L002"
            },
            {
                "daysSupplyOnHand": "0",
                "lineItemID": "L003"
            }
        ],
        "nextEligibleShipDate": "2020-01-10T00:00:00.000+0000"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c7215db1-22aa-4a37-b5c5-2a2cfb1e3f33" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="53df3828-27fb-4a05-9ba3-2ff4b3dece7b" name="nextEligibleShipDate"><con:configuration><path>order.nextEligibleShipDate</path><content>2020-01-10T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="25a611d7-a4aa-4cd2-9914-78f5ab123d5f" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a9546679-c8c4-4bf4-923d-932bf3be5d0d" name="daysSupplyOnHand"><con:configuration><path>order.lineItems[0].daysSupplyOnHand</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40806" id="4c9d457b-3bf4-429b-aa11-bf8921cd57b3"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL" methodName="DetermineDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40806" id="057deaed-30b2-4af0-8462-9ff14abcf13a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-01-19T04:48:33.000+0530"
        }
    },
    "order": {
        "lineItems": [
            {
                "daysSupplyOnHand": "21",
                "lineItemID": "L001"
            },
            {
                "daysSupplyOnHand": "22",
                "lineItemID": "L002"
            },
            {
                "daysSupplyOnHand": "-8",
                "lineItemID": "L003"
            }
        ],
        "nextEligibleShipDate": "2020-03-03T00:00:00.000+0000"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e982d195-2ad4-4b51-a165-f1233f468a59" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6773b7a2-6840-48c2-bfb7-befdcdb197ba" name="nextEligibleShipDate"><con:configuration><path>order.nextEligibleShipDate</path><content>2020-04-27T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c03e3018-c417-4714-b4a2-b92a8d8d5f7d" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ad1eb899-293c-43a5-a022-3ff95d021166" name="daysSupplyOnHand"><con:configuration><path>order.lineItems[0].daysSupplyOnHand</path><content>22</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-40807" id="0e8156f8-3ada-4161-8ef5-4daa302c1953"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL" methodName="DetermineDaysSupplyOnHand" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-40807" id="057deaed-30b2-4af0-8462-9ff14abcf13a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2020-01-19T04:48:33.000+0530"
        }
    },
    "order": {
        "lineItems": [
            {
                "daysSupplyOnHand": "-21",
                "lineItemID": "L001"
            },
            {
                "daysSupplyOnHand": "-22",
                "lineItemID": "L002"
            },
            {
                "daysSupplyOnHand": "-9",
                "lineItemID": "L003"
            }
        ],
        "nextEligibleShipDate": "2020-03-03T00:00:00.000+0000"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDaysSupplyOnHand/DetermineDaysSupplyOnHand/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f9744123-2713-4646-806a-e9756dc16a66" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1a87cf0d-b691-41e3-b4cd-2ccd8c26fc48" name="nextEligibleShipDate"><con:configuration><path>order.nextEligibleShipDate</path><content>2020-03-03T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="30abb7e7-561b-4ca8-b62a-7106882b5f93" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="607c4b24-3a64-4326-ae2b-8787c289b5f5" name="daysSupplyOnHand"><con:configuration><path>order.lineItems[0].daysSupplyOnHand</path><content>-9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="157f418d-b890-4ec1-9840-aa0d93b853f2" name="DetermineAncillaryLimitsForBundles"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="134fc463-6f27-4da7-95eb-819e7ebc6602" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineAncillaryLimitsForBundles" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="JSON Request" id="559fdb37-c4ed-4a11-8c0f-8a56ee6b3165"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL" methodName="DetermineAncillaryLimitsForBundles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="c14f5186-5a8e-4940-9d5b-d6e7be45c5e7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "DK6789",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "DK6789",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="DetermineAncillaryLimitsforBundles-SingleLineItem" id="578f8cc6-67c7-4e62-9230-655ea052fda6"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAncillaryLimitsforBundles/DetermineAncillaryLimitsforBundles-SingleLineItem-Input.xls"
def outputfile = projectDir + "/DetermineAncillaryLimitsforBundles/DetermineAncillaryLimitsforBundles-SingleLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"limitQuantity",sheet1);
addCell(2,0,"limitDays",sheet1);
addCell(3,0,"limitsValid",sheet1);
addCell(4,0,"PASS/FAIL",sheet1);
addCell(5,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                 //Input for Line Item ID                               
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for hcpcsCode  
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents()                                                                                     
                                 

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json                                 
                        addCell(0,i,json.limitsResponse[0].lineItemID,sheet1);                                   
                          // get limitQuantity from response json                                   
                        addCell(1,i,json.limitsResponse[0].limitQuantity.toString(),sheet1);  
                         // get limitDays from response json                                   
                        addCell(2,i,json.limitsResponse[0].limitDays.toString(),sheet1); 
                         // get limitsValid from response json                                   
                        addCell(3,i,json.limitsResponse[0].limitsValid.toString(),sheet1); 
                          
                                                    
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(3,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"limitsResponse[0].lineItemID","lineItemID")

                          limitQuantity = sh.getCell(4,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"limitsResponse[0].limitQuantity","limitQuantity")

                       limitDays = sh.getCell(5,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays,"limitsResponse[0].limitDays","limitDays")

                        limitsValid = sh.getCell(6,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitsValid,"limitsResponse[0].limitsValid","limitsValid")
                     
                                               
                   
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(4,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(5,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(4,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="groovy" name="DetermineAncillaryLimitsforBundles-MultiLineItem" id="a6714283-781b-4eda-a460-094ecf538cf6"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAncillaryLimitsforBundles/DetermineAncillaryLimitsforBundles-MultiLineItem-Input.xls"
def outputfile = projectDir + "/DetermineAncillaryLimitsforBundles/DetermineAncillaryLimitsforBundles-MultiLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"limitQuantity",sheet1);
addCell(2,0,"limitDays",sheet1);
addCell(3,0,"limitsValid",sheet1);
addCell(4,0,"lineItemID1",sheet1);
addCell(5,0,"limitQuantity1",sheet1);
addCell(6,0,"limitDays1",sheet1);
addCell(7,0,"limitsValid1",sheet1);
addCell(8,0,"PASS/FAIL",sheet1);
addCell(9,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                               
                                 //Input for LineItemID for LineItem1                               
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for ancillaryHcpcsCode for LineItem1    
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents()
                        
                        
                               //Input for LineItemID for LineItem2                             
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(3,i).getContents()
                                 //Input for ancillaryHcpcsCode for LineItem2
                                requestTemplet.content.lineItems[1].hcpcsCode = sh.getCell(4,i).getContents()                                                                                                                   
                                 

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)

                                      
                            // json response for LineItem1      
                           // get lineItemID from response json                                 
                        addCell(0,i,json.limitsResponse[0].lineItemID,sheet1);                                   
                          // get limitQuantity from response json                                   
                        addCell(1,i,json.limitsResponse[0].limitQuantity.toString(),sheet1);  
                         // get limitDays from response json                                 
                        addCell(2,i,json.limitsResponse[0].limitDays.toString(),sheet1); 
                        // get limitsValid from response json                                  
                        addCell(3,i,json.limitsResponse[0].limitsValid.toString(),sheet1); 
                        
                         // json response for LineItem2 
                        // get lineItemID from response json                                 
                        addCell(4,i,json.limitsResponse[1].lineItemID,sheet1);                                   
                          // get limitQuantity from response json                                   
                        addCell(5,i,json.limitsResponse[1].limitQuantity.toString(),sheet1);  
                         // get limitDays from response json                                   
                        addCell(6,i,json.limitsResponse[1].limitDays.toString(),sheet1);  
                         // get limitsValid from response json                                  
                        addCell(7,i,json.limitsResponse[1].limitsValid.toString(),sheet1);      
                          
                                                                        
                                                      
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)

                            
                             //get the expected values for LineItem1
                          lineItemID = sh.getCell(5,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"limitsResponse[0].lineItemID","lineItemID")

                          limitQuantity = sh.getCell(6,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"limitsResponse[0].limitQuantity","limitQuantity")

                       limitDays = sh.getCell(7,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays,"limitsResponse[0].limitDays","limitDays")

                        limitsValid = sh.getCell(8,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitsValid,"limitsResponse[0].limitsValid","limitsValid")

                       //get the expected values for LineItem2
                          lineItemID1 = sh.getCell(9,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"limitsResponse[1].lineItemID","lineItemID")

                          limitQuantity1 = sh.getCell(10,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity1,"limitsResponse[1].limitQuantity","limitQuantity")

                       limitDays1 = sh.getCell(11,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays1,"limitsResponse[1].limitDays","limitDays")

                        limitsValid1 = sh.getCell(12,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitsValid1,"limitsResponse[1].limitsValid","limitsValid")                 
                                                                
                     
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(8,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(9,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(8,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36778" id="8360b4b6-f5ce-4971-a5b7-b6523d34e745"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL" methodName="DetermineAncillaryLimitsForBundles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36778" id="c14f5186-5a8e-4940-9d5b-d6e7be45c5e7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4233",
            "lineItemID": "L001"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1b6098a3-692c-42d0-bc3a-75777aa9c129" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="27a0be97-2a89-44de-8297-4d598895582b" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cc6dbca8-462f-4912-a2c7-183462d6a470" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="70ecc523-37cb-4e2d-9d5f-0d204a4c1e8e" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>365</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2577cd0c-b70b-4187-a5af-154a716c63cd" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36779" id="734c9503-6903-4ae8-b9a2-237d22af2ad3"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL" methodName="DetermineAncillaryLimitsForBundles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36779" id="c14f5186-5a8e-4940-9d5b-d6e7be45c5e7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "D2314",
            "lineItemID": "L001"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c3d435b0-ffad-4107-907c-6e7c0947fdb8" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a10531b3-cbe4-41d0-a60e-68d041e7f262" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="28ba586e-82a2-443f-ba50-8a419ce6e78d" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="05c6e3ea-8607-40b3-8c84-bbc386e26f22" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c4ef8892-a002-4f33-b170-64108ed8fb34" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36780" id="9d8b4fc1-6f79-474e-b03e-93cec531abfa"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL" methodName="DetermineAncillaryLimitsForBundles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36780" id="c14f5186-5a8e-4940-9d5b-d6e7be45c5e7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2f7a1bbb-84dc-4665-97ec-074e9caeb6d2" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="234f162c-7c8d-44fa-b8b5-88df57b2b970" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8a751102-4d51-4496-b4d0-5dd04347971a" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0943d283-e43d-442e-a4a7-130b924cc570" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9c3821cd-ffbb-4ecf-a94a-5c6c91491774" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36781" id="cd971026-ef5b-4880-a8fd-d9c83b0c5910"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL" methodName="DetermineAncillaryLimitsForBundles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36781" id="c14f5186-5a8e-4940-9d5b-d6e7be45c5e7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4250",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "E0607",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1bb538da-1023-463c-bea9-4d1c803e53d1" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fab083bd-3ff4-478d-af60-f27a30ee3380" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c2b7bdab-04e8-40f9-9334-7786bf419b3e" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5e700da8-7e73-4ab5-b47c-0bd9b5ce1540" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>80</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="20681200-b70c-40d7-84d3-da239860af23" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="146640af-9095-4000-95a8-590e4d3c5b6b" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="00e3af8d-915e-4a11-b71c-5359abf33e5c" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="932d720f-b47d-44bf-831c-4bc294975d99" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>365</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eebd4103-fa4c-4863-9838-f1092dd5b817" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36782" id="2e47f880-4935-4360-aec8-24fbf7faf97e"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL" methodName="DetermineAncillaryLimitsForBundles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36782" id="c14f5186-5a8e-4940-9d5b-d6e7be45c5e7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4253",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "DK671",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="07461a03-0952-495e-aa7b-d4614aadb7b8" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2370f3bf-8756-49d4-961f-478baaf7bb8b" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="af275a32-84d5-4d0d-9f0f-53456c4ac46f" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4e4e32ad-cca4-4073-9beb-04046e64764b" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>80</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="207c2705-40c0-4e85-ba26-d5586a4bae23" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5081b12f-d44d-4e41-bb23-04ac6312b4de" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7095e356-e711-4369-b4de-704494eacb2d" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0c046aad-0d7c-4f0f-a58b-fff02c64759c" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fc910203-a596-4832-bc5d-b84868e626ac" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36783" id="24a7a6e8-6530-4f1a-98ba-faa4f44230d1"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL" methodName="DetermineAncillaryLimitsForBundles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36783" id="c14f5186-5a8e-4940-9d5b-d6e7be45c5e7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "A9277",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="03ba18bd-2bb8-4193-ab58-dba7f7d8aee5" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ed5234cf-23ad-46e1-974c-dd735e8d4dba" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="673c7e49-a87c-459a-93af-e18c3fbb917d" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dd585a46-876e-4186-9e34-8b445e978a24" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="15bbb888-d892-42a4-bee2-f978cb814255" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c0516c5c-e415-4ff0-beb1-f29a29e31b17" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="101fd7ec-dc95-45ee-a0a9-1e9879e0cf04" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="801d1917-d36b-495a-9a3a-c17898bd1c78" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>80</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8f8125aa-00dd-4e94-8570-fcb16a6c7363" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36784" id="c3867710-0ad7-4846-b1af-fd911106bdbe"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL" methodName="DetermineAncillaryLimitsForBundles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36784" id="c14f5186-5a8e-4940-9d5b-d6e7be45c5e7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "DK6789",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "DK6789",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="05120330-f769-48a9-bf21-27998804bc45" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9f6ffa91-7dcf-4bee-abb9-ec26da4dca78" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="af8d91a2-f5ed-4d60-97f4-7eb8b5a5ba21" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bc5af735-0e0e-4d2d-93a3-74e4eebc74b5" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f467df6-9234-4420-9015-77dcb698b836" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="91910ec3-889c-4ad8-ae9f-cac20197c6fc" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b5961e35-13e6-45d1-9c94-7c03a54212e3" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="49815763-cc2e-4606-99b3-14d80ad89131" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="79eb0c7e-8bf3-4008-a4b9-58a128a22318" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="bc6c3edb-6431-4d11-94b9-5af163f7371b" name="DetermineGracePeriodForLimits"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b9ce9536-16c1-430f-8c8f-45d547685fe8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineGracePeriodForLimits" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="JSON Request" id="bb55af43-0eda-4dc4-b42d-286925598306"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL" methodName="DetermineGracePeriodForLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="0c2d6fd7-c0d9-4994-a5ed-f34ac43bd6dd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "itemNumber": "string",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "B920"
                }
            ]
        },
        {
            "hcpcsCode": "K0553",
            "itemNumber": "string",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "A060"
                }
            ]
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="DetermineGracePeriodForLimits-SingleLineItem" id="f8449519-435b-4ec0-a182-905b183ab343"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineGracePeriodForLimits/DetermineGracePeriodforLimits-Input.xls"
def outputfile = projectDir + "/DetermineGracePeriodForLimits/DetermineGracePeriodforLimits-SingleLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults_SingleLineItem")
Sheet jsonInput = wb.getSheet("JSON_singleLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"gracePeriodDays",sheet1);
addCell(2,0,"limitsValid",sheet1);
addCell(3,0,"PASS/FAIL",sheet1);
addCell(4,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                 //Input for Line Item ID
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for hcpcsCode                                  
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents()
                                //Input for limitsPlanName                               
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(3,i).getContents()                                                                                     
                                 

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json                                 
                        addCell(0,i,json.limitsResponse[0].lineItemID,sheet1);                                   
                          // get gracePeriodDays from response json                                   
                        addCell(1,i,json.limitsResponse[0].gracePeriodDays.toString(),sheet1);  
                         // get limitsValid from response json                                   
                        addCell(2,i,json.limitsResponse[0].limitsValid.toString(),sheet1); 
                                                                            
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(4,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"limitsResponse[0].lineItemID","lineItemID")

                          gracePeriodDays = sh.getCell(5,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,gracePeriodDays,"limitsResponse[0].gracePeriodDays","gracePeriodDays")

                          limitsValid = sh.getCell(6,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitsValid,"limitsResponse[0].limitsValid","limitsValid")                     
                                               
                   
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(3,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(4,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(3,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="groovy" name="DetermineGracePeriodForLimits-MultiLineItem" id="74ebbacb-3865-4d74-800b-d6da315791b2"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineGracePeriodForLimits/DetermineGracePeriodforLimits-Input.xls"
def outputfile = projectDir + "/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits-MultiLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults_MultiLineItem")
Sheet jsonInput = wb.getSheet("JSON_MultiLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"gracePeriodDays",sheet1);
addCell(2,0,"limitsValid",sheet1);
addCell(3,0,"lineItemID1",sheet1);
addCell(4,0,"gracePeriodDays1",sheet1);
addCell(5,0,"limitsValid1",sheet1);
addCell(6,0,"PASS/FAIL",sheet1);
addCell(7,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                  //Input For LineItem1
                                 //Input for Line Item ID                               
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for hcpcsCode  
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents()
                                //Input for limitsPlanName  
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(3,i).getContents() 

                                  //Input For LineItem2                                                                                  
                                 //Input for Line Item ID                               
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(4,i).getContents()
                                 //Input for hcpcsCode  
                                requestTemplet.content.lineItems[1].hcpcsCode = sh.getCell(5,i).getContents()
                                //Input for limitsPlanName  
                                requestTemplet.content.lineItems[1].payers[0].planName = sh.getCell(6,i).getContents()                                                                                  
                                 
                      

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json                                 
                        addCell(0,i,json.limitsResponse[0].lineItemID,sheet1);                                   
                          // get gracePeriodDays from response json                                   
                        addCell(1,i,json.limitsResponse[0].gracePeriodDays.toString(),sheet1);  
                         // get limitsValid from response json                                   
                        addCell(2,i,json.limitsResponse[0].limitsValid.toString(),sheet1);                               
                           // get lineItemID from response json                                 
                        addCell(3,i,json.limitsResponse[1].lineItemID,sheet1);                                   
                          // get gracePeriodDays from response json                                   
                        addCell(4,i,json.limitsResponse[1].gracePeriodDays.toString(),sheet1);  
                         // get limitsValid from response json                                   
                        addCell(5,i,json.limitsResponse[1].limitsValid.toString(),sheet1); 
                                         
                                                                            
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(7,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"limitsResponse[0].lineItemID","lineItemID")

                          gracePeriodDays = sh.getCell(8,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,gracePeriodDays,"limitsResponse[0].gracePeriodDays","gracePeriodDays")

                          limitsValid = sh.getCell(9,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitsValid,"limitsResponse[0].limitsValid","limitsValid")  

                         lineItemID1 = sh.getCell(10,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"limitsResponse[1].lineItemID","lineItemID")

                          gracePeriodDays1 = sh.getCell(11,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,gracePeriodDays1,"limitsResponse[1].gracePeriodDays","gracePeriodDays")

                          limitsValid1 = sh.getCell(12,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitsValid1,"limitsResponse[1].limitsValid","limitsValid")                  
                                                      
                                           
                
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(6,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(7,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(6,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36924" id="90efba78-17fc-46aa-9359-64675ee890eb"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL" methodName="DetermineGracePeriodForLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36924" id="0c2d6fd7-c0d9-4994-a5ed-f34ac43bd6dd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "K0553",
            "itemNumber": "string",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "B187"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4d27bc4a-09e1-4b1b-9dd9-d3576df58ff6" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bb1d9f00-7c25-4f25-adde-675bdc7fb9eb" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="91240fd9-bdcf-422c-8301-679558dfb493" name="gracePeriodDays"><con:configuration><path>limitsResponse[0].gracePeriodDays</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="65aae793-b007-4265-8fca-cd63010b5213" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36925" id="09c99801-0316-4ea1-9ef2-bcdb3d886d39"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL" methodName="DetermineGracePeriodForLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36925" id="0c2d6fd7-c0d9-4994-a5ed-f34ac43bd6dd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "itemNumber": "string",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "A091"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="51dae5dd-2078-4623-a919-faaf7ff33752" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ea98a8b2-e10f-4999-9e04-2797fb243d02" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="70066a64-7d8e-44d6-b935-67e8082b8426" name="gracePeriodDays"><con:configuration><path>limitsResponse[0].gracePeriodDays</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dbaedfcc-bd73-42cb-8a50-3c87ead85563" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36926" id="9656f3d1-c3a2-490a-98a0-f2dfb6b17310"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL" methodName="DetermineGracePeriodForLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36926" id="0c2d6fd7-c0d9-4994-a5ed-f34ac43bd6dd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "KK001",
            "itemNumber": "string",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "A651"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a6efd14f-a9f2-48b0-a421-3c93d6b366d3" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f11d6f31-63b3-4db1-9570-e24f7e434587" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a41a1414-8aba-47fe-80fa-8f6f989522be" name="gracePeriodDays"><con:configuration><path>limitsResponse[0].gracePeriodDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="11c3f556-6dae-4f00-abd0-1b688ad8a6b7" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36927" id="4d1dd079-8947-4c06-abb6-617fe90898c2"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL" methodName="DetermineGracePeriodForLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36927" id="0c2d6fd7-c0d9-4994-a5ed-f34ac43bd6dd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "null",
            "itemNumber": "string",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "null"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7f07b26d-4529-4dcd-bd95-c7ff5b9e1e3e" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e4c062b-2ecf-4b90-b1c2-0f4e77a85ac0" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6c5a1e1b-613d-4219-af14-ef3de9f9f784" name="gracePeriodDays"><con:configuration><path>limitsResponse[0].gracePeriodDays</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5b203588-f0de-420d-97bf-63655de92bdd" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36928" id="7f352129-bec4-403a-beeb-a4afefa108b8"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL" methodName="DetermineGracePeriodForLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36928" id="0c2d6fd7-c0d9-4994-a5ed-f34ac43bd6dd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "KK001",
            "itemNumber": "string",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "B622"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d8a41c7a-bc4b-466b-bb4b-9ca5d6d92467" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b7403e7c-acf0-4332-9c45-7d835bbcf762" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4aaf35f8-2ac9-499e-93ca-ea3e9dae81b3" name="gracePeriodDays"><con:configuration><path>limitsResponse[0].gracePeriodDays</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7f347d08-6595-4150-b00e-124f9ddbb0d9" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36929" id="3090e1e6-792c-4609-b61b-01a6fb64a1e7"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL" methodName="DetermineGracePeriodForLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36929" id="0c2d6fd7-c0d9-4994-a5ed-f34ac43bd6dd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "K0553",
            "itemNumber": "string",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "B261"
                }
            ]
        },
        {
            "hcpcsCode": "INVALID",
            "itemNumber": "string",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "B261"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8ca43d63-13bb-408f-b3ab-c99466e2edef" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5ccb187c-9bb1-408d-a64d-dda67250d315" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1883b775-cd6f-48c3-b523-11dc6861afe5" name="gracePeriodDays"><con:configuration><path>limitsResponse[0].gracePeriodDays</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e57b2717-3c29-4bee-9407-5338bd601b1d" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2bc73e2c-21cb-4fb6-9250-0d2ee35bb3f4" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="744e5661-2516-419b-ad6f-d681827baeb2" name="gracePeriodDays"><con:configuration><path>limitsResponse[1].gracePeriodDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f7968905-ec52-4c6c-848b-3ec96044603a" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36930" id="1bbdae34-db4d-49b2-b55b-c5250340fa31"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL" methodName="DetermineGracePeriodForLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36930" id="0c2d6fd7-c0d9-4994-a5ed-f34ac43bd6dd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A9276",
            "itemNumber": "string",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "A549"
                }
            ]
        },
        {
            "hcpcsCode": "",
            "itemNumber": "string",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "A985"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b64b6f09-48be-4b9d-a437-a3b081230c8b" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="162f08ed-c6ac-451f-9198-225c7eb0a1dd" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="34b65865-f308-4f6d-a93b-afeca1f267b7" name="gracePeriodDays"><con:configuration><path>limitsResponse[0].gracePeriodDays</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="23fca3b2-e2eb-4ad9-9cc5-4aa95c92530a" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e6fafbb-1491-4bd3-8b24-a55c691f6653" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="28fa3fe8-ca5d-4f46-af55-a619d8e12026" name="gracePeriodDays"><con:configuration><path>limitsResponse[1].gracePeriodDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ae234d9b-8cc7-430e-99a4-da8281f46a57" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36931" id="311fc342-858c-4cd1-97a7-ef321e940b42"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL" methodName="DetermineGracePeriodForLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36931" id="0c2d6fd7-c0d9-4994-a5ed-f34ac43bd6dd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "itemNumber": "string",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "INVALID"
                }
            ]
        },
        {
            "hcpcsCode": "INVALID",
            "itemNumber": "string",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "null"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b603535d-708b-4dfa-b0c1-ab2eb500157f" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a703ad6c-82b1-40d8-a70a-8bc06d82586c" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="68de286c-124c-4c63-ac08-d1a5db71faf6" name="gracePeriodDays"><con:configuration><path>limitsResponse[0].gracePeriodDays</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f91eef64-0d01-4bca-a6c0-9cff0b6832c1" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1245b8d8-11f6-4444-9be7-694890c302f8" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ee264060-66f7-4bae-996a-5bd85113cfc3" name="gracePeriodDays"><con:configuration><path>limitsResponse[1].gracePeriodDays</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="014e396c-beb6-4be5-84d5-14cd7317691b" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36932" id="0fd3b5e1-99e9-4919-8c5b-9c191c1fa8b5"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL" methodName="DetermineGracePeriodForLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36932" id="0c2d6fd7-c0d9-4994-a5ed-f34ac43bd6dd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "INVALID",
            "itemNumber": "string",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "INVALID"
                }
            ]
        },
        {
            "hcpcsCode": "INVALID",
            "itemNumber": "string",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "B863"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3279063c-bab9-4227-9764-613743dd63bf" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="daf6a497-cc3f-49b3-abbd-d5a3ef795700" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0e250f6a-9152-4a20-bc65-ca6211e715f2" name="gracePeriodDays"><con:configuration><path>limitsResponse[0].gracePeriodDays</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="257a78ff-86b1-41b9-a0c5-d9372ac025dd" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="147f438d-71e0-4737-b379-c0a97bfb7160" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a8816d93-3b91-4bad-82eb-d8773d62966f" name="gracePeriodDays"><con:configuration><path>limitsResponse[1].gracePeriodDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="59710788-e53d-40a3-a897-a67e770da4b7" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36933" id="ed4df087-180e-46e6-837b-2b304f6e28be"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL" methodName="DetermineGracePeriodForLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36933" id="0c2d6fd7-c0d9-4994-a5ed-f34ac43bd6dd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "itemNumber": "string",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "B920"
                }
            ]
        },
        {
            "hcpcsCode": "K0553",
            "itemNumber": "string",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "A060"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineGracePeriodForLimits/DetermineGracePeriodForLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="cc822afc-523a-4509-b2dc-5894b6689c5e" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c582f553-cfc2-4c56-a5d3-13c04d4c19d7" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="57a8700e-ca66-4a73-b9a8-acd961a2c4d0" name="gracePeriodDays"><con:configuration><path>limitsResponse[0].gracePeriodDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f2d3820f-982a-4a54-9059-7002ed8194fe" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6954cbdc-c1dc-428c-a6a1-0d6a75665297" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c24f6dc-0bc5-45a7-9085-d5948a4c17bb" name="gracePeriodDays"><con:configuration><path>limitsResponse[1].gracePeriodDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4c3f107d-509e-4649-b14e-3e7ace1f2032" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="9cd31023-2d9f-4cab-a728-0e37e7d5b2c1" name="DetermineSampleLimits"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="fd0144f0-13e1-4d33-be69-74801f163490" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineSampleLimits" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="JSON Request" id="b59d0d11-e3f3-4945-9545-1bf3be0099d5"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineSampleLimits/DetermineSampleLimits/WADL" methodName="DetermineSampleLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="bd7c84ea-b130-4f8c-805d-b5d4e9aa42db" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "123",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        }
    },
    "lineItems": [
        {
            "itemNumber": "DD9DX1113",
            "lineItemID": "L001"
        },
        {
            "itemNumber": "DD9DX1113",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="DetermineSampleLimits-SingleLineItem" id="668ccc0c-5914-4d9f-9a19-98a113326817"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineSampleLimits/DetermineSampleLimits-Input.xls"
def outputfile = projectDir + "/DetermineSampleLimits/DetermineSampleLimits-SingleLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults_SingleLineItem")
Sheet jsonInput = wb.getSheet("JSON_SingleLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"limitQuantity",sheet1);
addCell(2,0,"limitsValid",sheet1);
addCell(3,0,"PASS/FAIL",sheet1);
addCell(4,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                 //Input for Line Item ID                               
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for hcpcsCode  
                                requestTemplet.content.lineItems[0].itemNumber = sh.getCell(2,i).getContents()                                                                                     
                                 

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json                                 
                        addCell(0,i,json.limitsResponse[0].lineItemID,sheet1);                                   
                          // get limitQuantity from response json                                   
                        addCell(1,i,json.limitsResponse[0].limitQuantity.toString(),sheet1);  
                          // get limitsValid from response json                                   
                        addCell(2,i,json.limitsResponse[0].limitsValid.toString(),sheet1);                           
                                                    
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(3,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"limitsResponse[0].lineItemID","lineItemID")

                          limitQuantity = sh.getCell(4,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"limitsResponse[0].limitQuantity","limitQuantity")

                          limitsValid = sh.getCell(5,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitsValid,"limitsResponse[0].limitsValid","limitsValid")                     
                                      
             
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(3,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(4,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(3,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="groovy" name="DetermineSampleLimits-MultiLineItem" id="cb1a4baa-0312-462e-85d8-22c2baf385a6"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineSampleLimits/DetermineSampleLimits-Input.xls"
def outputfile = projectDir + "/DetermineSampleLimits/DetermineSampleLimits-MultiLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults_MultiLineItem")
Sheet jsonInput = wb.getSheet("JSON_MultiLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"limitQuantity",sheet1);
addCell(2,0,"limitsValid",sheet1);
addCell(3,0,"lineItemID1",sheet1);
addCell(4,0,"limitQuantity1",sheet1);
addCell(5,0,"limitsValid1",sheet1);
addCell(6,0,"PASS/FAIL",sheet1);
addCell(7,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                               
                                 //Input for LineItemID for LineItem1                               
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for ancillaryHcpcsCode for LineItem1    
                                requestTemplet.content.lineItems[0].itemNumber = sh.getCell(2,i).getContents()
                        
                        
                               //Input for LineItemID for LineItem2                             
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(3,i).getContents()
                                 //Input for ancillaryHcpcsCode for LineItem2
                                requestTemplet.content.lineItems[1].itemNumber = sh.getCell(4,i).getContents()                                                                                                                   
                                 

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)

                                      
                            // json response for LineItem1      
                           // get lineItemID from response json                                 
                        addCell(0,i,json.limitsResponse[0].lineItemID,sheet1);                                   
                          // get limitQuantity from response json                                   
                        addCell(1,i,json.limitsResponse[0].limitQuantity.toString(),sheet1);                          
                        // get limitsValid from response json                                  
                        addCell(2,i,json.limitsResponse[0].limitsValid.toString(),sheet1); 
                        
                         // json response for LineItem2 
                        // get lineItemID from response json                                 
                        addCell(3,i,json.limitsResponse[1].lineItemID,sheet1);                                   
                          // get limitQuantity from response json                                   
                        addCell(4,i,json.limitsResponse[1].limitQuantity.toString(),sheet1);                            
                         // get limitsValid from response json                                  
                        addCell(5,i,json.limitsResponse[1].limitsValid.toString(),sheet1);      
                          
                                                                        
                                                      
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)

                            
                             //get the expected values for LineItem1
                          lineItemID = sh.getCell(5,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"limitsResponse[0].lineItemID","lineItemID")

                          limitQuantity = sh.getCell(6,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"limitsResponse[0].limitQuantity","limitQuantity")
                
                        limitsValid = sh.getCell(7,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitsValid,"limitsResponse[0].limitsValid","limitsValid")

                       //get the expected values for LineItem2
                          lineItemID1 = sh.getCell(8,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"limitsResponse[1].lineItemID","lineItemID")

                          limitQuantity1 = sh.getCell(9,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity1,"limitsResponse[1].limitQuantity","limitQuantity")

                          limitsValid1 = sh.getCell(10,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitsValid1,"limitsResponse[1].limitsValid","limitsValid")                 
                                                                
                     
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(6,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(7,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(6,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39963" id="974d3b6f-7ab5-4cf9-990b-386e6b9f5d27"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineSampleLimits/DetermineSampleLimits/WADL" methodName="DetermineSampleLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39963" id="bd7c84ea-b130-4f8c-805d-b5d4e9aa42db" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "123",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        }
    },
    "lineItems": [
        {
            "itemNumber": "S958320149",
            "lineItemID": "L001"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineSampleLimits/DetermineSampleLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7c8aef57-3322-4547-a174-fa6eb00719bc" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e6b06680-dd28-4ae4-83bf-1c24c37baef3" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="016ccb27-57a2-42a1-a8d0-2a3c57dd5a37" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="da5ac023-d6b5-4ede-a531-faccd94e77f6" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39964" id="98aa2683-e26e-470d-b13c-c4ea672279c7"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineSampleLimits/DetermineSampleLimits/WADL" methodName="DetermineSampleLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39964" id="bd7c84ea-b130-4f8c-805d-b5d4e9aa42db" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "123",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        }
    },
    "lineItems": [
        {
            "itemNumber": "11D2314",
            "lineItemID": "L001"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineSampleLimits/DetermineSampleLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9ccd635f-c962-44b7-b2cf-cc9b22872512" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="48f6fe1c-3bb0-4d36-b0b0-69909cbc78db" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1aec48fb-1bfc-4ef4-911b-40946e169463" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5fb98f69-0d23-4f71-af39-065bea13e759" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39965" id="f0f9690f-13d0-4a31-b342-4e68a087a73e"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineSampleLimits/DetermineSampleLimits/WADL" methodName="DetermineSampleLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39965" id="bd7c84ea-b130-4f8c-805d-b5d4e9aa42db" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "123",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        }
    },
    "lineItems": [
        {
            "itemNumber": "",
            "lineItemID": "L001"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineSampleLimits/DetermineSampleLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="73657dd5-d2f7-4edc-9de6-9d94df2c4fe9" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8f11d13d-0811-48bf-b318-2b0187762710" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0585270f-c31b-4b9f-8850-93a596442bae" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81dd3401-b2a1-4728-bb08-f7562f5bab8f" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39966" id="fdaa8f95-39f2-456e-81c8-2621894fe576"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineSampleLimits/DetermineSampleLimits/WADL" methodName="DetermineSampleLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39966" id="bd7c84ea-b130-4f8c-805d-b5d4e9aa42db" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "123",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        }
    },
    "lineItems": [
        {
            "itemNumber": "S9ZPL10000F",
            "lineItemID": "L001"
        },
        {
            "itemNumber": "S9MNMMT7020A",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineSampleLimits/DetermineSampleLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2073ac71-23f4-455c-a34c-a508712b60f5" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3353279e-5d0c-4ad4-90dd-59c3250fa6a3" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="171aa0a9-0922-4924-9860-9d5516042a58" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="696ffa88-01fc-4c0a-bde4-544459cb399e" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b3f94177-f7dc-42b2-94a8-dc04f4e445ad" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f845dd4c-55db-4616-8b4f-c0b8bcf001c2" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="59329dcd-f618-43e2-8399-1e2c10f54d6e" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39967" id="9ef8babd-e97c-494e-9092-fa436c99b0e4"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineSampleLimits/DetermineSampleLimits/WADL" methodName="DetermineSampleLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39967" id="bd7c84ea-b130-4f8c-805d-b5d4e9aa42db" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "123",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        }
    },
    "lineItems": [
        {
            "itemNumber": "S9ZPAP100CCS",
            "lineItemID": "L001"
        },
        {
            "itemNumber": "H0607",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineSampleLimits/DetermineSampleLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8ad80ab3-bf9d-4da5-bd48-d42b92acedff" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cfe39427-a881-4eeb-887f-21420072d500" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ab21b13e-8527-4b2e-b6de-fc152626a69a" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="63d2217e-46d3-42bc-af80-488b641239ad" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f8536b45-c0f4-448d-8358-4402087a3613" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4ae1ba20-5266-4d90-b91a-444208fac0cf" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0d35fcfe-d683-4bfc-bd11-0abf69caa2cd" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39968" id="d0455cb9-2de2-4468-92b0-1650a132c66d"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineSampleLimits/DetermineSampleLimits/WADL" methodName="DetermineSampleLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39968" id="bd7c84ea-b130-4f8c-805d-b5d4e9aa42db" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "123",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        }
    },
    "lineItems": [
        {
            "itemNumber": "null",
            "lineItemID": "L001"
        },
        {
            "itemNumber": "S9ZPL30028S",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineSampleLimits/DetermineSampleLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c20df5fb-6b38-45a0-aba9-1241c08ee1ee" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ee1ffcc5-aa42-4a70-b7f7-0c5f35d8e869" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bbe2ae5b-e4bb-48b0-b13c-c3678cab5ad2" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f7036b5-2a26-48ed-a665-1aa1146f4ede" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0243167a-4b42-45ec-bd27-99f3c77789fd" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="43eec018-bc70-4887-b51b-af4a22b9f2f3" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="258a1772-abef-4fe2-8e0a-b1976009fdf7" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39969" id="9604de1a-e5e8-4bd5-8311-318bc79e5311"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineSampleLimits/DetermineSampleLimits/WADL" methodName="DetermineSampleLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39969" id="bd7c84ea-b130-4f8c-805d-b5d4e9aa42db" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "123",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        }
    },
    "lineItems": [
        {
            "itemNumber": "DD9DX1113",
            "lineItemID": "L001"
        },
        {
            "itemNumber": "DD9DX1113",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineSampleLimits/DetermineSampleLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7fbd5603-23d3-445e-97fd-bcd356152560" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a4c2e525-c182-4796-8355-49048537fdbd" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e8fb6ca-8038-45ca-87a0-bffbf1fc085c" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="06f09e21-c4b6-41a3-a83f-c13df36713fe" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0ae63a7-f80c-4bdf-8796-47621f85c1aa" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6e2e6873-86e0-45ca-84b6-ae78f9eabf56" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2a300a71-7813-45e4-bd27-2669fa513b87" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="70c2b993-1dd9-4f35-b42d-0096cd798861" name="DeterminePrimaryWarehouse"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ae47a0af-cbfd-49a2-8117-b6abfc925139" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeterminePrimaryWarehouse" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DeterminePrimaryWarehouse_SingleLineItem" id="9cebe240-dde5-45aa-91b8-35bd44089fdb"><con:settings/><con:config><script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse-Input.xls"
def outputfile = projectDir + "/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse-SingleLineItem-Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults_SingleLineItem")
Sheet jsonInput = wb.getSheet("JSON_SingleLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"itemNumber",sheet1);
addCell(2,0,"requiresPharmacyDispensing", sheet1);
addCell(3,0,"warehouseLocationCd",sheet1);
addCell(4,0,"priority",sheet1);
addCell(5,0,"warehouseLocationCd",sheet1);
addCell(6,0,"priority",sheet1);
addCell(7,0,"warehouseLocationCd",sheet1);
addCell(8,0,"priority",sheet1);
addCell(9,0,"warehouseLocationCd",sheet1);
addCell(10,0,"priority",sheet1);
addCell(11,0,"warehouseLocationCd",sheet1);
addCell(12,0,"priority",sheet1);
addCell(13,0,"warehouseLocationCd",sheet1);
addCell(14,0,"priority",sheet1);
addCell(15,0,"warehouseLocationCd",sheet1);
addCell(16,0,"priority",sheet1);
addCell(17,0,"warehouseLocationCd",sheet1);
addCell(18,0,"priority",sheet1);
addCell(19,0,"warehouseLocationCd",sheet1);
addCell(20,0,"priority",sheet1);
addCell(21,0,"warehouseLocationCd",sheet1);
addCell(22,0,"priority",sheet1);
addCell(23,0,"warehouseLocationCd",sheet1);
addCell(24,0,"priority",sheet1);
addCell(25,0,"warehouseLocationCd",sheet1);
addCell(26,0,"priority",sheet1);
addCell(27,0,"warehouseLocationCd",sheet1);
addCell(28,0,"priority",sheet1);
addCell(29,0,"warehouseLocationCd",sheet1);
addCell(30,0,"priority",sheet1);
addCell(31,0,"warehouseLocationCd",sheet1);
addCell(32,0,"priority",sheet1);
addCell(33,0,"warehouseLocationCd",sheet1);
addCell(34,0,"priority",sheet1);
addCell(35,0,"warehouseLocationCd",sheet1);
addCell(36,0,"priority",sheet1);
addCell(37,0,"warehouseLocationCd",sheet1);
addCell(38,0,"priority",sheet1);
addCell(39,0,"warehouseLocationCd",sheet1);
addCell(40,0,"priority",sheet1);
addCell(41,0,"warehouseLocationCd",sheet1);
addCell(42,0,"priority",sheet1);
addCell(43,0,"recommendedCarrier",sheet1);
addCell(44,0,"recommendedShippingMethod",sheet1);
addCell(45,0,"primaryWarehouse",sheet1);
addCell(45,0,"warehouseLocationCd",sheet1);
addCell(46,0,"priority",sheet1);
addCell(47,0,"PASS/FAIL",sheet1);
addCell(48,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

//try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                        
                
                                 //Input for recommendedCarrier                               
                                requestTemplet.content.order.recommendedCarrier = sh.getCell(1,i).getContents()                                                              
                                requestTemplet.content.order.recommendedShippingMethod = sh.getCell(2,i).getContents()  
                                requestTemplet.content.order.lineItems[0].lineItemID = sh.getCell(3,i).getContents()
                                requestTemplet.content.order.lineItems[0].itemNumber = sh.getCell(4,i).getContents()
                                requestTemplet.content.order.lineItems[0].requiresPharmacyDispensing = sh.getCell(5,i).getContents()
                                
                                //Input for acceptableShipFromWarehouses                                
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd = sh.getCell(6,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[0].priority = sh.getCell(7,i).getContents() 
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[1].warehouseLocationCd = sh.getCell(8,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[1].priority = sh.getCell(9,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[2].warehouseLocationCd = sh.getCell(10,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[2].priority = sh.getCell(11,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[3].warehouseLocationCd = sh.getCell(12,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[3].priority = sh.getCell(13,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[4].warehouseLocationCd = sh.getCell(14,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[4].priority = sh.getCell(15,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[5].warehouseLocationCd = sh.getCell(16,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[5].priority = sh.getCell(17,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[6].warehouseLocationCd = sh.getCell(18,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[6].priority = sh.getCell(19,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[7].warehouseLocationCd = sh.getCell(20,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[7].priority = sh.getCell(21,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[8].warehouseLocationCd = sh.getCell(22,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[8].priority = sh.getCell(23,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[9].warehouseLocationCd = sh.getCell(24,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[9].priority = sh.getCell(25,i).getContents()                                                    
                                
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get values from response json                          
                                           
                         	  int celNumForLineItems=0; celNumForShipWarehouses=3;                          
	                           for(int arrForLineItems=0; arrForLineItems<json.order.lineItems.size(); arrForLineItems++)
	                           {           
	                      	     addCell(celNumForLineItems,i,json.order.lineItems[arrForLineItems].lineItemID.toString(),sheet1);
	                              celNumForLineItems = celNumForLineItems +1;
	                              addCell(celNumForLineItems,i,json.order.lineItems[arrForLineItems].itemNumber.toString(),sheet1); 
	                              celNumForLineItems = celNumForLineItems +1;                                      
	                              addCell(celNumForLineItems,i,json.order.lineItems[arrForLineItems].requiresPharmacyDispensing.toString(),sheet1);                                                             
	                                  
	                                  for(int arrForShipWarehouses=0; arrForShipWarehouses<json.order.lineItems[arrForLineItems].acceptableShipFromWarehouses.size(); arrForShipWarehouses++)
	                                  {                    
	                                  addCell(celNumForShipWarehouses,i,json.order.lineItems[arrForLineItems].acceptableShipFromWarehouses[arrForShipWarehouses].warehouseLocationCd.toString(),sheet1);
	                                  celNumForShipWarehouses = celNumForShipWarehouses+1;                                       
	                                  addCell(celNumForShipWarehouses,i,json.order.lineItems[arrForLineItems].acceptableShipFromWarehouses[arrForShipWarehouses].priority.toString(),sheet1);
	                                  celNumForShipWarehouses = celNumForShipWarehouses+1;
	                                  }
	                             }                        
                     
		                   int celNumForwarehouseAndPriority=23;
		                   for(int arrForwarehouseAndPriority=0; arrForwarehouseAndPriority<json.order.acceptableShipFromWarehouses.size(); arrForwarehouseAndPriority++)
		                    { 	                                     
		                      addCell(celNumForwarehouseAndPriority,i,json.order.acceptableShipFromWarehouses[arrForwarehouseAndPriority].warehouseLocationCd.toString(),sheet1);
		                      celNumForwarehouseAndPriority = celNumForwarehouseAndPriority+1;                                       
		                      addCell(celNumForwarehouseAndPriority,i,json.order.acceptableShipFromWarehouses[arrForwarehouseAndPriority].priority.toString(),sheet1);
		                      celNumForwarehouseAndPriority = celNumForwarehouseAndPriority+1;
		                    }
                   
                        addCell(43,i,json.order.recommendedCarrier.toString(),sheet1);                                                                      
                        addCell(44,i,json.order.recommendedShippingMethod.toString(),sheet1);
                        addCell(45,i,json.order.primaryWarehouse.warehouseLocationCd.toString(),sheet1); 
                        addCell(46,i,json.order.primaryWarehouse.priority.toString(),sheet1);                  
           
                                                    
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                     //ValidHTTPStatusCodes 200 Assertion
                   addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                 //get the expected values                	
                         int celForLItem=26; celForacceptableWH=29;
                   		for(int arrForLItem=0; arrForLItem<json.order.lineItems.size(); arrForLItem++)
                     	{     
                            lineItemID = sh.getCell(celForLItem,i).getContents()
	                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"order.lineItems["+arrForLItem+"].lineItemID","lineItemID")
	                       celForLItem = celForLItem+1

                            itemNumber = sh.getCell(celForLItem,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,itemNumber,"order.lineItems["+arrForLItem+"].itemNumber","itemNumber")
	                       celForLItem = celForLItem+1

                            requiresPharmacyDispensing = sh.getCell(celForLItem,i).getContents().toString()
                       	   addAssertionJsonPathMatch(testStepForAssertion,requiresPharmacyDispensing,"order.lineItems["+arrForLItem+"].requiresPharmacyDispensing","requiresPharmacyDispensing")
                       
                      			for(int arrForacceptableWH=0; arrForacceptableWH<json.order.lineItems[arrForLItem].acceptableShipFromWarehouses.size(); arrForacceptableWH++)
                      			{                      	
			                       warehouseLocationCd = sh.getCell(celForacceptableWH,i).getContents().toString()
			                       addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd,"order.lineItems["+arrForLItem+"].acceptableShipFromWarehouses["+arrForacceptableWH+"].warehouseLocationCd","warehouseLocationCd")
			                       celForacceptableWH = celForacceptableWH+1;

			                       priority = sh.getCell(celForacceptableWH,i).getContents().toString()
			                       addAssertionJsonPathMatch(testStepForAssertion,priority,"order.lineItems["+arrForLItem+"].acceptableShipFromWarehouses["+arrForacceptableWH+"].priority","priority")
			                 	   celForacceptableWH = celForacceptableWH+1; 
                  				 }
                     	      }                     	                  
                            
	                 		int celNumForAWH =49              
	                         for(int arrmtcd=0; arrmtcd<json.order.acceptableShipFromWarehouses.size(); arrmtcd++)
                           	{                     
                                    warehouseLocationCd = sh.getCell(celNumForAWH,i).getContents().toString()
		                      	 addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd,"order.acceptableShipFromWarehouses["+arrmtcd+"].warehouseLocationCd","warehouseLocationCd")
		                          celNumForAWH = celNumForAWH +1;
		                          
			                       priority = sh.getCell(celNumForAWH,i).getContents().toString()
			                       addAssertionJsonPathMatch(testStepForAssertion,priority,"order.acceptableShipFromWarehouses["+arrmtcd+"].priority","priority")
			                       celNumForAWH = celNumForAWH +1;
                               }
         				         
            
                       recommendedCarrier = sh.getCell(69,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrier,"order.recommendedCarrier","recommendedCarrier")

                       recommendedShippingMethod = sh.getCell(70,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,recommendedShippingMethod,"order.recommendedShippingMethod","recommendedShippingMethod")

                       warehouseLocationCd_P = sh.getCell(71,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd_P,"order.primaryWarehouse.warehouseLocationCd","warehouseLocationCd")

                       priority_P = sh.getCell(72,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,priority_P,"order.primaryWarehouse.priority","priority")
                
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
        			if(assertionResult.toString().equals("FAILED")){

                                       addCell(47,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(48,i,e.message,sheet1);
                                                }
                                   }

                                }

                                else{
                                   addCell(47,i,"PASS",sheet1);
                                }
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

               // }             
     
/*catch(Exception e)
{

                 log.info(e)                         
}

finally
{*/

    //close workbook
     wb.close();
     wb1.close();     

//} 
  
//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }
    
            //remove the teststep::End
}


//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="DeterminePrimaryWarehouse_TwoLineItem" id="475dfb96-7add-4eda-9e87-f750fba2eca7"><con:settings/><con:config><script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse-Input.xls"
def outputfile = projectDir + "/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse-TwoLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults_TwoLineItems")
Sheet jsonInput = wb.getSheet("JSON_TwoLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"LineItem1", sheet1);
addCell(0,1,"lineItemID",sheet1);
addCell(1,1,"itemNumber",sheet1);
addCell(2,1,"requiresPharmacyDispensing", sheet1);
addCell(3,1,"acceptableShipFromWarehouses",sheet1);
addCell(3,2,"warehouseLocationCd",sheet1);
addCell(4,2,"priority",sheet1);
addCell(5,0,"LineItem2", sheet1);
addCell(5,1,"lineItemID",sheet1);
addCell(6,1,"itemNumber",sheet1);
addCell(7,1,"requiresPharmacyDispensing", sheet1);
addCell(8,1,"acceptableShipFromWarehouses",sheet1);
addCell(8,2,"warehouseLocationCd",sheet1);
addCell(9,2,"priority",sheet1);
addCell(10,2,"warehouseLocationCd",sheet1);
addCell(11,2,"priority",sheet1);
addCell(12,2,"warehouseLocationCd",sheet1);
addCell(13,2,"priority",sheet1);
addCell(14,2,"warehouseLocationCd",sheet1);
addCell(15,2,"priority",sheet1);
addCell(16,2,"warehouseLocationCd",sheet1);
addCell(17,2,"priority",sheet1);
addCell(18,2,"warehouseLocationCd",sheet1);
addCell(19,2,"priority",sheet1);
addCell(20,2,"warehouseLocationCd",sheet1);
addCell(21,2,"priority",sheet1);
addCell(22,2,"warehouseLocationCd",sheet1);
addCell(23,2,"priority",sheet1);
addCell(24,2,"warehouseLocationCd",sheet1);
addCell(25,2,"priority",sheet1);
addCell(26,2,"warehouseLocationCd",sheet1);
addCell(27,2,"priority",sheet1);
addCell(28,0,"acceptableShipFromWarehouses",sheet1);
addCell(28,1,"warehouseLocationCd",sheet1);
addCell(29,1,"priority",sheet1);
addCell(30,0,"recommendedCarrier",sheet1);
addCell(31,0,"recommendedShippingMethod",sheet1);
addCell(32,0,"primaryWarehouse",sheet1);
addCell(32,1,"warehouseLocationCd",sheet1);
addCell(33,1,"priority",sheet1);
addCell(34,0,"PASS/FAIL",sheet1);
addCell(35,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()                        
                
                                 //Input for recommendedCarrier                               
                                requestTemplet.content.order.recommendedCarrier = sh.getCell(1,i).getContents()
                                //Input for recommendedShippingMethod                               
                                requestTemplet.content.order.recommendedShippingMethod = sh.getCell(2,i).getContents() 

                               //Inputs for LineItem 1         
                                 //Input for lineItemID                               
                                requestTemplet.content.order.lineItems[0].lineItemID = sh.getCell(3,i).getContents()
                                 //Input for itemNumber  
                                requestTemplet.content.order.lineItems[0].itemNumber = sh.getCell(4,i).getContents()
                                //Input for requiresPharmacyDispensing  
                                requestTemplet.content.order.lineItems[0].requiresPharmacyDispensing = sh.getCell(5,i).getContents()
                                //Input for acceptableShipFromWarehouses                                 
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd = sh.getCell(6,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[0].priority = sh.getCell(7,i).getContents()                                
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[1].warehouseLocationCd = sh.getCell(8,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[1].priority = sh.getCell(9,i).getContents()                                
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[2].warehouseLocationCd = sh.getCell(10,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[2].priority = sh.getCell(11,i).getContents()                                                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[3].warehouseLocationCd = sh.getCell(12,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[3].priority = sh.getCell(13,i).getContents()                                                                                                                    
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[4].warehouseLocationCd = sh.getCell(14,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[4].priority = sh.getCell(15,i).getContents()                                                                                                                  
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[5].warehouseLocationCd = sh.getCell(16,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[5].priority = sh.getCell(17,i).getContents()                                                                                                                   
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[6].warehouseLocationCd = sh.getCell(18,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[6].priority = sh.getCell(19,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[7].warehouseLocationCd = sh.getCell(20,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[7].priority = sh.getCell(21,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[8].warehouseLocationCd = sh.getCell(22,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[8].priority = sh.getCell(23,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[9].warehouseLocationCd = sh.getCell(24,i).getContents()                                
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[9].priority = sh.getCell(25,i).getContents() 
                             
                              //Inputs for LineItem 2         
                                 //Input for lineItemID                               
                                requestTemplet.content.order.lineItems[1].lineItemID = sh.getCell(26,i).getContents()
                                 //Input for itemNumber  
                                requestTemplet.content.order.lineItems[1].itemNumber = sh.getCell(27,i).getContents()
                                //Input for requiresPharmacyDispensing  
                                requestTemplet.content.order.lineItems[1].requiresPharmacyDispensing = sh.getCell(28,i).getContents()
                                //Input for acceptableShipFromWarehouses                                 
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd = sh.getCell(29,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[0].priority = sh.getCell(30,i).getContents()                                
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[1].warehouseLocationCd = sh.getCell(31,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[1].priority = sh.getCell(32,i).getContents()                                
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[2].warehouseLocationCd = sh.getCell(33,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[2].priority = sh.getCell(34,i).getContents()                                                                                                                     
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[3].warehouseLocationCd = sh.getCell(35,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[3].priority = sh.getCell(36,i).getContents()                                                                                                                    
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[4].warehouseLocationCd = sh.getCell(37,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[4].priority = sh.getCell(38,i).getContents()                                                                                                                  
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[5].warehouseLocationCd = sh.getCell(39,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[5].priority = sh.getCell(40,i).getContents()                                                                                                                   
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[6].warehouseLocationCd = sh.getCell(41,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[6].priority = sh.getCell(42,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[7].warehouseLocationCd = sh.getCell(43,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[7].priority = sh.getCell(44,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[8].warehouseLocationCd = sh.getCell(45,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[8].priority = sh.getCell(46,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[9].warehouseLocationCd = sh.getCell(47,i).getContents()                                
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[9].priority = sh.getCell(48,i).getContents()                                                    
                               
      
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get values from response json  
                          int celNumForLineItems=0; celNumForShipWarehouses=3;                          
	                           for(int arrForLineItems=0; arrForLineItems<json.order.lineItems.size(); arrForLineItems++)
	                           {           
	                      	     addCell(celNumForLineItems,i,json.order.lineItems[arrForLineItems].lineItemID.toString(),sheet1);
	                              celNumForLineItems = celNumForLineItems +1;
	                              addCell(celNumForLineItems,i,json.order.lineItems[arrForLineItems].itemNumber.toString(),sheet1); 
	                              celNumForLineItems = celNumForLineItems +1;                                      
	                              addCell(celNumForLineItems,i,json.order.lineItems[arrForLineItems].requiresPharmacyDispensing.toString(),sheet1);                                                             
	                                  
	                                  for(int arrForShipWarehouses=0; arrForShipWarehouses<json.order.lineItems[arrForLineItems].acceptableShipFromWarehouses.size(); arrForShipWarehouses++)
	                                  {                    
	                                  addCell(celNumForShipWarehouses,i,json.order.lineItems[arrForLineItems].acceptableShipFromWarehouses[arrForShipWarehouses].warehouseLocationCd.toString(),sheet1);
	                                  celNumForShipWarehouses = celNumForShipWarehouses+1;                                       
	                                  addCell(celNumForShipWarehouses,i,json.order.lineItems[arrForLineItems].acceptableShipFromWarehouses[arrForShipWarehouses].priority.toString(),sheet1);
	                                  celNumForShipWarehouses = celNumForShipWarehouses+1;
	                                  } 
                                       celNumForLineItems = celNumForLineItems+3;
                                       celNumForShipWarehouses = celNumForShipWarehouses+3;

	                             }   
                     
                     
		                   int celNumForwarehouseAndPriority=28;
		                   for(int arrForwarehouseAndPriority=0; arrForwarehouseAndPriority<json.order.acceptableShipFromWarehouses.size(); arrForwarehouseAndPriority++)
		                    { 	                                     
		                      addCell(celNumForwarehouseAndPriority,i,json.order.acceptableShipFromWarehouses[arrForwarehouseAndPriority].warehouseLocationCd.toString(),sheet1);
		                      celNumForwarehouseAndPriority = celNumForwarehouseAndPriority+1;                                       
		                      addCell(celNumForwarehouseAndPriority,i,json.order.acceptableShipFromWarehouses[arrForwarehouseAndPriority].priority.toString(),sheet1);
		                      celNumForwarehouseAndPriority = celNumForwarehouseAndPriority+1;
		                    }
                   
                        addCell(30,i,json.order.recommendedCarrier.toString(),sheet1);                                                                      
                        addCell(31,i,json.order.recommendedShippingMethod.toString(),sheet1);
                        addCell(32,i,json.order.primaryWarehouse.warehouseLocationCd.toString(),sheet1); 
                        addCell(33,i,json.order.primaryWarehouse.priority.toString(),sheet1);               
                  
                                                         
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values

                         int celForLItem=49; celForacceptableWH=52;
                   		for(int arrForLItem=0; arrForLItem<json.order.lineItems.size(); arrForLItem++)
                     	{     
                            lineItemID = sh.getCell(celForLItem,i).getContents()
	                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"order.lineItems["+arrForLItem+"].lineItemID","lineItemID")
	                       celForLItem = celForLItem+1

                            itemNumber = sh.getCell(celForLItem,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,itemNumber,"order.lineItems["+arrForLItem+"].itemNumber","itemNumber")
	                       celForLItem = celForLItem+1

                            requiresPharmacyDispensing = sh.getCell(celForLItem,i).getContents().toString()
                       	   addAssertionJsonPathMatch(testStepForAssertion,requiresPharmacyDispensing,"order.lineItems["+arrForLItem+"].requiresPharmacyDispensing","requiresPharmacyDispensing")
                       
                      			for(int arrForacceptableWH=0; arrForacceptableWH<json.order.lineItems[arrForLItem].acceptableShipFromWarehouses.size(); arrForacceptableWH++)
                      			{                      	
			                       warehouseLocationCd = sh.getCell(celForacceptableWH,i).getContents().toString()
			                       addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd,"order.lineItems["+arrForLItem+"].acceptableShipFromWarehouses["+arrForacceptableWH+"].warehouseLocationCd","warehouseLocationCd")
			                       celForacceptableWH = celForacceptableWH+1;

			                       priority = sh.getCell(celForacceptableWH,i).getContents().toString()
			                       addAssertionJsonPathMatch(testStepForAssertion,priority,"order.lineItems["+arrForLItem+"].acceptableShipFromWarehouses["+arrForacceptableWH+"].priority","priority")
			                 	   celForacceptableWH = celForacceptableWH+1; 
                  				 }
                                    celForLItem = celForLItem+3
                                    celForacceptableWH = celForacceptableWH+3
                     	      }                     	                  
                            
	                 		int celNumForAWH =77              
	                         for(int arrForAWH=0; arrForAWH<json.order.acceptableShipFromWarehouses.size(); arrForAWH++)
                           	{                     
                                    warehouseLocationCd = sh.getCell(celNumForAWH,i).getContents().toString()
		                      	 addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd,"order.acceptableShipFromWarehouses["+arrForAWH+"].warehouseLocationCd","warehouseLocationCd")
		                          celNumForAWH = celNumForAWH+1;
		                          
			                       priority = sh.getCell(celNumForAWH,i).getContents().toString()
			                       addAssertionJsonPathMatch(testStepForAssertion,priority,"order.acceptableShipFromWarehouses["+arrForAWH+"].priority","priority")
			                       celNumForAWH = celNumForAWH+1;
                               }
         			
                      
                       //Recommended Shipping Carrier
                       recommendedCarrier = sh.getCell(79,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrier,"order.recommendedCarrier","recommendedCarrier")

                       //Recommended Shipping Method
                         recommendedShippingMethod = sh.getCell(80,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,recommendedShippingMethod,"order.recommendedShippingMethod","recommendedShippingMethod")
                      
                      //Primary WareHouse details
                       warehouseLocationCd_P = sh.getCell(81,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd_P,"order.primaryWarehouse.warehouseLocationCd","warehouseLocationCd")

                         priority_P = sh.getCell(82,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,priority_P,"order.primaryWarehouse.priority","priority")

                                   
           
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(34,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(35,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(34,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}]]></script></con:config></con:testStep><con:testStep type="groovy" name="DeterminePrimaryWarehouse_ThreelineItem" id="7faf54ed-890b-4b27-86ec-b4cf01f37f90"><con:settings/><con:config><script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse-Input.xls"
def outputfile = projectDir + "/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse-ThreeLineItem-Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults_ThreeLineItems")
Sheet jsonInput = wb.getSheet("JSON_ThreeLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"LineItem1", sheet1);
addCell(0,1,"lineItemID",sheet1);
addCell(1,1,"itemNumber",sheet1);
addCell(2,1,"requiresPharmacyDispensing", sheet1);
addCell(3,1,"acceptableShipFromWarehouses",sheet1);
addCell(3,2,"warehouseLocationCd",sheet1);
addCell(4,2,"priority",sheet1);
addCell(5,2,"warehouseLocationCd",sheet1);
addCell(6,2,"priority",sheet1);
addCell(7,2,"warehouseLocationCd",sheet1);
addCell(8,2,"priority",sheet1);
addCell(9,2,"warehouseLocationCd",sheet1);
addCell(10,2,"priority",sheet1);
addCell(11,2,"warehouseLocationCd",sheet1);
addCell(12,2,"priority",sheet1);
addCell(13,2,"warehouseLocationCd",sheet1);
addCell(14,2,"priority",sheet1);
addCell(15,2,"warehouseLocationCd",sheet1);
addCell(16,2,"priority",sheet1);
addCell(17,2,"warehouseLocationCd",sheet1);
addCell(18,2,"priority",sheet1);
addCell(19,2,"warehouseLocationCd",sheet1);
addCell(20,2,"priority",sheet1);
addCell(21,2,"warehouseLocationCd",sheet1);
addCell(22,2,"priority",sheet1);

addCell(23,0,"LineItem2", sheet1);
addCell(23,1,"lineItemID",sheet1);
addCell(24,1,"itemNumber",sheet1);
addCell(25,1,"requiresPharmacyDispensing", sheet1);
addCell(26,1,"acceptableShipFromWarehouses",sheet1);
addCell(26,2,"warehouseLocationCd",sheet1);
addCell(27,2,"priority",sheet1);
addCell(28,2,"warehouseLocationCd",sheet1);
addCell(29,2,"priority",sheet1);
addCell(30,2,"warehouseLocationCd",sheet1);
addCell(31,2,"priority",sheet1);
addCell(32,2,"warehouseLocationCd",sheet1);
addCell(33,2,"priority",sheet1);
addCell(34,2,"warehouseLocationCd",sheet1);
addCell(35,2,"priority",sheet1);
addCell(36,2,"warehouseLocationCd",sheet1);
addCell(37,2,"priority",sheet1);
addCell(38,2,"warehouseLocationCd",sheet1);
addCell(39,2,"priority",sheet1);
addCell(40,2,"warehouseLocationCd",sheet1);
addCell(41,2,"priority",sheet1);
addCell(42,2,"warehouseLocationCd",sheet1);
addCell(43,2,"priority",sheet1);
addCell(44,2,"warehouseLocationCd",sheet1);
addCell(45,2,"priority",sheet1);

addCell(46,0,"LineItem3", sheet1);
addCell(46,1,"lineItemID",sheet1);
addCell(47,1,"itemNumber",sheet1);
addCell(48,1,"requiresPharmacyDispensing", sheet1);
addCell(49,1,"acceptableShipFromWarehouses",sheet1);
addCell(49,2,"warehouseLocationCd",sheet1);
addCell(50,2,"priority",sheet1);
addCell(51,2,"warehouseLocationCd",sheet1);
addCell(52,2,"priority",sheet1);
addCell(53,2,"warehouseLocationCd",sheet1);
addCell(54,2,"priority",sheet1);
addCell(55,2,"warehouseLocationCd",sheet1);
addCell(56,2,"priority",sheet1);
addCell(57,2,"warehouseLocationCd",sheet1);
addCell(58,2,"priority",sheet1);
addCell(59,2,"warehouseLocationCd",sheet1);
addCell(60,2,"priority",sheet1);
addCell(61,2,"warehouseLocationCd",sheet1);
addCell(62,2,"priority",sheet1);
addCell(63,2,"warehouseLocationCd",sheet1);
addCell(64,2,"priority",sheet1);
addCell(65,2,"warehouseLocationCd",sheet1);
addCell(66,2,"priority",sheet1);
addCell(67,2,"warehouseLocationCd",sheet1);
addCell(68,2,"priority",sheet1);

addCell(69,0,"acceptableShipFromWarehouses",sheet1);
addCell(69,1,"warehouseLocationCd",sheet1);
addCell(70,1,"priority",sheet1);
addCell(71,1,"warehouseLocationCd",sheet1);
addCell(72,1,"priority",sheet1);
addCell(73,1,"warehouseLocationCd",sheet1);
addCell(74,1,"priority",sheet1);
addCell(75,1,"warehouseLocationCd",sheet1);
addCell(76,1,"priority",sheet1);
addCell(77,1,"warehouseLocationCd",sheet1);
addCell(78,1,"priority",sheet1);
addCell(79,1,"warehouseLocationCd",sheet1);
addCell(80,1,"priority",sheet1);
addCell(81,1,"warehouseLocationCd",sheet1);
addCell(82,1,"priority",sheet1);
addCell(83,1,"warehouseLocationCd",sheet1);
addCell(84,1,"priority",sheet1);
addCell(85,1,"warehouseLocationCd",sheet1);
addCell(86,1,"priority",sheet1);
addCell(87,1,"warehouseLocationCd",sheet1);
addCell(88,1,"priority",sheet1);

addCell(89,0,"recommendedCarrier",sheet1);
addCell(90,0,"recommendedShippingMethod",sheet1);
addCell(91,0,"primaryWarehouse",sheet1);
addCell(91,1,"warehouseLocationCd",sheet1);
addCell(92,1,"priority",sheet1);
addCell(93,0,"PASS/FAIL",sheet1);
addCell(94,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

//try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()                        
                
                                 //Input for recommendedCarrier                               
                                requestTemplet.content.order.recommendedCarrier = sh.getCell(1,i).getContents()
                                //Input for recommendedShippingMethod                               
                                requestTemplet.content.order.recommendedShippingMethod = sh.getCell(2,i).getContents() 

                               //Inputs for LineItem 1         
                                 //Input for lineItemID                               
                                requestTemplet.content.order.lineItems[0].lineItemID = sh.getCell(3,i).getContents()
                                 //Input for itemNumber  
                                requestTemplet.content.order.lineItems[0].itemNumber = sh.getCell(4,i).getContents()
                                //Input for requiresPharmacyDispensing  
                                requestTemplet.content.order.lineItems[0].requiresPharmacyDispensing = sh.getCell(5,i).getContents()
                                //Input for acceptableShipFromWarehouses                                 
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd = sh.getCell(6,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[0].priority = sh.getCell(7,i).getContents()                                
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[1].warehouseLocationCd = sh.getCell(8,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[1].priority = sh.getCell(9,i).getContents()                                
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[2].warehouseLocationCd = sh.getCell(10,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[2].priority = sh.getCell(11,i).getContents()                                                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[3].warehouseLocationCd = sh.getCell(12,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[3].priority = sh.getCell(13,i).getContents()                                                                                                                    
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[4].warehouseLocationCd = sh.getCell(14,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[4].priority = sh.getCell(15,i).getContents()                                                                                                                  
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[5].warehouseLocationCd = sh.getCell(16,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[5].priority = sh.getCell(17,i).getContents()                                                                                                                   
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[6].warehouseLocationCd = sh.getCell(18,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[6].priority = sh.getCell(19,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[7].warehouseLocationCd = sh.getCell(20,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[7].priority = sh.getCell(21,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[8].warehouseLocationCd = sh.getCell(22,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[8].priority = sh.getCell(23,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[9].warehouseLocationCd = sh.getCell(24,i).getContents()                                
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[9].priority = sh.getCell(25,i).getContents() 
                             
                              //Inputs for LineItem 2         
                                 //Input for lineItemID                               
                                requestTemplet.content.order.lineItems[1].lineItemID = sh.getCell(26,i).getContents()
                                 //Input for itemNumber  
                                requestTemplet.content.order.lineItems[1].itemNumber = sh.getCell(27,i).getContents()
                                //Input for requiresPharmacyDispensing  
                                requestTemplet.content.order.lineItems[1].requiresPharmacyDispensing = sh.getCell(28,i).getContents()
                                //Input for acceptableShipFromWarehouses                                 
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd = sh.getCell(29,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[0].priority = sh.getCell(30,i).getContents()                                
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[1].warehouseLocationCd = sh.getCell(31,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[1].priority = sh.getCell(32,i).getContents()                                
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[2].warehouseLocationCd = sh.getCell(33,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[2].priority = sh.getCell(34,i).getContents()                                                                                                                     
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[3].warehouseLocationCd = sh.getCell(35,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[3].priority = sh.getCell(36,i).getContents()                                                                                                                    
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[4].warehouseLocationCd = sh.getCell(37,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[4].priority = sh.getCell(38,i).getContents()                                                                                                                  
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[5].warehouseLocationCd = sh.getCell(39,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[5].priority = sh.getCell(40,i).getContents()                                                                                                                   
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[6].warehouseLocationCd = sh.getCell(41,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[6].priority = sh.getCell(42,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[7].warehouseLocationCd = sh.getCell(43,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[7].priority = sh.getCell(44,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[8].warehouseLocationCd = sh.getCell(45,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[8].priority = sh.getCell(46,i).getContents()                                                                          
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[9].warehouseLocationCd = sh.getCell(47,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[9].priority = sh.getCell(48,i).getContents() 

                      
                            //Inputs for LineItem 3        
                                 //Input for lineItemID                               
                                requestTemplet.content.order.lineItems[2].lineItemID = sh.getCell(49,i).getContents()
                                 //Input for itemNumber  
                                requestTemplet.content.order.lineItems[2].itemNumber = sh.getCell(50,i).getContents()
                                //Input for requiresPharmacyDispensing  
                                requestTemplet.content.order.lineItems[2].requiresPharmacyDispensing = sh.getCell(51,i).getContents()
                                //Input for acceptableShipFromWarehouses                                 
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[0].warehouseLocationCd = sh.getCell(52,i).getContents()
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[0].priority = sh.getCell(53,i).getContents()                                
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[1].warehouseLocationCd = sh.getCell(54,i).getContents()
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[1].priority = sh.getCell(55,i).getContents()                                
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[2].warehouseLocationCd = sh.getCell(56,i).getContents()
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[2].priority = sh.getCell(57,i).getContents()                                                                                                                     
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[3].warehouseLocationCd = sh.getCell(58,i).getContents()
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[3].priority = sh.getCell(59,i).getContents()                                                                                                                    
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[4].warehouseLocationCd = sh.getCell(60,i).getContents()
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[4].priority = sh.getCell(61,i).getContents()                                                                                                                  
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[5].warehouseLocationCd = sh.getCell(62,i).getContents()
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[5].priority = sh.getCell(63,i).getContents()                                                                                                                   
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[6].warehouseLocationCd = sh.getCell(64,i).getContents()
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[6].priority = sh.getCell(65,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[7].warehouseLocationCd = sh.getCell(66,i).getContents()
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[7].priority = sh.getCell(67,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[8].warehouseLocationCd = sh.getCell(68,i).getContents()
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[8].priority = sh.getCell(69,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[9].warehouseLocationCd = sh.getCell(70,i).getContents()                                
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[9].priority = sh.getCell(71,i).getContents()                                                    
                                                                                  
                               
      
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           //Response Json for LineItem1 
                          
                           if (json.order.lineItems !=null)
                           { 
                                int celNumForLineItems=0; celNumForShipWarehouses=3;                    
	                           for(int arrForLineItems=0; arrForLineItems<json.order.lineItems.size(); arrForLineItems++)
	                           {           
	                      	     addCell(celNumForLineItems,i,json.order.lineItems[arrForLineItems].lineItemID.toString(),sheet1);
	                              celNumForLineItems = celNumForLineItems +1;
	                              addCell(celNumForLineItems,i,json.order.lineItems[arrForLineItems].itemNumber.toString(),sheet1); 
	                              celNumForLineItems = celNumForLineItems +1;                                      
	                              addCell(celNumForLineItems,i,json.order.lineItems[arrForLineItems].requiresPharmacyDispensing.toString(),sheet1);                                                           

							for(int arrForShipWarehouses=0; arrForShipWarehouses<json.order.lineItems[arrForLineItems].acceptableShipFromWarehouses.size(); arrForShipWarehouses++)
	                                  { 
	                                  	                  
	                                  addCell(celNumForShipWarehouses,i,json.order.lineItems[arrForLineItems].acceptableShipFromWarehouses[arrForShipWarehouses].warehouseLocationCd.toString(),sheet1);
	                                  celNumForShipWarehouses=celNumForShipWarehouses+1;                                  
	                                                                      
	                                  addCell(celNumForShipWarehouses,i,json.order.lineItems[arrForLineItems].acceptableShipFromWarehouses[arrForShipWarehouses].priority.toString(),sheet1);
	                                  celNumForShipWarehouses=celNumForShipWarehouses+1;
	                                  } 
	                             
                                      if((celNumForShipWarehouses<=25) && (celNumForLineItems<=22))
                                       {
                                       	celNumForShipWarehouses=26;
                                       	celNumForLineItems=23;
                                       }
                                       else if((celNumForShipWarehouses>=26) && (celNumForShipWarehouses<=48) && (celNumForLineItems>=23) && (celNumForLineItems<=45)){
                                       	celNumForShipWarehouses=49
                                       	celNumForLineItems=46
                                       }
	                                  		
	                           }    
                                  
                                   
                           } 
                     
		                   int celNumForwarehouseAndPriority=69;
		                   for(int arrForwarehouseAndPriority=0; arrForwarehouseAndPriority<json.order.acceptableShipFromWarehouses.size(); arrForwarehouseAndPriority++)
		                    { 	                                     
		                      addCell(celNumForwarehouseAndPriority,i,json.order.acceptableShipFromWarehouses[arrForwarehouseAndPriority].warehouseLocationCd.toString(),sheet1);
		                      celNumForwarehouseAndPriority = celNumForwarehouseAndPriority+1;                                       
		                      addCell(celNumForwarehouseAndPriority,i,json.order.acceptableShipFromWarehouses[arrForwarehouseAndPriority].priority.toString(),sheet1);
		                      celNumForwarehouseAndPriority = celNumForwarehouseAndPriority+1;
		                    }
                                                        
                        addCell(89,i,json.order.recommendedCarrier.toString(),sheet1); 
                        addCell(90,i,json.order.recommendedShippingMethod.toString(),sheet1); 
                        addCell(91,i,json.order.primaryWarehouse.warehouseLocationCd.toString(),sheet1); 
                        addCell(92,i,json.order.primaryWarehouse.priority.toString(),sheet1);                  
                                            
                                                      
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values LineItem1  
                if(json.order.lineItems != null)
                {
                	int celForLItem=72; celForacceptableWH=75;
                   		for(int arrForLItem=0; arrForLItem<json.order.lineItems.size(); arrForLItem++)
                     	{     
                            lineItemID = sh.getCell(celForLItem,i).getContents()
	                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"order.lineItems["+arrForLItem+"].lineItemID","lineItemID")
	                       celForLItem = celForLItem+1

                            itemNumber = sh.getCell(celForLItem,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,itemNumber,"order.lineItems["+arrForLItem+"].itemNumber","itemNumber")
	                       celForLItem = celForLItem+1

                            requiresPharmacyDispensing = sh.getCell(celForLItem,i).getContents().toString()
                       	   addAssertionJsonPathMatch(testStepForAssertion,requiresPharmacyDispensing,"order.lineItems["+arrForLItem+"].requiresPharmacyDispensing","requiresPharmacyDispensing")
                     	
                      			for(int arrForacceptableWH=0; arrForacceptableWH<json.order.lineItems[arrForLItem].acceptableShipFromWarehouses.size(); arrForacceptableWH++)
                      			{                      	
			                       warehouseLocationCd = sh.getCell(celForacceptableWH,i).getContents().toString()
			                       addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd,"order.lineItems["+arrForLItem+"].acceptableShipFromWarehouses["+arrForacceptableWH+"].warehouseLocationCd","warehouseLocationCd")
			                       celForacceptableWH = celForacceptableWH+1;

			                       priority = sh.getCell(celForacceptableWH,i).getContents().toString()
			                       addAssertionJsonPathMatch(testStepForAssertion,priority,"order.lineItems["+arrForLItem+"].acceptableShipFromWarehouses["+arrForacceptableWH+"].priority","priority")
			                 	  celForacceptableWH = celForacceptableWH+1; 
                  				 }
                  				  if((celForacceptableWH<=97) && (celForLItem <=94))
                                       {
                                       	celForacceptableWH=98;
                                       	celForLItem=95;
                                       }
                                       else if((celForacceptableWH>=98) && (celForacceptableWH<=120) && (celForLItem >=95) && (celForLItem <=117)){
                                       	celForacceptableWH=121
                                       	celForLItem =118
                                       }
                       }
                     	
                     		
                     	      }                     	                  
                            
	                 		int celAw =141              
	                         for(int arrmtcd=0; arrmtcd<json.order.acceptableShipFromWarehouses.size(); arrmtcd++)
                           	{                     
                                    warehouseLocationCd = sh.getCell(celAw,i).getContents().toString()
		                      	 addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd,"order.acceptableShipFromWarehouses["+arrmtcd+"].warehouseLocationCd","warehouseLocationCd")
		                          celAw = celAw +1;
		                          
			                       priority = sh.getCell(celAw,i).getContents().toString()
			                       addAssertionJsonPathMatch(testStepForAssertion,priority,"order.acceptableShipFromWarehouses["+arrmtcd+"].priority","priority")
			                       celAw = celAw +1;
                               }
         			
                       //Recommended Shipping Carrier
                       recommendedCarrier = sh.getCell(161,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrier,"order.recommendedCarrier","recommendedCarrier")

                       //Recommended Shipping Method
                         recommendedShippingMethod = sh.getCell(162,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,recommendedShippingMethod,"order.recommendedShippingMethod","recommendedShippingMethod")
                      
                      //Primary WareHouse details
                       warehouseLocationCd_P = sh.getCell(163,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd_P,"order.primaryWarehouse.warehouseLocationCd","warehouseLocationCd")

                         priority_P = sh.getCell(164,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,priority_P,"order.primaryWarehouse.priority","priority")

                                   
           
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(93,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(94,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(93,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

               /* }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{*/

    //close workbook
     wb.close();
     wb1.close();     

//}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}]]></script></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request" id="6ba91360-c052-4354-9f2d-4d4007ff56a9"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL" methodName="DeterminePrimaryWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="865e51e3-92d4-44ad-a94a-656216ff1d6b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "Case4_MultiLine",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "dpw",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "order": {
        "acceptableShipFromWarehouses": null,
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "MNMMT332A",
                "lineItemID": "L001",
                "requiresPharmacyDispensing": "true"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "MNMMT378",
                "lineItemID": "L002",
                "requiresPharmacyDispensing": "true"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "5906908373001I",
                "lineItemID": "L003",
                "requiresPharmacyDispensing": "true"
            }
        ],
        "orderId": "1",
        "recommendedCarrier": "",
        "recommendedShippingMethod": ""
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="0f30c718-7d45-4bbd-b15c-814227db2c5b"><con:settings/><con:config><script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse-Input_1.xls"
def outputfile = projectDir + "/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse-ThreeLineItem-Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults_ThreeLineItems")
Sheet jsonInput = wb.getSheet("JSON_ThreeLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"LineItem1", sheet1);
addCell(0,1,"lineItemID",sheet1);
addCell(1,1,"itemNumber",sheet1);
addCell(2,1,"requiresPharmacyDispensing", sheet1);
addCell(3,1,"acceptableShipFromWarehouses",sheet1);
addCell(3,2,"warehouseLocationCd",sheet1);
addCell(4,2,"priority",sheet1);
addCell(5,2,"warehouseLocationCd",sheet1);
addCell(6,2,"priority",sheet1);
addCell(7,2,"warehouseLocationCd",sheet1);
addCell(8,2,"priority",sheet1);
addCell(9,2,"warehouseLocationCd",sheet1);
addCell(10,2,"priority",sheet1);
addCell(11,2,"warehouseLocationCd",sheet1);
addCell(12,2,"priority",sheet1);
addCell(13,2,"warehouseLocationCd",sheet1);
addCell(14,2,"priority",sheet1);
addCell(15,2,"warehouseLocationCd",sheet1);
addCell(16,2,"priority",sheet1);
addCell(17,2,"warehouseLocationCd",sheet1);
addCell(18,2,"priority",sheet1);
addCell(19,2,"warehouseLocationCd",sheet1);
addCell(20,2,"priority",sheet1);
addCell(21,2,"warehouseLocationCd",sheet1);
addCell(22,2,"priority",sheet1);

addCell(23,0,"LineItem2", sheet1);
addCell(23,1,"lineItemID",sheet1);
addCell(24,1,"itemNumber",sheet1);
addCell(25,1,"requiresPharmacyDispensing", sheet1);
addCell(26,1,"acceptableShipFromWarehouses",sheet1);
addCell(26,2,"warehouseLocationCd",sheet1);
addCell(27,2,"priority",sheet1);
addCell(28,2,"warehouseLocationCd",sheet1);
addCell(29,2,"priority",sheet1);
addCell(30,2,"warehouseLocationCd",sheet1);
addCell(31,2,"priority",sheet1);
addCell(32,2,"warehouseLocationCd",sheet1);
addCell(33,2,"priority",sheet1);
addCell(34,2,"warehouseLocationCd",sheet1);
addCell(35,2,"priority",sheet1);
addCell(36,2,"warehouseLocationCd",sheet1);
addCell(37,2,"priority",sheet1);
addCell(38,2,"warehouseLocationCd",sheet1);
addCell(39,2,"priority",sheet1);
addCell(40,2,"warehouseLocationCd",sheet1);
addCell(41,2,"priority",sheet1);
addCell(42,2,"warehouseLocationCd",sheet1);
addCell(43,2,"priority",sheet1);
addCell(44,2,"warehouseLocationCd",sheet1);
addCell(45,2,"priority",sheet1);

addCell(46,0,"LineItem3", sheet1);
addCell(46,1,"lineItemID",sheet1);
addCell(47,1,"itemNumber",sheet1);
addCell(48,1,"requiresPharmacyDispensing", sheet1);
addCell(49,1,"acceptableShipFromWarehouses",sheet1);
addCell(49,2,"warehouseLocationCd",sheet1);
addCell(50,2,"priority",sheet1);
addCell(51,2,"warehouseLocationCd",sheet1);
addCell(52,2,"priority",sheet1);
addCell(53,2,"warehouseLocationCd",sheet1);
addCell(54,2,"priority",sheet1);
addCell(55,2,"warehouseLocationCd",sheet1);
addCell(56,2,"priority",sheet1);
addCell(57,2,"warehouseLocationCd",sheet1);
addCell(58,2,"priority",sheet1);
addCell(59,2,"warehouseLocationCd",sheet1);
addCell(60,2,"priority",sheet1);
addCell(61,2,"warehouseLocationCd",sheet1);
addCell(62,2,"priority",sheet1);
addCell(63,2,"warehouseLocationCd",sheet1);
addCell(64,2,"priority",sheet1);
addCell(65,2,"warehouseLocationCd",sheet1);
addCell(66,2,"priority",sheet1);
addCell(67,2,"warehouseLocationCd",sheet1);
addCell(68,2,"priority",sheet1);

addCell(69,0,"acceptableShipFromWarehouses",sheet1);
addCell(69,1,"warehouseLocationCd",sheet1);
addCell(70,1,"priority",sheet1);
addCell(71,1,"warehouseLocationCd",sheet1);
addCell(72,1,"priority",sheet1);
addCell(73,1,"warehouseLocationCd",sheet1);
addCell(74,1,"priority",sheet1);
addCell(75,1,"warehouseLocationCd",sheet1);
addCell(76,1,"priority",sheet1);
addCell(77,1,"warehouseLocationCd",sheet1);
addCell(78,1,"priority",sheet1);
addCell(79,1,"warehouseLocationCd",sheet1);
addCell(80,1,"priority",sheet1);
addCell(81,1,"warehouseLocationCd",sheet1);
addCell(82,1,"priority",sheet1);
addCell(83,1,"warehouseLocationCd",sheet1);
addCell(84,1,"priority",sheet1);
addCell(85,1,"warehouseLocationCd",sheet1);
addCell(86,1,"priority",sheet1);
addCell(87,1,"warehouseLocationCd",sheet1);
addCell(88,1,"priority",sheet1);

addCell(89,0,"recommendedCarrier",sheet1);
addCell(90,0,"recommendedShippingMethod",sheet1);
addCell(91,0,"primaryWarehouse",sheet1);
addCell(91,1,"warehouseLocationCd",sheet1);
addCell(92,1,"priority",sheet1);
addCell(93,0,"PASS/FAIL",sheet1);
addCell(94,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

//try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=4;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()                        
                
                                 //Input for recommendedCarrier                               
                                requestTemplet.content.order.recommendedCarrier = sh.getCell(1,i).getContents()
                                //Input for recommendedShippingMethod                               
                                requestTemplet.content.order.recommendedShippingMethod = sh.getCell(2,i).getContents() 

                               //Inputs for LineItem 1         
                                 //Input for lineItemID                               
                                requestTemplet.content.order.lineItems[0].lineItemID = sh.getCell(3,i).getContents()
                                 //Input for itemNumber  
                                requestTemplet.content.order.lineItems[0].itemNumber = sh.getCell(4,i).getContents()
                                //Input for requiresPharmacyDispensing  
                                requestTemplet.content.order.lineItems[0].requiresPharmacyDispensing = sh.getCell(5,i).getContents()
                                //Input for acceptableShipFromWarehouses                                 
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd = sh.getCell(6,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[0].priority = sh.getCell(7,i).getContents()                                
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[1].warehouseLocationCd = sh.getCell(8,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[1].priority = sh.getCell(9,i).getContents()                                
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[2].warehouseLocationCd = sh.getCell(10,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[2].priority = sh.getCell(11,i).getContents()                                                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[3].warehouseLocationCd = sh.getCell(12,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[3].priority = sh.getCell(13,i).getContents()                                                                                                                    
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[4].warehouseLocationCd = sh.getCell(14,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[4].priority = sh.getCell(15,i).getContents()                                                                                                                  
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[5].warehouseLocationCd = sh.getCell(16,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[5].priority = sh.getCell(17,i).getContents()                                                                                                                   
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[6].warehouseLocationCd = sh.getCell(18,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[6].priority = sh.getCell(19,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[7].warehouseLocationCd = sh.getCell(20,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[7].priority = sh.getCell(21,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[8].warehouseLocationCd = sh.getCell(22,i).getContents()
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[8].priority = sh.getCell(23,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[9].warehouseLocationCd = sh.getCell(24,i).getContents()                                
                                requestTemplet.content.order.lineItems[0].acceptableShipFromWarehouses[9].priority = sh.getCell(25,i).getContents() 
                             
                              //Inputs for LineItem 2         
                                 //Input for lineItemID                               
                                requestTemplet.content.order.lineItems[1].lineItemID = sh.getCell(26,i).getContents()
                                 //Input for itemNumber  
                                requestTemplet.content.order.lineItems[1].itemNumber = sh.getCell(27,i).getContents()
                                //Input for requiresPharmacyDispensing  
                                requestTemplet.content.order.lineItems[1].requiresPharmacyDispensing = sh.getCell(28,i).getContents()
                                //Input for acceptableShipFromWarehouses                                 
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd = sh.getCell(29,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[0].priority = sh.getCell(30,i).getContents()                                
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[1].warehouseLocationCd = sh.getCell(31,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[1].priority = sh.getCell(32,i).getContents()                                
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[2].warehouseLocationCd = sh.getCell(33,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[2].priority = sh.getCell(34,i).getContents()                                                                                                                     
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[3].warehouseLocationCd = sh.getCell(35,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[3].priority = sh.getCell(36,i).getContents()                                                                                                                    
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[4].warehouseLocationCd = sh.getCell(37,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[4].priority = sh.getCell(38,i).getContents()                                                                                                                  
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[5].warehouseLocationCd = sh.getCell(39,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[5].priority = sh.getCell(40,i).getContents()                                                                                                                   
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[6].warehouseLocationCd = sh.getCell(41,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[6].priority = sh.getCell(42,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[7].warehouseLocationCd = sh.getCell(43,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[7].priority = sh.getCell(44,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[8].warehouseLocationCd = sh.getCell(45,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[8].priority = sh.getCell(46,i).getContents()                                                                          
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[9].warehouseLocationCd = sh.getCell(47,i).getContents()
                                requestTemplet.content.order.lineItems[1].acceptableShipFromWarehouses[9].priority = sh.getCell(48,i).getContents() 

                      
                            //Inputs for LineItem 3        
                                 //Input for lineItemID                               
                                requestTemplet.content.order.lineItems[2].lineItemID = sh.getCell(49,i).getContents()
                                 //Input for itemNumber  
                                requestTemplet.content.order.lineItems[2].itemNumber = sh.getCell(50,i).getContents()
                                //Input for requiresPharmacyDispensing  
                                requestTemplet.content.order.lineItems[2].requiresPharmacyDispensing = sh.getCell(51,i).getContents()
                                //Input for acceptableShipFromWarehouses                                 
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[0].warehouseLocationCd = sh.getCell(52,i).getContents()
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[0].priority = sh.getCell(53,i).getContents()                                
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[1].warehouseLocationCd = sh.getCell(54,i).getContents()
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[1].priority = sh.getCell(55,i).getContents()                                
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[2].warehouseLocationCd = sh.getCell(56,i).getContents()
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[2].priority = sh.getCell(57,i).getContents()                                                                                                                     
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[3].warehouseLocationCd = sh.getCell(58,i).getContents()
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[3].priority = sh.getCell(59,i).getContents()                                                                                                                    
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[4].warehouseLocationCd = sh.getCell(60,i).getContents()
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[4].priority = sh.getCell(61,i).getContents()                                                                                                                  
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[5].warehouseLocationCd = sh.getCell(62,i).getContents()
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[5].priority = sh.getCell(63,i).getContents()                                                                                                                   
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[6].warehouseLocationCd = sh.getCell(64,i).getContents()
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[6].priority = sh.getCell(65,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[7].warehouseLocationCd = sh.getCell(66,i).getContents()
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[7].priority = sh.getCell(67,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[8].warehouseLocationCd = sh.getCell(68,i).getContents()
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[8].priority = sh.getCell(69,i).getContents()                                                                                     
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[9].warehouseLocationCd = sh.getCell(70,i).getContents()                                
                                requestTemplet.content.order.lineItems[2].acceptableShipFromWarehouses[9].priority = sh.getCell(71,i).getContents()                                                    
                                                                                  
                               
      
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           //Response Json for LineItem1 
                          
                           if (json.order.lineItems !=null)
                           { 
                                int cela=0; celb=3;                    
	                           for(int arrcode=0; arrcode<json.order.lineItems.size(); arrcode++)
	                           {           
	                      	     addCell(cela,i,json.order.lineItems[arrcode].lineItemID.toString(),sheet1);
	                              cela = cela +1;
	                              addCell(cela,i,json.order.lineItems[arrcode].itemNumber.toString(),sheet1); 
	                              cela = cela +1;                                      
	                              addCell(cela,i,json.order.lineItems[arrcode].requiresPharmacyDispensing.toString(),sheet1);                                                           

									//log.info json.order.lineItems[arrcode].acceptableShipFromWarehouses.size()
									//log.info "Position of celb:  "+celb
	                                  for(int arrm=0; arrm<json.order.lineItems[arrcode].acceptableShipFromWarehouses.size(); arrm++)
	                                  { 
	                                  	//log.info json.order.lineItems[arrcode].acceptableShipFromWarehouses 
	                                 	//log.info "Adding Data in :" +celb
	                                 // log.info json.order.lineItems[arrcode].acceptableShipFromWarehouses[arrm].warehouseLocationCd  
	                                 //log.info json.order.lineItems[arrcode].acceptableShipFromWarehouses[arrm].priority                  
	                                  addCell(celb,i,json.order.lineItems[arrcode].acceptableShipFromWarehouses[arrm].warehouseLocationCd.toString(),sheet1);
	                                  celb=celb+1;                                  
	                                                                      
	                                  addCell(celb,i,json.order.lineItems[arrcode].acceptableShipFromWarehouses[arrm].priority.toString(),sheet1);
	                                  celb=celb+1;
	                                  } 
	                             
                                      // log.info "cela: "+cela +"  celb: "+celb
                                       if((celb<=25) && (cela<=22))
                                       {
                                       	celb=26;
                                       	cela=23;
                                       }
                                       else if((celb>=26) && (celb<=48) && (cela>=23) && (cela<=45)){
                                       	celb=49
                                       	cela=46
                                       }
	                                  	//log.info "cela: "+cela +"  celb: "+celb	
	                           }    
                                  
                                   
                           } 
                     
		                   int celc=69;
		                   for(int arrm1=0; arrm1<json.order.acceptableShipFromWarehouses.size(); arrm1++)
		                    { 	                                     
		                      addCell(celc,i,json.order.acceptableShipFromWarehouses[arrm1].warehouseLocationCd.toString(),sheet1);
		                      celc=celc+1;                                       
		                      addCell(celc,i,json.order.acceptableShipFromWarehouses[arrm1].priority.toString(),sheet1);
		                      celc=celc+1;
		                    } 
                                                        
                        addCell(89,i,json.order.recommendedCarrier.toString(),sheet1); 
                        addCell(90,i,json.order.recommendedShippingMethod.toString(),sheet1); 
                        addCell(91,i,json.order.primaryWarehouse.warehouseLocationCd.toString(),sheet1); 
                        addCell(92,i,json.order.primaryWarehouse.priority.toString(),sheet1);                  
                                            
                                                      
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values LineItem1  
                if(json.order.lineItems != null)
                {
                	int celcd=72; celwp=75;
                   		for(int arrcdres=0; arrcdres<json.order.lineItems.size(); arrcdres++)
                     	{     
                            lineItemID = sh.getCell(celcd,i).getContents()
	                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"order.lineItems["+arrcdres+"].lineItemID","lineItemID")
	                       celcd = celcd+1

                            itemNumber = sh.getCell(celcd,i).getContents().toString()
	                       addAssertionJsonPathMatch(testStepForAssertion,itemNumber,"order.lineItems["+arrcdres+"].itemNumber","itemNumber")
	                       celcd = celcd+1

                            requiresPharmacyDispensing = sh.getCell(celcd,i).getContents().toString()
                       	   addAssertionJsonPathMatch(testStepForAssertion,requiresPharmacyDispensing,"order.lineItems["+arrcdres+"].requiresPharmacyDispensing","requiresPharmacyDispensing")
                     	
                      			for(int arrcdres1=0; arrcdres1<json.order.lineItems[arrcdres].acceptableShipFromWarehouses.size(); arrcdres1++)
                      			{                      	
			                       warehouseLocationCd = sh.getCell(celwp,i).getContents().toString()
			                       addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd,"order.lineItems["+arrcdres+"].acceptableShipFromWarehouses["+arrcdres1+"].warehouseLocationCd","warehouseLocationCd")
			                       celwp = celwp+1;

			                       priority = sh.getCell(celwp,i).getContents().toString()
			                       addAssertionJsonPathMatch(testStepForAssertion,priority,"order.lineItems["+arrcdres+"].acceptableShipFromWarehouses["+arrcdres1+"].priority","priority")
			                 	  celwp = celwp+1; 
                  				 }
                  				  if((celwp<=97) && (celcd <=94))
                                       {
                                       	celwp=98;
                                       	celcd =95;
                                       }
                                       else if((celwp>=98) && (celwp<=120) && (celcd >=95) && (celcd <=117)){
                                       	celwp=121
                                       	celcd =118
                                       }
                       }
                     	
                     		
                     	      }                     	                  
                            
	                 		int celAw =141              
	                         for(int arrmtcd=0; arrmtcd<json.order.acceptableShipFromWarehouses.size(); arrmtcd++)
                           	{                     
                                    warehouseLocationCd = sh.getCell(celAw,i).getContents().toString()
		                      	 addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd,"order.acceptableShipFromWarehouses["+arrmtcd+"].warehouseLocationCd","warehouseLocationCd")
		                          celAw = celAw +1;
		                          
			                       priority = sh.getCell(celAw,i).getContents().toString()
			                       addAssertionJsonPathMatch(testStepForAssertion,priority,"order.acceptableShipFromWarehouses["+arrmtcd+"].priority","priority")
			                       celAw = celAw +1;
                               }
         			
                       //Recommended Shipping Carrier
                       recommendedCarrier = sh.getCell(161,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,recommendedCarrier,"order.recommendedCarrier","recommendedCarrier")

                       //Recommended Shipping Method
                         recommendedShippingMethod = sh.getCell(162,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,recommendedShippingMethod,"order.recommendedShippingMethod","recommendedShippingMethod")
                      
                      //Primary WareHouse details
                       warehouseLocationCd_P = sh.getCell(163,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,warehouseLocationCd_P,"order.primaryWarehouse.warehouseLocationCd","warehouseLocationCd")

                         priority_P = sh.getCell(164,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,priority_P,"order.primaryWarehouse.priority","priority")

                                   
           
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(93,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(94,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(93,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

               /* }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{*/

    //close workbook
     wb.close();
     wb1.close();     

//}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}]]></script></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42762" id="8e0f33c9-6244-43b0-a0a5-0252b25f2eff"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL" methodName="DeterminePrimaryWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42762" id="865e51e3-92d4-44ad-a94a-656216ff1d6b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "Case4_MultiLine",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "dpw",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "order": {
        "acceptableShipFromWarehouses": null,
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "58328290",
                "lineItemID": "L001",
                "requiresPharmacyDispensing": "true"
            }
        ],
        "orderId": "1",
        "recommendedCarrier": "6",
        "recommendedShippingMethod": "USPM"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d070da42-db47-4f34-9f57-22ad91f06807" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aa3bbd1e-4c1c-4f36-a339-286b358cb30b" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3392335e-0e01-4d3a-b328-0f0d56c41fe6" name="itemNumber"><con:configuration><path>order.lineItems[0].itemNumber</path><content>58328290</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ddc40e0c-1398-40bc-8eb2-b4f39fe9db38" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[0].requiresPharmacyDispensing</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7ca45206-3642-4147-a67b-edd6bf721620" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="677d80e6-abee-444a-a5e0-ed1efc966bd2" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c39f0f73-da07-499c-ab07-e2f46e3f642b" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4bfa5f9a-8964-49c5-932c-f349c2a529dc" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0236407a-3f03-4be3-ab21-36b39b6116f7" name="recommendedCarrier"><con:configuration><path>order.recommendedCarrier</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d458c4b9-19c3-4d8b-8a20-d7226380ec6f" name="recommendedShippingMethod"><con:configuration><path>order.recommendedShippingMethod</path><content>USPM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="96235bdf-9e15-49c6-9ec6-f589e8264c2d" name="warehouseLocationCd"><con:configuration><path>order.primaryWarehouse.warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e968e50c-3cd3-4184-b874-90d1082f3a47" name="priority"><con:configuration><path>order.primaryWarehouse.priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42763" id="09ec0b9e-c273-48d8-97bb-e5cb50301ce1"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL" methodName="DeterminePrimaryWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42763" id="865e51e3-92d4-44ad-a94a-656216ff1d6b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "Case4_MultiLine",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "dpw",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "order": {
        "acceptableShipFromWarehouses": null,
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "MNMMT1760KPK",
                "lineItemID": "L001",
                "requiresPharmacyDispensing": "false"
            }
        ],
        "orderId": "1",
        "recommendedCarrier": "6",
        "recommendedShippingMethod": "USPM"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e1445e50-0796-4211-b3d3-f44c93b82e5f" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b495f3d7-a297-4690-becc-e2e174f25c0b" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c3fd002b-4509-4cce-a78a-7bc3d6eb270f" name="itemNumber"><con:configuration><path>order.lineItems[0].itemNumber</path><content>MNMMT1760KPK</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bee513f6-02f2-4fb3-a005-da5b1d34752c" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[0].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="90f69b6b-a609-49ec-a51c-3ef9ec4eb801" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cfc26838-fac3-4d85-ac59-5c69fc673030" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2b2935c3-459f-4a1c-a4e3-da15cfd09163" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="27fc0c78-9421-4065-b2b9-a3f28d50863f" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bedba31b-33a8-4965-9602-8855367a0a5c" name="recommendedCarrier"><con:configuration><path>order.recommendedCarrier</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8365f910-3062-454b-9724-da9b5ea7a1a9" name="recommendedShippingMethod"><con:configuration><path>order.recommendedShippingMethod</path><content>USPM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a7558746-7b8e-49b2-af3a-5c5b5170ddcd" name="warehouseLocationCd"><con:configuration><path>order.primaryWarehouse.warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="92a1a2a5-fb2a-4126-a7b8-425965f067ed" name="priority"><con:configuration><path>order.primaryWarehouse.priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42764" id="c109e744-95df-4d85-acdc-1f50b4e64381"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL" methodName="DeterminePrimaryWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42764" id="865e51e3-92d4-44ad-a94a-656216ff1d6b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "Case4_MultiLine",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "dpw",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "order": {
        "acceptableShipFromWarehouses": null,
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "MNMMT332A",
                "lineItemID": "L001",
                "requiresPharmacyDispensing": "false"
            }
        ],
        "orderId": "1",
        "recommendedCarrier": "5",
        "recommendedShippingMethod": "USCM"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e0793230-ee6b-4711-bbf9-d34934c4085c" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e3321dff-2d44-4b8f-b8ba-c7b75b7a0d10" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="89cd2916-e194-4cd9-a66a-119a0f0ba145" name="itemNumber"><con:configuration><path>order.lineItems[0].itemNumber</path><content>MNMMT332A</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c2b09831-17f7-4893-a870-9794af51f943" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[0].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fc7df333-9b1c-49db-87ed-40603c396395" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="84c33f82-29c1-48a4-9fb6-f9157228dd75" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a7e8db1e-4dd1-4973-ba92-c6f88b9dbae6" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="147d9f56-6c3c-44f9-8ecf-d69b8164f103" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0a301826-d823-4a0f-89c3-d9ab70350296" name="recommendedCarrier"><con:configuration><path>order.recommendedCarrier</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ea473460-dac0-4207-a4ec-04467660a838" name="recommendedShippingMethod"><con:configuration><path>order.recommendedShippingMethod</path><content>USCM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8f81ab0f-b35c-4652-a60a-39f5deaebc1d" name="warehouseLocationCd"><con:configuration><path>order.primaryWarehouse.warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bc30bbb9-5df7-4cd4-940e-51bbfe5c40f3" name="priority"><con:configuration><path>order.primaryWarehouse.priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42765" id="4d2200b4-2bb1-4474-9a22-4d6f4924cfe1"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL" methodName="DeterminePrimaryWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42765" id="865e51e3-92d4-44ad-a94a-656216ff1d6b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "Case4_MultiLine",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "dpw",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "order": {
        "acceptableShipFromWarehouses": null,
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "MMT1755K",
                "lineItemID": "L001",
                "requiresPharmacyDispensing": "true"
            }
        ],
        "orderId": "1",
        "recommendedCarrier": "5",
        "recommendedShippingMethod": "USCM"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="40bfca05-c469-44a2-ad3a-e5a6ed24597b" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bb4734c5-2591-4358-85a9-7c19578cd340" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b609fe9e-54d1-4d89-9a35-2782048a0389" name="itemNumber"><con:configuration><path>order.lineItems[0].itemNumber</path><content>MMT1755K</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b38f2c10-069c-4bd6-8a37-1b54f555a6e7" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[0].requiresPharmacyDispensing</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e178c484-f7a9-428b-9f6e-23471f8f1fb2" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="01684ac7-94f2-454d-85e1-487a208c22a4" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="948c0489-2fb9-436b-a324-96807d9b0370" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="98f097bb-00df-4e23-9243-3b732ba56996" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9010c81e-5783-43da-8cda-35a4876165df" name="recommendedCarrier"><con:configuration><path>order.recommendedCarrier</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d4ffbb0e-50b4-40d4-8940-467d448143b5" name="recommendedShippingMethod"><con:configuration><path>order.recommendedShippingMethod</path><content>USCM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a709a1e3-ae8c-4ed6-b711-f1e7d7dee5e8" name="warehouseLocationCd"><con:configuration><path>order.primaryWarehouse.warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c276dba1-bb61-4efa-b9cd-552dffbc4601" name="priority"><con:configuration><path>order.primaryWarehouse.priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42766" id="0d960927-6c10-42f4-9648-76efe8570e7d"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL" methodName="DeterminePrimaryWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42766" id="865e51e3-92d4-44ad-a94a-656216ff1d6b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "Case4_MultiLine",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "dpw",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "order": {
        "acceptableShipFromWarehouses": null,
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "MNMMT332A",
                "lineItemID": "L001",
                "requiresPharmacyDispensing": "false"
            }
        ],
        "orderId": "1",
        "recommendedCarrier": "6",
        "recommendedShippingMethod": "USPM"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ba92771d-13da-40d6-b4f6-817e8dcee369" name="Valid HTTP Status Codes_8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="408bbd8f-c30f-45b5-b63f-eabdcdb797d1" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="62754517-6fe5-4c31-8196-ac433a53e8df" name="itemNumber"><con:configuration><path>order.lineItems[0].itemNumber</path><content>MNMMT332A</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c4c31a22-6cd8-4e1e-9474-8529e6d39a16" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[0].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="590e77e1-9079-4611-827a-31bf515cf0c6" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fa135bab-e2a5-4fcf-b1ea-339a8e4818e2" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a02b29f-ae1b-4a7d-8776-07ceda478f43" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[1].warehouseLocationCd</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3eac4acd-2e13-4bf8-a5c7-9e548e014629" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[1].priority</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7f459943-6407-439d-872c-bd131ed0c47f" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[2].warehouseLocationCd</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="35031526-e125-44df-81e7-9a59aa7f60bb" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[2].priority</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e4785ee1-2162-46ef-bb1f-f51d9e1afa44" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[3].warehouseLocationCd</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="24d85a76-3757-4776-acce-e06272330802" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[3].priority</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="12da899b-7f4b-4c21-ac55-8495e0b07bc2" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[4].warehouseLocationCd</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="138c1684-f36d-4e30-b5e9-a70548b0a530" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[4].priority</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="01de9b48-0f15-4878-9c16-ef46c45038b5" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[5].warehouseLocationCd</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="51dc6364-73f0-4028-a709-789240a5c908" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[5].priority</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1ca6c4-b848-48af-a623-22bd53cf8aa9" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[6].warehouseLocationCd</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="25c330b7-f32d-4458-af02-f72bd489f4d9" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[6].priority</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8b9a87fe-53c0-4c6b-8b47-5598d4dcd937" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[7].warehouseLocationCd</path><content>8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b1d46010-35b1-4a9e-8734-92cb8ef9d042" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[7].priority</path><content>8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cf7572c7-d498-43f6-9943-8e4511744d16" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[8].warehouseLocationCd</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c113302f-60ad-4888-9700-2a5e9ae2f89b" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[8].priority</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ab84fa4c-e0ab-41b6-8ece-b731b532393e" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[9].warehouseLocationCd</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4d026602-5a7b-4e11-82ba-c99ba1b132e2" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[9].priority</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a9a20117-8d21-4a02-a29c-0d58077084bc" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="746743ec-b1a7-4e6e-82d5-1dd284cea7ad" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f718ace4-d08d-4b47-8215-b041446fa306" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[1].warehouseLocationCd</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d1843583-96ed-49de-97be-152085f54fc5" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[1].priority</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bbd83dc9-7bfe-4bc9-b806-31a69f552a35" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[2].warehouseLocationCd</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e9bbe99c-9c6d-45bb-8ffa-e2115198acaf" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[2].priority</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="370c3a32-1144-42a6-b5db-e9c3a90015f2" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[3].warehouseLocationCd</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2c00d998-e3fa-4144-aa22-f14e2473dac7" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[3].priority</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f8f3274e-462d-44bc-808a-b1c1914616ae" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[4].warehouseLocationCd</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e7d2f39f-caa1-4035-8868-01d661dacd63" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[4].priority</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f3c4668-860f-4447-b267-4b56fab2daa7" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[5].warehouseLocationCd</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7495060a-66b3-4ec0-bd7f-1571b10c2900" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[5].priority</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31dacf2e-13ec-47ce-8c64-225370d1c9e9" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[6].warehouseLocationCd</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0a722add-7c62-40d6-92af-a484ec612cf1" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[6].priority</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="92c5f3f0-9b96-46c9-acbc-7e75bcb06654" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[7].warehouseLocationCd</path><content>8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c028c4e1-339a-4d08-b6e7-0d7c3986ff8b" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[7].priority</path><content>8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="14769f29-4083-4fb2-b6ff-7c738a2badef" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[8].warehouseLocationCd</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8817d898-e142-4da7-82a5-dcb822958c37" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[8].priority</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a0ee6b2-1f3d-4d34-9802-92966f8ec829" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[9].warehouseLocationCd</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="88153765-d202-43dd-8440-2cf9aa9458b3" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[9].priority</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5d8a0aec-6459-441a-b962-a8282bbd8425" name="recommendedCarrier"><con:configuration><path>order.recommendedCarrier</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="770a1201-6418-4205-8f31-038b13efc7f2" name="recommendedShippingMethod"><con:configuration><path>order.recommendedShippingMethod</path><content>USPM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4bf49f46-9a5a-477b-8e96-13416c30de33" name="warehouseLocationCd"><con:configuration><path>order.primaryWarehouse.warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d40d3848-3ed4-4167-b4da-f25d3aca5eb5" name="priority"><con:configuration><path>order.primaryWarehouse.priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42770" id="ffd8518b-ed46-4ece-8252-55e0d9922ef8"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL" methodName="DeterminePrimaryWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42770" id="865e51e3-92d4-44ad-a94a-656216ff1d6b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "Case4_MultiLine",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "dpw",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "order": {
        "acceptableShipFromWarehouses": null,
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "58328290",
                "lineItemID": "L001",
                "requiresPharmacyDispensing": "true"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "MNMMT332A",
                "lineItemID": "L002",
                "requiresPharmacyDispensing": "false"
            }
        ],
        "orderId": "1",
        "recommendedCarrier": "6",
        "recommendedShippingMethod": "USPM"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e6aa9a84-0d28-43b8-9300-d62ecb319387" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bd1cff5f-b60e-4980-a766-2a2773bdc390" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bf2b9240-bb07-4eee-b3d2-93a95090093a" name="itemNumber"><con:configuration><path>order.lineItems[0].itemNumber</path><content>58328290</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="59ec17fc-68ff-4aeb-8dc2-90091a4769cc" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[0].requiresPharmacyDispensing</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="13b12e13-3ca9-4f14-88c6-3b3763ce5590" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5344f462-abd1-476d-bf50-41534fd846d5" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1a029d37-d8f3-4fa2-80a0-1137225ebc93" name="lineItemID"><con:configuration><path>order.lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85ca9b69-45af-42b4-b797-cd1cf7b324f2" name="itemNumber"><con:configuration><path>order.lineItems[1].itemNumber</path><content>MNMMT332A</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a9767cc3-39ff-40e9-8366-63ad9810de2e" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[1].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="263733c3-e469-4f46-bd09-35022ebcd15e" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="21796d35-ef81-4660-83ee-060ce460384d" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="efd75910-41b9-444c-b083-8bdfff16e989" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[1].warehouseLocationCd</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="59a4ba25-96d7-44db-a008-c53a5aa26e79" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[1].priority</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="092bea0d-b980-4984-b54a-c40cbabcfe40" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[2].warehouseLocationCd</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c827cae4-fe36-46cc-95d4-08d14d3423ab" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[2].priority</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d88162f2-7ac2-4edf-a068-6aa744e5f542" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[3].warehouseLocationCd</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="07f17bc1-782d-4e10-8677-f8c6b6dec135" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[3].priority</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cf54875d-a51c-494e-8ed9-70439cebb3a5" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[4].warehouseLocationCd</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0d435d62-cbac-48af-a8e3-068e4f68a28c" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[4].priority</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bf8e0e16-0532-46e0-a853-755e99c00f6f" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[5].warehouseLocationCd</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8b61b95b-f36a-4e40-b7bf-eccdb610edc8" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[5].priority</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="76a73363-d10f-469e-8e5b-4cd70147e9bb" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[6].warehouseLocationCd</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2ed01448-bb9c-42cb-94d6-4cb08bae5961" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[6].priority</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7e575f6d-5d37-4b15-bb92-81154fd20ae8" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[7].warehouseLocationCd</path><content>8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="21b415ac-aa27-41d3-883c-2e9a1901f43c" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[7].priority</path><content>8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a47e3f0f-61ce-4915-bf6b-1d8e01924563" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[8].warehouseLocationCd</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1256dff0-0ed0-4399-a589-823d702f2cdb" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[8].priority</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0ee02e47-691a-41d6-94c2-d3684e1f358d" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[9].warehouseLocationCd</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a10abe4e-ae4a-4e23-a82d-ca57e22303ba" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[9].priority</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5e8a18f9-5172-42f0-96ad-5c8a30887085" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cf8f101e-9415-4bc8-86e2-2bad2cae7204" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e838353-7bad-408d-9292-df034d3570dd" name="recommendedCarrier"><con:configuration><path>order.recommendedCarrier</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="78c404bb-592a-4258-8496-a5901d16105d" name="recommendedShippingMethod"><con:configuration><path>order.recommendedShippingMethod</path><content>USPM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="74ecf6a5-a8a0-4a1c-9460-46f40f82e6ef" name="warehouseLocationCd"><con:configuration><path>order.primaryWarehouse.warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5f767080-333d-478f-95b0-0072ee27b5c3" name="priority"><con:configuration><path>order.primaryWarehouse.priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42771" id="bb20ee39-8926-4b1c-ab20-5d74207d6df7"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL" methodName="DeterminePrimaryWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42771" id="865e51e3-92d4-44ad-a94a-656216ff1d6b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "Case4_MultiLine",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "dpw",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "order": {
        "acceptableShipFromWarehouses": null,
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "MNMMT332A",
                "lineItemID": "L001",
                "requiresPharmacyDispensing": "false"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "MNMMT378",
                "lineItemID": "L002",
                "requiresPharmacyDispensing": "false"
            }
        ],
        "orderId": "1",
        "recommendedCarrier": "5",
        "recommendedShippingMethod": "USCM"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="804fe311-dfda-463c-8815-d111e0af0c91" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1c9301c2-f63b-4679-b7da-ce1bfa8f7a56" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="93bacd27-9ae2-4cc3-8cd6-f0c2dc2d23fb" name="itemNumber"><con:configuration><path>order.lineItems[0].itemNumber</path><content>MNMMT332A</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f0820000-8fd4-4d50-b237-5685576b9353" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[0].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f37692f5-fa0b-47e8-9770-98023e8e924b" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8451680d-0ab9-4757-817e-1a2ac581174b" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce7c6b72-0c4b-478e-afd9-e63f495a0e8c" name="lineItemID"><con:configuration><path>order.lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="77edc8d2-17aa-4dfc-b77f-66b59fd4ee48" name="itemNumber"><con:configuration><path>order.lineItems[1].itemNumber</path><content>MNMMT378</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f4ee7cce-b10c-444f-ba9c-db09b914f3d0" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[1].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f9a07a80-893a-4d1c-a3e7-c24b09a3dae7" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e7e6da4b-a5c8-4e65-9d78-b471d83a4603" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ddcc6031-ccbf-46e7-8779-3ee71a1a7c02" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="893f3752-04fd-4535-a45f-a785deb77367" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="14634d6e-0b62-47b7-90ee-ec0a8fa41b11" name="recommendedCarrier"><con:configuration><path>order.recommendedCarrier</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fb1a9015-f763-4f6f-80db-840da69aca64" name="recommendedShippingMethod"><con:configuration><path>order.recommendedShippingMethod</path><content>USCM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f3d90bda-a623-4f50-9543-9591d0d5ef34" name="warehouseLocationCd"><con:configuration><path>order.primaryWarehouse.warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0602c1f8-c977-46e1-b6b6-04c5363f6967" name="priority"><con:configuration><path>order.primaryWarehouse.priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42767" id="1c893468-2a9d-4d32-b42d-b7d6f241c756"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL" methodName="DeterminePrimaryWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42767" id="865e51e3-92d4-44ad-a94a-656216ff1d6b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "Case4_MultiLine",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "dpw",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "order": {
        "acceptableShipFromWarehouses": null,
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "58328290",
                "lineItemID": "L001",
                "requiresPharmacyDispensing": "true"
            }
        ],
        "orderId": "1",
        "recommendedCarrier": "5",
        "recommendedShippingMethod": "USCM"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="26b9cdce-cd04-4c3d-a030-48c2f630cff0" name="Valid HTTP Status Codes_9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5001f0db-36b8-42cf-b865-5233c88ac52e" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="88b74726-d7a4-45a4-8649-e4f41fa57bdc" name="itemNumber"><con:configuration><path>order.lineItems[0].itemNumber</path><content>58328290</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8dbe96a1-2edd-482f-aaf6-4c993711c8dc" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[0].requiresPharmacyDispensing</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8f0a4a5b-323e-4546-b8fb-1538a8271f18" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="98ffc480-be51-4bd9-8ecb-2ffe31d9031e" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be8577fb-29b0-4586-8499-398eed1e0d67" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="94f485d8-5394-491f-bf17-b07179c06466" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0165fb7-533c-4e2a-9bed-82ccae0e593a" name="recommendedCarrier"><con:configuration><path>order.recommendedCarrier</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2c81d0c6-f4a6-42ca-b060-1fae51bfdfdc" name="recommendedShippingMethod"><con:configuration><path>order.recommendedShippingMethod</path><content>USCM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fa5f0a3d-b7fa-4039-9720-4500c7b4f4b1" name="warehouseLocationCd"><con:configuration><path>order.primaryWarehouse.warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19ccb60a-b877-4e66-95e5-a12b8b9dd695" name="priority"><con:configuration><path>order.primaryWarehouse.priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42768" id="6bded3d9-f0fd-4117-892b-254f67f12362"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL" methodName="DeterminePrimaryWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42768" id="865e51e3-92d4-44ad-a94a-656216ff1d6b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "Case4_MultiLine",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "dpw",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "order": {
        "acceptableShipFromWarehouses": null,
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "EDSTKSD001",
                "lineItemID": "L001",
                "requiresPharmacyDispensing": "true"
            }
        ],
        "orderId": "1",
        "recommendedCarrier": "5",
        "recommendedShippingMethod": "USPM"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="47beaf3a-34fa-4104-9cab-0755bb0fbf2d" name="Valid HTTP Status Codes_10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6027af8e-5e54-47a6-b777-602295396f6d" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="67a3f588-fb7e-4ab3-8fa2-1f19bbd8fb92" name="itemNumber"><con:configuration><path>order.lineItems[0].itemNumber</path><content>EDSTKSD001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0452892b-4857-4589-acc1-e26497b16494" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[0].requiresPharmacyDispensing</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eb212f87-87f2-498e-b683-4887444181ef" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bc9d2c66-9cd7-4b65-99cf-2876d830e60a" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="654f9db9-bcfa-433c-ba6a-532892f643cf" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c3220ddb-ee4d-436b-aeac-4173999c643b" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfa23b7b-ef7a-4cf4-b6b8-038daf615d43" name="recommendedCarrier"><con:configuration><path>order.recommendedCarrier</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be7f7ee2-537e-4f58-b6cc-5ce08c6c88b3" name="recommendedShippingMethod"><con:configuration><path>order.recommendedShippingMethod</path><content>USPM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e2e6840f-0fd7-47e4-9ed6-b66dd4ea0768" name="warehouseLocationCd"><con:configuration><path>order.primaryWarehouse.warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1add5a79-0b05-4cd6-a21a-2e42fbde81c9" name="priority"><con:configuration><path>order.primaryWarehouse.priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42769" id="d9711163-39f0-4f83-9f12-29d060011b34"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL" methodName="DeterminePrimaryWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42769" id="865e51e3-92d4-44ad-a94a-656216ff1d6b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "Case4_MultiLine",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "dpw",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "order": {
        "acceptableShipFromWarehouses": null,
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "MMNT123",
                "lineItemID": "L001",
                "requiresPharmacyDispensing": "false"
            }
        ],
        "orderId": "1",
        "recommendedCarrier": "6",
        "recommendedShippingMethod": ""
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="83e475df-875f-4d63-81dc-cb450e46dbca" name="Valid HTTP Status Codes_11"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ddc3be87-86b9-4d20-8dc1-75d2fa4355ae" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="855f043a-612a-43e0-9278-693951259d7c" name="itemNumber"><con:configuration><path>order.lineItems[0].itemNumber</path><content>MMNT123</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f5bf870f-9fdb-4063-84c2-7b05629b21d9" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[0].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7e6eca8b-6f43-4114-8a2a-9503beeb29ec" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a6f98358-2502-45b5-a787-20eefb55a0aa" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="df7e8f58-6bef-4ba5-bf57-868b045af0fe" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[1].warehouseLocationCd</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="75271c9f-8b57-4144-b409-73c6912c1d88" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[1].priority</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1bc9a815-f0b8-4d3c-b00b-9ee150c7e107" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[2].warehouseLocationCd</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="138abe01-bb3d-4e3f-8426-cf3965bd8535" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[2].priority</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5ca4f2a2-a91f-4806-8969-06c12751a10d" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[3].warehouseLocationCd</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1691c260-d1b0-4bcc-9a0e-edb05c4b0e43" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[3].priority</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="532f0642-5779-4c88-b9c9-1bacb26ba2e2" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[4].warehouseLocationCd</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="75849cfb-243e-41f9-9eca-c453447a04c2" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[4].priority</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7a1846fb-02f9-406a-b4e6-8bf4e77cb922" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[5].warehouseLocationCd</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5d3b4bc6-a4e8-4cc5-bb25-04921a461c36" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[5].priority</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d593c609-ace9-427c-899f-90bb7f255257" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[6].warehouseLocationCd</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="389c6f36-dc39-461a-a8ac-7f51e6eca267" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[6].priority</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3c7de80f-e756-4069-9bc5-e4dd08457f6e" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[7].warehouseLocationCd</path><content>8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ba545101-7a8a-4512-bbf4-fe3ae1e61f5e" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[7].priority</path><content>8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c04ba92f-66d9-4494-a70d-581ae512188e" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[8].warehouseLocationCd</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2fbfc113-f0d3-4592-b4bc-1047faf70239" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[8].priority</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a36cdf93-2bdc-448f-87ab-6daac82b8c61" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[9].warehouseLocationCd</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c385c444-5f05-43cc-9ed5-0e241be18ccb" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[9].priority</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4926e857-e845-44fa-8dbd-5f628860c592" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="356e2cae-0951-4724-ab2e-c9e57cb63428" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c139a21b-41f2-41f8-8ee8-6eb34ce6f031" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[1].warehouseLocationCd</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="94eaaa81-d0e3-403a-bf5f-919f6201f5e7" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[1].priority</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5df30b05-ebb4-46a6-8ca8-1304e7a8c100" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[2].warehouseLocationCd</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f77d63c7-0ddb-498e-98d8-a1121d7499b9" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[2].priority</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="45bf6013-6402-4b89-91f9-5822d5b8a33a" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[3].warehouseLocationCd</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="351b3726-5f3a-4568-93de-b8acf2515781" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[3].priority</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4aff13c6-cbb5-49e5-8191-4a33c0998fc1" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[4].warehouseLocationCd</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e8da51ff-26c1-4a24-b07e-b2e732d3c1b6" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[4].priority</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b710ae17-80b1-46fd-95ec-25058d7983d0" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[5].warehouseLocationCd</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d5fe7735-9b97-4e2f-bb5c-fb71fc6213f4" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[5].priority</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="522b2772-6abf-43b3-b3be-794d22555cfe" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[6].warehouseLocationCd</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2fdd94d4-da99-467e-bb50-82a3738cc111" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[6].priority</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c90299b7-aa17-4f66-9a77-44c7cde3a8d4" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[7].warehouseLocationCd</path><content>8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7e140ac2-4598-4cff-b7e9-48c787045428" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[7].priority</path><content>8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c9999d35-ba29-4e1b-b7c0-a0560a681f82" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[8].warehouseLocationCd</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3f468a9a-22f5-4fd9-8b92-749b5ec0d651" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[8].priority</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="485bae01-d41f-40ab-95cc-3db03ba13f63" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[9].warehouseLocationCd</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8a48f1fa-23bf-48f9-922c-d7bd038c8ffb" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[9].priority</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="46658687-e50e-4abd-9f23-98ecc4bdec07" name="recommendedCarrier"><con:configuration><path>order.recommendedCarrier</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3253f682-a60d-498d-adf4-52a88f0277aa" name="recommendedShippingMethod"><con:configuration><path>order.recommendedShippingMethod</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1bb41bb6-f720-4ac5-926a-94870dc74f2d" name="warehouseLocationCd"><con:configuration><path>order.primaryWarehouse.warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aae04d3c-73d8-45a7-a3f2-4500862269be" name="priority"><con:configuration><path>order.primaryWarehouse.priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42772" id="de6721ed-bee0-468e-87d5-beac2a05e43f"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL" methodName="DeterminePrimaryWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42772" id="865e51e3-92d4-44ad-a94a-656216ff1d6b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "Case4_MultiLine",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "dpw",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "order": {
        "acceptableShipFromWarehouses": null,
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "58328290",
                "lineItemID": "L001",
                "requiresPharmacyDispensing": "true"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "MNMMT332A",
                "lineItemID": "L002",
                "requiresPharmacyDispensing": "false"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "EDBUNGF003",
                "lineItemID": "L003",
                "requiresPharmacyDispensing": "false"
            }
        ],
        "orderId": "1",
        "recommendedCarrier": "6",
        "recommendedShippingMethod": "USPM"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0ef66d11-02a6-4898-8901-533c99c156a0" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="73e74983-d7f1-492c-84b3-f9ba58659692" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3b87b8fb-0ed2-439a-81da-9b6fbc6e9e9e" name="itemNumber"><con:configuration><path>order.lineItems[0].itemNumber</path><content>58328290</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04b74d52-9eff-458f-8ded-13bea81ca561" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[0].requiresPharmacyDispensing</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1778659c-871e-4081-bcd2-186692b5b7f8" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="818d9c3a-3e57-4cde-8192-6f2704a398ae" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="556a0e0d-64e6-46ce-aef7-83f6ee3278c5" name="lineItemID"><con:configuration><path>order.lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="48786374-9dc8-4d4e-aa19-31eaa4a2af7a" name="itemNumber"><con:configuration><path>order.lineItems[1].itemNumber</path><content>MNMMT332A</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c013701d-9320-4964-8f1a-e9d589c63e30" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[1].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e1262412-8527-41ff-a52c-0e382baecc92" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5731386b-5a11-4f4a-bf05-53df42941ad2" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="df09dd4b-21c3-4592-a47c-39c6f84f66f9" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[1].warehouseLocationCd</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7b57d777-fea9-4bdb-b321-eb9081f14f57" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[1].priority</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="992559fc-e75f-47e6-acac-56763289b61b" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[2].warehouseLocationCd</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="867f85f9-5bef-496c-a6c0-50c6f8c56d04" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[2].priority</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c65cb260-52e6-4557-afcd-cfab48016f33" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[3].warehouseLocationCd</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0c0071ad-6d30-4411-8c88-02d095aef059" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[3].priority</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cd3d686f-90ad-4d20-b016-f91ce5bd32b9" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[4].warehouseLocationCd</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="94d53273-e600-4367-9a55-fb0ee1c40611" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[4].priority</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="013fa56d-f864-4b72-a6e1-764c77496bb6" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[5].warehouseLocationCd</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d3f292f1-203d-42f2-8815-f6dda105b5a4" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[5].priority</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7997477f-2273-4c1b-a897-a67d56a4da3f" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[6].warehouseLocationCd</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8f3fe307-daa1-433b-9430-e36638a1b73d" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[6].priority</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="209b6eba-95bc-4ea6-abc3-ef17084324d4" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[7].warehouseLocationCd</path><content>8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="57f877ba-5469-41aa-9639-6b49acfc11de" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[7].priority</path><content>8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="65476159-1cdb-4a41-8245-621af1698644" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[8].warehouseLocationCd</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c2c10182-0eb3-42c2-9300-e9d3393fc0de" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[8].priority</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="59170e56-21ea-4cd8-b204-30ad4729ca91" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[9].warehouseLocationCd</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="06bd60b2-f1c1-4f01-8729-5c578de1e22c" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[9].priority</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="50d83ceb-2935-421d-8ef3-bb95a01e6d73" name="lineItemID"><con:configuration><path>order.lineItems[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c7648504-ae39-407d-9625-9ebdc8f038ed" name="itemNumber"><con:configuration><path>order.lineItems[2].itemNumber</path><content>EDBUNGF003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="28be52c1-6b9c-4ed9-b07d-113e5d2956e2" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[2].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f59f8e7-cc3d-4a0d-8c1f-697fecd4dde3" name="warehouseLocationCd"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="df2627e0-4bdd-4da2-869a-44f898d40ff9" name="priority"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3682ca61-d1e6-465f-8380-63f5955f8739" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2d4e7a6b-940e-4f71-b3df-4d3d36b8f613" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3ed9125b-7f37-4bc9-8667-2be040a34fa6" name="recommendedCarrier"><con:configuration><path>order.recommendedCarrier</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3f017174-5a08-4954-b330-772c8e492d08" name="recommendedShippingMethod"><con:configuration><path>order.recommendedShippingMethod</path><content>USPM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="507b09cf-cdaa-4244-9f62-9ba1e3eea20d" name="warehouseLocationCd"><con:configuration><path>order.primaryWarehouse.warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="86600dc6-21a7-4c17-9ca5-7ec54a7a8f93" name="priority"><con:configuration><path>order.primaryWarehouse.priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42773" id="c1e3f288-b162-4829-8597-5e8bf9e5c5ff"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL" methodName="DeterminePrimaryWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42773" id="865e51e3-92d4-44ad-a94a-656216ff1d6b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "Case4_MultiLine",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "dpw",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "order": {
        "acceptableShipFromWarehouses": null,
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "MNMMT378",
                "lineItemID": "L001",
                "requiresPharmacyDispensing": "false"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "MNMMT332A",
                "lineItemID": "L002",
                "requiresPharmacyDispensing": "false"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "MNMMT332A",
                "lineItemID": "L003",
                "requiresPharmacyDispensing": "false"
            }
        ],
        "orderId": "1",
        "recommendedCarrier": "6",
        "recommendedShippingMethod": "USPM"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e8b733e3-3801-4bac-aee8-25807f07f792" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d4b3b9bf-865d-4283-9918-8c2159268ffa" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fc55337e-ac82-4eb5-994d-4d5380485c13" name="itemNumber"><con:configuration><path>order.lineItems[0].itemNumber</path><content>MNMMT378</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="366552a1-1706-4940-b37b-cc913085571b" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[0].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9d10d430-4e19-4ce1-9c96-1b1552fba4de" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="24a40302-6bbf-42ad-bdbd-314eb7075589" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8bb3764e-531a-4980-b064-1cffdf0bb18b" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[1].warehouseLocationCd</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="90e626b0-d135-43f7-b3ba-2eb0619eeff0" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[1].priority</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4b92a0c1-2557-4254-821c-f873ed0ed4f5" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[2].warehouseLocationCd</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0da29121-41b4-42d1-b869-bd4d313e91ca" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[2].priority</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="73eef928-b307-46c3-b5ba-a43eb6549b0d" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[3].warehouseLocationCd</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7dc5d317-c738-48a0-bf1d-6b27b017f314" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[3].priority</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42b14c93-4f89-44b2-8373-c78c9164a6cc" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[4].warehouseLocationCd</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9abfd686-9153-424d-98bb-7914e5afed53" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[4].priority</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ed387992-556e-41ed-86f1-5a996f380fd8" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[5].warehouseLocationCd</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be495f53-e833-4cd9-af1e-03e51425a36a" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[5].priority</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bbbf22ff-a80c-4795-b5d1-4d69efa5d886" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[6].warehouseLocationCd</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bf63b55c-b8df-4209-b227-9ef96df7f58c" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[6].priority</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f1e0a04d-6ef4-4999-a56a-a67aa88f6bcb" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[7].warehouseLocationCd</path><content>8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="985da977-007a-4e23-96f2-381deb9e950d" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[7].priority</path><content>8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="75698ab1-9cd9-46e7-9898-45823a362f69" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[8].warehouseLocationCd</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ec2a966f-090e-4871-96e0-4236f5dc0589" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[8].priority</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="79d1af71-1b37-4b1a-8bcd-391e655ad111" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[9].warehouseLocationCd</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c20d54e7-dbac-4a78-88f0-8c746c254689" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[9].priority</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bc025afb-5d84-41cd-a533-c174edc7f109" name="lineItemID"><con:configuration><path>order.lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6af61f1d-c7f1-4d1a-b907-51334a1c941e" name="itemNumber"><con:configuration><path>order.lineItems[1].itemNumber</path><content>MNMMT332A</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9bbfa86e-136d-4d97-bd35-6ad0c529718e" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[1].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8023d0ae-bc72-4d74-9bcb-8268ed16fbbf" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="89826ed6-bf71-4b81-86c8-b9f83ef17a59" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aff3e141-6d26-4450-aefe-3c8db2237a02" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[1].warehouseLocationCd</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8709eb72-1052-4dc6-97a4-748c30e9944d" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[1].priority</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="98175f4d-8ed6-412f-9f3e-4b622d0860be" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[2].warehouseLocationCd</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cb453d7e-72f9-4873-96f1-1e27dc0b3983" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[2].priority</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1a9539d9-867d-4779-9600-9f8c39683646" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[3].warehouseLocationCd</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="391e1872-bcef-4c18-9cf3-2a969fb44509" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[3].priority</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="16d21467-d369-4509-85a9-6e1348336c15" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[4].warehouseLocationCd</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6c10f700-c79a-445a-bf36-837ed08ad681" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[4].priority</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1722f3e0-865a-47f8-aa30-84e726050527" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[5].warehouseLocationCd</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c1bb7c09-c337-4b5e-9532-954961e878ca" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[5].priority</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="046fe94c-55b8-4555-8e98-1f8f6d890a13" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[6].warehouseLocationCd</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="093517ff-3cb9-4f8d-8750-b1dcddb2fb14" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[6].priority</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1a6935b3-5513-4756-bd0f-f6713956bd38" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[7].warehouseLocationCd</path><content>8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5b0dba83-8225-4ebd-b56c-598c9c73b366" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[7].priority</path><content>8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="39295cc8-e897-4abd-b936-308518c94213" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[8].warehouseLocationCd</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aa08bd7d-8a8a-4e70-9cc9-b348cfdabb0b" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[8].priority</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="82460398-1a3e-464f-b953-0818c5178d2b" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[9].warehouseLocationCd</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="339565e5-9627-437a-bdf2-0a64e0bc6ae0" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[9].priority</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="84b293e3-c10a-406a-9f7a-564974ce8d19" name="lineItemID"><con:configuration><path>order.lineItems[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b36aca7f-c7e3-436c-9d6e-8b15cb7580ce" name="itemNumber"><con:configuration><path>order.lineItems[2].itemNumber</path><content>MNMMT332A</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dd61e4c8-0bf5-4678-82ad-040fdfffc06e" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[2].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="08c941ad-bb80-4c0b-9ddd-e375a1dbea7c" name="warehouseLocationCd"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e839b512-5089-448e-9256-44b4997eb02a" name="priority"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="350886bf-2dae-40fa-b17f-f1828e398a9f" name="warehouseLocationCd"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[1].warehouseLocationCd</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0888ef5a-9f13-4d47-ad05-0b99c5842da0" name="priority"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[1].priority</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce77b215-091b-47f7-bbef-7e43372b2dfc" name="warehouseLocationCd"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[2].warehouseLocationCd</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fe3e5814-bcc8-4c92-8df3-df8bd8a02c97" name="priority"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[2].priority</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="49ff2316-a54a-4746-9f89-f4990d7a49c7" name="warehouseLocationCd"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[3].warehouseLocationCd</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="87e7b34f-23dc-40cb-a05a-e1c1dc958058" name="priority"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[3].priority</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dbc4847b-fdad-415c-a173-1a162a5caeed" name="warehouseLocationCd"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[4].warehouseLocationCd</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="41a23001-51e8-4ae9-b0f2-07fc69b22eec" name="priority"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[4].priority</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="63decebc-8bbb-4eb9-a18a-7678d7457c01" name="warehouseLocationCd"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[5].warehouseLocationCd</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfae501b-748f-4f54-ad75-787719fadfee" name="priority"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[5].priority</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0d23d816-5c6c-4d8a-9b9a-a4bab416509d" name="warehouseLocationCd"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[6].warehouseLocationCd</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a0a57936-bd69-48d7-95df-86b38798eb8d" name="priority"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[6].priority</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b1e2754d-a8cf-492b-8fd5-ca137a216369" name="warehouseLocationCd"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[7].warehouseLocationCd</path><content>8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7c321507-6d36-4320-91e1-889eb0f55247" name="priority"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[7].priority</path><content>8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="92f98db8-7423-4c70-805f-a96b8ae19a1f" name="warehouseLocationCd"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[8].warehouseLocationCd</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1110075d-c90d-4bd2-8f36-c8f506aea898" name="priority"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[8].priority</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="96047dea-a6cb-4a02-bec9-7ffc9ee0bb0c" name="warehouseLocationCd"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[9].warehouseLocationCd</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3866fd12-ad85-4ccc-9db3-5524f2195709" name="priority"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[9].priority</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="732454c8-4b80-401b-b024-f1f4d6b1f782" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7a42fc87-1d7f-403c-9765-ac0f47ea8579" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5b57dff1-a38a-4797-acb2-6fd2c51c9214" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[1].warehouseLocationCd</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fe3a02d4-1bbe-4d50-a8ff-5d18e8ec0736" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[1].priority</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d29dff57-cc5f-4893-b0c5-648a2fdcbd23" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[2].warehouseLocationCd</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dc4a290a-bf2e-43f0-a4e8-827041c32b06" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[2].priority</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="61e2712c-3307-456c-938d-49278988e027" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[3].warehouseLocationCd</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="72bb2b54-8997-4a6f-88e5-be0ba90df89f" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[3].priority</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="497d5691-7467-4340-89f4-0ef0482e4d02" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[4].warehouseLocationCd</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b8b5f8ef-dd33-4c35-bcaf-c0aef6fb578b" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[4].priority</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eee6889d-8777-4d46-861f-cb335be17fd3" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[5].warehouseLocationCd</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e40f7c53-959e-4e52-8f55-fa253474f506" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[5].priority</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5e372ea3-a654-485f-adea-becbdfb53541" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[6].warehouseLocationCd</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5f3c8a79-ebca-4647-a307-8891a768c6ea" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[6].priority</path><content>7</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9aaff254-3602-4326-853f-bbe277589eee" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[7].warehouseLocationCd</path><content>8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="829d2aa2-83ec-455b-8a4b-6cdb139b8112" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[7].priority</path><content>8</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1b5a87c6-18e0-428a-bf9f-533eb6cec853" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[8].warehouseLocationCd</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ad653748-f519-4e71-b245-c3c6e1c90e9d" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[8].priority</path><content>9</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="61c1064c-1b71-4992-a0e5-21af085e651e" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[9].warehouseLocationCd</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b19f3b67-b37a-4e54-9cf3-2a8445eb6ea0" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[9].priority</path><content>10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="958203cc-2205-4147-9b03-4e5f4c2f0cf4" name="recommendedCarrier"><con:configuration><path>order.recommendedCarrier</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5b3ba387-4e02-405a-8c4e-e0f8467789df" name="recommendedShippingMethod"><con:configuration><path>order.recommendedShippingMethod</path><content>USPM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d1edd049-1d82-43c1-beee-81a59ad85a54" name="warehouseLocationCd"><con:configuration><path>order.primaryWarehouse.warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="35816780-c871-4cf9-8f7c-7dd44976839e" name="priority"><con:configuration><path>order.primaryWarehouse.priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42774" id="c1bce892-6694-41c1-95b8-315021a1d867"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL" methodName="DeterminePrimaryWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42774" id="865e51e3-92d4-44ad-a94a-656216ff1d6b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "Case4_MultiLine",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "dpw",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "order": {
        "acceptableShipFromWarehouses": null,
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "58328290",
                "lineItemID": "L001",
                "requiresPharmacyDispensing": "true"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "58328290",
                "lineItemID": "L002",
                "requiresPharmacyDispensing": "true"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "58328290",
                "lineItemID": "L003",
                "requiresPharmacyDispensing": "true"
            }
        ],
        "orderId": "1",
        "recommendedCarrier": "6",
        "recommendedShippingMethod": "USPM"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="46e99784-0445-419e-9993-c3c98025576e" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2c82cbe7-c164-4e38-9072-c1fd7aeddc88" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="311409de-2bf4-4603-9096-3e69b2b76abb" name="itemNumber"><con:configuration><path>order.lineItems[0].itemNumber</path><content>58328290</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="02e4439d-2e3b-4be0-8726-43272503d051" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[0].requiresPharmacyDispensing</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2ef75dea-c085-4b83-a171-5a6eab03fa92" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2fcb274-4249-46ac-9fa3-595037b44eb3" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7ba428f2-b0d1-46ff-a83c-6c9e5b5de45c" name="lineItemID"><con:configuration><path>order.lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7611f7ee-f7f4-418d-8a4a-4e7ca1b0794c" name="itemNumber"><con:configuration><path>order.lineItems[1].itemNumber</path><content>58328290</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="25621e2e-502d-48bb-9302-610280f2bcfb" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[1].requiresPharmacyDispensing</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e03d5d0a-aed7-48e1-b8af-62ff016b33d5" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="53471846-5ca4-4c93-aaa3-b9165529a4ca" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="911ed7a9-3a66-4b33-83f8-7223cb6f5434" name="lineItemID"><con:configuration><path>order.lineItems[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a29abf0-7292-4995-a766-9230016e0c3a" name="itemNumber"><con:configuration><path>order.lineItems[2].itemNumber</path><content>58328290</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0c44d3f9-4c48-4679-a7dc-dc9796f86604" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[2].requiresPharmacyDispensing</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="71e80e57-39ed-4701-a0c9-3ee6e8668040" name="warehouseLocationCd"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e661758c-68dd-47ff-948e-9ad83ce3fb67" name="priority"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a26a0862-c0cf-4fd8-91b9-944b81325f77" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6bca6818-556c-4f32-bb99-d4d9e555260f" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dd9d8033-535c-4038-9482-07231fc809c5" name="recommendedCarrier"><con:configuration><path>order.recommendedCarrier</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d0fab0aa-584f-4a88-af5f-3f1741882b61" name="recommendedShippingMethod"><con:configuration><path>order.recommendedShippingMethod</path><content>USPM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c89e2ad0-036c-41bf-a2c6-fed2406841c6" name="warehouseLocationCd"><con:configuration><path>order.primaryWarehouse.warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a9c73f8d-a703-483d-b9fe-a483c163428d" name="priority"><con:configuration><path>order.primaryWarehouse.priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42775" id="96d9f0b5-f8f9-4057-b931-33088025f2bf"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL" methodName="DeterminePrimaryWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42775" id="865e51e3-92d4-44ad-a94a-656216ff1d6b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "Case4_MultiLine",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "dpw",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "order": {
        "acceptableShipFromWarehouses": null,
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "58328290",
                "lineItemID": "L001",
                "requiresPharmacyDispensing": "true"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "58328290",
                "lineItemID": "L002",
                "requiresPharmacyDispensing": "true"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "58328290",
                "lineItemID": "L003",
                "requiresPharmacyDispensing": "true"
            }
        ],
        "orderId": "1",
        "recommendedCarrier": "5",
        "recommendedShippingMethod": "USCM"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="708caf65-1472-4b59-89ed-951d89107ac1" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="886bec35-2ebe-4873-b7c0-ce6561baa287" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2b9f460d-bc45-4c01-9bb7-fce18940287e" name="itemNumber"><con:configuration><path>order.lineItems[0].itemNumber</path><content>58328290</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="00be98be-2ec5-4bb6-8480-341b2f5561c4" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[0].requiresPharmacyDispensing</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a9c95c48-a33c-4a95-8c64-816582ff6a07" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="87726505-a3b3-4d84-be11-70395a28237a" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d8150675-e42c-4d54-9a5f-f074c0539ed2" name="lineItemID"><con:configuration><path>order.lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7f322de0-040d-42aa-a162-ee50b3f57ed7" name="itemNumber"><con:configuration><path>order.lineItems[1].itemNumber</path><content>58328290</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1bcf0561-b007-45c4-94b6-7028eefac84b" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[1].requiresPharmacyDispensing</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a1055f2-51e5-47f8-97b6-0057c8af0516" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="77edcb05-9fb3-4eb6-8874-7104ab9fdd74" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2c5eed4a-5380-402c-8c81-b9c6e796f64d" name="lineItemID"><con:configuration><path>order.lineItems[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="59a78651-b611-42b4-8f4f-87de4a3bf22b" name="itemNumber"><con:configuration><path>order.lineItems[2].itemNumber</path><content>58328290</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a49ab28b-b843-4f84-b95e-86053438f2c5" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[2].requiresPharmacyDispensing</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3106863c-c9fc-40a6-a217-b85b0728db6a" name="warehouseLocationCd"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be7cbe48-387d-49ec-9bc2-5f7e0c158c2b" name="priority"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9b0befb9-f383-43c4-b6a6-fd311c60ca68" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="621900f9-d837-412c-9c67-d648796a59c7" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ec81b70e-3e8b-4495-b0bc-009caa74efd5" name="recommendedCarrier"><con:configuration><path>order.recommendedCarrier</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="00dcadce-a566-40ff-ac1b-b99cc2d2f22c" name="recommendedShippingMethod"><con:configuration><path>order.recommendedShippingMethod</path><content>USCM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f678ff4-20bf-470e-9086-265a2f941ecb" name="warehouseLocationCd"><con:configuration><path>order.primaryWarehouse.warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1fd964a9-58c9-44f6-baa4-091c1b1b1936" name="priority"><con:configuration><path>order.primaryWarehouse.priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42776" id="4fd31b72-c210-46cb-b99a-6c7dbd537e8f"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL" methodName="DeterminePrimaryWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42776" id="865e51e3-92d4-44ad-a94a-656216ff1d6b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "Case4_MultiLine",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "dpw",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "order": {
        "acceptableShipFromWarehouses": null,
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "MNMMT332A",
                "lineItemID": "L001",
                "requiresPharmacyDispensing": "false"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "MNMMT378",
                "lineItemID": "L002",
                "requiresPharmacyDispensing": "false"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "5906908373001I",
                "lineItemID": "L003",
                "requiresPharmacyDispensing": "false"
            }
        ],
        "orderId": "1",
        "recommendedCarrier": "2",
        "recommendedShippingMethod": ""
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2d3b0f12-0000-4c5a-b210-b3c5c6982890" name="Valid HTTP Status Codes_8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d62577c-0e68-410a-890e-c3dc26f5c224" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="03350d87-a85a-418e-a12c-1da69e4d81bf" name="itemNumber"><con:configuration><path>order.lineItems[0].itemNumber</path><content>MNMMT332A</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="02e357d7-4645-4837-bd09-c8e2e3e836bf" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[0].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1c3ca2d3-1b1a-43b5-8247-3215360dcfc2" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3dffb058-cefa-4fe3-90f5-94717a7184ef" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ed52aa16-0eed-463d-a866-223598b0f620" name="lineItemID"><con:configuration><path>order.lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bf3da1d2-1236-498f-ac74-79196a5c95b0" name="itemNumber"><con:configuration><path>order.lineItems[1].itemNumber</path><content>MNMMT378</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b994d819-768b-46f6-b6d8-1b97d690d602" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[1].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e324e734-9738-4d5f-8325-31381e3f082c" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3927395d-3457-4525-af02-53a94098356b" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2ad0a5ae-60f4-42a0-b85d-5ee2e91ca11f" name="lineItemID"><con:configuration><path>order.lineItems[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="477f9ea0-f254-4508-9b62-62b55a1df38c" name="itemNumber"><con:configuration><path>order.lineItems[2].itemNumber</path><content>5906908373001I</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="01c88443-02ce-4e5f-bc02-61bf167dec50" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[2].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="79e54383-3a40-4470-80cd-4ff6fe05070e" name="warehouseLocationCd"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7b5c36aa-98fe-456e-a0e5-a489918d3911" name="priority"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="749c5f94-388c-4586-9801-eac5c66ecccc" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e654226d-d4df-4066-9c92-2029ba2df9be" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d9a3319-2df9-4cbc-bcc2-204207657bef" name="recommendedCarrier"><con:configuration><path>order.recommendedCarrier</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="154162da-0f25-4033-b6ca-6ecf6255bdd7" name="recommendedShippingMethod"><con:configuration><path>order.recommendedShippingMethod</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f9e4edec-bb73-4443-bc62-e22ba5460237" name="warehouseLocationCd"><con:configuration><path>order.primaryWarehouse.warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e0391c7f-739d-4e55-980d-cccbb8811cb9" name="priority"><con:configuration><path>order.primaryWarehouse.priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42777" id="422ee9e5-1536-4117-bb0a-f915384dd8da"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL" methodName="DeterminePrimaryWarehouse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42777" id="865e51e3-92d4-44ad-a94a-656216ff1d6b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "Case4_MultiLine",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "dpw",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "order": {
        "acceptableShipFromWarehouses": null,
        "lineItems": [
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "MNMMT332A",
                "lineItemID": "L001",
                "requiresPharmacyDispensing": "true"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "MNMMT378",
                "lineItemID": "L002",
                "requiresPharmacyDispensing": "true"
            },
            {
                "acceptableShipFromWarehouses": [
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "1",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 1,
                        "warehouseLocationCd": "1"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 20,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "2",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 2,
                        "warehouseLocationCd": "2"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 30,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "3",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 3,
                        "warehouseLocationCd": "3"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 40,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "4",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 4,
                        "warehouseLocationCd": "4"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 50,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "5",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 5,
                        "warehouseLocationCd": "5"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 60,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "6",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 6,
                        "warehouseLocationCd": "6"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 70,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "7",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 7,
                        "warehouseLocationCd": "7"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 80,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "8",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 8,
                        "warehouseLocationCd": "8"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 90,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "9",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 9,
                        "warehouseLocationCd": "9"
                    },
                    {
                        "inventory": [
                            {
                                "availableQuantity": 10,
                                "itemNumber": "string"
                            }
                        ],
                        "priority": "10",
                        "shippingCarrierTypeCd": "string",
                        "transitTimeInDays": 10,
                        "warehouseLocationCd": "10"
                    }
                ],
                "itemNumber": "5906908373001I",
                "lineItemID": "L003",
                "requiresPharmacyDispensing": "true"
            }
        ],
        "orderId": "1",
        "recommendedCarrier": "",
        "recommendedShippingMethod": ""
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePrimaryWarehouse/DeterminePrimaryWarehouse/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="93ef1a6d-c843-49ef-9a9f-2055d8088a44" name="Valid HTTP Status Codes_9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="32f1a218-fe04-4be8-9243-51b25647b16b" name="lineItemID"><con:configuration><path>order.lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e3702d0a-1994-4799-846b-6558b0738fe7" name="itemNumber"><con:configuration><path>order.lineItems[0].itemNumber</path><content>MNMMT332A</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="87019865-0696-479c-a386-cee36d1096cf" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[0].requiresPharmacyDispensing</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b5005232-11eb-4db8-9a44-33e9b395d07a" name="warehouseLocationCd"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6ee528d1-ff2d-4bc4-aebe-d2caf489ef79" name="priority"><con:configuration><path>order.lineItems[0].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="868ee7f6-7841-4448-80b4-ffcf58f63477" name="lineItemID"><con:configuration><path>order.lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5371f58e-f442-44b3-89df-94b27af18062" name="itemNumber"><con:configuration><path>order.lineItems[1].itemNumber</path><content>MNMMT378</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e3cbaf5c-e751-415e-a7a1-aa2d1ab187a1" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[1].requiresPharmacyDispensing</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1c9fcfc3-113a-4908-8fe2-c9f382d6c8f7" name="warehouseLocationCd"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="df619681-df5c-41d2-9b29-c2035c032d8a" name="priority"><con:configuration><path>order.lineItems[1].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8040c6f0-bc74-444c-b5c4-f59f85f78721" name="lineItemID"><con:configuration><path>order.lineItems[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6ea0880a-7a5f-4d02-8593-190ae1ee8a72" name="itemNumber"><con:configuration><path>order.lineItems[2].itemNumber</path><content>5906908373001I</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce0fb3a0-5e2d-42a0-a2b8-62e919c024c2" name="requiresPharmacyDispensing"><con:configuration><path>order.lineItems[2].requiresPharmacyDispensing</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f02e3c3f-63bc-4228-8e0e-277dd96dfb9e" name="warehouseLocationCd"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8bc47b59-e033-4684-9351-f8be989d5243" name="priority"><con:configuration><path>order.lineItems[2].acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9f8b9c86-7efe-4285-92a4-8be6695f7240" name="warehouseLocationCd"><con:configuration><path>order.acceptableShipFromWarehouses[0].warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c8fc3772-01f9-40ae-8d0a-97ca58029bfa" name="priority"><con:configuration><path>order.acceptableShipFromWarehouses[0].priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="459afa4f-8c50-4b5d-ba38-1d5b9de02198" name="recommendedCarrier"><con:configuration><path>order.recommendedCarrier</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dda24eb1-c232-4d36-8ec7-3cd1531fb1fb" name="recommendedShippingMethod"><con:configuration><path>order.recommendedShippingMethod</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ba9846e9-a28e-4581-b46e-19c281492d29" name="warehouseLocationCd"><con:configuration><path>order.primaryWarehouse.warehouseLocationCd</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="591423ff-375d-4d54-bbd5-ba82c0fa4a97" name="priority"><con:configuration><path>order.primaryWarehouse.priority</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="845fcd47-84d0-4dbf-a6f6-824234a83fea" name="DetermineUsageLimits"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="f920ef8e-e3c2-4bb6-9ccf-f7bedad603da" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineUsageLimits" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DetermineUsageLimits" id="d4ba05d1-54ca-4b3e-a2a8-4008a5327fd0"><con:settings/><con:config><script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineUsageLimits/DetermineUsageLimits-Input.xls"
def outputfile = projectDir + "/DetermineUsageLimits/DetermineUsageLimits-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"limitQuantity",sheet1);
addCell(2,0,"limitDays",sheet1);
addCell(3,0,"limitCategory",sheet1);
addCell(4,0,"followsMedicare",sheet1);
addCell(5,0,"limitsValid",sheet1);
addCell(6,0,"lineItemID1",sheet1);
addCell(7,0,"limitQuantity1",sheet1);
addCell(8,0,"limitDays1",sheet1);
addCell(9,0,"limitCategory1",sheet1);
addCell(10,0,"followsMedicare1",sheet1);
addCell(11,0,"limitsValid1",sheet1);
addCell(12,0,"lineItemID2",sheet1);
addCell(13,0,"limitQuantity2",sheet1);
addCell(14,0,"limitDays2",sheet1);
addCell(15,0,"limitCategory2",sheet1);
addCell(16,0,"followsMedicare2",sheet1);
addCell(17,0,"limitsValid2",sheet1);
addCell(18,0,"PASS/FAIL",sheet1);
addCell(19,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=3;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                  //Input for LineItem1 
                              def LineItemID1 = sh.getCell(1,i).getContents().toString()                              
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents().toString()
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents().toString()
                                requestTemplet.content.lineItems[0].diagnosis[0].codeICD10 = sh.getCell(3,i).getContents().toString()                                
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(4,i).getContents().toString() 

                                 //Input for LineItem2 
                              def LineItemID2 = sh.getCell(5,i).getContents().toString()                             
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(5,i).getContents()
                                requestTemplet.content.lineItems[1].hcpcsCode = sh.getCell(6,i).getContents()
                                requestTemplet.content.lineItems[1].diagnosis[0].codeICD10 = sh.getCell(7,i).getContents().toString()
                                requestTemplet.content.lineItems[1].payers[0].planName = sh.getCell(8,i).getContents() 

                                 //Input for LineItem3   
                              def LineItemID3 = sh.getCell(9,i).getContents().toString()                               
                                requestTemplet.content.lineItems[2].lineItemID = sh.getCell(9,i).getContents()
                                requestTemplet.content.lineItems[2].hcpcsCode = sh.getCell(10,i).getContents()
                                requestTemplet.content.lineItems[1].diagnosis[0].codeICD10 = sh.getCell(11,i).getContents().toString()
                                requestTemplet.content.lineItems[2].payers[0].planName = sh.getCell(12,i).getContents()                                        
                              

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    

                     if(json.limitsResponse.size()>=1&& LineItemID1!=""&& LineItemID2!=""&& LineItemID3!=""){                              
                           //get lineItem1 from response json                                 
                        addCell(0,i,json.limitsResponse[0].lineItemID,sheet1);                                                  
                        addCell(1,i,json.limitsResponse[0].limitQuantity.toString(),sheet1);                                                          
                        addCell(2,i,json.limitsResponse[0].limitDays.toString(),sheet1); 
                        addCell(3,i,json.limitsResponse[0].limitCategory.toString(),sheet1);
                        addCell(4,i,json.limitsResponse[0].followsMedicare.toString(),sheet1);                                            
                        addCell(5,i,json.limitsResponse[0].limitsValid.toString(),sheet1); 

                        //get lineItem2 from response json 
                        addCell(6,i,json.limitsResponse[1].lineItemID,sheet1);                            
                        addCell(7,i,json.limitsResponse[1].limitQuantity.toString(),sheet1);  
                        addCell(8,i,json.limitsResponse[1].limitDays.toString(),sheet1); 
                        addCell(9,i,json.limitsResponse[0].limitCategory.toString(),sheet1);
                        addCell(10,i,json.limitsResponse[1].followsMedicare.toString(),sheet1);  
                        addCell(11,i,json.limitsResponse[1].limitsValid.toString(),sheet1);
                           
                        //get lineItem3 from response json
                        addCell(12,i,json.limitsResponse[2].lineItemID,sheet1);                                 
                        addCell(13,i,json.limitsResponse[2].limitQuantity.toString(),sheet1);  
                        addCell(14,i,json.limitsResponse[2].limitDays.toString(),sheet1); 
                        addCell(15,i,json.limitsResponse[0].limitCategory.toString(),sheet1);
                        addCell(16,i,json.limitsResponse[2].followsMedicare.toString(),sheet1);  
                        addCell(17,i,json.limitsResponse[2].limitsValid.toString(),sheet1); 
                     }else{
                            //get lineItem1 from response json                                 
                        addCell(0,i,json.limitsResponse[0].lineItemID,sheet1);                                                  
                        addCell(1,i,json.limitsResponse[0].limitQuantity.toString(),sheet1);                                                          
                        addCell(2,i,json.limitsResponse[0].limitDays.toString(),sheet1);
                        addCell(3,i,json.limitsResponse[0].limitCategory.toString(),sheet1);
                        addCell(4,i,json.limitsResponse[0].followsMedicare.toString(),sheet1);                                                        
                        addCell(5,i,json.limitsResponse[0].limitsValid.toString(),sheet1);
     
                   }    
                                                    

                      def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                       addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)

                    if(json.limitsResponse.size()>=1&& LineItemID1!=""&& LineItemID2!=""&& LineItemID3!=""){
                    	            
                          lineItemID = sh.getCell(13,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"limitsResponse[0].lineItemID","lineItemID")

                          limitQuantity = sh.getCell(14,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"limitsResponse[0].limitQuantity","limitQuantity")

                       limitDays = sh.getCell(15,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays,"limitsResponse[0].limitDays","limitDays")
                       
                       limitCategory = sh.getCell(16,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitCategory,"limitsResponse[0].limitCategory","limitCategory")

                       followsMedicare = sh.getCell(17,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,followsMedicare,"limitsResponse[0].followsMedicare","followsMedicare")

                        limitsValid = sh.getCell(18,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitsValid,"limitsResponse[0].limitsValid","limitsValid")

                        lineItemID1 = sh.getCell(19,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"limitsResponse[1].lineItemID","lineItemID")

                          limitQuantity1 = sh.getCell(20,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity1,"limitsResponse[1].limitQuantity","limitQuantity")

                       limitDays1 = sh.getCell(21,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays1,"limitsResponse[1].limitDays","limitDays")

                       limitCategory1 = sh.getCell(22,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitCategory1,"limitsResponse[1].limitCategory","limitCategory")
       
                       followsMedicare1 = sh.getCell(23,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,followsMedicare1,"limitsResponse[1].followsMedicare","followsMedicare")

                        limitsValid1 = sh.getCell(24,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitsValid1,"limitsResponse[1].limitsValid","limitsValid")

                       lineItemID2 = sh.getCell(25,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID2,"limitsResponse[2].lineItemID","lineItemID")

                       limitQuantity2 = sh.getCell(26,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity2,"limitsResponse[2].limitQuantity","limitQuantity")

                       limitDays2 = sh.getCell(27,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays2,"limitsResponse[2].limitDays","limitDays")

                       limitCategory2 = sh.getCell(28,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitCategory2,"limitsResponse[2].limitCategory","limitCategory")

                       followsMedicare2 = sh.getCell(29,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,followsMedicare2,"limitsResponse[2].followsMedicare","followsMedicare")

                        limitsValid2 = sh.getCell(30,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitsValid2,"limitsResponse[2].limitsValid","limitsValid")
         }else{
             
                          lineItemID = sh.getCell(13,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"limitsResponse[0].lineItemID","lineItemID")

                          limitQuantity = sh.getCell(14,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"limitsResponse[0].limitQuantity","limitQuantity")

                       limitDays = sh.getCell(15,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays,"limitsResponse[0].limitDays","limitDays")

                       limitCategory = sh.getCell(16,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitCategory,"limitsResponse[0].limitCategory","limitCategory")

                       followsMedicare = sh.getCell(17,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,followsMedicare,"limitsResponse[0].followsMedicare","followsMedicare")

                        limitsValid = sh.getCell(18,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitsValid,"limitsResponse[0].limitsValid","limitsValid")
  }                                              
                         assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(18,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(19,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(18,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{


     wb.close();
     wb1.close();     

}

def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

def cleanUp(String requestName){

                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    }

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               
}
]]></script></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request" id="bf437cc6-b097-4eee-9086-814bef726b89"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": "E10.10000"
                }
            ],
            "hcpcsCode": "A4259",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "A985"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "E15.01"
                }
            ],
            "hcpcsCode": "A4259",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "B018"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "A4253",
            "lineItemID": "L003",
            "payers": [
                {
                    "planName": "A985"
                }
            ]
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC01" id="fa38c4df-53f4-4ebb-85b8-70507aca9088"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC01" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A9274",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "B622"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "",
            "payers": [
                {
                    "planName": ""
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "",
            "payers": [
                {
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0ed75bb2-117f-47a5-b1dd-c0e888eb5278" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8b5b772c-ea95-4021-ae19-dae782455195" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b06aad38-df8b-488a-8b7e-801ce2699176" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>40</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fb3dda6d-6900-4d01-9a7c-82cf3b172085" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c040a1b9-1140-4a08-82af-9209ba347b8e" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>Payer</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="681feeba-7ece-40a0-aa17-d49b78a72792" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b3d6027c-af64-4a77-a42d-1f3841ca1f98" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC02" id="2bbfc978-c723-49d5-b597-752064f98e79"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC02" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A9274",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "A015"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "",
            "payers": [
                {
                    "planName": ""
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "",
            "payers": [
                {
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="cf09541c-df28-40dd-bac9-81bdf282d03e" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d138da46-f86f-467e-a903-688c781cdee0" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e67fddd2-7e76-4674-ad8c-1e9f05ea01fc" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9f1c636b-3f0a-480f-9973-1924d676f536" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0823b25-8550-4870-bc96-8c784debf4c0" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6c9bcc1d-0c0a-42c4-92d0-4734ed0c6fc5" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7bebc488-a0bd-496f-832f-e09d1683b077" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC08" id="1b77f515-7646-4dfc-9e3a-e071ec6aa49c"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC08" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A4224",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "B862"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "",
            "payers": [
                {
                    "planName": ""
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "",
            "payers": [
                {
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="21ae184e-0112-4dd4-837e-37f43d9afc27" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="28323c03-ddf4-4cc4-8303-d165f90a6075" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bf0a365e-1f44-4fc0-b216-13488566471d" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>13</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d86b4441-6ce3-4b86-9893-3d16ae282bdb" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8088d83f-7500-4ca5-9ebf-a48fc4d89028" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>Medicare</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="33030c49-8efb-42be-884f-3810d016611d" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="67165671-6fc8-4026-acd9-f3de242999d2" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC09" id="594f1b41-7e10-44ca-a8ad-1090dabcb991"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC09" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A9274",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "B862"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "",
            "payers": [
                {
                    "planName": ""
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "",
            "payers": [
                {
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ca6aeb78-b916-46e4-872d-a1591d9fc432" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a166cf2a-8701-4595-a7d1-03b357c245f0" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3ba60786-1719-4755-8f94-26424adb73ed" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="72e23290-2514-490a-8f40-5d538eaa2d65" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="45f20182-ffeb-4e58-9a30-4c6a3d2fdaf2" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="28bb6c7a-f088-4016-8bd8-3cc66b24b2c2" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a36e4a52-55e4-40b8-9f8b-880531cdf501" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC14" id="1c8d082e-9516-4dde-bf89-b8429b219209"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC14" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A4208",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "A013"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "",
            "payers": [
                {
                    "planName": ""
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "",
            "payers": [
                {
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="43b9da18-4daf-4f0f-8561-06ab2ec8d01a" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a4219ede-f04e-47c9-b4ce-71ecd5b6a744" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5ebc6ce1-5b8f-4102-b05d-bac2d0ea139f" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>100</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f06ef7cb-abe1-4b79-a90b-2d7488df2245" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f7a1bbf4-6226-47e7-b8b0-601435152d63" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>Medicaid</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f4b7ec69-a81e-4d8b-8269-c330130a766f" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e3e5a370-2f26-4f26-9129-164a33d4cee9" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC15" id="bc972d8d-3aeb-4ef3-ad13-1e18a0db5fa3"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC15" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A9274",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "A013"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "",
            "payers": [
                {
                    "planName": ""
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "",
            "payers": [
                {
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d40cfc05-5828-403b-b764-e6d21395e0fa" name="Valid HTTP Status Codes_8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f48331e0-21dc-412c-be66-e623d91eb172" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9ae9a267-5c66-4e0e-86a1-465db404579d" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="00625e45-69da-41c8-b9e1-207e067a112a" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ed3a9120-634b-4558-9f5c-47684c889e0d" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a33e7f00-af07-4f9c-a4f8-f8bf5e2bc154" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6c2d7979-0e08-43bc-9182-db87c5683894" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC20" id="86d25456-c08a-4a94-a5ff-1159abb27fd1"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC20" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": "E10"
                }
            ],
            "hcpcsCode": "A4253",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "B018"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "",
            "payers": [
                {
                    "planName": ""
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "",
            "payers": [
                {
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="57f76521-bf6b-47df-9b55-75805bb1b744" name="Valid HTTP Status Codes_9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e3b117ef-c3e8-4014-a9a3-129cb0220335" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="50ef8373-05e3-4d28-8807-9ba1107fd338" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5e695d91-026d-4e57-837e-859fabdbdfb8" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="214f01de-20f0-4597-8b6c-8fcf40de40e3" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>Payer-Tiered</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="23c50d16-28bd-4e88-845b-87e5663ba89b" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="681f84d8-d62e-4954-86d6-3b379f00ea04" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC21" id="2fb53873-d2fe-4c73-bc0b-1936cc4e3c46"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC21" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": "E11.01 "
                }
            ],
            "hcpcsCode": "A4253",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "B018"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "",
            "payers": [
                {
                    "planName": ""
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "",
            "payers": [
                {
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="86d43831-431d-476b-a1b1-6ac91b1ff808" name="Valid HTTP Status Codes_10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="28d39fda-425b-428a-aa9f-5407ac38a62a" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b76da7d1-4f2e-4901-8c34-06dcbbef1a3b" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b7885b80-721d-439e-9854-0a55b8c9220a" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4519ac81-ba65-473a-be0d-4f83b5e6aff3" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>Payer-Tiered</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="233b611f-7549-471c-b5b4-0a7dbaf9826c" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f517724b-22f3-433b-8026-8d1c94751483" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC22" id="c5dc0ef6-a17b-4f2b-b09f-60ffa9506f5a"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC22" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": "E10.01 "
                }
            ],
            "hcpcsCode": "A4233",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "B018"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "",
            "payers": [
                {
                    "planName": ""
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "",
            "payers": [
                {
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e81295dc-2968-470f-b6cc-46760a22a73c" name="Valid HTTP Status Codes_11"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e7d2a7bb-4251-42cf-9d6e-22d8d0ae782d" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="695e303c-0301-42fd-858a-96f8d259c51b" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="50ead9c1-ede7-4e0c-aba4-2ba7298f90d8" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e3b0ad36-1e18-4109-9850-f8b74d859e2f" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d513a08f-366e-4ebf-a783-fe3b65094188" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6a2993d7-b14c-4ee6-8528-4a6ae1473045" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC03" id="52adfd59-7157-4a51-a9c4-20e14ee144c5"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC03" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A4253",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "B925"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A4258",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "B925"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "A4259",
            "lineItemID": "L003",
            "payers": [
                {
                    "planName": "B925"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a90b3f81-998e-4c55-8be9-aa9011117805" name="Valid HTTP Status Codes_12"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="15cb7e6d-6d09-4b86-bde5-d3c25908b2f5" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e300566-cc51-4e5e-9de5-c80c73a997a8" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2ce3840b-f2ae-44c4-b84f-b6c37ae7629e" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d78a0b31-2a4e-40f7-913e-98856237a2e0" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>Payer-Tiered</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9c71aef2-4147-49c9-a983-7def396eca1a" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f06cf7f5-47b9-4c75-9130-9fadbaf01891" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fea678bf-d44e-44e8-9620-8de1f5ad471a" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c44f3ee-96ae-4e9c-9493-efdb10dfb325" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e3034a1e-56c8-41b7-8b0f-4705a9c0b84d" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>180</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="481b1fdd-c4c0-49e1-af2f-2f02b0876c2e" name="limitCategory"><con:configuration><path>limitsResponse[1].limitCategory</path><content>Payer</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1cc065b7-f76f-4797-b8ab-389865dae854" name="followsMedicare"><con:configuration><path>limitsResponse[1].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a3cabea8-8ec3-428f-af98-0093fa345d63" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="93ff515c-664a-4128-a430-eb437594106a" name="lineItemID"><con:configuration><path>limitsResponse[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3997422d-5196-42c7-804d-68a4567f6a85" name="limitQuantity"><con:configuration><path>limitsResponse[2].limitQuantity</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0107ef04-6694-4745-aa4c-bf00f9b1dc96" name="limitDays"><con:configuration><path>limitsResponse[2].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="560d9769-82b1-45d2-b6c4-03e63a5b120c" name="limitCategory"><con:configuration><path>limitsResponse[2].limitCategory</path><content>Payer-Tiered</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="525ec5cf-eb27-4017-94c2-307a391f21b5" name="followsMedicare"><con:configuration><path>limitsResponse[2].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b2158720-c758-4155-80a9-3ee9e6ce1adc" name="limitsValid"><con:configuration><path>limitsResponse[2].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC04" id="a0f9ada8-444e-4af3-ba37-27adbc94ff65"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC04" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A6549",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "A712"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A4213",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "A071"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "A4259",
            "lineItemID": "L003",
            "payers": [
                {
                    "planName": "B864"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fe82d02d-3a0b-413c-96dd-0329490ee6c6" name="Valid HTTP Status Codes_13"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="83555cd7-af19-4e00-9298-187c58d7e7de" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0cf1cbd2-922d-4ca6-87e0-174faba716e6" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>2997</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7afca70c-795a-4d25-acca-a5fcd48813d5" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0ef19401-4db8-4cc8-bd0c-d7534c917a09" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>Payer</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ebe64a89-7e93-4d8f-8b30-dd8b114dd2db" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="063de6d1-9ccd-4549-8ae2-568bcecddc70" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8733a05c-010e-45e4-9229-837afb445b8b" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ea40327a-1e20-4826-b416-dde782910c3a" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>24</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0f733700-bbda-46d8-8847-652566a310ea" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>180</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="193b78d5-2c79-430d-93a3-e4b7d6ed79c6" name="limitCategory"><con:configuration><path>limitsResponse[1].limitCategory</path><content>Payer-Medicare</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cde89eab-ab40-4a8c-afa1-1d11a8ab900d" name="followsMedicare"><con:configuration><path>limitsResponse[1].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="92443593-b68b-4209-a663-5f2e49b19ff6" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6b533628-a4de-4c2f-817e-c59a00bba110" name="lineItemID"><con:configuration><path>limitsResponse[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e9f9e00-d425-48ec-8586-d32f71f5084b" name="limitQuantity"><con:configuration><path>limitsResponse[2].limitQuantity</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="043e6d43-4d39-4d2f-aedb-8ee46036d470" name="limitDays"><con:configuration><path>limitsResponse[2].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a1f31e61-b62b-4576-881e-f63e31c36793" name="limitCategory"><con:configuration><path>limitsResponse[2].limitCategory</path><content>Medicare</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3a342915-a239-402f-b28f-476e3b744fec" name="followsMedicare"><con:configuration><path>limitsResponse[2].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d5889dec-fc12-42ff-a127-d63ef9565a88" name="limitsValid"><con:configuration><path>limitsResponse[2].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC05" id="5097fc64-7edd-4813-8d7f-ddfaac0d5596"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC05" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A4256",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "A985"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A4213",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "A549"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "A4259",
            "lineItemID": "L003",
            "payers": [
                {
                    "planName": "A698"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3b0f7f49-a804-4320-bd99-d8fcdced111a" name="Valid HTTP Status Codes_14"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bdb90fef-d65b-49cb-95e4-3d13611d99ba" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eacd2c13-7dc7-439a-b517-812412a03b49" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69ad64d6-f81f-43a3-95d5-3f23a9906649" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0a8e8edd-3747-456b-b9cc-06a65818505c" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>MUE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dc929d9d-a9bc-4660-9b5c-9f6f912555c9" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dea5c646-c9a6-4212-876e-c79bd5856195" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="347e989f-98a5-42ed-91ca-87adb50e35d3" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2a86fcec-2a00-4765-bb02-f81502da40c4" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e211c1a7-65d6-4d0d-b918-692324517470" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4ce1d329-384d-4bef-a441-3156230bbff2" name="limitCategory"><con:configuration><path>limitsResponse[1].limitCategory</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d4153d44-67cb-4c48-abde-908755960869" name="followsMedicare"><con:configuration><path>limitsResponse[1].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d60759f9-4ef7-4823-bf20-74971c8b775a" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3b134585-ec07-454c-a21c-e8cebe34de94" name="lineItemID"><con:configuration><path>limitsResponse[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d1c90e13-e0d8-40c1-9da4-7103b874f914" name="limitQuantity"><con:configuration><path>limitsResponse[2].limitQuantity</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="168ffb62-fa9f-4eae-9d23-c2dcad5f75c5" name="limitDays"><con:configuration><path>limitsResponse[2].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6e85d552-93ec-4cc2-94da-58ac615a5e04" name="limitCategory"><con:configuration><path>limitsResponse[2].limitCategory</path><content>Medicare</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04d88cfe-86b3-4070-b258-b08b68cb0230" name="followsMedicare"><con:configuration><path>limitsResponse[2].followsMedicare</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="52d71dea-4310-4a0e-8a8e-4f03cd2830e9" name="limitsValid"><con:configuration><path>limitsResponse[2].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC06" id="d4b074a4-03d3-4697-ad4b-1c786f6a8698"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC06" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "A698"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A4250",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "A712"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "A4259",
            "lineItemID": "L003",
            "payers": [
                {
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bf5c168a-c35b-4aec-bc14-5cebce3c33fe" name="Valid HTTP Status Codes_15"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="44b96342-1b9f-48d8-9b97-0f05135cd1d4" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="47fb4d94-6d21-45c1-b7f2-6096a7959ff1" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d8a278a6-2959-4f4f-932d-bdf1fe92755c" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8dd4fe45-68a6-419d-96c7-87cef12a1855" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="394e8837-c0f5-4730-9eec-b14763a015a6" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="719bda3e-5624-4a62-aff7-047ce407c52b" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="50c96e80-8a03-4c6b-b318-f959e5f16f31" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="30e4916e-3d97-4d90-936d-45b309a4e13f" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>600</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4190d651-1f11-43eb-9ede-7d0b67479a03" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4f9dc2f1-dc59-4a25-872c-1c9ea7a5fb49" name="limitCategory"><con:configuration><path>limitsResponse[1].limitCategory</path><content>Payer</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d1889580-7ff1-425a-9cbd-8b7ca4f5f586" name="followsMedicare"><con:configuration><path>limitsResponse[1].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f56f06b8-b2a0-47c9-8ace-1abce8bf9a89" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d7884df-ffd2-4428-86c2-d683925b6cb6" name="lineItemID"><con:configuration><path>limitsResponse[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9cb64bd6-e868-4c7e-a2bf-1fe72f9ec9fa" name="limitQuantity"><con:configuration><path>limitsResponse[2].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e9ffd11b-6d4c-4772-a329-ee5eb1f06c10" name="limitDays"><con:configuration><path>limitsResponse[2].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="11a3a423-f2da-41c2-9e92-66d09ef450d0" name="limitCategory"><con:configuration><path>limitsResponse[2].limitCategory</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="535633a3-019b-4385-852e-f365aff93ec3" name="followsMedicare"><con:configuration><path>limitsResponse[2].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d64ff5d8-3af7-4ec1-9d62-9bc9160283b3" name="limitsValid"><con:configuration><path>limitsResponse[2].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC07" id="973192f3-43fe-4f58-aae8-665ddfa137cd"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC07" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "B864"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A4253",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "B709"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "A9274",
            "lineItemID": "L003",
            "payers": [
                {
                    "planName": "A684"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3655cee1-8f3b-4fcb-b1fb-2bd633b51f77" name="Valid HTTP Status Codes_16"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1ea09b8f-ff6e-461d-a115-81a011d58c7c" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fe4a5228-d603-4f7e-bbd7-cc2a3dd7d0a3" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="285b69a0-4e38-44e0-9547-69aabaac9f53" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0e8c6198-e710-4038-90b8-7a25b6f11dd7" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1566ea83-df1e-433b-acfa-5c4aa12a8a04" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bc2b25cf-6b4c-47ee-bd70-d73d187569f2" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7fe577bd-c4bf-4ae6-bbe5-6e80f4f84451" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8963b979-1978-4124-bb87-769d959d34f3" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>18</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6baa5c4d-09dc-4250-a0b7-f2fc6a615160" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fce0dc1c-4e15-4fbb-88f1-dced7f8372fd" name="limitCategory"><con:configuration><path>limitsResponse[1].limitCategory</path><content>Payer</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6087d6ae-8667-4217-9de2-b1bac0c8a352" name="followsMedicare"><con:configuration><path>limitsResponse[1].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="99cfeb3a-1d1e-47b3-997d-938c303bbf6f" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a6020e44-4be5-4fe2-9e9b-1adf52e22e30" name="lineItemID"><con:configuration><path>limitsResponse[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fbd876d2-f631-42e2-9e03-509eeb32a0b8" name="limitQuantity"><con:configuration><path>limitsResponse[2].limitQuantity</path><content>33</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="232e309b-9502-4519-96ec-2f56b13e1efe" name="limitDays"><con:configuration><path>limitsResponse[2].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e385cfac-94a2-4c97-8a36-1bf70430b938" name="limitCategory"><con:configuration><path>limitsResponse[2].limitCategory</path><content>Payer-Medicare</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="49132f31-5bb6-4ca3-a6e2-4fe4c834aa86" name="followsMedicare"><con:configuration><path>limitsResponse[2].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2a49fa4c-7a10-4762-b3b5-e548758211e1" name="limitsValid"><con:configuration><path>limitsResponse[2].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC10" id="6ff72d14-1f6d-40cc-9eb4-e081a73f1eb2"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC10" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A4332",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "B861"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A4338",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "B863"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "A4369",
            "lineItemID": "L003",
            "payers": [
                {
                    "planName": "B864"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ae50043a-fc26-4201-af90-429dd8543421" name="Valid HTTP Status Codes_17"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fc83f060-d90b-4901-83b0-ae65a8bde45d" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3ad8dd16-c3a1-44be-93b6-491ce91c8f9d" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>600</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="11b1ffbd-1c36-490c-b5e4-12aa6d8ceb29" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d5688053-5203-4b82-8b61-28aacdcf15f8" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>Medicare</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7bb9532b-1f9a-4a5f-ab6c-2c79ef25baf0" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c8f68d4e-2a67-4740-b4fc-059153c42407" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6c74e48e-4a0a-40e9-a3a5-a988d7e6c8f0" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dea76788-fcb2-4f96-a89d-f594b5178c4a" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="48295d7c-b80c-4770-bf8f-a3b8bbd982d9" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="67286d8f-3265-444c-9192-dc64a1a3c71e" name="limitCategory"><con:configuration><path>limitsResponse[1].limitCategory</path><content>Medicare</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f17d3ecb-6590-48aa-af7b-8302406569f4" name="followsMedicare"><con:configuration><path>limitsResponse[1].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="152ace87-cd68-464f-a26f-eea223bef4b4" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aaaaf979-9e96-4eb2-92ba-99b97f482e04" name="lineItemID"><con:configuration><path>limitsResponse[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2db72858-6f17-4565-8467-778cf43ecfcc" name="limitQuantity"><con:configuration><path>limitsResponse[2].limitQuantity</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0cb8384f-d6fd-45b8-8176-5fef96a1995a" name="limitDays"><con:configuration><path>limitsResponse[2].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e259698c-b70a-454f-9e16-7abef30d25f7" name="limitCategory"><con:configuration><path>limitsResponse[2].limitCategory</path><content>Medicare</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f749e9d9-4f89-4c3b-90bb-630395db3d8b" name="followsMedicare"><con:configuration><path>limitsResponse[2].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="caaa8938-0475-42b2-ab76-f3fa96fcff53" name="limitsValid"><con:configuration><path>limitsResponse[2].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC11" id="ba54665f-bb0a-4b7c-85da-4b89931ff232"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC11" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A4380",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "B861"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A4351",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "B864"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "A4233",
            "lineItemID": "L003",
            "payers": [
                {
                    "planName": "B622"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="59208561-5738-4711-a6c3-9a7acad72cc5" name="Valid HTTP Status Codes_18"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dcad3cf6-b606-4e76-a69a-a3247ca53f23" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9d98feaa-929a-4d7a-b03b-0600b5d1e855" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>5</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="35790d83-4dea-4b8c-b3e7-7a6d37f9ba95" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="947285a5-800e-456f-8f18-8dad3a395b98" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>Medicare</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9a79dda0-53be-48ef-b536-0d3d13ac4a97" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="09923f93-b7f1-4c13-9806-c0bec92926f0" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="315066d0-18af-4158-998a-0b32305164f1" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b80ca590-6f18-4ec4-8ebd-d9ebd153ac5f" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>600</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0072f42e-d51f-4b90-b224-62e6bec95fa5" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8c4f8aa9-af1b-433f-91f5-ddca3777c0ac" name="limitCategory"><con:configuration><path>limitsResponse[1].limitCategory</path><content>Medicare</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9a52df3a-2580-41ed-aa40-6cc594c68190" name="followsMedicare"><con:configuration><path>limitsResponse[1].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7fe694ae-2d36-427b-80f1-f1a732febd1a" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="efb125e4-1145-42c9-a55b-95c57dfa6ca9" name="lineItemID"><con:configuration><path>limitsResponse[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dc19ab63-a74d-446f-9954-a58a24265af4" name="limitQuantity"><con:configuration><path>limitsResponse[2].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="71ff240c-ee97-4986-bb28-9bce4702adf3" name="limitDays"><con:configuration><path>limitsResponse[2].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4695c937-3356-4a30-9372-0ce98d7ed51e" name="limitCategory"><con:configuration><path>limitsResponse[2].limitCategory</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5e504ffb-b6f7-4f79-b32f-91402976f425" name="followsMedicare"><con:configuration><path>limitsResponse[2].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="12273b35-5ab0-4fd3-87f5-77ba8b3990d3" name="limitsValid"><con:configuration><path>limitsResponse[2].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC12" id="1e4275aa-57c9-4380-88a6-f6ba0ddcc3e6"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC12" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A4456",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "B861"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A4213",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "B861"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L003",
            "payers": [
                {
                    "planName": "B861"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="45c58708-0f2b-4865-8dff-0f327b1c9f94" name="Valid HTTP Status Codes_19"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f6eaf923-df49-4605-9a3a-3ca28e11d1e2" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1da4d982-10f9-4aaa-8f77-ef4011f1488a" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>75</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f3e7dd13-0093-49dd-9da8-43ba526dd64a" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4bd6c340-b395-43c7-911a-8634e52a9ab4" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>Medicare</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9ce0549e-f7c2-4623-8ab4-732ade921708" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="084eda89-c97c-4b16-b771-63b8581235ac" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ee11fde0-7e7a-4bd2-99a4-645c0c27250f" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c8848e31-7dd6-4379-8f5d-9e48673265c2" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aac4dfab-e0a4-4e99-9693-5e75f6a18bbc" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6f70af7e-0f45-4019-a8bd-43f4c43b8459" name="limitCategory"><con:configuration><path>limitsResponse[1].limitCategory</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d6a5cd13-2590-4d40-8927-ee099588ea9f" name="followsMedicare"><con:configuration><path>limitsResponse[1].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c0b7b0b6-3c67-4585-ba83-038fb391d903" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b26a3782-5f5d-4f04-8bf8-92120c251535" name="lineItemID"><con:configuration><path>limitsResponse[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="45d9c55a-a71c-4d94-b3df-47d354bb0b30" name="limitQuantity"><con:configuration><path>limitsResponse[2].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e9328c18-28d2-4b6b-a5fb-2f570ce7eac9" name="limitDays"><con:configuration><path>limitsResponse[2].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0836690c-e50e-4860-86f2-778e598d4e98" name="limitCategory"><con:configuration><path>limitsResponse[2].limitCategory</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bbe7637f-2177-404b-b570-e7dce0b42ab5" name="followsMedicare"><con:configuration><path>limitsResponse[2].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dcbfcef5-95fd-4756-bc25-f3692e9afebc" name="limitsValid"><con:configuration><path>limitsResponse[2].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC13" id="04384773-3ec6-499e-9952-df6bdd6b077b"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC13" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A5051",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "B709"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A5051",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "B864"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "A5120",
            "lineItemID": "L003",
            "payers": [
                {
                    "planName": "B864"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="70ea384b-94d4-494d-b460-8f201380af18" name="Valid HTTP Status Codes_20"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d3b60a81-13a4-48aa-b08d-b074d071951a" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c3462a48-33d7-4093-9741-d0a028f20fd2" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b7f352aa-4d99-4c30-9f60-72256e7b099a" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="03b97a0a-27ac-471f-92e4-7832085cb98a" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="83ce5567-bcd1-4717-b3d6-59892d85a76b" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4894d9a0-0b22-43f0-b3ea-d3e794ad3d99" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="17adc9ca-69f4-4a9c-b5ce-00c1144f3298" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9dd9f2ba-bda8-4751-bc22-3eab96240faf" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>180</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="807c51d6-d3af-4145-b6f7-96bab6ca716c" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5f4cb509-d508-48c8-a1cc-a45630b5cf5f" name="limitCategory"><con:configuration><path>limitsResponse[1].limitCategory</path><content>Medicare</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f73a69e7-3513-46db-9466-d61748313dea" name="followsMedicare"><con:configuration><path>limitsResponse[1].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eb97a117-484f-4528-8a6c-4160c4c24b27" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bcfff808-31dd-44af-b942-725708090373" name="lineItemID"><con:configuration><path>limitsResponse[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ccf36861-9edb-4411-9e5a-f8f682f4d951" name="limitQuantity"><con:configuration><path>limitsResponse[2].limitQuantity</path><content>450</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="26dda2a6-f60f-41a6-a6a1-7f8f90563328" name="limitDays"><con:configuration><path>limitsResponse[2].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="daadf6b0-5e17-4930-bf47-03b571b33f6a" name="limitCategory"><con:configuration><path>limitsResponse[2].limitCategory</path><content>Medicare</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6547a593-9221-4d8d-8181-942c0b2f30d1" name="followsMedicare"><con:configuration><path>limitsResponse[2].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="12d85e79-3bbe-4019-90a2-967b2248885e" name="limitsValid"><con:configuration><path>limitsResponse[2].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC16" id="4c7bdb13-b069-4c23-94e8-e41431416f49"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC16" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "E0603",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "A013"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A4235",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "B157"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "A9274",
            "lineItemID": "L003",
            "payers": [
                {
                    "planName": "B149"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="265c1ed7-d34c-4e40-ba34-a55bc3c03327" name="Valid HTTP Status Codes_21"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f97be29a-bf8d-49cb-a765-3c12e8c81c3b" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1eaa88e0-2359-4e0d-b086-1c3a51beb973" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0526f6ef-04fb-4f79-b072-fcdcb6523f90" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>999</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="09a6759a-e760-4b12-9d72-5d91096bb58a" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>Medicaid</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b3a2b6e5-1848-4265-9cec-6432841d710a" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9699f200-57b2-41d8-b8a0-35941b5eb14f" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="37744842-0763-4828-859b-c6677b4a4a61" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="76c6b29f-022c-4a17-a041-d459f41fd9ab" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="011dda93-6785-4aa7-97fc-0a21debafcac" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>180</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="551831c9-49c6-4edc-bf57-d94d790aecba" name="limitCategory"><con:configuration><path>limitsResponse[1].limitCategory</path><content>Medicaid</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="67c1dd3a-36e9-472c-b868-8e9ebe610bcd" name="followsMedicare"><con:configuration><path>limitsResponse[1].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c8f92623-3261-4089-88c1-b5ba1c581f3d" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8a19eff0-6ec3-466c-a217-7e9ec00fb60f" name="lineItemID"><con:configuration><path>limitsResponse[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="45623c25-b80f-4e3f-aa12-988706d94203" name="limitQuantity"><con:configuration><path>limitsResponse[2].limitQuantity</path><content>15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef146927-dec2-418e-acbb-a93c3343e254" name="limitDays"><con:configuration><path>limitsResponse[2].limitDays</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b3013cfb-1e6d-4743-b01e-baf935ab9789" name="limitCategory"><con:configuration><path>limitsResponse[2].limitCategory</path><content>Medicaid</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="86a67be0-29bc-41b5-b126-5502ca91d871" name="followsMedicare"><con:configuration><path>limitsResponse[2].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dd494315-c6df-411c-a815-11e3a82076e1" name="limitsValid"><con:configuration><path>limitsResponse[2].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC17" id="2416720a-9d2e-426d-b480-35db2bf5ee9a"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC17" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A4216",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "A013"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A4253",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "B157"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "A4216",
            "lineItemID": "L003",
            "payers": [
                {
                    "planName": "B622"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1680aafa-0284-453e-bdee-84cab23b199b" name="Valid HTTP Status Codes_22"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1243aefc-2285-46e1-b063-e62a647657d5" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ec4a3adf-f308-44f4-b7bf-8778e6ebd060" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ea79bf6e-1b73-4312-84fd-eae457d92f70" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce1984bf-c15f-41e2-bc46-794422ab7ebc" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>Medicaid</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="93ac8149-7e4b-45ce-a43e-69158813ef65" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e10a6a2f-cf40-4d02-9a66-b3415eec6e72" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9e1f0002-c02f-42a0-8fa9-a39f248567cf" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b6733d85-57b2-4f6b-8cc2-eeb7e17e6e4e" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="88b2da49-b336-4776-a70d-0cc8c2ef88fa" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d89c4666-0ce4-4b91-8a7a-b5f00ae12eb2" name="limitCategory"><con:configuration><path>limitsResponse[1].limitCategory</path><content>Medicaid</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4fa54f80-b4af-4a6f-ada6-57879939805f" name="followsMedicare"><con:configuration><path>limitsResponse[1].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="419b3f86-18de-468f-883c-403b0ca2b001" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2578ba3-6895-4b90-8c19-64b4058dabeb" name="lineItemID"><con:configuration><path>limitsResponse[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7bfc0167-3334-4028-9aa2-3d25a60d0ece" name="limitQuantity"><con:configuration><path>limitsResponse[2].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="058bbc30-0775-4051-9ba8-3c4b2aaf5b18" name="limitDays"><con:configuration><path>limitsResponse[2].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3dc5e846-b86f-42a0-a800-c8af7c6b1773" name="limitCategory"><con:configuration><path>limitsResponse[2].limitCategory</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="affdb70d-2a53-44d1-bc0e-3011c76c1bf6" name="followsMedicare"><con:configuration><path>limitsResponse[2].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="502a480d-6dcf-4ea0-af53-7ea8036e8fb1" name="limitsValid"><con:configuration><path>limitsResponse[2].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC18" id="817d0f02-3d7f-4bee-8c7a-9adf632d62a0"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC18" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "K0601",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "B149"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A4333",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "A013"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L003",
            "payers": [
                {
                    "planName": "B149"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2d68e16a-ae0e-4357-a3bd-d10dbec395fd" name="Valid HTTP Status Codes_23"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6bdd0bb1-3434-4c2a-8fff-a8c4048f3754" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e87dc0cb-5e63-49c6-9374-3058d427bee5" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>4</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6f3f7b31-cbbb-4956-916f-cf3bc1c24139" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>60</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cdf39dbd-d0b5-41d6-b890-5fd81fb85d8d" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>Medicaid</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b4681ce-7b31-4ce7-a973-d5f5fe74c560" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c3206a51-dd74-45b8-95f9-66c997b5975d" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55cca306-20b5-4d05-ae46-cd586437228c" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="abfec2d4-be6e-490e-9a47-133b686ff705" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9b7175fb-21b7-4800-a0d6-be891579260e" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bfff8674-6f22-45cd-b156-6321376106df" name="limitCategory"><con:configuration><path>limitsResponse[1].limitCategory</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="18b986ef-08ae-4dd3-a5b0-81157a80142a" name="followsMedicare"><con:configuration><path>limitsResponse[1].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2410dd96-d4d0-4ace-96c1-41bbf83819b9" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="155018ea-12e8-4cb4-acb2-1afab6163d32" name="lineItemID"><con:configuration><path>limitsResponse[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ee110843-6282-404b-b058-19b71f14956f" name="limitQuantity"><con:configuration><path>limitsResponse[2].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="adf62b32-cb70-4283-9927-6af6814ed5e8" name="limitDays"><con:configuration><path>limitsResponse[2].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="96f86802-f851-41ed-8028-9f1a0d56a766" name="limitCategory"><con:configuration><path>limitsResponse[2].limitCategory</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2645c0c-44fa-4b86-bfc2-1ed66922bd78" name="followsMedicare"><con:configuration><path>limitsResponse[2].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3ac56f69-48f1-40c5-95c5-e80424c1c0fb" name="limitsValid"><con:configuration><path>limitsResponse[2].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC19" id="c9a54f0f-21c0-4ffa-a321-63a33e0fff5f"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC19" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A6250",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "B709"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A6250",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "B157"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "E0603",
            "lineItemID": "L003",
            "payers": [
                {
                    "planName": "B149"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f05ed21e-75e1-4376-85f5-af9dc32a326e" name="Valid HTTP Status Codes_24"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1682e905-6c96-416a-9391-a13086304779" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a752c6bf-07c6-425c-8dc8-e4a4fe01517f" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="51dcdc39-40e1-4ece-a30e-96f0dbf830e1" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="665b2d34-5731-4095-ba09-a49360a98799" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="035e68ec-549e-476e-b028-8bd1d5caa309" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c9960772-2ecc-4063-a94f-ee4cc4538c06" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7333fb3-3bbd-4f0e-baa2-6665a1efb64d" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1836a31d-f3a4-4f6d-83d6-c1aa8de442c5" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d064814-5408-4a86-8cad-433ff024b3b6" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5f00583b-7af3-442e-a896-f9fdb9c4405a" name="limitCategory"><con:configuration><path>limitsResponse[1].limitCategory</path><content>Medicaid</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="72d94fb8-7fd6-43e3-8393-95b42b003714" name="followsMedicare"><con:configuration><path>limitsResponse[1].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8367b231-4a1d-4f15-836c-1e139663e4e6" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7351a78b-7733-4c05-bd64-2641be05dcff" name="lineItemID"><con:configuration><path>limitsResponse[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2936067f-c1cd-4f4e-8724-78db3420250f" name="limitQuantity"><con:configuration><path>limitsResponse[2].limitQuantity</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bada9994-fe1f-43af-894d-02d566a0a1bd" name="limitDays"><con:configuration><path>limitsResponse[2].limitDays</path><content>999</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e2ad42c2-5ae6-454c-8a3f-5c8ee91b422f" name="limitCategory"><con:configuration><path>limitsResponse[2].limitCategory</path><content>Medicaid</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6d10d7b5-6a9b-481b-afdb-74342842aece" name="followsMedicare"><con:configuration><path>limitsResponse[2].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b8e0865-8422-45ea-b016-44d8b2456d70" name="limitsValid"><con:configuration><path>limitsResponse[2].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC23" id="0ae32e39-1afd-4f64-a2e5-6184e2dddf2a"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC23" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": "Z96.41"
                }
            ],
            "hcpcsCode": "A4259",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "B944"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z96.41"
                }
            ],
            "hcpcsCode": "A4253",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "A985"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "A4259",
            "lineItemID": "L003",
            "payers": [
                {
                    "planName": "A985"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="97355184-deef-4812-b2eb-b77b073e3c1a" name="Valid HTTP Status Codes_25"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="205935f7-11b9-4b28-9f87-71328993cc0b" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f89234b-5b3b-4db3-a72b-01c9957d678d" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f09f27d-36b6-4e11-acbf-80d58bc05891" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ed1257c0-aef3-481f-af2c-d4f1802d2d17" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>Payer-Tiered</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e07fe2cf-ba90-46ae-8fd8-948c4489f7ce" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="486e6dfd-744b-4ffa-960f-1fa69a77b231" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="52908f79-17e6-452f-bb21-7b29ce7ea7dc" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c11d58f1-5785-4e34-887c-adb2e3fd9924" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e5f42dbc-e099-4c6f-9c75-eb1bd01ac596" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aa2a835b-6d75-4011-b1ba-21c3ff479782" name="limitCategory"><con:configuration><path>limitsResponse[1].limitCategory</path><content>Payer-Tiered</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1491f4ba-15c3-4014-b528-cad3ae3a54cc" name="followsMedicare"><con:configuration><path>limitsResponse[1].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a79bd6f-0218-4042-b347-1f280ed1f97a" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="62e02206-33f8-4499-9228-65229b83ef2d" name="lineItemID"><con:configuration><path>limitsResponse[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5976bb2e-f2cb-46e2-8c20-461b22045fef" name="limitQuantity"><con:configuration><path>limitsResponse[2].limitQuantity</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2d72a7df-c9c5-4b17-a239-ad4eb267a9c8" name="limitDays"><con:configuration><path>limitsResponse[2].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="964ede16-bc76-4516-8f9e-2eb39f3c66fb" name="limitCategory"><con:configuration><path>limitsResponse[2].limitCategory</path><content>Payer-Tiered</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4daaf0db-e7d0-40a6-82e2-65d4eabee04f" name="followsMedicare"><con:configuration><path>limitsResponse[2].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ab0da3ff-0514-43e7-b71c-be0956c08e84" name="limitsValid"><con:configuration><path>limitsResponse[2].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC24" id="62a02bd4-36b5-4212-b426-372bcbd0b15f"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC24" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "A4259",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "A985"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "E10.01 "
                }
            ],
            "hcpcsCode": "A4259",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "B018"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "A4259",
            "lineItemID": "L003",
            "payers": [
                {
                    "planName": "B622"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fa916983-e44a-4d3b-b428-95b8f20ac179" name="Valid HTTP Status Codes_26"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="291c842b-4a66-4f20-9b2f-cb0c4e6d7331" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1a3e6640-93dd-4575-b9ea-9f437928ed62" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="baad55d0-9e73-4236-ac75-c5ad648e3c3e" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fe41dd8d-c884-43a4-8f66-042ea370fe1a" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>Payer-Tiered</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f7426857-36c7-4cb1-ac8b-71feffd11b00" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f5f22a22-4891-4de8-be4e-984eeb9ccde5" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5da35ba8-f151-4f93-a6f8-5db5423b775c" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1587c825-58fb-4fdc-b85e-e56cac911837" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="524311f0-667f-423b-8c57-78fa40e3a2a5" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="798db77e-5fa9-4769-8158-7c7defb8ff00" name="limitCategory"><con:configuration><path>limitsResponse[1].limitCategory</path><content>Payer-Tiered</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="246adeb2-e1b4-4d39-8e78-52d84d7dce2a" name="followsMedicare"><con:configuration><path>limitsResponse[1].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5f25178d-583d-45bd-bf77-fdb7fc5e961c" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c89409f5-9176-4b07-8883-2d9bcc3853c4" name="lineItemID"><con:configuration><path>limitsResponse[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="43f9fbe1-3014-443c-8e91-852208c37a13" name="limitQuantity"><con:configuration><path>limitsResponse[2].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="222b8829-9de7-453a-9077-feb732143862" name="limitDays"><con:configuration><path>limitsResponse[2].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3aa6d311-644f-47b6-8436-9c7792e26221" name="limitCategory"><con:configuration><path>limitsResponse[2].limitCategory</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5d282a7a-1e05-4178-a84e-7890bd262322" name="followsMedicare"><con:configuration><path>limitsResponse[2].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="64664bf6-6291-45ac-a4f1-7543de8efdb7" name="limitsValid"><con:configuration><path>limitsResponse[2].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC25" id="4a697299-ca2e-41af-8813-43f3d0d00875"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC25" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": "Z78.4"
                }
            ],
            "hcpcsCode": "A4253",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "A814"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "E10.01 "
                }
            ],
            "hcpcsCode": "A4233",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "B018"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "A4259",
            "lineItemID": "L003",
            "payers": [
                {
                    "planName": "B622"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="def2df0a-0bec-421e-8157-caee9d6d0d38" name="Valid HTTP Status Codes_27"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="03b4416e-9726-4096-b743-50e731172bf4" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="46913dc6-d2ed-42ee-bc65-6b7e9d0f8e41" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3f27da51-1741-431e-ac00-7377c5669a75" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce1109f0-19dd-4597-bcb5-8bacb6091020" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>Payer-Tiered</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4544ea34-09bd-4eae-bf8e-19bbf2c53af3" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9580a650-782f-457c-a091-7c3042832a8c" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eaa02cae-995a-4a5a-afbf-c21fa9979a27" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ef142ad4-4b86-4b48-8db6-52bb72b80a0c" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c8345010-b135-47e2-8a86-057e145d586d" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9010f1d9-8c42-4e0d-9b33-3414310475e6" name="limitCategory"><con:configuration><path>limitsResponse[1].limitCategory</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="76b5864d-7e2a-4573-a966-adea76755d9d" name="followsMedicare"><con:configuration><path>limitsResponse[1].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="63fcebd5-8406-4a87-87d7-b579d01ab805" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0277f0f8-6692-4da5-a211-88d979004fac" name="lineItemID"><con:configuration><path>limitsResponse[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c622cb91-6f38-49fa-adfd-f61e803a06fc" name="limitQuantity"><con:configuration><path>limitsResponse[2].limitQuantity</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="67c3feb2-03b1-4666-8880-75baae9ad2f7" name="limitDays"><con:configuration><path>limitsResponse[2].limitDays</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f0b13dcc-7ad1-4dd2-994e-ab965a166bd0" name="limitCategory"><con:configuration><path>limitsResponse[2].limitCategory</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f5c9ede0-3cbf-40e5-967b-5faae24a864b" name="followsMedicare"><con:configuration><path>limitsResponse[2].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3ddede8c-6db5-47f7-8642-fa7e2ea4d5ff" name="limitsValid"><con:configuration><path>limitsResponse[2].limitsValid</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="TC26" id="85575f53-3357-49cf-bf46-9cd0477f91ed"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL" methodName="DetermineUsageLimits" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TC26" id="56d467c9-b3fa-4899-aac8-be5ccbf0e0f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-28T21:49:45.000-0400"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": "E10.10000"
                }
            ],
            "hcpcsCode": "A4259",
            "lineItemID": "L001",
            "payers": [
                {
                    "planName": "A985"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "E15.01"
                }
            ],
            "hcpcsCode": "A4259",
            "lineItemID": "L002",
            "payers": [
                {
                    "planName": "B018"
                }
            ]
        },
        {
            "diagnosis": [
                {
                    "codeICD10": "Z79.4"
                }
            ],
            "hcpcsCode": "A4253",
            "lineItemID": "L003",
            "payers": [
                {
                    "planName": "A985"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineUsageLimits/DetermineUsageLimits/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="312f0eaf-c8f9-4bc2-975d-fe89b9e9c6e6" name="Valid HTTP Status Codes_28"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7c2cf3a8-08fd-4744-bc63-e085620c420f" name="lineItemID"><con:configuration><path>limitsResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="75b9b303-6317-4d84-8f94-4fd8a8e27275" name="limitQuantity"><con:configuration><path>limitsResponse[0].limitQuantity</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="52eacc93-4ba6-4257-9ac6-d49f2b186891" name="limitDays"><con:configuration><path>limitsResponse[0].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6f1cea6d-ea9d-4162-be25-e5581a8a89f0" name="limitCategory"><con:configuration><path>limitsResponse[0].limitCategory</path><content>Payer-Tiered</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="866338b4-a284-44cf-8bd5-f68670396096" name="followsMedicare"><con:configuration><path>limitsResponse[0].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1900a928-b012-4fbc-a725-e26f489df247" name="limitsValid"><con:configuration><path>limitsResponse[0].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="30dc8ddc-5af5-43a0-8173-f6b152dc0d8f" name="lineItemID"><con:configuration><path>limitsResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a9298205-7c56-4289-b618-0da4d4200348" name="limitQuantity"><con:configuration><path>limitsResponse[1].limitQuantity</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dc09e021-43bc-455c-b6fd-c91b6a4779dd" name="limitDays"><con:configuration><path>limitsResponse[1].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b8d9f351-e16e-40dc-97c9-acc5ee431341" name="limitCategory"><con:configuration><path>limitsResponse[1].limitCategory</path><content>Payer-Tiered</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f5d647f6-f431-4c78-a8a2-b1bb48bb4895" name="followsMedicare"><con:configuration><path>limitsResponse[1].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="004721cb-8aba-4970-8781-994170c873fe" name="limitsValid"><con:configuration><path>limitsResponse[1].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="115b8f5b-9315-4823-a56a-7f1cc8844a01" name="lineItemID"><con:configuration><path>limitsResponse[2].lineItemID</path><content>L003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a5b0bfd2-32df-4495-8bc2-5edef984378f" name="limitQuantity"><con:configuration><path>limitsResponse[2].limitQuantity</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3e73af2d-79d5-422c-8ada-2f532fb444c2" name="limitDays"><con:configuration><path>limitsResponse[2].limitDays</path><content>90</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0cac576d-48c5-4f15-975b-c6c77dad9035" name="limitCategory"><con:configuration><path>limitsResponse[2].limitCategory</path><content>Payer-Tiered</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f27f00b1-9400-4c6e-8e44-ef3be99471c7" name="followsMedicare"><con:configuration><path>limitsResponse[2].followsMedicare</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1339a0f1-db2a-4f55-acee-51bbfb0138fd" name="limitsValid"><con:configuration><path>limitsResponse[2].limitsValid</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="bc47215b-d76e-42e8-80d3-98c1b7f91ae9" name="DetermineDateSpanRequiredAndCalculation"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="42a8461c-b9ac-4b05-93a5-fd45636bd8af" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineDateSpanRequiredAndCalculation" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="JSON Request" id="6dc6741a-41ed-491a-b376-151d00261b4d"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL" methodName="DetermineDateSpanRequiredAndCalculation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="98f9ed3b-f333-4780-b375-bae44bdfa0a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "actualShipDate": "",
            "expectedShipDate": "",
            "extendedUnits": "",
            "hcpcsCode": "A9277",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "A002"
                }
            ],
            "prescribedQuantityDays": "",
            "supplyPeriod": "",
            "unitsOfThePrescribedQuantity": ""
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="DetermineDateSpanRequiredAndCalculation-SingleLineItem" id="6192c5e5-866f-4773-9e0c-3922bab34b31"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation-Input.xls"
def outputfile = projectDir + "/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation-SingleLineItem-Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults_singleLineItem")
Sheet jsonInput = wb.getSheet("JSON_SingleLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"payerID",sheet1);
addCell(2,0,"startDate",sheet1);
addCell(3,0,"endDate",sheet1);
addCell(4,0,"PASS/FAIL",sheet1);
addCell(5,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                 //Input for Line Item ID                                                             
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for hcpcsCode                                   
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents().toString()
                                //Input for supplyPeriod                                  
                                requestTemplet.content.lineItems[0].supplyPeriod = sh.getCell(3,i).getContents() 
                                //Input for extendedUnits                                  
                                requestTemplet.content.lineItems[0].extendedUnits = sh.getCell(4,i).getContents() 
                                //Input for unitsOfThePrescribedQuantity                                  
                                requestTemplet.content.lineItems[0].unitsOfThePrescribedQuantity = sh.getCell(5,i).getContents() 
                                //Input for prescribedQuantityDays                                  
                                requestTemplet.content.lineItems[0].prescribedQuantityDays = sh.getCell(6,i).getContents()
                                //Input for expectedShipDate                                  
                                requestTemplet.content.lineItems[0].expectedShipDate = sh.getCell(7,i).getContents() 
                                //Input for actualShipDate                                  
                                requestTemplet.content.lineItems[0].actualShipDate = sh.getCell(8,i).getContents() 
                                //Input for id                                  
                                requestTemplet.content.lineItems[0].payers[0].id = sh.getCell(9,i).getContents()
                                //Input for planName                                  
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(10,i).getContents()                                                                                                                   
                                                                                     
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get payerID from response json  
                        addCell(0,i,json.dateSpan[0].lineItemID,sheet1);                                   
                          // get payerID from response json                               
                        addCell(1,i,json.dateSpan[0].payerID,sheet1);                                   
                          // get startDate from response json                                   
                        addCell(2,i,json.dateSpan[0].startDate.toString(),sheet1); 
                        // get endDate from response json                                 
                        addCell(3,i,json.dateSpan[0].endDate.toString(),sheet1); 
                                     
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                         lineItemID = sh.getCell(11,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"dateSpan[0].lineItemID","lineItemID")

                          payerID = sh.getCell(12,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID,"dateSpan[0].payerID","payerID")

                          startDate = sh.getCell(13,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,startDate,"dateSpan[0].startDate","startDate")

                       endDate = sh.getCell(14,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,endDate,"dateSpan[0].endDate","endDate")

                                              
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(4,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(5,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(4,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="groovy" name="DetermineDateSpanRequiredAndCalculation-MultiLineItem" id="736473a2-b518-466a-9d8a-391f83a81f61"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation-Input.xls"
def outputfile = projectDir + "/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation-MultiLineItem-Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults_MultiLineItem")
Sheet jsonInput = wb.getSheet("JSON_MultiLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"payerID",sheet1);
addCell(2,0,"startDate",sheet1);
addCell(3,0,"endDate",sheet1);
addCell(4,0,"lineItemID1",sheet1);
addCell(5,0,"payerID1",sheet1);
addCell(6,0,"startDate1",sheet1);
addCell(7,0,"endDate1",sheet1);
addCell(8,0,"PASS/FAIL",sheet1);
addCell(9,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                  //Input For LineItem1                    
                                 //Input for Line Item ID                                                             
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for hcpcsCode                                   
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents().toString()
                                //Input for supplyPeriod                                  
                                requestTemplet.content.lineItems[0].supplyPeriod = sh.getCell(3,i).getContents() 
                                //Input for extendedUnits                                  
                                requestTemplet.content.lineItems[0].extendedUnits = sh.getCell(4,i).getContents() 
                                //Input for unitsOfThePrescribedQuantity                                  
                                requestTemplet.content.lineItems[0].unitsOfThePrescribedQuantity = sh.getCell(5,i).getContents() 
                                //Input for prescribedQuantityDays                                  
                                requestTemplet.content.lineItems[0].prescribedQuantityDays = sh.getCell(6,i).getContents()
                                //Input for expectedShipDate                                  
                                requestTemplet.content.lineItems[0].expectedShipDate = sh.getCell(7,i).getContents() 
                                //Input for actualShipDate                                  
                                requestTemplet.content.lineItems[0].actualShipDate = sh.getCell(8,i).getContents() 
                                //Input for id                                  
                                requestTemplet.content.lineItems[0].payers[0].id = sh.getCell(9,i).getContents()
                                //Input for planName                                  
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(10,i).getContents()
                                 
                                 //Input for LineItem2
                                //Input for Line Item ID                                                             
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(11,i).getContents()
                                 //Input for hcpcsCode                                   
                                requestTemplet.content.lineItems[1].hcpcsCode = sh.getCell(12,i).getContents().toString()
                                //Input for supplyPeriod                                  
                                requestTemplet.content.lineItems[1].supplyPeriod = sh.getCell(13,i).getContents() 
                                //Input for extendedUnits                                  
                                requestTemplet.content.lineItems[1].extendedUnits = sh.getCell(14,i).getContents() 
                                //Input for unitsOfThePrescribedQuantity                                  
                                requestTemplet.content.lineItems[1].unitsOfThePrescribedQuantity = sh.getCell(15,i).getContents() 
                                //Input for prescribedQuantityDays                                  
                                requestTemplet.content.lineItems[1].prescribedQuantityDays = sh.getCell(16,i).getContents()
                                //Input for expectedShipDate                                  
                                requestTemplet.content.lineItems[1].expectedShipDate = sh.getCell(17,i).getContents() 
                                //Input for actualShipDate                                  
                                requestTemplet.content.lineItems[1].actualShipDate = sh.getCell(18,i).getContents()                              
                                 //Input for id                                  
                                requestTemplet.content.lineItems[1].payers[0].id = sh.getCell(19,i).getContents()
                                //Input for planName                                  
                                requestTemplet.content.lineItems[1].payers[0].planName = sh.getCell(20,i).getContents()                                                                                                                     
                                                                                     
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                            //Get response for payer1
                           // get lineItemID from response json  
                        addCell(0,i,json.dateSpan[0].lineItemID,sheet1);                                   
                           // get payerID from response json                               
                        addCell(1,i,json.dateSpan[0].payerID,sheet1);                                   
                           // get startDate from response json                                   
                        addCell(2,i,json.dateSpan[0].startDate.toString(),sheet1); 
                           // get endDate from response json                                 
                        addCell(3,i,json.dateSpan[0].endDate.toString(),sheet1);
                          //Get response for payer2
                         // get lineItemID from response json
                        addCell(4,i,json.dateSpan[1].lineItemID,sheet1);                                   
                          // get payerID from response json                               
                        addCell(5,i,json.dateSpan[1].payerID,sheet1);                                   
                          // get startDate from response json                                   
                        addCell(6,i,json.dateSpan[1].startDate.toString(),sheet1); 
                        // get endDate from response json                                 
                        addCell(7,i,json.dateSpan[1].endDate.toString(),sheet1); 
                                     
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                         lineItemID = sh.getCell(21,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"dateSpan[0].lineItemID","lineItemID")

                          payerID = sh.getCell(22,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID,"dateSpan[0].payerID","payerID")

                          startDate = sh.getCell(23,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,startDate,"dateSpan[0].startDate","startDate")

                       endDate = sh.getCell(24,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,endDate,"dateSpan[0].endDate","endDate")

                       lineItemID1 = sh.getCell(25,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"dateSpan[1].lineItemID","lineItemID")

                          payerID1 = sh.getCell(26,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID1,"dateSpan[1].payerID","payerID")

                          startDate1 = sh.getCell(27,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,startDate1,"dateSpan[1].startDate","startDate")

                       endDate1 = sh.getCell(28,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,endDate1,"dateSpan[1].endDate","endDate")

                                              
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(8,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(9,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(8,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="groovy" name="DetermineDateSpanRequiredAndCalculation-MultiPayer" id="39801e26-11fd-4873-8041-f47e319b3ea0"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation-Input.xls"
def outputfile = projectDir + "/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation-MultiPayer-Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults_MultiPayer")
Sheet jsonInput = wb.getSheet("JSON_MultiPayer")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"payerID",sheet1);
addCell(2,0,"startDate",sheet1);
addCell(3,0,"endDate",sheet1);
addCell(4,0,"lineItemID1",sheet1);
addCell(5,0,"payerID1",sheet1);
addCell(6,0,"startDate1",sheet1);
addCell(7,0,"endDate1",sheet1);
addCell(8,0,"PASS/FAIL",sheet1);
addCell(9,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                 //Input for Line Item ID                                                             
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for hcpcsCode                                   
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents().toString()
                                //Input for supplyPeriod                                  
                                requestTemplet.content.lineItems[0].supplyPeriod = sh.getCell(3,i).getContents() 
                                //Input for extendedUnits                                  
                                requestTemplet.content.lineItems[0].extendedUnits = sh.getCell(4,i).getContents() 
                                //Input for unitsOfThePrescribedQuantity                                  
                                requestTemplet.content.lineItems[0].unitsOfThePrescribedQuantity = sh.getCell(5,i).getContents() 
                                //Input for prescribedQuantityDays                                  
                                requestTemplet.content.lineItems[0].prescribedQuantityDays = sh.getCell(6,i).getContents()
                                //Input for expectedShipDate                                  
                                requestTemplet.content.lineItems[0].expectedShipDate = sh.getCell(7,i).getContents() 
                                //Input for actualShipDate                                  
                                requestTemplet.content.lineItems[0].actualShipDate = sh.getCell(8,i).getContents() 
                                //Inputs for Payer 1
                                //Input for id                                  
                                requestTemplet.content.lineItems[0].payers[0].id = sh.getCell(9,i).getContents()
                                //Input for planName                                  
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(10,i).getContents()
                                //Inputs for Payer 2
                                //Input for id                                  
                                requestTemplet.content.lineItems[0].payers[1].id = sh.getCell(11,i).getContents()
                                //Input for planName                                  
                                requestTemplet.content.lineItems[0].payers[1].planName = sh.getCell(12,i).getContents()                                                                                                                     
                                                                                     
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                            //Get response for payer1
                           // get lineItemID from response json  
                        addCell(0,i,json.dateSpan[0].lineItemID,sheet1);                                   
                           // get payerID from response json                               
                        addCell(1,i,json.dateSpan[0].payerID,sheet1);                                   
                           // get startDate from response json                                   
                        addCell(2,i,json.dateSpan[0].startDate.toString(),sheet1); 
                           // get endDate from response json                                 
                        addCell(3,i,json.dateSpan[0].endDate.toString(),sheet1);
                          //Get response for payer2
                         // get lineItemID from response json
                        addCell(4,i,json.dateSpan[1].lineItemID,sheet1);                                   
                          // get payerID from response json                               
                        addCell(5,i,json.dateSpan[1].payerID,sheet1);                                   
                          // get startDate from response json                                   
                        addCell(6,i,json.dateSpan[1].startDate.toString(),sheet1); 
                        // get endDate from response json                                 
                        addCell(7,i,json.dateSpan[1].endDate.toString(),sheet1); 
                                     
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                         lineItemID = sh.getCell(13,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"dateSpan[0].lineItemID","lineItemID")

                          payerID = sh.getCell(14,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID,"dateSpan[0].payerID","payerID")

                          startDate = sh.getCell(15,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,startDate,"dateSpan[0].startDate","startDate")

                       endDate = sh.getCell(16,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,endDate,"dateSpan[0].endDate","endDate")

                       lineItemID1 = sh.getCell(17,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"dateSpan[1].lineItemID","lineItemID")

                          payerID1 = sh.getCell(18,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID1,"dateSpan[1].payerID","payerID")

                          startDate1 = sh.getCell(19,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,startDate1,"dateSpan[1].startDate","startDate")

                       endDate1 = sh.getCell(20,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,endDate1,"dateSpan[1].endDate","endDate")

                                              
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(8,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(9,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(8,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39028" id="b682a706-e009-494a-ae2d-3a8427892895"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL" methodName="DetermineDateSpanRequiredAndCalculation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39028" id="98f9ed3b-f333-4780-b375-bae44bdfa0a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "actualShipDate": "",
            "expectedShipDate": "2019-12-01T00:00:00.000+0000",
            "extendedUnits": "2",
            "hcpcsCode": "A9277",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "A002"
                }
            ],
            "prescribedQuantityDays": "1",
            "supplyPeriod": "1",
            "unitsOfThePrescribedQuantity": "1"
        },
        {
            "actualShipDate": "2020-08-08T00:00:00.000+0000",
            "expectedShipDate": "",
            "extendedUnits": "1",
            "hcpcsCode": "K0553",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PB002",
                    "planName": "B195"
                }
            ],
            "prescribedQuantityDays": "1",
            "supplyPeriod": "1",
            "unitsOfThePrescribedQuantity": "1"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="86866cf3-7c60-40c8-9e67-c9d4675096d0" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e234e9c8-b183-4d00-85d9-5ef36029adb6" name="lineItemID"><con:configuration><path>dateSpan[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0c4ceb2c-5fad-4997-9b41-32906c1120a3" name="payerID"><con:configuration><path>dateSpan[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="21447e6b-1afb-4a40-83bb-6f23e84b4a72" name="startDate"><con:configuration><path>dateSpan[0].startDate</path><content>2019-12-01T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="da115913-8f7a-48cf-8093-3028768e8630" name="endDate"><con:configuration><path>dateSpan[0].endDate</path><content>2019-12-02T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7bf974bc-c26c-4caa-9b69-b8217794bfa4" name="lineItemID"><con:configuration><path>dateSpan[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b710a1b5-47ce-4c40-a58a-e0f069ab679a" name="payerID"><con:configuration><path>dateSpan[1].payerID</path><content>PB002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6b347603-4f9d-4202-aeab-7e5a6751544f" name="startDate"><con:configuration><path>dateSpan[1].startDate</path><content>2020-08-08T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8f12fb95-4c98-4d75-a8fd-9ad39d94706c" name="endDate"><con:configuration><path>dateSpan[1].endDate</path><content>2020-08-08T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39029" id="525f0e5c-2af8-48f3-8840-641b4618457d"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL" methodName="DetermineDateSpanRequiredAndCalculation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39029" id="98f9ed3b-f333-4780-b375-bae44bdfa0a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "actualShipDate": "",
            "expectedShipDate": "2019-12-01T00:00:00.000+0000",
            "extendedUnits": "2",
            "hcpcsCode": "D9277",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "A002"
                }
            ],
            "prescribedQuantityDays": "1",
            "supplyPeriod": "1",
            "unitsOfThePrescribedQuantity": "1"
        },
        {
            "actualShipDate": "2020-08-08T00:00:00.000+0000",
            "expectedShipDate": "",
            "extendedUnits": "1",
            "hcpcsCode": "K0553",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PB002",
                    "planName": "B195123"
                }
            ],
            "prescribedQuantityDays": "1",
            "supplyPeriod": "1",
            "unitsOfThePrescribedQuantity": "1"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e878b4e7-1e54-41d6-908d-820a3656389a" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ecdeefb4-1e89-458c-919d-25b6e676db47" name="lineItemID"><con:configuration><path>dateSpan[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="160b8936-fb7b-49a9-b3b4-85574736fe1a" name="payerID"><con:configuration><path>dateSpan[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8d327cb6-ca77-4091-9fc2-6655d67bfcd3" name="startDate"><con:configuration><path>dateSpan[0].startDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e390e9fa-cfc8-4760-9820-5e722eeef5fa" name="endDate"><con:configuration><path>dateSpan[0].endDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5d35254a-5116-47e9-8114-fc5ccd7d5084" name="lineItemID"><con:configuration><path>dateSpan[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="baf93f48-8e27-4395-8fde-652c4657af04" name="payerID"><con:configuration><path>dateSpan[1].payerID</path><content>PB002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f9adee40-cfd1-4214-a3f8-9ea7658117c4" name="startDate"><con:configuration><path>dateSpan[1].startDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ddf4cbf5-bb60-48bb-80a2-c1fbcbe2a441" name="endDate"><con:configuration><path>dateSpan[1].endDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39030" id="cabead35-7d1f-4ae2-b2b2-4b9b3446f9d5"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL" methodName="DetermineDateSpanRequiredAndCalculation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39030" id="98f9ed3b-f333-4780-b375-bae44bdfa0a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "actualShipDate": "2020-11-02T00:00:00.000+0000",
            "expectedShipDate": "2020-11-01T00:00:00.000+0000",
            "extendedUnits": "1",
            "hcpcsCode": "A9277",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "A250"
                }
            ],
            "prescribedQuantityDays": "1",
            "supplyPeriod": "5",
            "unitsOfThePrescribedQuantity": "0"
        },
        {
            "actualShipDate": "",
            "expectedShipDate": "",
            "extendedUnits": "3",
            "hcpcsCode": "K0553",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PB002",
                    "planName": "A001"
                }
            ],
            "prescribedQuantityDays": "4",
            "supplyPeriod": "2",
            "unitsOfThePrescribedQuantity": "1"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ea1a6f69-bbd3-49b0-af84-02b8ccc63079" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="126e769e-2b56-403c-98d4-ef3db32ed51e" name="lineItemID"><con:configuration><path>dateSpan[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="969275cc-7831-4659-9530-08c7038197cc" name="payerID"><con:configuration><path>dateSpan[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2c23b317-5b7d-4517-b2b1-cc3302b1c7a8" name="startDate"><con:configuration><path>dateSpan[0].startDate</path><content>2020-11-02T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="418f16da-b30f-43d3-9ede-18f1a36a4473" name="endDate"><con:configuration><path>dateSpan[0].endDate</path><content>2020-11-06T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f5aa2c15-e090-4fed-9f58-bad8e06e6358" name="lineItemID"><con:configuration><path>dateSpan[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c947b61c-286f-452a-9067-9178a5d7dbbb" name="payerID"><con:configuration><path>dateSpan[1].payerID</path><content>PB002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="78f0bafa-1a85-4e95-bcd9-9f659664c737" name="startDate"><con:configuration><path>dateSpan[1].startDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5379d476-6900-4d5e-944e-fc9aa9262ecb" name="endDate"><con:configuration><path>dateSpan[1].endDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39023" id="a7b57e7d-caf0-42e1-83ab-575f22331dec"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL" methodName="DetermineDateSpanRequiredAndCalculation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39023" id="98f9ed3b-f333-4780-b375-bae44bdfa0a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "actualShipDate": "2020-04-21T00:00:00.000+0000",
            "expectedShipDate": "2020-04-20T00:00:00.000+0000",
            "extendedUnits": "0",
            "hcpcsCode": "A9277",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "A002"
                },
                {
                    "id": "PA002",
                    "planName": "A002"
                }
            ],
            "prescribedQuantityDays": "0",
            "supplyPeriod": "4",
            "unitsOfThePrescribedQuantity": "0"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8395be0e-6a79-4781-840a-da98643633ae" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="52b1bbe6-8a5f-47e8-974d-42afe70890d7" name="lineItemID"><con:configuration><path>dateSpan[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c875d698-094e-470f-b6f3-5978f6851293" name="payerID"><con:configuration><path>dateSpan[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b8cf30b7-7df1-49e5-a785-202f2156b939" name="startDate"><con:configuration><path>dateSpan[0].startDate</path><content>2020-04-21T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eb60cd39-04e4-4edb-b920-c16d439b119c" name="endDate"><con:configuration><path>dateSpan[0].endDate</path><content>2020-04-24T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e2388158-f94d-4bd7-8aae-5df18b847dba" name="lineItemID"><con:configuration><path>dateSpan[1].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5a16ef86-0dc1-4bf4-be96-f82e0a8b1971" name="payerID"><con:configuration><path>dateSpan[1].payerID</path><content>PA002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="16e9665f-323c-4bf3-8a46-b86c51022da2" name="startDate"><con:configuration><path>dateSpan[1].startDate</path><content>2020-04-21T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="11d10998-c657-4a24-8cba-f344d1190f9a" name="endDate"><con:configuration><path>dateSpan[1].endDate</path><content>2020-04-24T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39024" id="e436cbf9-ad6e-431f-8914-54640f31de16"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL" methodName="DetermineDateSpanRequiredAndCalculation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39024" id="98f9ed3b-f333-4780-b375-bae44bdfa0a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "actualShipDate": "",
            "expectedShipDate": "",
            "extendedUnits": "2",
            "hcpcsCode": "A9277",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "B187"
                },
                {
                    "id": "PA002",
                    "planName": "A002123"
                }
            ],
            "prescribedQuantityDays": "2",
            "supplyPeriod": "2",
            "unitsOfThePrescribedQuantity": "2"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="da123bbc-b667-4085-ba68-2898976a772a" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e020bf3a-77f7-43ec-8c3b-2cec9a4af8bf" name="lineItemID"><con:configuration><path>dateSpan[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="afe8ad7b-53f2-407c-9ed6-6c2271b03911" name="payerID"><con:configuration><path>dateSpan[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d2adce9-7cc2-4013-8dcb-6dc3f28a11c5" name="startDate"><con:configuration><path>dateSpan[0].startDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="39346a8b-73f0-4e69-ae58-71c7a28ddeef" name="endDate"><con:configuration><path>dateSpan[0].endDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a13e8927-e509-4984-a336-a407f45b2be4" name="lineItemID"><con:configuration><path>dateSpan[1].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="22bf6a40-f2c6-4075-9ac7-3572f64f7b16" name="payerID"><con:configuration><path>dateSpan[1].payerID</path><content>PA002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ac568230-a904-4bb1-80da-065c6c4cad5f" name="startDate"><con:configuration><path>dateSpan[1].startDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c790c59f-6f36-4b9e-84ac-5e567f0718df" name="endDate"><con:configuration><path>dateSpan[1].endDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39025" id="7293dcfc-d6a7-4cbe-b154-8e7779922f04"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL" methodName="DetermineDateSpanRequiredAndCalculation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39025" id="98f9ed3b-f333-4780-b375-bae44bdfa0a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "actualShipDate": "2020-09-02T00:00:00.000+0000",
            "expectedShipDate": "",
            "extendedUnits": "2",
            "hcpcsCode": "A4259",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "B187"
                },
                {
                    "id": "PA002",
                    "planName": "A002123"
                }
            ],
            "prescribedQuantityDays": "2",
            "supplyPeriod": "2",
            "unitsOfThePrescribedQuantity": "1"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1b8ca068-2b14-44dc-8e70-4cc82756fd49" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="09d2969d-b524-44a0-8d8f-b765a4dae0a7" name="lineItemID"><con:configuration><path>dateSpan[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b2e6537b-65e6-401a-a7fa-9057ffe1463c" name="payerID"><con:configuration><path>dateSpan[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cf6ed3e8-93e3-49c1-b4ad-9df257a29402" name="startDate"><con:configuration><path>dateSpan[0].startDate</path><content>2020-09-02T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dd41a2c6-5471-424f-b160-d510eadcc98a" name="endDate"><con:configuration><path>dateSpan[0].endDate</path><content>2020-09-05T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a591b825-628a-4b63-b56b-13bb42acd256" name="lineItemID"><con:configuration><path>dateSpan[1].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ac2f0de9-d32c-45e9-a2a3-fc10256a4535" name="payerID"><con:configuration><path>dateSpan[1].payerID</path><content>PA002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="14e96ad8-da8b-4442-8328-c8f62fc0e15d" name="startDate"><con:configuration><path>dateSpan[1].startDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f2117595-9817-46ba-b4f9-d5e3d6ab277b" name="endDate"><con:configuration><path>dateSpan[1].endDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39026" id="5cf312a2-58ee-4334-9a3c-d42c40d5348d"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL" methodName="DetermineDateSpanRequiredAndCalculation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39026" id="98f9ed3b-f333-4780-b375-bae44bdfa0a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "actualShipDate": "",
            "expectedShipDate": "2021-02-10T00:00:00.000+0000",
            "extendedUnits": "3",
            "hcpcsCode": "A9277",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "B187123"
                },
                {
                    "id": "PA002",
                    "planName": "A002"
                }
            ],
            "prescribedQuantityDays": "6",
            "supplyPeriod": "0",
            "unitsOfThePrescribedQuantity": "2"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c2e94ed5-d6c1-4d6b-adc5-7a980955e8a1" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7fa7b28f-8b8f-40c0-98ff-325adc909ea3" name="lineItemID"><con:configuration><path>dateSpan[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cfeae783-3138-41a2-9ab5-6783d9099299" name="payerID"><con:configuration><path>dateSpan[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6c0c0572-3e62-4d3b-b8d7-d3f3d215a423" name="startDate"><con:configuration><path>dateSpan[0].startDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cb319de2-d710-4919-868b-462e9443355c" name="endDate"><con:configuration><path>dateSpan[0].endDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="955f0c81-f532-4270-96d0-0fc7883342f4" name="lineItemID"><con:configuration><path>dateSpan[1].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1b91e1d2-a6f8-4da5-adbc-723d5161d59e" name="payerID"><con:configuration><path>dateSpan[1].payerID</path><content>PA002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9cc757fd-55d4-4d19-ab3a-d7acd48cdf4b" name="startDate"><con:configuration><path>dateSpan[1].startDate</path><content>2021-02-10T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a44040af-c465-4566-a0b8-5160e9329195" name="endDate"><con:configuration><path>dateSpan[1].endDate</path><content>2021-02-18T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39027" id="80984b25-b885-4d7f-845b-3312b1afeafb"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL" methodName="DetermineDateSpanRequiredAndCalculation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39027" id="98f9ed3b-f333-4780-b375-bae44bdfa0a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "actualShipDate": "2021-02-10T00:00:00.000+0000",
            "expectedShipDate": "",
            "extendedUnits": "3",
            "hcpcsCode": "AS927H",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "B187"
                },
                {
                    "id": "PA002",
                    "planName": "A002"
                }
            ],
            "prescribedQuantityDays": "6",
            "supplyPeriod": "1",
            "unitsOfThePrescribedQuantity": "2"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a17bf92c-20e6-4c16-9fa1-470b90949dbd" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a07427a9-64e8-4f61-b240-9583216588f7" name="lineItemID"><con:configuration><path>dateSpan[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a159d162-3faa-4470-b6a4-9b3643073bc2" name="payerID"><con:configuration><path>dateSpan[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9b9f7010-20c6-43d2-a1de-5ad68ca10380" name="startDate"><con:configuration><path>dateSpan[0].startDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b1af0618-6d7b-435f-8871-28de97d9edba" name="endDate"><con:configuration><path>dateSpan[0].endDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3dd15548-f937-4081-9284-bd24a3af48d6" name="lineItemID"><con:configuration><path>dateSpan[1].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0f73085-e31f-4ef1-8708-196c1c1649ad" name="payerID"><con:configuration><path>dateSpan[1].payerID</path><content>PA002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="47a52032-3efc-4437-a9b8-a0ef4a050a7f" name="startDate"><con:configuration><path>dateSpan[1].startDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bc0f95c5-0fcb-40ff-bd09-26a7167477e9" name="endDate"><con:configuration><path>dateSpan[1].endDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39013" id="56bd7b1c-e2f2-49fb-a724-709c24cbd481"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL" methodName="DetermineDateSpanRequiredAndCalculation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39013" id="98f9ed3b-f333-4780-b375-bae44bdfa0a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "actualShipDate": "2020-03-21T00:00:00.000+0000",
            "expectedShipDate": "2020-03-20T00:00:00.000+0000",
            "extendedUnits": "0",
            "hcpcsCode": "K0553",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "B187"
                }
            ],
            "prescribedQuantityDays": "0",
            "supplyPeriod": "1",
            "unitsOfThePrescribedQuantity": "0"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="58447d48-42c8-456f-8a71-0a54cfb796ad" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f4a78c2e-3065-478c-aebd-ef158016d3b8" name="lineItemID"><con:configuration><path>dateSpan[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="21c29bbb-f7a4-41be-88cd-8dea805d1351" name="payerID"><con:configuration><path>dateSpan[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9e5b68d8-c9d2-4c33-b95c-d8be9cf5c2d7" name="startDate"><con:configuration><path>dateSpan[0].startDate</path><content>2020-03-21T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e2855f0d-7275-4c71-aefc-627294e757c8" name="endDate"><con:configuration><path>dateSpan[0].endDate</path><content>2020-03-21T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39014" id="864226ec-ece8-4325-b880-dbb689d78d5c"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL" methodName="DetermineDateSpanRequiredAndCalculation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39014" id="98f9ed3b-f333-4780-b375-bae44bdfa0a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "actualShipDate": "",
            "expectedShipDate": "",
            "extendedUnits": "0",
            "hcpcsCode": "A9278",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "B195"
                }
            ],
            "prescribedQuantityDays": "0",
            "supplyPeriod": "2",
            "unitsOfThePrescribedQuantity": "0"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1fe462f7-b8e1-4ea8-bc72-428811e2bbf6" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="092a5c60-4ef3-45eb-8414-a31f74d2a574" name="lineItemID"><con:configuration><path>dateSpan[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="386523d7-a6b8-4938-b3e5-b53547ac780d" name="payerID"><con:configuration><path>dateSpan[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7fbc6318-6fc9-4b1d-8432-7957f51c7ae8" name="startDate"><con:configuration><path>dateSpan[0].startDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e4ee1088-ebc7-4e04-826b-03b2d0145fba" name="endDate"><con:configuration><path>dateSpan[0].endDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39015" id="d5de8db0-7efa-4533-8b77-52b3542883cd"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL" methodName="DetermineDateSpanRequiredAndCalculation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39015" id="98f9ed3b-f333-4780-b375-bae44bdfa0a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "actualShipDate": "",
            "expectedShipDate": "2020-02-10T00:00:00.000+0000",
            "extendedUnits": "3",
            "hcpcsCode": "A9277",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "A218"
                }
            ],
            "prescribedQuantityDays": "6",
            "supplyPeriod": "4",
            "unitsOfThePrescribedQuantity": "2"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c3d32266-3796-4d63-952c-5fd882e571fc" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="13ff78c9-5916-49e4-9c02-feaa315af938" name="lineItemID"><con:configuration><path>dateSpan[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f09b9bbd-12da-450f-912a-389017e32bd0" name="payerID"><con:configuration><path>dateSpan[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="34054182-9863-481d-96d6-f1f8f1200db4" name="startDate"><con:configuration><path>dateSpan[0].startDate</path><content>2020-02-10T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="49e89d45-98af-4672-ac7f-5dafa7a8888b" name="endDate"><con:configuration><path>dateSpan[0].endDate</path><content>2020-02-18T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39016" id="18d3a212-c1f9-4d3b-bc9f-2f1f4af8671e"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL" methodName="DetermineDateSpanRequiredAndCalculation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39016" id="98f9ed3b-f333-4780-b375-bae44bdfa0a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "actualShipDate": "2019-02-01T00:00:00.000+0000",
            "expectedShipDate": "2019-01-01T00:00:00.000+0000",
            "extendedUnits": "2",
            "hcpcsCode": "ASD12",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "A001"
                }
            ],
            "prescribedQuantityDays": "9",
            "supplyPeriod": "5",
            "unitsOfThePrescribedQuantity": "1"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="111031ec-187f-4c8c-bd85-a1324ae0717a" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3bd4031d-efa2-4de5-9d30-d8718855ace5" name="lineItemID"><con:configuration><path>dateSpan[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a44f4d01-eb3a-44ec-b28c-22e3878c7d24" name="payerID"><con:configuration><path>dateSpan[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3bd222f1-4d90-4fec-adb1-53990991531c" name="startDate"><con:configuration><path>dateSpan[0].startDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f64cfd46-5846-45a2-b961-3a4f08b213a4" name="endDate"><con:configuration><path>dateSpan[0].endDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39017" id="f181093c-878d-4b94-887e-e2b3adf8de0b"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL" methodName="DetermineDateSpanRequiredAndCalculation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39017" id="98f9ed3b-f333-4780-b375-bae44bdfa0a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "actualShipDate": "2019-02-01T00:00:00.000+0000",
            "expectedShipDate": "2019-01-01T00:00:00.000+0000",
            "extendedUnits": "2",
            "hcpcsCode": "A4224",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "A001123"
                }
            ],
            "prescribedQuantityDays": "9",
            "supplyPeriod": "5",
            "unitsOfThePrescribedQuantity": "1"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f2996880-430b-4883-a67a-492591022f27" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="336a194e-50f3-4baa-8dc6-c6e502a3d476" name="lineItemID"><con:configuration><path>dateSpan[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="21cd41b2-45cd-403f-9285-c828a72e821d" name="payerID"><con:configuration><path>dateSpan[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bfaffcf0-8120-4c4c-820f-1d0b3a68ef98" name="startDate"><con:configuration><path>dateSpan[0].startDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e2ffa007-5c4f-4b21-a9c2-d7e99caaa71a" name="endDate"><con:configuration><path>dateSpan[0].endDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39018" id="637503a8-7f9f-49e8-aa7a-1731f2eee251"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL" methodName="DetermineDateSpanRequiredAndCalculation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39018" id="98f9ed3b-f333-4780-b375-bae44bdfa0a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "actualShipDate": "2019-12-22T00:00:00.000+0000",
            "expectedShipDate": "2019-11-22T00:00:00.000+0000",
            "extendedUnits": "4",
            "hcpcsCode": "A4224",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "A001"
                }
            ],
            "prescribedQuantityDays": "4",
            "supplyPeriod": "1",
            "unitsOfThePrescribedQuantity": "0"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0751b0f1-172c-4c49-b0dd-f6fbb5547caf" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55efa64d-96ae-4f81-b6e7-ce53710cc6d6" name="lineItemID"><con:configuration><path>dateSpan[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9ccd191e-98e4-476a-8b82-33ef29c27090" name="payerID"><con:configuration><path>dateSpan[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8da7b98a-c09f-4e00-aab2-d0ff9f694416" name="startDate"><con:configuration><path>dateSpan[0].startDate</path><content>2019-12-22T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="325549e9-b8e9-411c-8e19-e95431e090c0" name="endDate"><con:configuration><path>dateSpan[0].endDate</path><content>2019-12-22T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39019" id="17c0f00c-d519-44e8-bd73-eb1f757ce933"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL" methodName="DetermineDateSpanRequiredAndCalculation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39019" id="98f9ed3b-f333-4780-b375-bae44bdfa0a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "actualShipDate": "null",
            "expectedShipDate": "null",
            "extendedUnits": "5",
            "hcpcsCode": "A4224",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "A001"
                }
            ],
            "prescribedQuantityDays": "10",
            "supplyPeriod": "4",
            "unitsOfThePrescribedQuantity": "5"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="35205b55-38fd-49c4-a1fd-f8cb9d1f7c1b" name="Valid HTTP Status Codes_8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="43fe692d-5cc1-418a-8f00-c8b1ce1b91e3" name="lineItemID"><con:configuration><path>dateSpan[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f5cdd6d1-6b74-44f0-bd16-773e1e671fa4" name="payerID"><con:configuration><path>dateSpan[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1c433a61-4829-44ca-b0e0-b7bf608c2482" name="startDate"><con:configuration><path>dateSpan[0].startDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c755447-d8b4-4dd8-824f-f0dd130a6a93" name="endDate"><con:configuration><path>dateSpan[0].endDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39020" id="2f7a4f9f-07e7-4530-9af8-912061074ef4"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL" methodName="DetermineDateSpanRequiredAndCalculation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39020" id="98f9ed3b-f333-4780-b375-bae44bdfa0a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "actualShipDate": "2020-03-05T00:00:00.000+0000",
            "expectedShipDate": "",
            "extendedUnits": "1",
            "hcpcsCode": "A4253",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "A250"
                }
            ],
            "prescribedQuantityDays": "1",
            "supplyPeriod": "6",
            "unitsOfThePrescribedQuantity": "0"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8f9a5764-778f-47ef-8351-53ae064b7460" name="Valid HTTP Status Codes_9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="88f81d33-16ec-4145-a10a-cb90b6203eff" name="lineItemID"><con:configuration><path>dateSpan[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="de147422-04fb-4991-a1a1-eafc04969142" name="payerID"><con:configuration><path>dateSpan[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f4246b83-428e-460c-a827-58b9d5c348f6" name="startDate"><con:configuration><path>dateSpan[0].startDate</path><content>2020-03-05T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2fed89cd-5bde-4af5-8c0f-5aa33c78d136" name="endDate"><con:configuration><path>dateSpan[0].endDate</path><content>2020-03-10T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39021" id="7aae807c-3bf8-4d13-83b3-eceeca350429"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL" methodName="DetermineDateSpanRequiredAndCalculation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39021" id="98f9ed3b-f333-4780-b375-bae44bdfa0a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "actualShipDate": "",
            "expectedShipDate": "2020-02-02T00:00:00.000+0000",
            "extendedUnits": "0",
            "hcpcsCode": "A9274",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "A002"
                }
            ],
            "prescribedQuantityDays": "0",
            "supplyPeriod": "3",
            "unitsOfThePrescribedQuantity": "0"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f1959667-ce11-4942-a40a-080e99ac12a6" name="Valid HTTP Status Codes_10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="499eaef6-bb90-448b-8fda-47d0f4a90b7d" name="lineItemID"><con:configuration><path>dateSpan[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="87bf51b2-b97b-408f-bc67-af16cffdbd23" name="payerID"><con:configuration><path>dateSpan[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="279cc734-6a17-45d1-839f-d87222cbd5fa" name="startDate"><con:configuration><path>dateSpan[0].startDate</path><content>2020-02-02T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5e732aec-dc7b-48c6-8d02-3a6e9c6879a8" name="endDate"><con:configuration><path>dateSpan[0].endDate</path><content>2020-02-04T00:00:00.000+0000</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-39022" id="b8dc7a64-0ad6-4f28-96a0-b211b05bfb9c"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL" methodName="DetermineDateSpanRequiredAndCalculation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-39022" id="98f9ed3b-f333-4780-b375-bae44bdfa0a0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "actualShipDate": "",
            "expectedShipDate": "",
            "extendedUnits": "",
            "hcpcsCode": "A9277",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "A002"
                }
            ],
            "prescribedQuantityDays": "",
            "supplyPeriod": "",
            "unitsOfThePrescribedQuantity": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineDateSpanRequiredAndCalculation/DetermineDateSpanRequiredAndCalculation/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="59dd9029-a465-4399-8a66-1571fe3ff34e" name="Valid HTTP Status Codes_11"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b6fb3c51-d036-4502-bf9a-253e7bb45e3e" name="lineItemID"><con:configuration><path>dateSpan[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1ae3a1ae-8625-4e26-b262-4c71b68bb33c" name="payerID"><con:configuration><path>dateSpan[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04c3a9f5-19c9-4bca-b849-e0256e76f509" name="startDate"><con:configuration><path>dateSpan[0].startDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8d376435-f5bb-4b15-9eef-1f174cac65c4" name="endDate"><con:configuration><path>dateSpan[0].endDate</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="8fe7c944-4eb9-4e2d-a9e3-547a0e910534" name="DeterminePharmacyReviewAndDispensing"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="cb162393-b919-4da8-9b86-6c8c0f9cd4cc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeterminePharmacyReviewAndDispensing" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="JSON Request" id="b0260938-c940-49b3-a59d-70d95e806bdb"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL" methodName="DeterminePharmacyReviewAndDispensing" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="19932dd2-d0ee-416a-9424-22c6c1f59735" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "B4208",
            "itemNumber": "SRGHT123",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "",
            "itemNumber": "",
            "lineItemID": "L002"
        }
    ],
    "shipToAddress": {
        "state": "88"
    }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="DeterminePharmacistReviewAndDispencing-SingleLineItem" id="0f14bca0-4198-4eb1-9957-d7113b9037c4"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DeterminePharmacistReviewAndDispencing/PharmacistReviewAndDispencing-SingleLineItem-Input.xls"
def outputfile = projectDir + "/DeterminePharmacistReviewAndDispencing/PharmacistReviewAndDispencing-SingleLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"requiresPharmacyReview",sheet1);
addCell(2,0,"requiresPharmacyDispensing",sheet1);
addCell(3,0,"PASS/FAIL",sheet1);
addCell(4,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                  //Input for State                                                     
                                requestTemplet.content.shipToAddress.state = sh.getCell(1,i).getContents()                        
                                 //Input for Line Item ID                                                             
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(2,i).getContents()
                                 //Input for hcpcsCode                                   
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(3,i).getContents().toString()
                                //Input for itemNumber                                  
                                requestTemplet.content.lineItems[0].itemNumber = sh.getCell(4,i).getContents()                                                                                     
                                                                                     
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json                                 
                        addCell(0,i,json.pharmacyReviewAndDispensingResponse[0].lineItemID,sheet1);                                   
                          // get requiresPharmacyReview from response json                                   
                        addCell(1,i,json.pharmacyReviewAndDispensingResponse[0].requiresPharmacyReview.toString(),sheet1);  
                         // get requiresPharmacyDispensing from response json                                   
                        addCell(2,i,json.pharmacyReviewAndDispensingResponse[0].requiresPharmacyDispensing.toString(),sheet1); 
                          
                                                    
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(5,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"pharmacyReviewAndDispensingResponse[0].lineItemID","lineItemID")

                          requiresPharmacyReview = sh.getCell(6,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,requiresPharmacyReview,"pharmacyReviewAndDispensingResponse[0].requiresPharmacyReview","requiresPharmacyReview")

                       requiresPharmacyDispensing = sh.getCell(7,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,requiresPharmacyDispensing,"pharmacyReviewAndDispensingResponse[0].requiresPharmacyDispensing","requiresPharmacyDispensing")

                       
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(3,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(4,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(3,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="groovy" name="DeterminePharmacistReviewAndDispencing-MultiLineItem" id="91d2fcd5-5d4c-48ca-b364-c12ebec43ee6"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DeterminePharmacistReviewAndDispencing/PharmacistReviewAndDispencing-MultiLineItem-Input.xls"
def outputfile = projectDir + "/DeterminePharmacistReviewAndDispencing/PharmacistReviewAndDispencing-MultiLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"requiresPharmacyReview",sheet1);
addCell(2,0,"requiresPharmacyDispensing",sheet1);
addCell(3,0,"lineItemID1",sheet1);
addCell(4,0,"requiresPharmacyReview1",sheet1);
addCell(5,0,"requiresPharmacyDispensing1",sheet1);
addCell(6,0,"PASS/FAIL",sheet1);
addCell(7,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                                 

                                  //Input for State                                                  
                                requestTemplet.content.shipToAddress.state = sh.getCell(1,i).getContents()                             
                                  //Input for Line Item ID1                                                  
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(2,i).getContents()
                                 //Input for hcpcsCode                                  
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(3,i).getContents().toString()
                                //Input for itemNumber                                
                                requestTemplet.content.lineItems[0].itemNumber = sh.getCell(4,i).getContents() 

                                
                               //Input for Line Item ID2                                                            
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(5,i).getContents()
                                 //Input for hcpcsCode                                  
                                requestTemplet.content.lineItems[1].hcpcsCode = sh.getCell(6,i).getContents().toString()
                                //Input for itemNumber                                
                                requestTemplet.content.lineItems[1].itemNumber = sh.getCell(7,i).getContents()                                                 
                                                                                                                               
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json                                 
                        addCell(0,i,json.pharmacyReviewAndDispensingResponse[0].lineItemID,sheet1);                                   
                          // get requiresPharmacyReview from response json                                   
                        addCell(1,i,json.pharmacyReviewAndDispensingResponse[0].requiresPharmacyReview.toString(),sheet1);  
                         // get requiresPharmacyDispensing from response json                                   
                        addCell(2,i,json.pharmacyReviewAndDispensingResponse[0].requiresPharmacyDispensing.toString(),sheet1); 
                        // get lineItemID from response json                                 
                        addCell(3,i,json.pharmacyReviewAndDispensingResponse[1].lineItemID,sheet1);                                   
                          // get requiresPharmacyReview from response json                                   
                        addCell(4,i,json.pharmacyReviewAndDispensingResponse[1].requiresPharmacyReview.toString(),sheet1);  
                         // get requiresPharmacyDispensing from response json                                   
                        addCell(5,i,json.pharmacyReviewAndDispensingResponse[1].requiresPharmacyDispensing.toString(),sheet1);                         
                          
                                                   
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
             
                          lineItemID = sh.getCell(8,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"pharmacyReviewAndDispensingResponse[0].lineItemID","lineItemID")

                          requiresPharmacyReview = sh.getCell(9,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,requiresPharmacyReview,"pharmacyReviewAndDispensingResponse[0].requiresPharmacyReview","requiresPharmacyReview")

                       requiresPharmacyDispensing = sh.getCell(10,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,requiresPharmacyDispensing,"pharmacyReviewAndDispensingResponse[0].requiresPharmacyDispensing","requiresPharmacyDispensing")

                       lineItemID1 = sh.getCell(11,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"pharmacyReviewAndDispensingResponse[1].lineItemID","lineItemID")
                       
                       requiresPharmacyReview1 = sh.getCell(12,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,requiresPharmacyReview1,"pharmacyReviewAndDispensingResponse[1].requiresPharmacyReview","requiresPharmacyReview")

                       requiresPharmacyDispensing1 = sh.getCell(13,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,requiresPharmacyDispensing1,"pharmacyReviewAndDispensingResponse[1].requiresPharmacyDispensing","requiresPharmacyDispensing")
             

                       
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(6,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(7,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(6,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36180" id="6ee853e4-370c-413e-8aa3-8845858562af"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL" methodName="DeterminePharmacyReviewAndDispensing" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36180" id="19932dd2-d0ee-416a-9424-22c6c1f59735" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "J1610",
            "itemNumber": "DL21178924",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "A4123",
            "itemNumber": "PSKU01234",
            "lineItemID": "L002"
        }
    ],
    "shipToAddress": {
        "state": "AK"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4159f13c-374e-4c5e-a255-cfca1d92dbf7" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b5b17f4c-6bd9-43c0-b328-2f0df6011606" name="lineItemID"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d9ee67b2-0e41-4c81-b56e-beb665c6476f" name="requiresPharmacyReview"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyReview</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3bf9d202-da76-4a83-bbb5-e48d6360846d" name="requiresPharmacyDispensing"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyDispensing</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36181" id="00177b60-75cc-427e-9388-15cb7fd5d070"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL" methodName="DeterminePharmacyReviewAndDispensing" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36181" id="19932dd2-d0ee-416a-9424-22c6c1f59735" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "itemNumber": "SC294599",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "A4123",
            "itemNumber": "PSKU01234",
            "lineItemID": "L002"
        }
    ],
    "shipToAddress": {
        "state": "CA"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e1bb9083-89fe-45e7-b186-6f79612ad2ac" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4d94dc55-2e9d-4182-8909-832f9c5f4282" name="lineItemID"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1280d98b-8151-42d3-9a22-905417787fdc" name="requiresPharmacyReview"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyReview</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="227a2f78-5576-4359-960e-631cc7fd55a2" name="requiresPharmacyDispensing"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36182" id="1ea29a15-5e2a-415a-9208-239dfbea4984"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL" methodName="DeterminePharmacyReviewAndDispensing" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36182" id="19932dd2-d0ee-416a-9424-22c6c1f59735" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "J1610",
            "itemNumber": "",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "A4123",
            "itemNumber": "PSKU01234",
            "lineItemID": "L002"
        }
    ],
    "shipToAddress": {
        "state": "WY"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="5ab8c95c-533e-47be-9520-08bcf5ace924" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="de9caf11-384e-4015-80a5-c8e2fc3029bc" name="lineItemID"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d46b434-63f7-46b4-8637-31ee3fbe00a3" name="requiresPharmacyReview"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyReview</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69c559cc-565f-4789-b110-ef1f46cc0a5b" name="requiresPharmacyDispensing"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyDispensing</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36183" id="a1f8cee6-c746-44de-93fc-9be8f7552250"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL" methodName="DeterminePharmacyReviewAndDispensing" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36183" id="19932dd2-d0ee-416a-9424-22c6c1f59735" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "J1610",
            "itemNumber": "",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "A4123",
            "itemNumber": "PSKU01234",
            "lineItemID": "L002"
        }
    ],
    "shipToAddress": {
        "state": "TT"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b4a3c937-77ff-464c-8054-443bb4459751" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="80e4ccac-30b4-455a-b393-f23a5bbc0d53" name="lineItemID"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0bfdbb03-77ce-4571-ab98-5d35d423d3d3" name="requiresPharmacyReview"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyReview</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1279c88a-6f58-485b-86ae-f95668d03579" name="requiresPharmacyDispensing"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36184" id="e0bcf608-e0fe-4a10-a645-8877bfd70f2a"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL" methodName="DeterminePharmacyReviewAndDispensing" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36184" id="19932dd2-d0ee-416a-9424-22c6c1f59735" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "K1678",
            "itemNumber": "",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "A4123",
            "itemNumber": "PSKU01234",
            "lineItemID": "L002"
        }
    ],
    "shipToAddress": {
        "state": "CA"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="24d0c07f-b245-4dfd-8733-71295c180cec" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="36918e37-588b-48d2-8247-d6b698b83033" name="lineItemID"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cd9f7254-ee2e-4881-b470-6dc2e713c15d" name="requiresPharmacyReview"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyReview</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e404d911-5116-4fd9-914e-cfbc7ae66d05" name="requiresPharmacyDispensing"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36185" id="38f60247-b5ce-4314-a049-326f8f319abe"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL" methodName="DeterminePharmacyReviewAndDispensing" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36185" id="19932dd2-d0ee-416a-9424-22c6c1f59735" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "J1610",
            "itemNumber": "HL21178924",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "A4123",
            "itemNumber": "PSKU01234",
            "lineItemID": "L002"
        }
    ],
    "shipToAddress": {
        "state": "AK"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="40ac7d3e-1a15-410c-99f8-0650e160c6a0" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9068ff7c-39b6-4859-bdce-b0c3144221dd" name="lineItemID"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5aa494ca-ef54-4515-9b95-6dfa719b5f5c" name="requiresPharmacyReview"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyReview</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8613c155-0b18-47f7-ba79-2047f8ed7a72" name="requiresPharmacyDispensing"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36186" id="fbef8054-4e65-4851-a9d7-b9f9fbd385e0"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL" methodName="DeterminePharmacyReviewAndDispensing" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36186" id="19932dd2-d0ee-416a-9424-22c6c1f59735" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "G0249",
            "itemNumber": "HL21178924",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "A4123",
            "itemNumber": "PSKU01234",
            "lineItemID": "L002"
        }
    ],
    "shipToAddress": {
        "state": "CA"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9a6355c0-fa55-4462-8958-f773311319a3" name="Valid HTTP Status Codes_8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f02ab50b-b48d-490a-8e5b-c127fb1d1c8c" name="lineItemID"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f942c9ba-75af-457f-8695-59b30cc77a49" name="requiresPharmacyReview"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyReview</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="46442a74-7ec0-4930-ba4e-63d63508cafc" name="requiresPharmacyDispensing"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36187" id="e7c610a1-f819-46ae-be83-5701c64c92f1"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL" methodName="DeterminePharmacyReviewAndDispensing" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36187" id="19932dd2-d0ee-416a-9424-22c6c1f59735" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "J1610",
            "itemNumber": "DL21178924",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "J1610",
            "itemNumber": "",
            "lineItemID": "L002"
        }
    ],
    "shipToAddress": {
        "state": "AL"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1cbfe7d5-8c55-4bbc-a20f-dc792ca2c4ec" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="97799190-0fff-45f4-9047-4ee2e3a98c30" name="lineItemID"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4bcb3fa9-0624-4656-9d31-4e5d74aed9ec" name="requiresPharmacyReview"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyReview</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="67f9104f-1d90-42e8-8a3e-c2d7e53ffddc" name="requiresPharmacyDispensing"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyDispensing</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bfd5bc8c-ed37-481d-9116-0d5ba87154bc" name="lineItemID"><con:configuration><path>pharmacyReviewAndDispensingResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="39dd4884-a717-468d-a97f-fa2d515215ec" name="requiresPharmacyReview"><con:configuration><path>pharmacyReviewAndDispensingResponse[1].requiresPharmacyReview</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="46d4f31d-b4c3-4202-a240-31a19997e6cd" name="requiresPharmacyDispensing"><con:configuration><path>pharmacyReviewAndDispensingResponse[1].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36188" id="c4f8110e-7f6e-4d16-8d3f-61a9699e208b"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL" methodName="DeterminePharmacyReviewAndDispensing" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36188" id="19932dd2-d0ee-416a-9424-22c6c1f59735" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "itemNumber": "MNMMT395",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "A4208",
            "itemNumber": "",
            "lineItemID": "L002"
        }
    ],
    "shipToAddress": {
        "state": "CA"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f936d00f-184c-4441-bec3-2fff796fe45d" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bde0db54-d3f9-49b1-8614-0ef5b459a79f" name="lineItemID"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8fa7329c-7b86-4e8e-8d64-7723941d3d2a" name="requiresPharmacyReview"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyReview</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0e48198-d6a9-4b4e-897e-d9b88625bb4a" name="requiresPharmacyDispensing"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a4032b20-22f6-45c0-981e-ec6dd1b934ac" name="lineItemID"><con:configuration><path>pharmacyReviewAndDispensingResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f4dcac6b-009c-4b7e-819d-35fd526510d7" name="requiresPharmacyReview"><con:configuration><path>pharmacyReviewAndDispensingResponse[1].requiresPharmacyReview</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4d746e33-07e1-4213-a380-6f598a1447f2" name="requiresPharmacyDispensing"><con:configuration><path>pharmacyReviewAndDispensingResponse[1].requiresPharmacyDispensing</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36189" id="c5bdeb04-6279-4ce9-ae97-e54d66deb00d"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL" methodName="DeterminePharmacyReviewAndDispensing" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36189" id="19932dd2-d0ee-416a-9424-22c6c1f59735" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4208",
            "itemNumber": "",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "B4208",
            "itemNumber": "",
            "lineItemID": "L002"
        }
    ],
    "shipToAddress": {
        "state": "%T"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="860b0076-b3b1-4d2b-accf-1c7c3a7365ee" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7c45c73e-8c53-4c98-9501-580b9eb68199" name="lineItemID"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ad05e6a3-eb6f-4e55-b03d-db534bae7c51" name="requiresPharmacyReview"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyReview</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="35384edb-fc03-49c3-8113-0beee1393878" name="requiresPharmacyDispensing"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="49dc89e5-b91c-4b58-b6d9-6ccc6fcb7d1c" name="lineItemID"><con:configuration><path>pharmacyReviewAndDispensingResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f0c3e118-0f89-4b96-87f8-9c9f5d27e40e" name="requiresPharmacyReview"><con:configuration><path>pharmacyReviewAndDispensingResponse[1].requiresPharmacyReview</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="503209b1-6281-44da-bd2b-26768874af56" name="requiresPharmacyDispensing"><con:configuration><path>pharmacyReviewAndDispensingResponse[1].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-36190" id="87e8575b-c3ab-454b-a3cc-93db9be0434c"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL" methodName="DeterminePharmacyReviewAndDispensing" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-36190" id="19932dd2-d0ee-416a-9424-22c6c1f59735" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "B4208",
            "itemNumber": "SRGHT123",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "",
            "itemNumber": "",
            "lineItemID": "L002"
        }
    ],
    "shipToAddress": {
        "state": "88"
    }
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePharmacyReviewAndDispensing/DeterminePharmacyReviewAndDispensing/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1ce80156-68ab-438d-b75d-8aa04214ec7f" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c2654caf-8775-4e85-92f8-98702c292cd2" name="lineItemID"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2d21b835-627d-4d30-bb11-b9152b5cdc01" name="requiresPharmacyReview"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyReview</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6b549ce8-eac7-4a2b-be81-4cb6a176cad4" name="requiresPharmacyDispensing"><con:configuration><path>pharmacyReviewAndDispensingResponse[0].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c7af73b8-0cd1-461a-b798-c3fc9d86ae0c" name="lineItemID"><con:configuration><path>pharmacyReviewAndDispensingResponse[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ee8a0737-b30c-4dbf-b845-9b27e5eadf19" name="requiresPharmacyReview"><con:configuration><path>pharmacyReviewAndDispensingResponse[1].requiresPharmacyReview</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="24fda0bb-c147-46b7-b6ea-bbb711396ce2" name="requiresPharmacyDispensing"><con:configuration><path>pharmacyReviewAndDispensingResponse[1].requiresPharmacyDispensing</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="5bb9423c-9780-4e04-b889-e2d3a4bcf9a9" name="DetermineMaxSupplyPeriodOverride"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="962d27ad-b21c-419c-9acf-48c9ca2b9365" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineMaxSupplyPeriodOverride" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="JSON Request" id="25cd294d-40da-4088-b22f-7135d4090a2e"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineMaxSupplyPeriodOverride/DetermineMaxSupplyPeriodOverride/WADL" methodName="DetermineMaxSupplyPeriodOverride" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="9b4d9470-c5c8-4191-9ab3-79df023e9fb4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "itemNumber": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "43EDF2",
                    "planName": ""
                }
            ]
        },
        {
            "itemNumber": "",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "43EDG2",
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="DetermineMaxSupplyPeriodOverride-singleLineItem" id="49ae46e4-3abf-4799-a0b3-c19861a90d1d"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineMaxSupplyPeriodOverride/MaxSupplyPeriodOverride_singleLineItem-Input.xls"
def outputfile = projectDir + "/DetermineMaxSupplyPeriodOverride/MaxSupplyPeriodOverride_singleLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"itemNumber",sheet1);
addCell(2,0,"maxSupplyPeriod",sheet1);
addCell(3,0,"maxSupplyPeriodUOM",sheet1);
addCell(4,0,"id",sheet1);
addCell(5,0,"planName",sheet1);
addCell(6,0,"PASS/FAIL",sheet1);
addCell(7,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                //  Input for Line Item ID
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                      //Input for productID
                                requestTemplet.content.lineItems[0].itemNumber = sh.getCell(2,i).getContents()                                                             
                                 // Input for Plan
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(3,i).getContents()
                                  // Input for ID
                                requestTemplet.content.lineItems[0].payers[0].id =sh.getCell(4,i).getContents()

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json                                 
                        addCell(0,i,json.lineItems[0].lineItemID,sheet1);                                   
                          // get PayerID from response json                                   
                        addCell(1,i,json.lineItems[0].itemNumber,sheet1);   
                          // get contactMethod from response json                           
                         addCell(2,i,json.lineItems[0].maxSupplyPeriod.toString(),sheet1);  
                         // get groupNumber from response json                               
                        addCell(3,i,json.lineItems[0].maxSupplyPeriodUOM.toString(),sheet1);
                          // get policyNumber from response json         
                        addCell(4,i,json.lineItems[0].payers[0].id,sheet1);
                          // get payerType from response json         
                        addCell(5,i,json.lineItems[0].payers[0].planName,sheet1);
                           
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(5,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"lineItems[0].lineItemID","lineItemID")

                          itemNumber = sh.getCell(6,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,itemNumber,"lineItems[0].itemNumber","itemNumber")

                         maxSupplyPeriod = sh.getCell(7,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,maxSupplyPeriod,"lineItems[0].maxSupplyPeriod","maxSupplyPeriod")

                         maxSupplyPeriodUOM = sh.getCell(8,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,maxSupplyPeriodUOM,"lineItems[0].maxSupplyPeriodUOM","maxSupplyPeriodUOM")

                         id = sh.getCell(9,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,id,"lineItems[0].payers[0].id","id")

                          planName = sh.getCell(10,i).getContents()
                         addAssertionJsonPathMatch(testStepForAssertion,planName,"lineItems[0].payers[0].planName","planName")
                            
                     
                            //dynamic asserstion :End

                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(6,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(7,i,e.message,sheet1);

                                                } 


                                   }

 

                                }

 
                                else{

                                   addCell(6,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="groovy" name="DetermineMaxSupplyPeriodOverride-multiLineItem" id="2dfe6c61-21ae-46e7-804a-5c7b76283196"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineMaxSupplyPeriodOverride/MaxSupplyPeriodOverride_multiLineItem-Input.xls"
def outputfile = projectDir + "/DetermineMaxSupplyPeriodOverride/MaxSupplyPeriodOverride_multiLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"itemNumber",sheet1);
addCell(2,0,"maxSupplyPeriod",sheet1);
addCell(3,0,"maxSupplyPeriodUOM",sheet1);
addCell(4,0,"id",sheet1);
addCell(5,0,"planName",sheet1);
addCell(6,0,"lineItemID1",sheet1);
addCell(7,0,"itemNumber1",sheet1);
addCell(8,0,"maxSupplyPeriod1",sheet1);
addCell(9,0,"maxSupplyPeriodUOM1",sheet1);
addCell(10,0,"id1",sheet1);
addCell(11,0,"planName1",sheet1);
addCell(12,0,"PASS/FAIL",sheet1);
addCell(13,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                //  Input for Line Item ID
                              
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                      //Input for productID
                                requestTemplet.content.lineItems[0].itemNumber = sh.getCell(2,i).getContents()                                                             
                                 // Input for Plan
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(3,i).getContents()
                                  // Input for ID
                                requestTemplet.content.lineItems[0].payers[0].id = sh.getCell(4,i).getContents()

                                //  Input for Line Item ID
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(5,i).getContents()
                                    //Input for productID
                                requestTemplet.content.lineItems[1].itemNumber = sh.getCell(6,i).getContents()                                                             
                                 // Input for Plan
                                requestTemplet.content.lineItems[1].payers[0].planName = sh.getCell(7,i).getContents()
                                  // Input for ID
                                requestTemplet.content.lineItems[1].payers[0].id = sh.getCell(8,i).getContents()

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json                                 
                        addCell(0,i,json.lineItems[0].lineItemID,sheet1);                                   
                          // get PayerID from response json                                   
                        addCell(1,i,json.lineItems[0].itemNumber,sheet1);   
                          // get contactMethod from response json                           
                         addCell(2,i,json.lineItems[0].maxSupplyPeriod.toString(),sheet1);  
                         // get groupNumber from response json                               
                        addCell(3,i,json.lineItems[0].maxSupplyPeriodUOM.toString(),sheet1);
                          // get policyNumber from response json         
                        addCell(4,i,json.lineItems[0].payers[0].id,sheet1);
                          // get payerType from response json         
                        addCell(5,i,json.lineItems[0].payers[0].planName,sheet1);

                        addCell(6,i,json.lineItems[1].lineItemID,sheet1);                                   
                          // get PayerID from response json                                   
                        addCell(7,i,json.lineItems[1].itemNumber,sheet1);   
                          // get contactMethod from response json                           
                         addCell(8,i,json.lineItems[1].maxSupplyPeriod.toString(),sheet1);  
                         // get groupNumber from response json                               
                        addCell(9,i,json.lineItems[1].maxSupplyPeriodUOM.toString(),sheet1);
                          // get policyNumber from response json         
                        addCell(10,i,json.lineItems[1].payers[0].id,sheet1);
                          // get payerType from response json         
                        addCell(11,i,json.lineItems[1].payers[0].planName,sheet1);
                           
                           
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(9,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"lineItems[0].lineItemID","lineItemID")

                          itemNumber = sh.getCell(10,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,itemNumber,"lineItems[0].itemNumber","itemNumber")

                         maxSupplyPeriod = sh.getCell(11,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,maxSupplyPeriod,"lineItems[0].maxSupplyPeriod","maxSupplyPeriod")

                         maxSupplyPeriodUOM = sh.getCell(12,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,maxSupplyPeriodUOM,"lineItems[0].maxSupplyPeriodUOM","maxSupplyPeriodUOM")

                         id = sh.getCell(13,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,id,"lineItems[0].payers[0].id","id")

                          planName = sh.getCell(14,i).getContents()
                         addAssertionJsonPathMatch(testStepForAssertion,planName,"lineItems[0].payers[0].planName","planName")

                         lineItemID1 = sh.getCell(15,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"lineItems[1].lineItemID","lineItemID")

                          itemNumber1 = sh.getCell(16,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,itemNumber1,"lineItems[1].itemNumber","itemNumber")

                         maxSupplyPeriod1 = sh.getCell(17,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,maxSupplyPeriod1,"lineItems[1].maxSupplyPeriod","maxSupplyPeriod")

                         maxSupplyPeriodUOM1 = sh.getCell(18,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,maxSupplyPeriodUOM1,"lineItems[1].maxSupplyPeriodUOM","maxSupplyPeriodUOM1")

                         id1 = sh.getCell(19,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,id1,"lineItems[1].payers[0].id","id")

                          planName1 = sh.getCell(20,i).getContents()
                         addAssertionJsonPathMatch(testStepForAssertion,planName1,"lineItems[1].payers[0].planName","planName")
                            
                     
                            
                     
                            //dynamic asserstion :End

                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(12,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(13,i,e.message,sheet1);

                                                } 


                                   }

 

                                }

 
                                else{

                                   addCell(13,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42781" id="5b96b413-01b7-48dc-bb8e-faf39c089427"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineMaxSupplyPeriodOverride/DetermineMaxSupplyPeriodOverride/WADL" methodName="DetermineMaxSupplyPeriodOverride" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42781" id="9b4d9470-c5c8-4191-9ab3-79df023e9fb4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "itemNumber": "MNMMT7725NAE",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA01",
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineMaxSupplyPeriodOverride/DetermineMaxSupplyPeriodOverride/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6188b547-d963-464d-9cf4-3b0277ac6e28" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ac01fa94-47d8-4144-b5a0-4bab527012a0" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="43fbe972-d54d-4f44-9eb4-ff87b72419a4" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content>MNMMT7725NAE</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="92e2884f-de13-4294-a0ff-a0d9bac11924" name="maxSupplyPeriod"><con:configuration><path>lineItems[0].maxSupplyPeriod</path><content>12</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e1cbff8a-f49f-434a-94ff-653fb7c2bd0d" name="maxSupplyPeriodUOM"><con:configuration><path>lineItems[0].maxSupplyPeriodUOM</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c7881d18-ade7-472a-a53c-0b83c0e12327" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA01</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5712dd70-e19b-48bb-9077-1f8d41e89c4f" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42782" id="2a444d48-27ee-4f72-9df8-b2350b810d5b"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineMaxSupplyPeriodOverride/DetermineMaxSupplyPeriodOverride/WADL" methodName="DetermineMaxSupplyPeriodOverride" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42782" id="9b4d9470-c5c8-4191-9ab3-79df023e9fb4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "itemNumber": "EDSTTGF001BB",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA02",
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineMaxSupplyPeriodOverride/DetermineMaxSupplyPeriodOverride/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0898fec7-be2d-4a39-a7f1-87d5acca8390" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b457777d-1238-4f8c-b67e-fbcb63a75ca3" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6631f171-6b43-4ce6-951a-eb9b88c10dbe" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content>EDSTTGF001BB</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1b11d8b5-7292-4baa-9a1b-4b489c6f5fa5" name="maxSupplyPeriod"><con:configuration><path>lineItems[0].maxSupplyPeriod</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b457afbc-3434-4e21-8162-50ca70d3193a" name="maxSupplyPeriodUOM"><con:configuration><path>lineItems[0].maxSupplyPeriodUOM</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="db50a1dc-6877-429c-9103-c7016af16109" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA02</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="21725961-fc9f-4188-b66b-e8ee7d7781f8" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42783" id="d4632718-0047-45d3-bf89-546b827b4361"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineMaxSupplyPeriodOverride/DetermineMaxSupplyPeriodOverride/WADL" methodName="DetermineMaxSupplyPeriodOverride" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42783" id="9b4d9470-c5c8-4191-9ab3-79df023e9fb4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "itemNumber": "DDSTTMC001MEDIM1",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA03",
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineMaxSupplyPeriodOverride/DetermineMaxSupplyPeriodOverride/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="20efcea3-6057-4fea-bf7b-1a885a4f54a1" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="29dbab53-fac6-445e-834d-7c5d54d58fea" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8f6c7649-b7b1-4782-a283-0e642dd80569" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content>DDSTTMC001MEDIM1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5df5a93d-ab0d-449c-8fdb-944e38915938" name="maxSupplyPeriod"><con:configuration><path>lineItems[0].maxSupplyPeriod</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aa8487b9-ef72-4fe3-8090-3c7f5a133a7a" name="maxSupplyPeriodUOM"><con:configuration><path>lineItems[0].maxSupplyPeriodUOM</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f90a218-5926-492d-a207-70cf13edd71d" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA03</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="95a314e6-11c2-4661-8aa7-cc137ed9493d" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42784" id="97ae628c-b8ca-4584-8395-553f52bce419"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineMaxSupplyPeriodOverride/DetermineMaxSupplyPeriodOverride/WADL" methodName="DetermineMaxSupplyPeriodOverride" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42784" id="9b4d9470-c5c8-4191-9ab3-79df023e9fb4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "itemNumber": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA04",
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineMaxSupplyPeriodOverride/DetermineMaxSupplyPeriodOverride/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6daad721-25c5-4335-9b41-93336955f91c" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b8e61174-235f-436e-81c7-a8fa66c11cf8" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="335c072f-363b-41de-98db-a35ee9f11f80" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bfac62d6-7f29-4d9a-8a0c-f654090e44b2" name="maxSupplyPeriod"><con:configuration><path>lineItems[0].maxSupplyPeriod</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e3b16f41-f21d-464a-a8db-c553d2d9d3ec" name="maxSupplyPeriodUOM"><con:configuration><path>lineItems[0].maxSupplyPeriodUOM</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="94352913-8855-4c32-9538-1b8f4cb5af7c" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA04</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1a63cd30-68dd-4925-b10d-ac9b355dad80" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42785" id="fabe6488-b7ec-4ae0-82a4-6186be659bda"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineMaxSupplyPeriodOverride/DetermineMaxSupplyPeriodOverride/WADL" methodName="DetermineMaxSupplyPeriodOverride" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42785" id="9b4d9470-c5c8-4191-9ab3-79df023e9fb4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "itemNumber": "EDSTTGL003",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA05",
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineMaxSupplyPeriodOverride/DetermineMaxSupplyPeriodOverride/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0604d066-b6ef-4206-b0ad-397f4e95834c" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f1e0334d-c656-43ef-8dc1-8840a87266a5" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a9bb93a7-00e4-47ea-8cb1-5de3c7f3018a" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content>EDSTTGL003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e965bf26-97cb-4055-8fd3-9e540718c013" name="maxSupplyPeriod"><con:configuration><path>lineItems[0].maxSupplyPeriod</path><content>6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d558fd7-5b13-4bcf-b092-5b35268856ae" name="maxSupplyPeriodUOM"><con:configuration><path>lineItems[0].maxSupplyPeriodUOM</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c30b9eac-42bb-4767-9412-7bac2e4d8e94" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA05</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bb065de1-b904-47e9-9bf7-5d839ecd4a27" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42786" id="ab51e7c3-5f94-4864-a363-581dd4690ca0"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineMaxSupplyPeriodOverride/DetermineMaxSupplyPeriodOverride/WADL" methodName="DetermineMaxSupplyPeriodOverride" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42786" id="9b4d9470-c5c8-4191-9ab3-79df023e9fb4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "itemNumber": "DDSTTMC001MEDIM",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA06",
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineMaxSupplyPeriodOverride/DetermineMaxSupplyPeriodOverride/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fe6cc3be-2f4f-4fed-87ad-8abaaa486603" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fba3cf3c-4fbd-4e04-873a-f8f515e11920" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c9336011-a11d-470f-a06e-9dfa2ba2c453" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content>DDSTTMC001MEDIM</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="659c8182-e615-43d5-8979-af0f1a4b0573" name="maxSupplyPeriod"><con:configuration><path>lineItems[0].maxSupplyPeriod</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c00b99dd-fdee-48b8-be53-fe57af3ec762" name="maxSupplyPeriodUOM"><con:configuration><path>lineItems[0].maxSupplyPeriodUOM</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="37aa0d0b-b774-47f8-9c8c-0d7f94d6c1b5" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>PA06</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="24414026-8371-4350-b0da-5d6df753940f" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42787" id="84f8e3e7-6c47-4e77-952f-7cc4c7daeaa8"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineMaxSupplyPeriodOverride/DetermineMaxSupplyPeriodOverride/WADL" methodName="DetermineMaxSupplyPeriodOverride" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42787" id="9b4d9470-c5c8-4191-9ab3-79df023e9fb4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "itemNumber": "MNMMT7820LNAI",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "43EDF1",
                    "planName": ""
                }
            ]
        },
        {
            "itemNumber": "EDSTTRF001P",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "43EDG1",
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineMaxSupplyPeriodOverride/DetermineMaxSupplyPeriodOverride/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4302e7a6-05c7-462d-8875-0c4dc6d45aaa" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="447ce2d8-7cbb-4081-b736-e50f60f0ed15" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85e0df67-4347-4b9e-8b1b-547b604d3b7b" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content>MNMMT7820LNAI</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="230edcc7-1c7d-4b5c-9674-afbd54fc7a03" name="maxSupplyPeriod"><con:configuration><path>lineItems[0].maxSupplyPeriod</path><content>12</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c258492d-930b-4ce7-8784-0d380cdd02be" name="maxSupplyPeriodUOM"><con:configuration><path>lineItems[0].maxSupplyPeriodUOM</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3c69e4a6-3f40-4e3e-ace0-c83043c5d8bf" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>43EDF1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7f07e4ec-5029-4a37-865e-d7e1a56d25a4" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ac016d3a-5bc9-4478-94ba-e47ae15cb0c8" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="29f57982-73a5-4936-ac82-6a34ad47c342" name="itemNumber"><con:configuration><path>lineItems[1].itemNumber</path><content>EDSTTRF001P</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6ffbb1c1-03eb-43be-b858-8bf0ec4673c5" name="maxSupplyPeriod"><con:configuration><path>lineItems[1].maxSupplyPeriod</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="abf34085-a2d3-4ad5-b84c-ed79b71243a8" name="maxSupplyPeriodUOM1"><con:configuration><path>lineItems[1].maxSupplyPeriodUOM</path><content>M</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e49aec9d-a27b-417c-ab98-52dda574acf0" name="id"><con:configuration><path>lineItems[1].payers[0].id</path><content>43EDG1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e88e77f5-eeae-442b-8d98-fd926e6a4b8b" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42788" id="2daaff42-3ae7-41dd-9165-9a3e1c8dc36c"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineMaxSupplyPeriodOverride/DetermineMaxSupplyPeriodOverride/WADL" methodName="DetermineMaxSupplyPeriodOverride" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42788" id="9b4d9470-c5c8-4191-9ab3-79df023e9fb4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "itemNumber": "12MNMMT7725NA",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "43EDF2",
                    "planName": ""
                }
            ]
        },
        {
            "itemNumber": "13EDSTTOR001F",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "43EDG2",
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineMaxSupplyPeriodOverride/DetermineMaxSupplyPeriodOverride/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e87125dd-b63b-449f-a1d0-058e09a1f334" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9344d2ce-6064-4085-9a34-bf2c6b11eef9" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a48a71a9-9670-45f1-bb77-157c1a13b83f" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content>12MNMMT7725NA</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b3ab527b-db4d-483f-a93e-85abcee0967c" name="maxSupplyPeriod"><con:configuration><path>lineItems[0].maxSupplyPeriod</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3e7924c6-9ea7-41b1-a2a5-2741ad4fe79c" name="maxSupplyPeriodUOM"><con:configuration><path>lineItems[0].maxSupplyPeriodUOM</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2229593e-3430-45de-aba4-ba8762da02d3" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>43EDF2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04fb905f-3d6c-4482-b69f-68d7152b6c99" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2fdce813-3df7-4430-924b-0137b2079c0a" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="db6ccfec-b9a6-4ab6-9116-1cb9a7841c2d" name="itemNumber"><con:configuration><path>lineItems[1].itemNumber</path><content>13EDSTTOR001F</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5b1847d3-56cf-4e42-be99-dce621a425a2" name="maxSupplyPeriod"><con:configuration><path>lineItems[1].maxSupplyPeriod</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6ea3db9f-e157-4a26-a775-cb1a7caac486" name="maxSupplyPeriodUOM1"><con:configuration><path>lineItems[1].maxSupplyPeriodUOM</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="405be639-c918-4166-a07b-56c57ce6a03e" name="id"><con:configuration><path>lineItems[1].payers[0].id</path><content>43EDG2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe24c03-baa0-46bc-a1be-c838f9fd19c4" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42789" id="f0b9956f-5f28-4ee2-ba1e-b2c982e47684"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineMaxSupplyPeriodOverride/DetermineMaxSupplyPeriodOverride/WADL" methodName="DetermineMaxSupplyPeriodOverride" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42789" id="9b4d9470-c5c8-4191-9ab3-79df023e9fb4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "itemNumber": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "43EDF2",
                    "planName": ""
                }
            ]
        },
        {
            "itemNumber": "",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "43EDG2",
                    "planName": ""
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineMaxSupplyPeriodOverride/DetermineMaxSupplyPeriodOverride/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="5cf2efe6-62f0-43f1-af71-aa125c7505b4" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="53974770-a1d5-4448-bb48-688bc2dd0624" name="lineItemID"><con:configuration><path>lineItems[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6e761967-d4cf-4725-b79f-488aaa9316db" name="itemNumber"><con:configuration><path>lineItems[0].itemNumber</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1e816025-69f8-480f-a4ed-0a9d11bda7d5" name="maxSupplyPeriod"><con:configuration><path>lineItems[0].maxSupplyPeriod</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7d6c6bbf-9d80-4287-9f1f-2bac6aef1cd3" name="maxSupplyPeriodUOM"><con:configuration><path>lineItems[0].maxSupplyPeriodUOM</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="53449946-9226-4c9d-b8c6-b6ecd1ee8564" name="id"><con:configuration><path>lineItems[0].payers[0].id</path><content>43EDF2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fa5165c6-ad79-4943-a2d9-0f2739d1ff14" name="planName"><con:configuration><path>lineItems[0].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9a542018-ea46-4c9f-944b-0eaf38f541b9" name="lineItemID"><con:configuration><path>lineItems[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="815dc982-ab98-4c81-a0aa-1eec50565169" name="itemNumber"><con:configuration><path>lineItems[1].itemNumber</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0f0435b7-e937-4ceb-8bc8-b5026a5b6eef" name="maxSupplyPeriod"><con:configuration><path>lineItems[1].maxSupplyPeriod</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b8d63051-d3b6-40ec-92fb-a960b55e34e9" name="maxSupplyPeriodUOM1"><con:configuration><path>lineItems[1].maxSupplyPeriodUOM</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aa32f5de-c45a-4b72-8bd4-00b9121bcfbc" name="id"><con:configuration><path>lineItems[1].payers[0].id</path><content>43EDG2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="af8b74a7-ef51-4aa4-9c84-03db74f456d2" name="planName"><con:configuration><path>lineItems[1].payers[0].planName</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="ebc9df25-1b32-4558-b6f4-47fcde24b63c" name="DeterminePricingModifiers"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="261fa8ba-7196-4b4d-84b8-3c8b5a010510" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeterminePricingModifiers" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="JSON Request_SingleLineItem" id="c87f6dae-d882-4430-978b-7ead26486352"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL" methodName="DeterminePricingModifiers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request_SingleLineItem" id="33305737-ae27-4eec-a824-479acf5066a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4211",
            "itemNumber": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "2494"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request_MultiLineItem" id="90af2306-6e22-474e-bdfb-c218ac05db0b"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL" methodName="DeterminePricingModifiers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request_MultiLineItem" id="9cb69abc-717e-42de-b6d1-edba96a381c4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "INVALID",
            "itemNumber": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA012",
                    "planName": "INVALID"
                }
            ]
        },
        {
            "hcpcsCode": "null",
            "itemNumber": "null",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PA013",
                    "planName": "null"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request_MultiPayers" id="0b3af81f-b18b-4de7-9a0d-19a9104f546f"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL" methodName="DeterminePricingModifiers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request_MultiPayers" id="cfb879b9-22d7-4a84-bb71-5338a4fefd24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "K0554",
            "itemNumber": "EDSTKOM001",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA008",
                    "planName": "INVALID"
                },
                {
                    "id": "PA009",
                    "planName": "5003"
                }
            ]
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="DeterminePricingModifiers_SingleLineItem" id="25880ce0-25ac-486f-8e56-95d59513ca82"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DeterminePricingModifiers/PricingModifiers-SingleLineItem-Input.xls"
def outputfile = projectDir + "/DeterminePricingModifiers/PricingModifiers-SingleLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"payerID",sheet1);
addCell(2,0,"priceModifierNames",sheet1);
addCell(3,0,"PASS/FAIL",sheet1);
addCell(4,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                 //Input for Line Item ID                               
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for hcpcsCode  
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents() 
                                //Input for itemNumber
                                 requestTemplet.content.lineItems[0].itemNumber = sh.getCell(3,i).getContents()                                                          
                                                                                       
                                 // Input for Plan
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(4,i).getContents()
                                 // Input for ID
                                requestTemplet.content.lineItems[0].payers[0].id = sh.getCell(5,i).getContents()

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request_SingleLineItem');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request_SingleLineItem");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json                                 
                        addCell(0,i,json.pricingModifiers[0].lineItemID,sheet1);                                   
                          // get PayerID from response json                                   
                        addCell(1,i,json.pricingModifiers[0].payerID,sheet1);   
                          // get priceModifierNames from response json                           
                        addCell(2,i,json.pricingModifiers[0].priceModifierNames.toString(),sheet1);  
                                                    
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(6,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"pricingModifiers[0].lineItemID","lineItemID")

                          payerID = sh.getCell(7,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID,"pricingModifiers[0].payerID","payerID")

                         priceModifierNames = sh.getCell(8,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,priceModifierNames,"pricingModifiers[0].priceModifierNames","priceModifierNames")
                                                  
                     
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(3,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(4,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(3,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="groovy" name="DeterminePricingModifiers_MultiLineItem" id="0015604e-e509-4fca-971a-725cfddc3a19"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DeterminePricingModifiers/PricingModifiers-MultiLineItem-Input.xls"
def outputfile = projectDir + "/DeterminePricingModifiers/PricingModifiers-MultiLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"payerID",sheet1);
addCell(2,0,"priceModifierNames",sheet1);
addCell(3,0,"lineItemID1",sheet1);
addCell(4,0,"payerID1",sheet1);
addCell(5,0,"priceModifierNames1",sheet1);
addCell(6,0,"PASS/FAIL",sheet1);
addCell(7,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                 //Input for Line ItemID1                              
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for hcpcsCode1
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents() 
                                //Input for itemNumber1
                                 requestTemplet.content.lineItems[0].itemNumber = sh.getCell(3,i).getContents()  
                                                                                         
                                 //Input for payer1                                                      
                                 // Input for Plan
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(4,i).getContents()
                                 // Input for ID
                                requestTemplet.content.lineItems[0].payers[0].id =sh.getCell(5,i).getContents()

                                //Input for Line ItemID2                             
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(6,i).getContents()
                                 //Input for hcpcsCode2  
                                requestTemplet.content.lineItems[1].hcpcsCode = sh.getCell(7,i).getContents() 
                                //Input for itemNumber2
                                 requestTemplet.content.lineItems[1].itemNumber = sh.getCell(8,i).getContents()

                                 //Input for payer1
                                   // Input for Plan
                                requestTemplet.content.lineItems[1].payers[0].planName = sh.getCell(9,i).getContents()
                                 // Input for ID
                                requestTemplet.content.lineItems[1].payers[0].id =sh.getCell(10,i).getContents()


                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request_MultiLineItem');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request_MultiLineItem");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json                                 
                        addCell(0,i,json.pricingModifiers[0].lineItemID,sheet1);                                   
                          // get PayerID from response json                                   
                        addCell(1,i,json.pricingModifiers[0].payerID,sheet1);   
                          // get priceModifierNames from response json                           
                        addCell(2,i,json.pricingModifiers[0].priceModifierNames.toString(),sheet1);
                        // get lineItemID from response json 
                        addCell(3,i,json.pricingModifiers[1].lineItemID,sheet1);                                   
                          // get PayerID from response json                                   
                        addCell(4,i,json.pricingModifiers[1].payerID,sheet1);   
                          // get priceModifierNames from response json                           
                        addCell(5,i,json.pricingModifiers[1].priceModifierNames.toString(),sheet1);  
                                                    
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(11,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"pricingModifiers[0].lineItemID","lineItemID")

                          payerID = sh.getCell(12,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID,"pricingModifiers[0].payerID","payerID")

                         priceModifierNames = sh.getCell(13,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,priceModifierNames,"pricingModifiers[0].priceModifierNames","priceModifierNames")
                                                  
                        lineItemID1 = sh.getCell(14,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"pricingModifiers[1].lineItemID","lineItemID")

                          payerID1 = sh.getCell(15,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID1,"pricingModifiers[1].payerID","payerID")

                         priceModifierNames1 = sh.getCell(16,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,priceModifierNames1,"pricingModifiers[1].priceModifierNames","priceModifierNames")
                                                  
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(6,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(7,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(6,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="groovy" name="DeterminePricingModifiers_MultiPayers" id="38fb8199-2bf5-47b7-a261-bdebce4668b7"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DeterminePricingModifiers/PricingModifiers-MultiPayers-Input.xls"
def outputfile = projectDir + "/DeterminePricingModifiers/PricingModifiers-MultiPayers-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"payerID",sheet1);
addCell(2,0,"priceModifierNames",sheet1);
addCell(3,0,"lineItemID1",sheet1);
addCell(4,0,"payerID1",sheet1);
addCell(5,0,"priceModifierNames1",sheet1);
addCell(6,0,"PASS/FAIL",sheet1);
addCell(7,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                 //Input for Line Item ID                               
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for hcpcsCode  
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents() 
                                //Input for itemNumber
                                 requestTemplet.content.lineItems[0].itemNumber = sh.getCell(3,i).getContents()
                                                                                           
                                 //Input for payer1                                                      
                                 // Input for Plan
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(4,i).getContents()
                                 // Input for ID
                                requestTemplet.content.lineItems[0].payers[0].id =sh.getCell(5,i).getContents()

                                 //Input for payer2
                                  // Input for Plan
                                requestTemplet.content.lineItems[0].payers[1].planName = sh.getCell(6,i).getContents()
                                 // Input for ID
                                requestTemplet.content.lineItems[0].payers[1].id =sh.getCell(7,i).getContents()


                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request_MultiPayers');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request_MultiPayers");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json                                 
                        addCell(0,i,json.pricingModifiers[0].lineItemID,sheet1);                                   
                          // get PayerID from response json                                   
                        addCell(1,i,json.pricingModifiers[0].payerID,sheet1);   
                          // get priceModifierNames from response json                           
                        addCell(2,i,json.pricingModifiers[0].priceModifierNames.toString(),sheet1);
                        // get lineItemID from response json 
                        addCell(3,i,json.pricingModifiers[1].lineItemID,sheet1);                                   
                          // get PayerID from response json                                   
                        addCell(4,i,json.pricingModifiers[1].payerID,sheet1);   
                          // get priceModifierNames from response json                           
                        addCell(5,i,json.pricingModifiers[1].priceModifierNames.toString(),sheet1);  
                                                    
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(8,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"pricingModifiers[0].lineItemID","lineItemID")

                          payerID = sh.getCell(9,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID,"pricingModifiers[0].payerID","payerID")

                         priceModifierNames = sh.getCell(10,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,priceModifierNames,"pricingModifiers[0].priceModifierNames","priceModifierNames")
                                                  
                        lineItemID1 = sh.getCell(11,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"pricingModifiers[1].lineItemID","lineItemID")

                          payerID1 = sh.getCell(12,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID1,"pricingModifiers[1].payerID","payerID")

                         priceModifierNames1 = sh.getCell(13,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,priceModifierNames1,"pricingModifiers[1].priceModifierNames","priceModifierNames")
                                                  
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(6,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(7,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(6,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42979" id="3e009aab-98a8-4720-869d-4eff11eb158e"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL" methodName="DeterminePricingModifiers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42979" id="33305737-ae27-4eec-a824-479acf5066a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4221",
            "itemNumber": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "2460"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3072048d-ec3a-4cb0-99cc-c02ed2b36a20" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="124177ac-1b22-470d-8d8b-86004044a07b" name="lineItemID"><con:configuration><path>pricingModifiers[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cbf1294c-186d-4327-8530-2178c14cc636" name="payerID"><con:configuration><path>pricingModifiers[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bc478479-fc4d-40cb-98eb-f1e72f3f903a" name="priceModifierNames"><con:configuration><path>pricingModifiers[0].priceModifierNames</path><content>["NU"]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42980" id="a890d675-8315-4961-9bfd-a6f1ca9e6a27"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL" methodName="DeterminePricingModifiers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42980" id="33305737-ae27-4eec-a824-479acf5066a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "K0554",
            "itemNumber": "EDSTKOM001",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "5002"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="30846a04-63ca-4095-876c-d566c3df4f7a" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="71cbc49a-360a-4490-ac0b-1600a2edd8ab" name="lineItemID"><con:configuration><path>pricingModifiers[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="82b2bb9f-c0c4-4c8b-8aa3-49d4fd4415c3" name="payerID"><con:configuration><path>pricingModifiers[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1ce5dd75-4daa-42f1-8a3b-28e9d06c0453" name="priceModifierNames"><con:configuration><path>pricingModifiers[0].priceModifierNames</path><content>["NU"]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42981" id="4d006b80-126f-4ac5-9991-f753e8349a35"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL" methodName="DeterminePricingModifiers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42981" id="33305737-ae27-4eec-a824-479acf5066a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "K0554",
            "itemNumber": "INVALID",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "5003"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ba3bae57-98d3-423d-bd85-138eff3dda6f" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4daaf1b7-6419-4ef3-9aa5-c4db0f58d27a" name="lineItemID"><con:configuration><path>pricingModifiers[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f920b1b4-5d23-456e-b653-44c0eccf9638" name="payerID"><con:configuration><path>pricingModifiers[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ec85a5ba-2acf-4596-ba23-bc577b738105" name="priceModifierNames"><con:configuration><path>pricingModifiers[0].priceModifierNames</path><content>["NU","KF"]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42982" id="0b8b0b88-e1d4-423a-9faa-220e4f371ff4"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL" methodName="DeterminePricingModifiers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42982" id="33305737-ae27-4eec-a824-479acf5066a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "INVALID",
            "itemNumber": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "2460"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e20dd9e4-ba66-42b1-b712-177932566425" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d619e467-4c5f-42bf-8f0b-21c50125e84c" name="lineItemID"><con:configuration><path>pricingModifiers[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0dd6f9e8-5aab-4093-a24e-b87c9a839aea" name="payerID"><con:configuration><path>pricingModifiers[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="741b19b2-26cd-4c2c-8e57-f7ad078341a9" name="priceModifierNames"><con:configuration><path>pricingModifiers[0].priceModifierNames</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42983" id="99b60428-40b0-456c-b5e9-03da511e40b8"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL" methodName="DeterminePricingModifiers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42983" id="33305737-ae27-4eec-a824-479acf5066a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "INVALID",
            "itemNumber": "INVALID",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "INVALID"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="541787b4-ae3b-49a6-b18b-2c00c2c1f0b6" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c3c933d7-449f-4915-be1c-76e59a032c42" name="lineItemID"><con:configuration><path>pricingModifiers[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="24afbfcf-f28d-4f34-82ed-d8aefaea8e13" name="payerID"><con:configuration><path>pricingModifiers[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f078fdb9-60b8-4bd7-9812-761984a78df1" name="priceModifierNames"><con:configuration><path>pricingModifiers[0].priceModifierNames</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42984" id="c23b55c1-5f42-4008-a96d-971c349db481"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL" methodName="DeterminePricingModifiers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42984" id="33305737-ae27-4eec-a824-479acf5066a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "E0747",
            "itemNumber": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "5001"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f771e75f-3b3f-430c-9ee4-58ed31651f72" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="872f0093-251d-4c9f-9c87-a9d8d9be71cc" name="lineItemID"><con:configuration><path>pricingModifiers[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e3c247f5-a1a3-4550-b5cc-a2242c737096" name="payerID"><con:configuration><path>pricingModifiers[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="37cf840e-8f5a-47b5-922a-d0b0b2c9397c" name="priceModifierNames"><con:configuration><path>pricingModifiers[0].priceModifierNames</path><content>["NU","KF"]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42985" id="dd181d75-515b-4229-952a-5d5fa8b661e3"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL" methodName="DeterminePricingModifiers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42985" id="33305737-ae27-4eec-a824-479acf5066a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4211",
            "itemNumber": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "2494"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="683c1888-2e50-4496-8804-10bf51cbfb56" name="Valid HTTP Status Codes_8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c9e31f16-4d5f-440c-8033-5bfdcdbdce32" name="lineItemID"><con:configuration><path>pricingModifiers[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0f6939a0-c303-40b2-ae1d-0366fda76b3e" name="payerID"><con:configuration><path>pricingModifiers[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="70b0a3e6-ff2e-439d-9793-2479e26e805e" name="priceModifierNames"><con:configuration><path>pricingModifiers[0].priceModifierNames</path><content>["U4"]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42988" id="fa9a8e22-f4d2-4467-b5ae-ed59724f4d6c"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL" methodName="DeterminePricingModifiers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42988" id="9cb69abc-717e-42de-b6d1-edba96a381c4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "K0554",
            "itemNumber": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA010",
                    "planName": "5001"
                }
            ]
        },
        {
            "hcpcsCode": "K0554",
            "itemNumber": "EDSTKOM001",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PA011",
                    "planName": "5004"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b696d955-35d6-442a-b5d5-0aa59e64d915" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8f6b6b48-8e8c-4fed-80b0-2d9db09f6fef" name="lineItemID"><con:configuration><path>pricingModifiers[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ff96ef70-4ab8-4d87-b183-4f1cd3c35526" name="payerID"><con:configuration><path>pricingModifiers[0].payerID</path><content>PA010</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0a5adc6d-a9a6-4d8d-84a2-01bddf0e9a40" name="priceModifierNames"><con:configuration><path>pricingModifiers[0].priceModifierNames</path><content>["NU","KF"]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="05dae9af-e437-4407-9ac5-44f007d93cc0" name="lineItemID"><con:configuration><path>pricingModifiers[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7580b482-7b49-4c5a-afc4-49714cf989fd" name="payerID"><con:configuration><path>pricingModifiers[1].payerID</path><content>PA011</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="06bd25ee-9510-4371-9386-5f40e1a1e475" name="priceModifierNames"><con:configuration><path>pricingModifiers[1].priceModifierNames</path><content>["NU"]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42989" id="006f1b66-85d3-481b-aec0-d233fdd6ac3b"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL" methodName="DeterminePricingModifiers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42989" id="9cb69abc-717e-42de-b6d1-edba96a381c4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "INVALID",
            "itemNumber": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA012",
                    "planName": "INVALID"
                }
            ]
        },
        {
            "hcpcsCode": "null",
            "itemNumber": "null",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PA013",
                    "planName": "null"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bce4b836-af31-4571-8073-b81eedc7728f" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="63b67dfd-2611-4828-a891-74d05f2d6051" name="lineItemID"><con:configuration><path>pricingModifiers[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a829ff26-2832-44a3-8339-bb7557772519" name="payerID"><con:configuration><path>pricingModifiers[0].payerID</path><content>PA012</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="497ac93c-0914-4f86-b7ed-bdea886d424b" name="priceModifierNames"><con:configuration><path>pricingModifiers[0].priceModifierNames</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="04022e1d-6ed2-4d1a-8018-1c1be06541ba" name="lineItemID"><con:configuration><path>pricingModifiers[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1c248143-a06b-4344-b3df-bf6a70e01b10" name="payerID"><con:configuration><path>pricingModifiers[1].payerID</path><content>PA013</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0ca2f53c-ea34-4940-b04d-17b1bc72d710" name="priceModifierNames"><con:configuration><path>pricingModifiers[1].priceModifierNames</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42986" id="27e8e140-38aa-4ab1-a330-b4660793ee6f"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL" methodName="DeterminePricingModifiers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42986" id="cfb879b9-22d7-4a84-bb71-5338a4fefd24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "E0760",
            "itemNumber": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA006",
                    "planName": "5001"
                },
                {
                    "id": "PA007",
                    "planName": "INVALID"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c96bc7c3-c81d-40d9-be2b-0e87d91a5979" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c5ea54c3-c22b-4f5c-99b6-7ecdc78c2968" name="lineItemID"><con:configuration><path>pricingModifiers[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bd96f314-3326-4cfe-b2cf-5b2d69b3be96" name="payerID"><con:configuration><path>pricingModifiers[0].payerID</path><content>PA006</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="68575962-72c4-4a80-b031-8549c2d3a3e1" name="priceModifierNames"><con:configuration><path>pricingModifiers[0].priceModifierNames</path><content>["NU","KF"]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7f3ca33e-cd02-4c80-9b14-28912f7a81ed" name="lineItemID"><con:configuration><path>pricingModifiers[1].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1cc77db1-46c6-4575-97f3-54ef70f0273f" name="payerID"><con:configuration><path>pricingModifiers[1].payerID</path><content>PA007</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4dd6032c-a2d1-493d-9dc6-767351115da5" name="priceModifierNames"><con:configuration><path>pricingModifiers[1].priceModifierNames</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42987" id="f8aadd6f-873d-463f-be7c-69263b36728e"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL" methodName="DeterminePricingModifiers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42987" id="cfb879b9-22d7-4a84-bb71-5338a4fefd24" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C1234",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "K0554",
            "itemNumber": "EDSTKOM001",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA008",
                    "planName": "INVALID"
                },
                {
                    "id": "PA009",
                    "planName": "5003"
                }
            ]
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DeterminePricingModifiers/DeterminePricingModifiers/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="042e39c5-188f-4705-88f7-e243c823a51e" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="87f85e4b-eca7-4907-90fd-7ed4b4083e91" name="lineItemID"><con:configuration><path>pricingModifiers[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="401f3448-e39c-4cfd-adde-521a0573e7fb" name="payerID"><con:configuration><path>pricingModifiers[0].payerID</path><content>PA008</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4f22688e-41c8-4034-9376-f9a2279833a9" name="priceModifierNames"><con:configuration><path>pricingModifiers[0].priceModifierNames</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0feac1be-60b9-4be9-a30b-834bafc3d6ff" name="lineItemID"><con:configuration><path>pricingModifiers[1].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9b30fec7-882f-4f5d-83a1-383db01b0d07" name="payerID"><con:configuration><path>pricingModifiers[1].payerID</path><content>PA009</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fe326034-512a-429e-963d-51ee43e6f1f2" name="priceModifierNames"><con:configuration><path>pricingModifiers[1].priceModifierNames</path><content>["NU"]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="816480cf-cb64-427a-90a1-aff6705ffa74" name="DetermineMultiEntityResponsibility"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="afbccc8a-c5dd-41c0-831f-53c89ead609f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineMultiEntityResponsibility" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DetermineMultiEntityResponsibility" id="aba39e0b-103f-4f57-95b7-f6279deb1a06"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineMultiEntityResponsibility/DetermineMultiEntityResponsibility_Input.xls"
def outputfile = projectDir + "/DetermineMultiEntityResponsibility/DetermineMultiEntityResponsibility_Output.xls"

//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file 
addCell(0,0,"Fee Schedule Flag (FEE_SCHEDULE)",sheet1);
addCell(1,0,"Claim Submission Flag(CLAIM_SUBMISSION)",sheet1);
addCell(2,0,"Prior Auth Rule(PA_RULE)",sheet1);
addCell(3,0,"Med Doc Physician Sig.(MED_DOC_PHY_SIGN)",sheet1);
addCell(4,0,"IV/Benefits(IV_BENEFITS)",sheet1);
addCell(5,0,"Medical Policy(MED_POLICY)",sheet1);
addCell(6,0,"Shipping Rules(SHIPPING_RULE)",sheet1);
addCell(7,0,"Payment Method(PAYMT_METHOD)",sheet1);
addCell(8,0,"Limits(LIMITS)",sheet1);
addCell(9,0,"Claims Logi (Modifiers, HL7, Date Span)(AR_HL7)",sheet1);
addCell(10,0,"PASS/FAIL",sheet1);
addCell(11,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
              
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplete = new JsonBuilder(slurper);
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(1,i)
					     def TestCaseName = varTestCaseName.getContents()
                             
				          //Input for plan
				          requestTemplete.content.plan =  sh.getCell(2,i).getContents().toString()
						  
				          //Input for entity
				          requestTemplete.content.entity =  sh.getCell(3,i).getContents()

				          //Input for entityType
				          requestTemplete.content.entityType =  sh.getCell(4,i).getContents()

				          //Input for medGroupAtRisk
				          requestTemplete.content.medGroupAtRisk =  sh.getCell(5,i).getContents().toString()

				          //Input for planContractStatus
				          requestTemplete.content.planContractStatus =  sh.getCell(6,i).getContents().toString()
                             
				                                  
                                //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSON Request");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                //def response = context.expand( '${TestRequest#Response}' ).toString()
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                               
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                                // extract the value of required elements fron the json response 		
                      		       // get Fee Schedule Flag(FEE_SCHEDULE) from response json           
                                addCell(0,i,json.responsibilityMatrix.feeSchedule.toString(),sheet1);    
								
							 // get Claim Submission Flag(CLAIM_SUBMISSION) from response json           
                                addCell(1,i,json.responsibilityMatrix.claimSubmission.toString(),sheet1);    
                                  // get Prior Auth Rule(PA_RULE) from response json           
                                addCell(2,i,json.responsibilityMatrix.priorAuthRule.toString(),sheet1);    
					 // get medDocPhysicianSig from response json           
                                addCell(3,i,json.responsibilityMatrix.medDocPhysicianSig.toString(),sheet1);  
                                // get ivBenefits from response json           
                                addCell(4,i,json.responsibilityMatrix.ivBenefits.toString(),sheet1); 
                                // get medicalPolicy from response json           
                                addCell(5,i,json.responsibilityMatrix.medicalPolicy.toString(),sheet1); 
                                // get shippingRules from response json           
                                addCell(6,i,json.responsibilityMatrix.shippingRules.toString(),sheet1); 
                                // get paymentMethod from response json           
                                addCell(7,i,json.responsibilityMatrix.paymentMethod.toString(),sheet1);
					      // get limits from response json           
                                addCell(8,i,json.responsibilityMatrix.limits.toString(),sheet1);
                                // get claimsLogic from response json           
                                addCell(9,i,json.responsibilityMatrix.claimsLogic.toString(),sheet1);



                                
			                //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
								//get the expected values
						//feeSchedule		
  						  feeSchedule = sh.getCell(7,i).getContents().toString()
  						  addAssertionJsonPathMatch(testStepForAssertion,feeSchedule,"responsibilityMatrix.feeSchedule","feeSchedule")
						//claimSubmission		
						  claimSubmission = sh.getCell(8,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,claimSubmission,"responsibilityMatrix.claimSubmission","claimSubmission")
                             
                              //priorAuthRule		
						  priorAuthRule = sh.getCell(9,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,priorAuthRule,"responsibilityMatrix.priorAuthRule","priorAuthRule")

                             //medDocPhysicianSig		
						  medDocPhysicianSig = sh.getCell(10,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,medDocPhysicianSig,"responsibilityMatrix.medDocPhysicianSig","medDocPhysicianSig")

                            //ivBenefits		
						  ivBenefits = sh.getCell(11,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,ivBenefits,"responsibilityMatrix.ivBenefits","ivBenefits")

                             //medicalPolicy		
						  medicalPolicy = sh.getCell(12,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,medicalPolicy,"responsibilityMatrix.medicalPolicy","medicalPolicy")

                            //shippingRules		
						  shippingRules = sh.getCell(13,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,shippingRules,"responsibilityMatrix.shippingRules","shippingRules")

                           //paymentMethod		
						  paymentMethod = sh.getCell(14,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,paymentMethod,"responsibilityMatrix.paymentMethod","paymentMethod")
                           
                           //limits		
						  limits = sh.getCell(15,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,limits,"responsibilityMatrix.limits","limits")


                          //claimsLogic		
						  claimsLogic = sh.getCell(16,i).getContents().toString()
                                addAssertionJsonPathMatch(testStepForAssertion,claimsLogic,"responsibilityMatrix.claimsLogic","claimsLogic")
                              
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(10,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(11,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(10,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request" id="e4a180d0-b9f1-4752-b2a0-8e7cc7da9b4d"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineMultiEntityResponsibility/DetermineMultiEntityResponsibility/WADL" methodName="DetermineMultiEntityResponsibility" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="89705616-5f22-4d95-a1b9-766b35e346e4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string ",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "entity": "ANY",
    "entityType": "BlueCard",
    "medGroupAtRisk": "",
    "plan": "0098",
    "planContractStatus": "false"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42916" id="6b870c8a-47c3-4312-91e9-e449d613748b"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineMultiEntityResponsibility/DetermineMultiEntityResponsibility/WADL" methodName="DetermineMultiEntityResponsibility" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42916" id="89705616-5f22-4d95-a1b9-766b35e346e4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string ",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "entity": "ANY",
    "entityType": "",
    "medGroupAtRisk": "",
    "plan": "ANY",
    "planContractStatus": ""
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineMultiEntityResponsibility/DetermineMultiEntityResponsibility/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c152faad-6018-418d-99dc-f1e41831d77d" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b594bd09-eead-4e83-9593-5ba1e7d847f1" name="feeSchedule"><con:configuration><path>responsibilityMatrix.feeSchedule</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b15be6e7-0143-443a-8122-6d40b0d35872" name="claimSubmission"><con:configuration><path>responsibilityMatrix.claimSubmission</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81b789c5-5441-4f09-9996-3e815f6f1c2a" name="priorAuthRule"><con:configuration><path>responsibilityMatrix.priorAuthRule</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1ce00437-2608-4a46-aa83-73de63d4b972" name="medDocPhysicianSig"><con:configuration><path>responsibilityMatrix.medDocPhysicianSig</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a96d13fd-49e2-456e-b019-face0a2d191f" name="ivBenefits"><con:configuration><path>responsibilityMatrix.ivBenefits</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="54552773-79f4-4b2f-8f44-31f6f1abc0ab" name="medicalPolicy"><con:configuration><path>responsibilityMatrix.medicalPolicy</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2326b0c-2ca9-4647-800d-9b368818b6d7" name="shippingRules"><con:configuration><path>responsibilityMatrix.shippingRules</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="de646841-4fd8-4e30-8ff1-a6ae65099027" name="paymentMethod"><con:configuration><path>responsibilityMatrix.paymentMethod</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4e76bfd8-532d-4a00-a7ba-f8d293e74ed8" name="limits"><con:configuration><path>responsibilityMatrix.limits</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="03a75758-3535-430f-b11a-0e1a830a8e65" name="claimsLogic"><con:configuration><path>responsibilityMatrix.claimsLogic</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42917" id="0d07b7f6-426b-4bc0-aeeb-ced2e48c8ec6"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineMultiEntityResponsibility/DetermineMultiEntityResponsibility/WADL" methodName="DetermineMultiEntityResponsibility" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42917" id="89705616-5f22-4d95-a1b9-766b35e346e4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string ",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "entity": "ANY",
    "entityType": "BlueCard",
    "medGroupAtRisk": "",
    "plan": "ANY",
    "planContractStatus": "true"
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineMultiEntityResponsibility/DetermineMultiEntityResponsibility/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="52fe128d-4cb2-4f30-a3c5-7aec66b22126" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2474847d-c2b5-4593-9f22-e5060ffa5c26" name="feeSchedule"><con:configuration><path>responsibilityMatrix.feeSchedule</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="29838a54-d43f-4c95-8d9c-19842b64f03a" name="claimSubmission"><con:configuration><path>responsibilityMatrix.claimSubmission</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="36586444-e3fe-43a1-b268-8936fb6672f0" name="priorAuthRule"><con:configuration><path>responsibilityMatrix.priorAuthRule</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="65a97cef-b5aa-4db2-aa1a-b7dcb9be6cde" name="medDocPhysicianSig"><con:configuration><path>responsibilityMatrix.medDocPhysicianSig</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="09495f2c-39ff-4a5b-99e4-09eb2a6b3b2c" name="ivBenefits"><con:configuration><path>responsibilityMatrix.ivBenefits</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c9bac113-45c4-4cc9-981b-565c5dd8af2e" name="medicalPolicy"><con:configuration><path>responsibilityMatrix.medicalPolicy</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d28a46c9-0d53-4fa6-b258-f0d485a78109" name="shippingRules"><con:configuration><path>responsibilityMatrix.shippingRules</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2e99870-6e32-4065-b149-5d2dd31bdbbd" name="paymentMethod"><con:configuration><path>responsibilityMatrix.paymentMethod</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="75ce39b3-cc8a-4d89-9bad-25b67d7685ad" name="limits"><con:configuration><path>responsibilityMatrix.limits</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="91affe61-7a23-4a14-a14d-ab86389862df" name="claimsLogic"><con:configuration><path>responsibilityMatrix.claimsLogic</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42918" id="788b0d11-6f59-48f9-ba54-b7e8396870b4"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineMultiEntityResponsibility/DetermineMultiEntityResponsibility/WADL" methodName="DetermineMultiEntityResponsibility" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42918" id="89705616-5f22-4d95-a1b9-766b35e346e4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string ",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "entity": "ANY",
    "entityType": "Medical Group",
    "medGroupAtRisk": "true",
    "plan": "ANY",
    "planContractStatus": ""
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineMultiEntityResponsibility/DetermineMultiEntityResponsibility/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1b548c90-00df-42b7-bd0a-764d91717c08" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="201e6f5c-69e3-4db4-951c-e8a3755ab7b9" name="feeSchedule"><con:configuration><path>responsibilityMatrix.feeSchedule</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="790911cc-7a72-4bc9-a140-193ee989f830" name="claimSubmission"><con:configuration><path>responsibilityMatrix.claimSubmission</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="37fdaafc-8b7a-43cb-9695-ef6f32c46e1e" name="priorAuthRule"><con:configuration><path>responsibilityMatrix.priorAuthRule</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="56500cef-595e-482f-ab91-30eeb9c74d95" name="medDocPhysicianSig"><con:configuration><path>responsibilityMatrix.medDocPhysicianSig</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ccabefa3-5f68-4b1a-94bf-e8e1d5d3a7fc" name="ivBenefits"><con:configuration><path>responsibilityMatrix.ivBenefits</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b975818e-05c8-4285-8857-d10d499ee837" name="medicalPolicy"><con:configuration><path>responsibilityMatrix.medicalPolicy</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="037f03ea-3f01-4712-b06b-40605607bd99" name="shippingRules"><con:configuration><path>responsibilityMatrix.shippingRules</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="60e0e80c-1161-4139-b37f-424d7d9e5a3d" name="paymentMethod"><con:configuration><path>responsibilityMatrix.paymentMethod</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="430ab98a-8493-4a93-a549-2b856d74bdce" name="limits"><con:configuration><path>responsibilityMatrix.limits</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7156b665-89a1-4c0c-b007-71a177a36438" name="claimsLogic"><con:configuration><path>responsibilityMatrix.claimsLogic</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42919" id="edbfb979-b5a0-4fe7-b192-fc7e1a3c48fd"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineMultiEntityResponsibility/DetermineMultiEntityResponsibility/WADL" methodName="DetermineMultiEntityResponsibility" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42919" id="89705616-5f22-4d95-a1b9-766b35e346e4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string ",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "entity": "ANY",
    "entityType": "Medical Group",
    "medGroupAtRisk": "false",
    "plan": "ANY",
    "planContractStatus": ""
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineMultiEntityResponsibility/DetermineMultiEntityResponsibility/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b28d21b3-d9db-426a-844e-b7ab7e185c43" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="61950965-0185-436c-a4b1-50c58e733d20" name="feeSchedule"><con:configuration><path>responsibilityMatrix.feeSchedule</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="78fa7e88-b719-4914-9123-72f2dcbe89bf" name="claimSubmission"><con:configuration><path>responsibilityMatrix.claimSubmission</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e9d97a11-0e81-423b-8c69-b3e74dbbecf8" name="priorAuthRule"><con:configuration><path>responsibilityMatrix.priorAuthRule</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dbba5392-05c3-4623-9562-6f5acc3a8e28" name="medDocPhysicianSig"><con:configuration><path>responsibilityMatrix.medDocPhysicianSig</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3970ab78-41c7-4517-96c5-e24518def889" name="ivBenefits"><con:configuration><path>responsibilityMatrix.ivBenefits</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="df5189bf-ae24-4692-a0a0-da3450ffaf98" name="medicalPolicy"><con:configuration><path>responsibilityMatrix.medicalPolicy</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4616d74e-6c68-4beb-8c85-ef22c1aa1073" name="shippingRules"><con:configuration><path>responsibilityMatrix.shippingRules</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5ac92db9-be8e-4655-aab4-2432d47a7e40" name="paymentMethod"><con:configuration><path>responsibilityMatrix.paymentMethod</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c8bf7306-f582-4c91-9e96-3253d14f2c30" name="limits"><con:configuration><path>responsibilityMatrix.limits</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d6cd6c58-b558-4132-81fe-9613157be9a3" name="claimsLogic"><con:configuration><path>responsibilityMatrix.claimsLogic</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42920" id="ae5f4341-0ebf-4ab5-99e3-2a4bc3155351"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineMultiEntityResponsibility/DetermineMultiEntityResponsibility/WADL" methodName="DetermineMultiEntityResponsibility" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42920" id="89705616-5f22-4d95-a1b9-766b35e346e4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string ",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "entity": "ANY",
    "entityType": "TPA",
    "medGroupAtRisk": "",
    "plan": "ANY",
    "planContractStatus": ""
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineMultiEntityResponsibility/DetermineMultiEntityResponsibility/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4da08e06-3db9-42d1-be03-031f2a360bf8" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="de510bfe-1c4d-41c2-abbe-789dd9e8e751" name="feeSchedule"><con:configuration><path>responsibilityMatrix.feeSchedule</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="271ba9f6-e781-4ccf-802d-6240d1702a2e" name="claimSubmission"><con:configuration><path>responsibilityMatrix.claimSubmission</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7a233217-7a4d-4860-b6c5-f67c99449cc9" name="priorAuthRule"><con:configuration><path>responsibilityMatrix.priorAuthRule</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4ba03d2a-b932-4f63-94a8-eb8fd58e7097" name="medDocPhysicianSig"><con:configuration><path>responsibilityMatrix.medDocPhysicianSig</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a862dc81-1241-4c8f-9669-6c42a875df1b" name="ivBenefits"><con:configuration><path>responsibilityMatrix.ivBenefits</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="813882e3-8d4d-477f-83db-05281fb1003d" name="medicalPolicy"><con:configuration><path>responsibilityMatrix.medicalPolicy</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="256c7cef-93b1-4d89-973c-b437c54dab94" name="shippingRules"><con:configuration><path>responsibilityMatrix.shippingRules</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dbddbcce-2be0-46b0-b0cb-e34edab5c59c" name="paymentMethod"><con:configuration><path>responsibilityMatrix.paymentMethod</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dbc96bfa-9f80-438d-9fab-6ef580ba8a9f" name="limits"><con:configuration><path>responsibilityMatrix.limits</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="de1a41d5-6b57-4749-825c-05c583051e61" name="claimsLogic"><con:configuration><path>responsibilityMatrix.claimsLogic</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42921" id="efd95b47-00d5-43e8-bcfc-8a68b2d6eaca"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineMultiEntityResponsibility/DetermineMultiEntityResponsibility/WADL" methodName="DetermineMultiEntityResponsibility" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42921" id="89705616-5f22-4d95-a1b9-766b35e346e4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string ",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "entity": "ANY",
    "entityType": "Network",
    "medGroupAtRisk": "",
    "plan": "ANY",
    "planContractStatus": ""
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineMultiEntityResponsibility/DetermineMultiEntityResponsibility/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c57e480e-a2b0-4d1a-856d-fb4abe07dc81" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="daa22dac-2a66-44ca-8ba0-fe9711818df5" name="feeSchedule"><con:configuration><path>responsibilityMatrix.feeSchedule</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e589422d-aa1c-4381-9ae0-4aa366860985" name="claimSubmission"><con:configuration><path>responsibilityMatrix.claimSubmission</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="721f26a4-0152-474e-ace9-5ec74b27a56a" name="priorAuthRule"><con:configuration><path>responsibilityMatrix.priorAuthRule</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="33c36c12-808b-436c-b1a8-342e1e8c8eca" name="medDocPhysicianSig"><con:configuration><path>responsibilityMatrix.medDocPhysicianSig</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0a5c2699-1f20-4a5b-9ac6-048ddbefea68" name="ivBenefits"><con:configuration><path>responsibilityMatrix.ivBenefits</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c8dbcb5-d941-4dd8-856c-bba539f46981" name="medicalPolicy"><con:configuration><path>responsibilityMatrix.medicalPolicy</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4c7be511-1c91-4881-9b3d-ec889e8243b1" name="shippingRules"><con:configuration><path>responsibilityMatrix.shippingRules</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7c17fc3e-e1e8-42ec-9f3d-0f949822df90" name="paymentMethod"><con:configuration><path>responsibilityMatrix.paymentMethod</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="808b9632-a3b1-479e-a509-d15b6141ce3d" name="limits"><con:configuration><path>responsibilityMatrix.limits</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d932a489-0aee-401d-86a5-4d955acbbe74" name="claimsLogic"><con:configuration><path>responsibilityMatrix.claimsLogic</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42922" id="72f46774-c7c3-4b0e-a4a5-16d3f079acf5"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineMultiEntityResponsibility/DetermineMultiEntityResponsibility/WADL" methodName="DetermineMultiEntityResponsibility" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42922" id="89705616-5f22-4d95-a1b9-766b35e346e4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string ",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "entity": "9997",
    "entityType": "Health Insurance",
    "medGroupAtRisk": "",
    "plan": "ANY",
    "planContractStatus": ""
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineMultiEntityResponsibility/DetermineMultiEntityResponsibility/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c9aa9981-be5f-4b84-ad36-078f5ffbb880" name="Valid HTTP Status Codes_8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a69c882e-1bf6-43cf-8fba-27a794a2469a" name="feeSchedule"><con:configuration><path>responsibilityMatrix.feeSchedule</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3226e7bc-7f5f-48f7-90b6-5349e4453fc7" name="claimSubmission"><con:configuration><path>responsibilityMatrix.claimSubmission</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="015632ed-441c-4bca-8f88-33bbea31614a" name="priorAuthRule"><con:configuration><path>responsibilityMatrix.priorAuthRule</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2080273c-e451-4f75-8ee7-3568a196979c" name="medDocPhysicianSig"><con:configuration><path>responsibilityMatrix.medDocPhysicianSig</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ddee7114-d5e1-405a-b1a7-7cb97db54c99" name="ivBenefits"><con:configuration><path>responsibilityMatrix.ivBenefits</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f1e3dcf9-b578-4749-ad03-1acdd96d82b3" name="medicalPolicy"><con:configuration><path>responsibilityMatrix.medicalPolicy</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0c95efe-3cd8-4902-854a-d6745eaa0ae6" name="shippingRules"><con:configuration><path>responsibilityMatrix.shippingRules</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="358d85a9-9b42-4189-9e2e-353b237fc712" name="paymentMethod"><con:configuration><path>responsibilityMatrix.paymentMethod</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2ce50a96-5dd1-4b68-8b77-6d2c90c40634" name="limits"><con:configuration><path>responsibilityMatrix.limits</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9c68d4a5-d320-4e48-9f20-860947186a9c" name="claimsLogic"><con:configuration><path>responsibilityMatrix.claimsLogic</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-42923" id="b0b06ed1-f6df-42c0-8a0c-a713cf947e87"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineMultiEntityResponsibility/DetermineMultiEntityResponsibility/WADL" methodName="DetermineMultiEntityResponsibility" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-42923" id="89705616-5f22-4d95-a1b9-766b35e346e4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string ",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "ABC",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "entity": "ANY",
    "entityType": "BlueCard",
    "medGroupAtRisk": "",
    "plan": "0098",
    "planContractStatus": "false"
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineMultiEntityResponsibility/DetermineMultiEntityResponsibility/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6e0d0b7f-ebee-4db5-a2f6-d334121ab114" name="Valid HTTP Status Codes_9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c8b72275-7a87-402b-b4d9-b800af8aceef" name="feeSchedule"><con:configuration><path>responsibilityMatrix.feeSchedule</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d1f85961-5bcd-4143-b234-4cc1408e5d9b" name="claimSubmission"><con:configuration><path>responsibilityMatrix.claimSubmission</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e3ad7393-678f-4604-aed8-8666c5001f1f" name="priorAuthRule"><con:configuration><path>responsibilityMatrix.priorAuthRule</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e434030-9eaf-4033-8256-4c451fcc9614" name="medDocPhysicianSig"><con:configuration><path>responsibilityMatrix.medDocPhysicianSig</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="abbc18d0-5629-4d6b-aedb-26e3254ef5fd" name="ivBenefits"><con:configuration><path>responsibilityMatrix.ivBenefits</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d51190b9-9104-4260-95c5-b92c55865726" name="medicalPolicy"><con:configuration><path>responsibilityMatrix.medicalPolicy</path><content>Plan</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7aa44f1b-8da2-426f-a56b-c68f4c3552cc" name="shippingRules"><con:configuration><path>responsibilityMatrix.shippingRules</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b92466fd-3fd8-4ece-8c5a-e3896f9f6011" name="paymentMethod"><con:configuration><path>responsibilityMatrix.paymentMethod</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b8bc8de8-2f06-47cc-a94c-8d0ab0ca7c6e" name="limits"><con:configuration><path>responsibilityMatrix.limits</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="92e25086-b6df-4f5e-b1b8-5a08d1a7c364" name="claimsLogic"><con:configuration><path>responsibilityMatrix.claimsLogic</path><content>Entity</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="46aaef9c-fda1-41f0-b680-68ab9372896f" name="DetermineDefaultBenefitMapping"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b40dec3b-7640-42db-bfae-2a5b8b343b0f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineDefaultBenefitMapping" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DetermineDefaultBenefitMapping-SingleLineItem" id="441e11aa-9d84-49b9-8163-4e6ba6d65212"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping-SingleLineItem-Input.xls"
//def inputfile =  projectDir + "/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping-SingleLineItem-Input-Exploratory.xls"
def outputfile = projectDir + "/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping-SingleLineItem-Output.xls"
//def outputfile = projectDir + "/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping-SingleLineItem-Output-Exploratory-SIT2.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"payerID",sheet1);
addCell(1,0,"lineItemID",sheet1);
addCell(2,0,"applyToAccountFlag",sheet1);
addCell(3,0,"applyToDeductableFlag",sheet1);
addCell(4,0,"coinsurancePercentage",sheet1);
addCell(5,0,"copayAmount",sheet1);
addCell(6,0,"copayLevel",sheet1);
addCell(7,0,"PASS/FAIL",sheet1);
addCell(8,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                 //Input for Line Item ID                                                             
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for hcpcsCode                                   
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents().toString()
                                //Input for manufacturer                                  
                                requestTemplet.content.lineItems[0].manufacturer = sh.getCell(3,i).getContents() 
                                //Input for productCategory                                  
                                requestTemplet.content.lineItems[0].productCategory = sh.getCell(4,i).getContents() 
                                //Input for productSubCategory1                                  
                                requestTemplet.content.lineItems[0].productSubCategory1 = sh.getCell(5,i).getContents() 
                                //Input for productSubCategory2                                  
                                requestTemplet.content.lineItems[0].productSubCategory2 = sh.getCell(6,i).getContents() 
                                //Input for productSubCategory3                                  
                                requestTemplet.content.lineItems[0].productSubCategory3 = sh.getCell(7,i).getContents() 
                                //Input for planName                                  
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(8,i).getContents()
                                //Input for id                                  
                                requestTemplet.content.lineItems[0].payers[0].id = sh.getCell(9,i).getContents()
                                //Input for groupID                                  
                                requestTemplet.content.lineItems[0].payers[0].groupID = sh.getCell(10,i).getContents()
                                //Input for prefix                                  
                                requestTemplet.content.lineItems[0].payers[0].prefix = sh.getCell(11,i).getContents()
                                //Input for codeICD10                                  
                                requestTemplet.content.lineItems[0].diagnosis[0].codeICD10 = sh.getCell(12,i).getContents()                                                                                    
                                                                                     
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get payerID from response json  
                        addCell(0,i,json.payerDefaultCoverages[0].payerID,sheet1);                                   
                          // get applyToAccountFlag from response json                               
                        addCell(1,i,json.payerDefaultCoverages[0].lineItemCoverage[0].lineItemID,sheet1);                                   
                          // get applyToAccountFlag from response json                                   
                        addCell(2,i,json.payerDefaultCoverages[0].applyToAccountFlag.toString(),sheet1); 
                        // get applyToDeductableFlag from response json                                 
                        addCell(3,i,json.payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag.toString(),sheet1); 
                        // get coinsurancePercentage from response json                                 
                        addCell(4,i,json.payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage.toString(),sheet1);  
                         // get copayAmount from response json  
                        addCell(5,i,json.payerDefaultCoverages[0].copayAmount.toString(),sheet1); 
                        // get copayLevel from response json                                   
                        addCell(6,i,json.payerDefaultCoverages[0].copayLevel.toString(),sheet1); 
                                                    
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          payerID = sh.getCell(13,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID,"payerDefaultCoverages[0].payerID","payerID")

                          lineItemID = sh.getCell(14,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"payerDefaultCoverages[0].lineItemCoverage[0].lineItemID","lineItemID")

                          applyToAccountFlag = sh.getCell(15,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,applyToAccountFlag,"payerDefaultCoverages[0].applyToAccountFlag","applyToAccountFlag")

                       applyToDeductableFlag = sh.getCell(16,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,applyToDeductableFlag,"payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag","applyToDeductableFlag")

                       coinsurancePercentage = sh.getCell(17,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,coinsurancePercentage,"payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage","coinsurancePercentage")

                       copayAmount = sh.getCell(18,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,copayAmount,"payerDefaultCoverages[0].copayAmount","copayAmount")

                       copayLevel = sh.getCell(19,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,copayLevel,"payerDefaultCoverages[0].copayLevel","copayLevel")




                       
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(7,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(8,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(7,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="groovy" name="DetermineDefaultBenefitMapping-MultiLineItem" id="ccc7b53b-2316-410c-bc7a-39ff541d472a"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping-MultiLineItem-Input.xls"
def outputfile = projectDir + "/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping-MultiLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"payerID",sheet1);
addCell(1,0,"lineItemID",sheet1);
addCell(2,0,"applyToAccountFlag",sheet1);
addCell(3,0,"applyToDeductableFlag",sheet1);
addCell(4,0,"coinsurancePercentage",sheet1);
addCell(5,0,"copayAmount",sheet1);
addCell(6,0,"copayLevel",sheet1);
addCell(7,0,"payerID1",sheet1);
addCell(8,0,"lineItemID1",sheet1);
addCell(9,0,"applyToAccountFlag1",sheet1);
addCell(10,0,"applyToDeductableFlag1",sheet1);
addCell(11,0,"coinsurancePercentage1",sheet1);
addCell(12,0,"copayAmount1",sheet1);
addCell(13,0,"copayLevel1",sheet1);
addCell(14,0,"PASS/FAIL",sheet1);
addCell(15,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                 //Input for Line Item ID 1                                                            
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for hcpcsCode                                   
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents().toString()
                                //Input for manufacturer                                  
                                requestTemplet.content.lineItems[0].manufacturer = sh.getCell(3,i).getContents() 
                                //Input for productCategory                                  
                                requestTemplet.content.lineItems[0].productCategory = sh.getCell(4,i).getContents() 
                                //Input for productSubCategory1                                  
                                requestTemplet.content.lineItems[0].productSubCategory1 = sh.getCell(5,i).getContents() 
                                //Input for productSubCategory2                                  
                                requestTemplet.content.lineItems[0].productSubCategory2 = sh.getCell(6,i).getContents() 
                                //Input for productSubCategory3                                  
                                requestTemplet.content.lineItems[0].productSubCategory3 = sh.getCell(7,i).getContents() 
                                //Input for planName                                  
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(8,i).getContents()
                                //Input for id                                  
                                requestTemplet.content.lineItems[0].payers[0].id = sh.getCell(9,i).getContents()
                                //Input for groupID                                  
                                requestTemplet.content.lineItems[0].payers[0].groupID = sh.getCell(10,i).getContents()
                                //Input for prefix                                  
                                requestTemplet.content.lineItems[0].payers[0].prefix = sh.getCell(11,i).getContents()
                                //Input for codeICD10                                  
                                requestTemplet.content.lineItems[0].diagnosis[0].codeICD10 = sh.getCell(12,i).getContents()  

                                //Input for Line Item ID 2                                                            
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(13,i).getContents()
                                 //Input for hcpcsCode                                   
                                requestTemplet.content.lineItems[1].hcpcsCode = sh.getCell(14,i).getContents().toString()
                                //Input for manufacturer                                  
                                requestTemplet.content.lineItems[1].manufacturer = sh.getCell(15,i).getContents() 
                                //Input for productCategory                                  
                                requestTemplet.content.lineItems[1].productCategory = sh.getCell(16,i).getContents() 
                                //Input for productSubCategory1                                  
                                requestTemplet.content.lineItems[1].productSubCategory1 = sh.getCell(17,i).getContents() 
                                //Input for productSubCategory2                                  
                                requestTemplet.content.lineItems[1].productSubCategory2 = sh.getCell(18,i).getContents() 
                                //Input for productSubCategory3                                  
                                requestTemplet.content.lineItems[1].productSubCategory3 = sh.getCell(19,i).getContents() 
                                //Input for planName                                  
                                requestTemplet.content.lineItems[1].payers[0].planName = sh.getCell(20,i).getContents()
                                //Input for id                                  
                                requestTemplet.content.lineItems[1].payers[0].id = sh.getCell(21,i).getContents()
                                //Input for groupID                                  
                                requestTemplet.content.lineItems[1].payers[0].groupID = sh.getCell(22,i).getContents()
                                //Input for prefix                                  
                                requestTemplet.content.lineItems[1].payers[0].prefix = sh.getCell(23,i).getContents()
                                //Input for codeICD10                                  
                                requestTemplet.content.lineItems[1].diagnosis[0].codeICD10 = sh.getCell(24,i).getContents()                                                         
                                                       
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get payerID from response json  
                        addCell(0,i,json.payerDefaultCoverages[0].payerID,sheet1);                                   
                          // get applyToAccountFlag from response json                               
                        addCell(1,i,json.payerDefaultCoverages[0].lineItemCoverage[0].lineItemID,sheet1);                                   
                          // get applyToAccountFlag from response json                                   
                        addCell(2,i,json.payerDefaultCoverages[0].applyToAccountFlag.toString(),sheet1); 
                        // get applyToDeductableFlag from response json                                 
                        addCell(3,i,json.payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag.toString(),sheet1); 
                        // get coinsurancePercentage from response json                                 
                        addCell(4,i,json.payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage.toString(),sheet1);  
                         // get copayAmount from response json                                   
                        addCell(5,i,json.payerDefaultCoverages[0].copayAmount.toString(),sheet1); 
                        // get copayLevel from response json                                   
                        addCell(6,i,json.payerDefaultCoverages[0].copayLevel.toString(),sheet1);
                         // get payerID from response json  
                        addCell(7,i,json.payerDefaultCoverages[0].payerID,sheet1);                                   
                          // get applyToAccountFlag from response json                               
                        addCell(8,i,json.payerDefaultCoverages[0].lineItemCoverage[0].lineItemID,sheet1);                                   
                          // get applyToAccountFlag from response json                                   
                        addCell(9,i,json.payerDefaultCoverages[0].applyToAccountFlag.toString(),sheet1); 
                        // get applyToDeductableFlag from response json                                 
                        addCell(10,i,json.payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag.toString(),sheet1); 
                        // get coinsurancePercentage from response json                                 
                        addCell(11,i,json.payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage.toString(),sheet1);  
                         // get copayAmount from response json                                   
                        addCell(12,i,json.payerDefaultCoverages[0].copayAmount.toString(),sheet1); 
                        // get copayLevel from response json                                   
                        addCell(13,i,json.payerDefaultCoverages[0].copayLevel.toString(),sheet1); 
                                                    
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          payerID = sh.getCell(25,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID,"payerDefaultCoverages[0].payerID","payerID")

                          lineItemID = sh.getCell(26,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"payerDefaultCoverages[0].lineItemCoverage[0].lineItemID","lineItemID")

                          applyToAccountFlag = sh.getCell(27,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,applyToAccountFlag,"payerDefaultCoverages[0].applyToAccountFlag","applyToAccountFlag")

                       applyToDeductableFlag = sh.getCell(28,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,applyToDeductableFlag,"payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag","applyToDeductableFlag")

                       coinsurancePercentage = sh.getCell(29,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,coinsurancePercentage,"payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage","coinsurancePercentage")

                       copayAmount = sh.getCell(30,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,copayAmount,"payerDefaultCoverages[0].copayAmount","copayAmount")

                       copayLevel = sh.getCell(31,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,copayLevel,"payerDefaultCoverages[0].copayLevel","copayLevel")

                       payerID1 = sh.getCell(32,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID1,"payerDefaultCoverages[1].payerID","payerID")

                        lineItemID1 = sh.getCell(33,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"payerDefaultCoverages[1].lineItemCoverage[0].lineItemID","lineItemID")

                        applyToAccountFlag1 = sh.getCell(34,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,applyToAccountFlag1,"payerDefaultCoverages[1].applyToAccountFlag","applyToAccountFlag")

                       applyToDeductableFlag1 = sh.getCell(35,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,applyToDeductableFlag1,"payerDefaultCoverages[1].lineItemCoverage[0].applyToDeductableFlag","applyToDeductableFlag")

                       coinsurancePercentage1 = sh.getCell(36,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,coinsurancePercentage1,"payerDefaultCoverages[1].lineItemCoverage[0].coinsurancePercentage","coinsurancePercentage")

                       copayAmount1 = sh.getCell(37,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,copayAmount1,"payerDefaultCoverages[1].copayAmount","copayAmount")

                       copayLevel1 = sh.getCell(38,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,copayLevel1,"payerDefaultCoverages[1].copayLevel","copayLevel")




                       
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(14,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(15,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(14,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request" id="8f5717b1-3d1a-4f6b-beac-5f39c6c8f5bc"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA019",
                    "name": "2402",
                    "planName": "9085",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Breast Pumps",
            "productSubCategory2": "",
            "productSubCategory3": ""
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L002",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PB019",
                    "name": "2402",
                    "planName": "0011",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Breast Pumps",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44209" id="dfad8b4d-bf72-4e41-8fb9-5e3debdc380f"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44209" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "182232",
                    "id": "PA001",
                    "name": "2402",
                    "planName": "0011",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d7712104-1435-4a8a-bf0e-0e63aab22f27" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a13b25b5-83bf-497d-83ca-e7ca0883dea7" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6eab2c7e-c6fb-4426-8cce-b253d01fe4a2" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1862e6f7-1c12-43b2-b969-dc7410e5c36c" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3e475aa5-532d-4422-a310-af4ca33cae5d" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6ebe1baf-2c3a-4966-a3bb-f4afbcb50753" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3c6626e5-35e0-455b-a15e-9b9ac5a560ff" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="24e633dd-b9e3-4c47-8a48-d5e9be1f7b6c" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44210" id="11cad617-b42c-4b36-9a60-2df73699bbc7"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44210" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "192232",
                    "id": "PA002",
                    "name": "2402",
                    "planName": "0011",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="195f082e-12dc-4cc6-afe4-8e4f46fdc7cd" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3aabb681-b9c8-48f5-adbd-b73e7c885483" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6f6fd5de-5846-488e-887a-1a986d654ae0" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d355aa8d-1c12-4426-852b-7a2037dc3f8b" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5460d82c-5e8a-4df6-9901-a82afc0c269a" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e6ee7153-3275-4e6f-b1f5-927c227d9d84" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="66d721d6-e460-4df4-b3f6-b9803f6108e5" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9aad9ae2-4ec2-4da3-a935-1807fcc9b1d9" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44211" id="2a05694b-9ad3-4b94-bc8f-abc738c2742b"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44211" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA003",
                    "name": "2402",
                    "planName": "0011",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "INVALID",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d12c5e15-06da-4f0b-86b0-d365d23f79ce" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6bf6ccb7-7985-48ba-a12a-2eb93427d7d6" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="118d9018-d99f-484a-8805-d1e1eceba17a" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e3be14d4-cc58-45a9-a13a-303417c81167" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="03b2fbd0-7e68-47cf-a586-387f4322c74c" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="032dfaaa-8112-4f83-bbf1-a0bec3ffa06d" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42bc05bd-43ca-47ac-ba84-6b2e3b3b5a0d" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="56fecaf3-eefe-43ec-8524-ee750732b552" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44212" id="085c47b3-4c6a-4533-8509-a09e891bc4fd"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44212" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "182232",
                    "id": "PA004",
                    "name": "2402",
                    "planName": "A549",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09c92966-7334-4efe-bab9-c18917ca93dd" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="59262500-9d9e-49c9-a615-55214e2d2624" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA004</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d639ac18-ba77-4ea5-96dc-f0686d8dc6c4" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c71fbe9c-7c19-4247-968e-77a3fc525b3b" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e1ea093d-af5d-4dda-87c3-3828cff31ed2" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1451462c-574e-4d7f-b5fa-5ab56c9d926c" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="87acd5bd-d27d-40d3-a4fa-2eb6351b48cd" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7bd6375d-303a-42ef-bd7b-6337721d50cf" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44213" id="2cc120db-ffb1-4d1a-9148-4f83916d2cec"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44213" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "905610",
                    "id": "PA005",
                    "name": "2402",
                    "planName": "0011",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Insulin Pump Supplies",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e9bbfe89-f0c6-418b-9966-a699107abc25" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b9292cdb-03f9-4675-a21d-ef11abf98830" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA005</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="46490d6f-57ca-418c-979b-c3ca5e1e4995" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="24ff2e76-74da-4eb4-81da-43ad9c3ce59f" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a71796f6-103d-429a-b2b9-aef52aca512c" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c76f0afb-6031-4b85-a71e-e92ac653185b" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="843e52ca-ee6d-42ed-8669-41d5deb61e9f" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d0c0161f-10bf-4f83-af92-cb4df16ce9ed" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44214" id="24342173-da9a-44e5-abdd-c7de207f8c23"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44214" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "905610",
                    "id": "PA006",
                    "name": "2402",
                    "planName": "0011",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "INVALID",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="319b60b0-61bd-4dc4-b734-8208658e04df" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="178aba6e-ff23-4ba7-af44-d5342742da74" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA006</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="99e020cc-2877-4c60-8ca2-3b452767ccf4" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dc93bf8e-9369-42bf-b547-3c9e8a1caa76" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8bf27fda-617d-4c4d-ab2f-dcb17b7f20ea" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="56d6cf8b-9baa-496d-8523-9bce9edcabff" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="92f25b35-d864-4509-ac85-3cea3ce1fb23" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce3f72a0-8132-46ae-a449-3ed4490afc05" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44215" id="50ac4dac-5059-4598-9b8f-8d85432896f9"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44215" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "915610",
                    "id": "PA007",
                    "name": "2402",
                    "planName": "0011",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Blood Glucose Test Strips",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c226ba9f-11d8-46de-a547-3f99356e7121" name="Valid HTTP Status Codes_8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="95418c70-ec3c-4412-a060-ca4a1460fc48" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA007</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="978d99f3-6984-4a16-9f3e-38bd919b132f" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="92e36f4e-9584-436d-972e-0cc76462cbca" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4b8a1483-9d40-4f1d-b05a-02f1798eb190" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="43466cd3-bd98-485d-8f04-5c0874a459c9" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="69277b5d-0a65-4011-aace-ee74bc7457c0" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d9e4103f-b774-42a6-8cef-bb63e3f3edce" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44216" id="14f3adcb-3799-43d0-a39e-f824d2368609"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44216" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "905610",
                    "id": "PA008",
                    "name": "2402",
                    "planName": "A549",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Lancing Devices",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c34079c2-45e7-46f0-9549-af5c741d5f1a" name="Valid HTTP Status Codes_9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2faadf9-877d-4816-aa44-6336246cfb55" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA008</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce95e06f-ce9a-4d5d-ab1d-39498580450e" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3825061b-7c31-401f-b949-0d154f9d5547" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="986599fb-c65a-453c-a90c-574c81eeac9a" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cc593ed6-9132-40ec-ba46-07337173a216" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="73f20a5b-56c8-4ad2-a55e-406a3aaab082" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="22db83ae-a547-462c-9cf7-db59b4ec498b" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44217" id="08c28948-2a9b-4505-b106-81d88b7d434b"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44217" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA016",
                    "name": "2402",
                    "planName": "1607",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Breast Pumps",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c16b729d-ad44-4dc8-bce7-cd3e279cf0ca" name="Valid HTTP Status Codes_10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4e7679a4-9bfd-4b67-83ad-15d378dad6cd" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA016</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9f1276c6-96f7-47ca-a5cf-0d1806713dbf" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f8b09394-692f-4ee3-983c-1fbb37ebdb88" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f567e3c-e6a8-4bf5-ae48-a81a876c6244" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31944107-9457-4cd3-9ea0-fb1180af55a3" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6e192a4d-8764-4c56-8f05-770b11f63a91" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7ad8535-33da-4350-b22f-209a31b01aac" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44218" id="89b19cad-23b7-40df-8147-70f9e2103df3"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44218" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA017",
                    "name": "2402",
                    "planName": "1607",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df56db0e-e6fc-4835-90d5-903df68993e0" name="Valid HTTP Status Codes_11"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="60da37ca-53de-414c-9f31-c75d65927ca3" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA017</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f43bd848-84dd-4bc7-8f8f-3c116f50a20c" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f81a958b-4313-4fa8-bfd1-36c5350381b3" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="21740762-073b-43f6-88c5-448fcfe64d7c" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d23fec5-c709-4ca8-8ed3-e1473553c704" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ec083801-f20a-44f5-81c8-e6f597733cf5" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0a1f1309-a725-40c7-9964-c97937f9298a" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44219" id="e47e3bac-e140-4071-afa9-b0cda07a6ea7"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44219" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA018",
                    "name": "2402",
                    "planName": "A549",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Breast Pumps",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e323ae33-6f89-4133-96f9-1cc2f666d201" name="Valid HTTP Status Codes_12"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cd47cf22-1740-4e17-aab7-5909069652da" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA018</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9cdc9b10-3109-456c-8e1e-78e7ad966668" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9c4db23c-350e-43dc-910a-a81057205487" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8c5f8776-0e48-44ed-a023-26cdb0c3367b" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e7e3e215-1144-4ca8-a3de-2ce971d8c9a3" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9ca2a5fa-cd84-4cd6-9dcf-af13c5f32f58" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3989df25-8fbb-4a97-b5ae-82f3b975dfea" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44220" id="4161832f-f23d-4413-b2cf-0077fcc3078f"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44220" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "Lifescan",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA019",
                    "name": "2402",
                    "planName": "6046",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "Continuous Glucose Monitors",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="79cbc944-5228-4bdf-9286-b4c60840654e" name="Valid HTTP Status Codes_13"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9c141145-7666-436f-9bdb-0052129fe0a3" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA019</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="13145ac0-29c3-4289-8f70-d64fb2b9a843" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4e57a1dc-1227-427c-8f11-774ed699732a" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3e5d808a-564d-40fa-ab7a-056ab6c57fcd" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dfe0a754-d8ae-416f-bc7f-0965f3b8e755" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0173faf5-a19e-4b8d-b049-df7b87d2c752" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f57f6ae3-8180-4390-9250-1cf94ff93af4" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44221" id="fcf77136-b746-44a8-b792-9891b5770076"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44221" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "Lifescan",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA020",
                    "name": "2402",
                    "planName": "6046",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "Insulin Pump Supplies",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c4f8bffa-5a95-450d-ae88-36389670b0f2" name="Valid HTTP Status Codes_14"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="09977859-c7f0-4364-88c3-d9ef4e30bd7b" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA020</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="92c68d42-8171-491d-8838-51fc7880510c" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="039ca3e4-85a7-4957-a407-f63cbe228af9" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5b8a52bd-b21a-4337-ae24-ede5b762e541" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b16cc2dd-5dba-49a3-97ab-be5bb02bc95d" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d16007ac-bda8-46c5-9cac-b76db9142886" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a433acde-30d2-45b7-87f9-038583024214" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44222" id="b6b04c10-9652-4865-8cf9-cea24ae61029"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44222" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "INVALID",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA021",
                    "name": "2402",
                    "planName": "6046",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "Blood Glucose Test Strips",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9fe07802-4d06-49a3-9d23-370bf9eae6a5" name="Valid HTTP Status Codes_15"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8a951bfa-eb00-46d0-bfb0-ad4040c392fd" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA021</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e6f0e6ca-157f-4105-afd3-463b056731a1" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c1be0f97-ebd4-49d9-a388-1db84284f3d5" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f94c0fea-7af9-4643-a0c6-270ac3bddadf" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4748e8b4-0801-43a6-a38e-b9add8f27264" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8c615599-9603-4bfa-9e88-0ce78d11542f" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7b4bdfbe-1a97-42fd-afdc-879699273b74" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44223" id="137825ee-6e99-4b06-baa0-e730277c9f67"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44223" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "INVALID",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA022",
                    "name": "2402",
                    "planName": "6046",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "INVALID",
            "productSubCategory3": "INVALID"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d0e46f1e-40d2-4664-96e3-902f15724466" name="Valid HTTP Status Codes_16"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9b7f01f0-ab24-46f6-997f-8612dea59479" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA022</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f6e2d13c-6d14-4151-8eaf-ba14d80df302" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b0f04a13-f36d-4f54-acc3-84a5efb6c973" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7d7750e3-9198-4958-b0b5-5b512a71cc91" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e9ea7319-236a-4a91-9844-8b3ce3521be5" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="21edb1de-4c41-4b05-b91e-a081fd28008c" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6b6e8bb7-cef8-4524-8c0b-8a648cebe6ad" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44224" id="23cc3617-c5e0-4c9f-b309-63b24dbf69d4"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44224" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "Roche",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA023",
                    "name": "2402",
                    "planName": "6046",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "INVALID",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="5cfd73f6-f324-4383-9e89-076ae03f3a59" name="Valid HTTP Status Codes_17"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="94fe04b0-2c8a-444f-aeb9-fdfb7ea5c1e8" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA023</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="50239a87-e544-4ad5-9575-c406effcb2a3" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="955a9b4b-526e-49ec-a9e1-18abd7dbf4da" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dcee68bc-47a3-4ea2-b981-f0de9b3d8664" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5ca9b5ae-2b07-4c50-9052-bedeea1f2f51" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f37a02db-f1b6-4ce5-9e65-9c9ac84f6a2d" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a09c1001-b24f-427f-91d7-10068948bef0" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44225" id="0693206e-548a-4a73-abc7-b7f199b5eeab"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44225" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "Lifescan",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA024",
                    "name": "2402",
                    "planName": "A549",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "Lancets",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="78592eca-d749-4c85-a0b6-396e5e27cb80" name="Valid HTTP Status Codes_18"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1a5e02b3-a390-4770-9a5b-4870fc745a74" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA024</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c2518161-e52e-4858-b11c-464955d4993b" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1556a81e-9855-4fc7-a0f7-91d7f564a128" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fc5974cc-fb1b-4502-a8bc-ac9717bac1de" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8de4fbcc-490a-483a-8a2f-0a1cd4c6a6c1" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e599889d-ffe7-4d92-8913-df88d749abdb" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55816e83-aa66-4a6c-91b5-ae3c1977cb65" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44226" id="851f240c-299d-4351-b336-e532f289f852"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44226" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A5120",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA2025",
                    "name": "2402",
                    "planName": "1807",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ede27154-721d-4669-83c0-745b84488441" name="Valid HTTP Status Codes_19"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0c881d9e-45d4-441b-a430-8d2b6215dd4b" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA2025</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="03f62d58-48e1-4201-bd6f-6daea0feb7dd" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e1561ba8-1f2f-4626-84bb-413df81506ac" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2deaa4c-1f40-4e2f-ba77-d56980d426df" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aa56098b-14a4-4a5a-a69e-bf180e9c8b88" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bd913b6b-c6f0-40c8-bd26-b5b576d2e055" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1522a908-e682-429a-aaf1-9ea793dd8caa" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44227" id="7ea93ee1-88a1-452f-bd88-347b9622aa8e"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44227" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA2026",
                    "name": "2402",
                    "planName": "2460",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Alternating Pressure Surfaces",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="df6529cf-427f-4602-a075-bd57601a1e09" name="Valid HTTP Status Codes_20"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e5cef98-d9fb-497e-ad29-847b2d4e42fa" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA2026</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="75304736-c30e-48a0-a98a-f544ee2790ac" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e1d9590c-76c2-4f82-a607-300051ccd041" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0cd1cbbc-6956-4efa-8ddc-c33e42438a5e" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="44808b87-7d66-4728-a503-26092b9b9024" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="db225c7c-aace-46d6-9891-7e99784e1581" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b68472f4-9c58-48db-999a-4c66834af90e" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44228" id="8647722f-d011-4313-8d46-7233ce3227c0"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44228" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA2027",
                    "name": "2402",
                    "planName": "2486",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "Urological",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="adddd8ab-19d7-423e-8446-05ff41ea604a" name="Valid HTTP Status Codes_21"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6cdf5dcf-d5d4-45e5-afe3-81c7e39caef2" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA2027</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d0bb0b18-2b6f-43a3-8a40-0beecde3d6e1" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bf3c16d4-28b3-4143-a404-73a4866c4bf6" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c4c0e0c-2572-4b56-ab03-06cb281dcab6" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1d8aea35-e884-4f48-82d9-390f9759ace8" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4156fa5f-4350-4013-9e46-f6481db6df60" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f47d7ed5-89f5-4347-a69f-376c96226dfc" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44229" id="4b071270-862e-4ca1-a0b9-0689c4fd5432"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44229" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA025",
                    "name": "2402",
                    "planName": "4095",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "INVALID",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="15ee9ab1-596d-4e85-9f88-ab1254092e10" name="Valid HTTP Status Codes_22"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2ce00fe3-b777-4f32-aa9e-32bc86d7636c" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA025</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9c1c5c92-b4bd-40a2-bfc4-1896173d4b18" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a24b71ee-b400-4fc0-b025-397537ebd517" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aa575faa-58ab-48c0-8be1-0b6c33f40223" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ee44d519-67aa-42ef-ba2f-45a4270340db" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b7b31b1-30e8-413c-be3a-1091fe28075d" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e48996cd-d256-4f52-86ed-ea553f25842f" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44230" id="1a007da5-7af3-4b56-ae2a-e673b2c04812"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44230" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA026",
                    "name": "2402",
                    "planName": "null",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "Breast Pumps",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1ed84ff1-c95a-43d0-ad8b-89b95c2d4d60" name="Valid HTTP Status Codes_23"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c698f5e2-8bcd-4d45-ac3a-ae6eb5269ed3" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA026</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f7f2c20c-f685-4f1e-98e8-07ba3bcdf851" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f1230ec9-e67c-4e49-962e-78494806b660" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ca1e8db9-962e-4028-be76-325e767d369b" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c6df7e03-fbb0-43f1-8251-cae8a2018cce" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6aad89c1-b254-430f-b5fe-bfaa4b45f536" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8b1ede0e-2c98-439f-99b7-814109f424f4" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44231" id="688e7496-4e81-47ab-bb15-ade872ae2b97"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44231" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "285507010",
                    "id": "PA027",
                    "name": "2402",
                    "planName": "7408",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="087dbe8e-a321-4cbe-ada6-2b3ed25b9772" name="Valid HTTP Status Codes_24"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="62ccf391-f6c0-417a-aecd-0659e62f31c7" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA027</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4b3be39b-7c0a-404b-a841-db05abf96ddf" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0673ade0-52c7-49cf-910a-a37d68b83977" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be7bbe75-baaf-4feb-8246-d8b5af01ca9f" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="50ab15c8-3157-4f27-820a-396fa3f46b44" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d63142ae-837d-4cc7-91ce-fd113b750648" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c376528f-bd86-45e4-b996-be3d1053963d" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44232" id="56e2d370-bed5-437a-a7e9-a011a693ba95"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44232" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "285507010",
                    "id": "PA029",
                    "name": "2402",
                    "planName": "7408",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Breast Pump",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9d478ef0-b054-4293-a80b-7810ab2f0d45" name="Valid HTTP Status Codes_25"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="12145a3c-4be9-4a91-b36e-187bd9f80f2c" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA029</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e15a96b9-5d13-4faa-a921-e814c676ccb6" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="715fa33e-f2a2-4f52-949d-b368b222f03e" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fa901347-07f1-4653-9307-3fe8f803f547" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5797d8ff-aac5-47ac-8e87-9d02517f98c7" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9c97363b-25c0-4ad9-99d1-97133c7c8ad5" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c32422b-f95b-4bfb-8872-8148a3510fff" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44233" id="8c2f3671-5ede-4522-97e3-d9df48c71598"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44233" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "285507011",
                    "id": "PA030",
                    "name": "2402",
                    "planName": "7408",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8c0ab618-6573-48df-8311-4b20e457ac89" name="Valid HTTP Status Codes_26"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="12370f87-b66b-4829-83b6-a2a24d549cdd" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA030</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="729d3506-31aa-4311-85e0-56c15c2c386a" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d7c9b984-7354-4b4a-8b23-515d5c2c44cb" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7ce77d93-937d-4fe7-a383-e7eee46a0e7c" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9df20394-0c40-46b3-9dcd-ee9c6ff82ec8" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b5242ef8-1035-4c91-818d-d9c9dc94cf99" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="07beebcb-e510-4f09-a11a-6ff55236f468" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44234" id="bc52fa30-8ec6-4e36-bf90-57679cea5040"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44234" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "285507011",
                    "id": "PA031",
                    "name": "2402",
                    "planName": "A549",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="cb013818-c1ba-4ce7-a042-5c805cd7254a" name="Valid HTTP Status Codes_27"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="72c6bc84-9ba2-4dd8-899b-b0af26455b34" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA031</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fe2dd1fa-29d5-43ab-8777-b8895cd0eccc" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="edcf2fa8-5ed8-441e-8363-9d0e9d5456d4" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ec7ec1a0-8f70-4cf6-9a55-f425c23d9ef9" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5ae3bacd-09f0-4de4-8cdf-d70827e3c91b" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0b82c237-14ff-4f8b-b427-d653a64664b4" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f7851a87-0104-4b9f-812a-70f6adefb8d7" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44235" id="b729e24f-aae3-491d-b193-2bb4a843bf53"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44235" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA034",
                    "name": "2402",
                    "planName": "4157",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a385da17-6f1f-4a30-8dfa-f8d8e7306c77" name="Valid HTTP Status Codes_28"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ff5fdc0d-4452-41cf-94b4-cc066a5fdf1b" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA034</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d0d4965f-f064-4622-88fd-5b4cd66f9fcf" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a84c86aa-4227-41f5-bfd9-ace8b20490fe" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="74ff834e-7e45-4908-b8cd-918400617b65" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d33f79d5-4f17-40cb-b030-f45631ad37ea" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0d2599bc-2240-4370-9b8a-d4c5fcbc9425" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85f2fe33-f123-4f72-b1b2-837c1a0347a2" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44236" id="5afcb189-61c3-465f-8b7a-2771fb43f971"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44236" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA035",
                    "name": "2402",
                    "planName": "A549",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="95b1c056-ea31-4504-bdfc-bc2959189408" name="Valid HTTP Status Codes_29"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d73af00-3181-4a84-9878-8fc3a0a7f10f" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA035</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d5176b51-e4c4-4436-bfad-67abaf45c2c2" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5576a6e5-1d77-48b6-a2d6-94018123617b" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f1a9fdca-7fc7-4af5-b272-bf19d897a337" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8a19d7d4-ab5b-4696-b5a5-28cc8ea611ac" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5fe7b0ed-609a-4c27-a800-a820f9fa3695" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ed1f7428-adc2-4992-9379-9eae4cfd5a9c" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44237" id="e631500b-6eea-4d0f-839f-1a91539bd23e"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44237" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "Lifescan",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA036",
                    "name": "2402",
                    "planName": "7932",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "Injection Supplies",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e72497ee-e9fc-4b12-8c2c-213d9f6d61fd" name="Valid HTTP Status Codes_30"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="de123866-ce21-44c2-b642-ed76f35ed16b" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA036</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="55c01ca2-3441-4d9e-82ed-49b54a5a785c" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f35f7842-dd66-48e0-909f-9f208ead3455" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="264d85b5-5b27-4a05-9753-ed7248c1d9af" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f1c63b0c-62a4-49ee-b942-4eb9dd41f70f" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d088317e-30f6-4439-bea1-7e53a0d21576" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f957464a-50c6-4235-87ab-8f7ece5a6b23" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44238" id="a5e0acb3-40d8-4fab-b2d6-14eb85fcbcb9"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44238" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "Lifescan",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA037",
                    "name": "2402",
                    "planName": "7932",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "Continuous Glucose Monitors",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="51686572-8cae-4953-9d7e-3d4b4c42d076" name="Valid HTTP Status Codes_31"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8ffce5a8-2853-4cdf-8bfe-727fb83b2c62" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA037</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f8a8c014-bd07-4743-b0c0-37c2b07a4dc7" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="398a5049-3ae8-4f07-9c02-5ef53950dddc" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fdd85011-ff49-4b7c-ab2a-8e7d35a4b0e0" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fcb5c624-11b1-4546-978d-e98539a49a21" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5b2e4f0a-fd4c-4ac8-8ea6-bb038f0038dd" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1e003452-a6d6-4653-8de3-f92d1699e66b" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44239" id="3e111994-0226-41a6-b6df-163cd9e71ca9"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44239" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "INVALID",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA038",
                    "name": "2402",
                    "planName": "A549",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "INVALID",
            "productSubCategory2": "INVALID",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1edd900b-60cc-41be-8972-578eb60d6ede" name="Valid HTTP Status Codes_32"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="21d4d3a1-6b79-4a58-a30a-aaea7f25202f" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA038</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="538ec37a-d651-4288-9aaf-d20db1c543ea" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="52ec90b9-dce0-40fb-a69c-2f7588311ed0" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4638ab04-1dda-449e-b047-47359569e5f9" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2e66aadf-2d04-4c76-9c9c-27d7c5e8d7d5" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="24fbfaf0-a065-4b8b-913a-d79c7ef85b8e" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="72b75bc0-f58a-4880-b321-3dbec58d1885" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44240" id="ad7ee5e7-4f68-43f3-8077-9787bea97b9d"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44240" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "Lifescan",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA039",
                    "name": "2402",
                    "planName": "A549",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "Injection Supplies",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="5141dbcb-bf81-476c-8ccd-e4150f569fdb" name="Valid HTTP Status Codes_33"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="655906cf-78cf-4cca-8d00-63b3389967f7" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA039</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="948b545a-8a3d-49f5-bf7f-e4baeae8dff8" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="966e4eef-78c3-4ae7-a396-8945a8f479d1" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7873423a-6b16-4fbf-b91e-752c894a1c08" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3450d958-0815-4510-8ab9-3d0d876949f2" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e8cf2db4-b942-46df-ac32-31838feb4175" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5a6d61e0-5cfd-4ec2-9dc0-fb63c5ae040a" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44241" id="b3a98015-3a86-4f53-b09b-67e61c039556"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44241" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": "INVALID"
                }
            ],
            "hcpcsCode": "INVALID",
            "lineItemID": "L001",
            "manufacturer": "INVALID",
            "payers": [
                {
                    "groupID": "INVALID",
                    "id": "PA042",
                    "name": "2402",
                    "planName": "INVALID",
                    "prefix": "INVALID",
                    "type": "1"
                }
            ],
            "productCategory": "INVALID",
            "productSubCategory1": "INVALID",
            "productSubCategory2": "INVALID",
            "productSubCategory3": "INVALID"
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f302d668-cc9b-431f-8901-cbde051a4a6c" name="Valid HTTP Status Codes_34"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="189bc568-d038-4178-b69b-2b393dc9130b" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA042</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0f4ecd15-cf16-4111-b86f-ed36d88d5497" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ff7b48ee-eda9-42e8-93a0-3f4c3b9c8c3e" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6c630f22-df40-47e2-a857-9852969adf34" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0e5ef353-8f7b-436e-9d54-55dfad8deae8" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0047120e-f7b5-4a72-bacf-41cf7eb4815f" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="36b70816-96ff-4628-afe4-a55a8d9dcd00" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44242" id="65c0fa69-d45b-472e-a23d-7eafb4fe5cae"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44242" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA046",
                    "name": "2402",
                    "planName": "8330",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Blood Glucose Test Strips",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3e39ab42-7dcd-4bca-a531-9cd4ee82e343" name="Valid HTTP Status Codes_35"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a0bb31c2-085f-440c-81ec-b42661a7fb71" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA046</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a43c23f0-0a38-47ce-839d-9a162ae829c3" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bc5bd8f4-79b1-4a04-8803-18c95c9bacc3" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="59cf4351-4983-423b-b788-40c0e7e48bc3" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d390ea41-6a66-4841-8578-78afcd9f3232" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7070c536-7bfe-407e-88b0-b5c2c20d7c6f" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="33078ae4-1b9a-4368-9b94-2b8e96755e03" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44243" id="484d7b5e-56df-4a02-bc85-ac3d9cfc0a5d"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44243" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA047",
                    "name": "2402",
                    "planName": "8330",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "INVALID",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="db0c3e6c-39e2-4167-885d-9a38cb165faa" name="Valid HTTP Status Codes_36"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bf961e86-d9a2-4b0b-ac70-8eaeb9ecdf90" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA047</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5e9479d9-02a1-4c77-9f0a-58dbdd44106e" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cdf9debc-8e41-4729-8fa3-aadc6d2fb0a3" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="19aa5bfe-094f-4f4e-811b-e4e2fa704656" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a1127acb-e0ec-4027-8b4f-d644b80dc24e" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6b9678b1-0717-4434-bd33-242e50421432" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3c062e3b-2b0d-42b9-a2b1-caadc194c90a" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44244" id="5288544d-938f-47e5-9ffb-519892466e1d"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44244" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA048",
                    "name": "2402",
                    "planName": "A549",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Blood Glucose Test Strips",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="406b15b0-13eb-4a5f-9837-86a9677cafbd" name="Valid HTTP Status Codes_37"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4f957a7f-54fc-4108-b0e7-7211eef810e1" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA048</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bc259ee3-7052-47fe-aaa7-732cbf091bb8" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bd329eb4-c437-42e8-a754-2a17c1a67c01" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4bd33903-c28f-4934-8d4c-6ab143bc282a" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="246aac49-3e71-4d3e-85fd-c55389a07e8d" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e2a436db-0a73-4c99-aad1-5310fa5edae7" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d52cf77-dafc-45b9-b7a8-922b8d5948a4" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44245" id="a7911f5c-8a4a-4d48-b285-796f5e2ef516"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44245" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA060",
                    "name": "2402",
                    "planName": "2460",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "Anti-Coagulation",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e717430c-144d-4f2a-9660-87cd01d6113c" name="Valid HTTP Status Codes_38"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f561ae02-9abb-44de-875a-7a9a3573f732" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA060</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0f8f2bb4-ec80-41ef-ace6-a210bde3baee" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a9ffde9e-59aa-4b4f-8a0d-fb2973219251" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6f26fa41-aec1-4213-911d-0aa00d28680b" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ca69625d-b59a-41db-9dde-b94cc478ebe3" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5da06a71-1707-4952-9d6f-76eb5ecf893b" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce7ea123-0c56-43a1-b371-81903017a0c4" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44246" id="c6a0ddb1-3a22-4a99-b178-029446c966e6"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44246" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA061",
                    "name": "2402",
                    "planName": "2460",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "Breast Pumps",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b4e0d7cd-b612-47b8-8340-c1cd567a4896" name="Valid HTTP Status Codes_39"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="47f5c03f-0bf2-48b3-adba-793e14dad686" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA061</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e2f3880e-c649-43bc-ad13-d680e2d81ca2" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c3e173db-7fb4-43c6-82e9-17c5d9165f9f" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fb9abe77-c8b5-4cf3-b0ea-0e4e8d0b17e7" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="194af122-fe33-4cf7-bf67-b591de37ff91" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="867d6fe8-63ee-4045-817c-68df98c7088e" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fc392a38-4c34-45bd-b6bf-435edb4a01eb" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44247" id="f61b278f-aa11-40d5-9fdb-2595d0a07d24"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44247" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "182232",
                    "id": "PA001",
                    "name": "2402",
                    "planName": "0011",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "",
            "productSubCategory3": ""
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L002",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "905610",
                    "id": "PB001",
                    "name": "2402",
                    "planName": "0011",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Insulin Pump Supplies",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1d260a38-fcee-432f-90c3-51328c931855" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5aca9774-9dab-4578-ba13-f0454cfa25d2" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d0cd6ecd-57ed-404c-ac25-01851d712ae8" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="82048a37-b70c-438c-82d8-c152f53861f2" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0dddfffe-792c-4328-bf5a-aff36c0bdcb0" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fbebaf15-20da-44a4-b610-924271791807" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0eb2a071-0210-4248-a356-5e0757916a9b" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85fe21af-646e-477b-b8ff-a08cb15a6657" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="72455c43-826a-421b-ac76-4b4f812b0e9d" name="payerID"><con:configuration><path>payerDefaultCoverages[1].payerID</path><content>PB001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fc7d020d-8a4c-4183-afc7-c1dc2d454432" name="lineItemID"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d42f1e75-078c-470c-98fd-d36ec89f5bf8" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[1].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7da12c4d-25be-4843-b86a-06038deb4d70" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9b8de859-77d6-4220-a408-7265bcc89574" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="99db3b9c-e8ba-4483-8835-5d215ae1fdd7" name="copayAmount"><con:configuration><path>payerDefaultCoverages[1].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aa69d21f-44fa-4a7e-80a5-fcde3fefb895" name="copayLevel"><con:configuration><path>payerDefaultCoverages[1].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44248" id="d3dc94ac-13a0-44c7-b87b-22cea5a089f4"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44248" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "182232",
                    "id": "PA002",
                    "name": "2402",
                    "planName": "B189",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "",
            "productSubCategory3": ""
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L002",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "905610",
                    "id": "PB002",
                    "name": "2402",
                    "planName": "0011",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "INVALID",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="76ed700b-7616-492f-8ea9-729e293edac7" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="74c32400-97a4-4009-8ebb-d66508745407" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0ac3df56-af6f-4e05-8023-dcf371d3cee7" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7be79943-f450-4ad5-8070-37c98bd98bb9" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="119516f0-3448-4d9f-afd6-2b39ad07925e" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="208b378d-16d7-4f7b-af19-c062533aacfc" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e4c29a41-ff83-4cef-9de1-b82fcc1bd185" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="483bc38d-1c55-4334-b801-95d12b1f45f4" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d19d27c2-9dbd-4a76-ace1-852b479cd96d" name="payerID"><con:configuration><path>payerDefaultCoverages[1].payerID</path><content>PB002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e131f17-6488-4d02-9bb6-dbeda4957583" name="lineItemID"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="71effd5d-4eab-4485-a855-502532821e79" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[1].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c7c6818a-dae0-42fa-9d36-a6df53e3aeb4" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="41bf68de-d06e-4086-890a-0b32a5c51504" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="28160e64-f7c2-4b6a-b43f-e08752701615" name="copayAmount"><con:configuration><path>payerDefaultCoverages[1].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5d0b6932-13d9-44fd-82ad-20c8eaec3331" name="copayLevel"><con:configuration><path>payerDefaultCoverages[1].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44249" id="44510b2f-3b43-4541-8ff3-7cf03650fe78"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44249" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA003",
                    "name": "2402",
                    "planName": "4216",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L002",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PB003",
                    "name": "2402",
                    "planName": "4098",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Breast Pumps",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c2c87bf5-cdda-487d-a15c-3e9c4fdc24ec" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="93c0df08-8f78-4b8c-b8e7-73d2fb52f642" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bf6d0f1e-e554-47c6-9dd8-f80c7f6ca33c" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6d919281-8e76-4c3c-a9cf-ff3c385d3e07" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d9662bfb-d8ee-4664-94f9-862a3718d2e8" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="66ad367c-0396-4092-99e4-4e08d4ae407e" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3a557335-c937-470c-9a1b-74349d6faffb" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ee2faa48-1a67-4679-8199-9732618550c9" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e818f957-b54d-44e3-bc70-61aa9c99f923" name="payerID"><con:configuration><path>payerDefaultCoverages[1].payerID</path><content>PB003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7fd9094b-5cf6-4898-80b6-dcfabf991b0b" name="lineItemID"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="898006fb-ec43-4630-ae78-ad50cce6d1ea" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[1].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c992156a-694b-4076-a3e6-3b7da806c6d6" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2ba00c2a-3c12-4875-9fc9-4d2dd945437a" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bfc676b9-d98d-4c10-b1ba-b8126ddf88ca" name="copayAmount"><con:configuration><path>payerDefaultCoverages[1].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4856dd0b-bca9-4f7d-88f8-78b1b52e672a" name="copayLevel"><con:configuration><path>payerDefaultCoverages[1].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44250" id="6565d72c-95ef-4b41-a604-0cf05e0ffa73"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44250" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA004",
                    "name": "2402",
                    "planName": "null",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "Wound Care",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L002",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PB004",
                    "name": "2402",
                    "planName": "4119",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Breast Pumps",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="33f9226d-a457-41bd-a53c-c599b4888812" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="10a8ab9f-7e89-400a-8d8d-1f3dbb31f9d3" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA004</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="df860dc6-0af6-489c-8f35-3b17dcd78134" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="766961fd-4bc8-4333-938f-18930a1e1abc" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="33e74e0c-d384-41c5-99fa-9e2932725707" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7f8a01d0-b708-4cee-9e7c-25f7cfc7f082" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2631ca8b-ec15-4150-b34e-adf318737912" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b6d1dbc7-1f28-4712-932c-147adf86a2c4" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eb5b7dc3-eadf-4e0f-a43b-169cfc0a1415" name="payerID"><con:configuration><path>payerDefaultCoverages[1].payerID</path><content>PB004</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1ffe6980-1218-43dc-ab15-ca13172a30b9" name="lineItemID"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2ef1d863-54cd-4896-99a1-938f246a068d" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[1].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ddd555e2-4186-4049-b425-dba3dbae23d3" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="10850560-1848-4002-a82d-bb9523266c3e" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="154dad68-87a1-45ed-9dde-00952aab5bd7" name="copayAmount"><con:configuration><path>payerDefaultCoverages[1].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5f277fa4-073c-46ae-a669-c93f0410fb96" name="copayLevel"><con:configuration><path>payerDefaultCoverages[1].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44251" id="f1322133-3d2c-472f-b752-a9fc94a8936d"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44251" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA005",
                    "name": "2402",
                    "planName": "4119",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Insulin Pump Supplies",
            "productSubCategory2": "Continuous Glucose Monitors",
            "productSubCategory3": ""
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L002",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PB005",
                    "name": "2402",
                    "planName": "4130",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Breast Pumps",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="09f0737b-de96-4f59-8575-3b0d0681d2ce" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="977894c3-1c1d-46ec-a782-ddaa5bc7b69a" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA005</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c846e97-d373-4e6a-ba21-4a86fffaa0d6" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c6e8ef5a-938b-41fd-9219-0413a11154a0" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="58b787df-6ec7-43ea-9ceb-8851794081c3" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="74ebd278-f724-4724-80eb-310b2fe773cd" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="694dbe47-db6f-4ef1-90aa-74ba5653e11f" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9cbd6b90-3e63-4590-8aba-ed5059959785" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ea25e3d8-147b-4bb0-a4dc-493990eb9a94" name="payerID"><con:configuration><path>payerDefaultCoverages[1].payerID</path><content>PB005</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="26f031b8-3c50-4ec9-b8c2-e81747f6634d" name="lineItemID"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="547a35ec-9a54-42a4-b2ec-6f5b373bc78c" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[1].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3345d83a-6ca1-4a81-b1ac-81baa07002c9" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="21b71d2f-2664-476a-b740-b6ee468d93d1" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="98a819e1-b175-4f74-b836-af47aad72014" name="copayAmount"><con:configuration><path>payerDefaultCoverages[1].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a9d12d29-fd6d-44ce-ab8b-e01f04c7394d" name="copayLevel"><con:configuration><path>payerDefaultCoverages[1].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44252" id="dc596390-fd2c-4c14-8220-0f3783b9b40c"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44252" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA006",
                    "name": "2402",
                    "planName": "4607",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "Wound Care",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L002",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PB006",
                    "name": "2402",
                    "planName": "4607",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Tracheostomy",
            "productSubCategory2": "Lancing Devices",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="898e91d8-395f-431b-b58a-33bbe3a0e862" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="37a7839c-0c24-40e0-9c92-e7d3d84f6a07" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA006</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8b1c77ed-3e23-4a7a-9d4c-24412e048abf" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="30510184-30c6-4eef-8d57-431c0daa31ca" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="031d226d-b0cb-449e-8262-8e28a0725870" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b9c46f00-1517-4462-b9cc-6ef88d721fd0" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="14860c87-fd98-4473-8f77-2613ce024a34" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="30bd5e7d-603f-4486-9735-6dbf19de5fdb" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f1617c29-6183-49d2-8414-04131f3d9221" name="payerID"><con:configuration><path>payerDefaultCoverages[1].payerID</path><content>PB006</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4f9b8888-b6b5-4e6e-adcc-f66848a4b852" name="lineItemID"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="852a65f0-9458-4ea0-b0c4-ba0831181452" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[1].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4d5f45a3-d14d-4747-86ae-8793ad6168b1" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="30c5436e-4d60-4212-937e-90eeb46c5ff8" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4904507f-e655-4ca9-965f-4abc30b6fca2" name="copayAmount"><con:configuration><path>payerDefaultCoverages[1].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1554cb7e-3525-4de8-b7a2-a88fff0e3df3" name="copayLevel"><con:configuration><path>payerDefaultCoverages[1].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44253" id="565d70b2-918f-4141-b871-9c29197d3232"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44253" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA007",
                    "name": "2402",
                    "planName": "5002",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L002",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PB007",
                    "name": "2402",
                    "planName": "B416",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="06c86f06-bca6-4b32-819a-61b1b8d386a0" name="Valid HTTP Status Codes_8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8402f1f5-3621-4ad5-8966-debe43d45aae" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA007</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="465e3ceb-e23c-4759-bbf6-1efd4bcf2812" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="baf0de42-1d1e-408f-9b8c-660a8fc7157c" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1a902ecd-7b79-4d5d-8859-d0d20c5d7aad" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4c25abf9-1751-4c8c-8982-1fc305a37801" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7cf9cdb5-26a1-4e5a-a2b5-1a9867c93376" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="59470049-a328-4b46-9672-068cadbefa10" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7fdc786b-fd12-4aa1-8a46-45b4bbefbe6f" name="payerID"><con:configuration><path>payerDefaultCoverages[1].payerID</path><content>PB007</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ee23c350-0e34-4107-b90c-f5081e18f6d3" name="lineItemID"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="48a71306-00ca-4373-99ce-c9cdbe55d65a" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[1].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d17131c9-28ce-4f0a-ab69-3cfd4199e9fc" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="827630fe-9095-492b-96c6-78e8ad15da98" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fc330032-50b5-44c4-a181-1e2340dfd22d" name="copayAmount"><con:configuration><path>payerDefaultCoverages[1].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7d7295d5-ef40-4ba3-b14f-f31eb8a2e084" name="copayLevel"><con:configuration><path>payerDefaultCoverages[1].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44254" id="4e577b4e-cfca-4d36-b346-09b95841c2f5"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44254" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "E0607",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA008",
                    "name": "2402",
                    "planName": "9166",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "E0603",
            "lineItemID": "L002",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PB008",
                    "name": "2402",
                    "planName": "9166",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="87aa1eb7-1aa6-4631-9a2a-35a1c09dc854" name="Valid HTTP Status Codes_9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ad93a014-54e9-4f4d-90d0-07dfb9438456" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA008</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c33dc9c0-d4ee-4f7d-9aae-528abffdc41f" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="34ab245c-2cba-4543-aac6-a2a63b394e06" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a6754844-501c-43ad-9341-a3af5e020951" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="371e7507-3c90-49e8-b0fa-f199e0026943" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b5018d14-c9c2-44ee-98d3-c7d3cf8d8d93" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="57810cf4-b56a-4073-990c-9f5e65dd2449" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c1f37bc4-d119-47f7-8abd-6cf111189686" name="payerID"><con:configuration><path>payerDefaultCoverages[1].payerID</path><content>PB008</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85cf2f3b-6d81-4d8b-a48d-03a8c72e2767" name="lineItemID"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="348b8efe-2942-4863-978f-6fecb737aa2a" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[1].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9f1fa5ce-42d5-49c5-a6df-009af9954325" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="124173f0-f4f4-436d-932b-e0a56158aff5" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b087affe-889e-4aa5-aa26-87326db4035f" name="copayAmount"><con:configuration><path>payerDefaultCoverages[1].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="927a4585-bb14-4a52-8a18-acc1b7deefee" name="copayLevel"><con:configuration><path>payerDefaultCoverages[1].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44255" id="5f8870d1-b060-414c-98a2-ee26f4bd1acf"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44255" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "K0553",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "081937",
                    "id": "PA009",
                    "name": "2402",
                    "planName": "9027",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A9277",
            "lineItemID": "L002",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "080869",
                    "id": "PB009",
                    "name": "2402",
                    "planName": "9028",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4a966a4e-0574-49de-86b8-64244d7bb205" name="Valid HTTP Status Codes_10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a22c286d-f653-4b98-9661-59059c83127b" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA009</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f4cc5ac8-58e0-4fda-964a-280f041b2519" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a9ff0356-8d41-4b62-846b-a6ecc90a061e" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e1be3a2c-90ca-4789-a034-6278d9339a0e" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6861e098-4c57-49cc-8c42-ede18036d195" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1b90d645-0e9c-451a-bc23-4aaea97c1c57" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0e2c6199-440f-4a2e-8b38-10a7ca276d81" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2a61c7e-85e3-4f81-9875-c7119e771a45" name="payerID"><con:configuration><path>payerDefaultCoverages[1].payerID</path><content>PB009</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="56dd6d54-b916-4f21-bccf-fa2b46aff99e" name="lineItemID"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="be9b243f-df33-47fb-9d66-879f6dd1ebb3" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[1].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7d64bd11-ca06-4e88-b81c-632630bae941" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1c87776f-e05b-422b-b7c6-a081de4fce08" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0cc2a522-90b2-483f-bf4b-3fbadce42ef0" name="copayAmount"><con:configuration><path>payerDefaultCoverages[1].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c97ca6f6-ea06-4c44-96ad-04e2451b0fbd" name="copayLevel"><con:configuration><path>payerDefaultCoverages[1].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44256" id="50f32565-60b1-49bb-8a70-a957fde7fd63"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44256" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA010",
                    "name": "2402",
                    "planName": "9565",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "Enteral",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L002",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PB010",
                    "name": "2402",
                    "planName": "9565",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e5cb06a1-789d-4260-871f-954a8b0b5d41" name="Valid HTTP Status Codes_11"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="72cfed25-a561-421c-be2e-af7a954e88a9" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA010</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6eac4ebd-c306-4c02-ab65-6f5602e1c28a" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9cd91902-39c3-4897-9a42-87fd08dca0b0" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eb4f022d-2bcd-4530-9ef9-2354f56ab6eb" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dd563bf1-27e1-4e6e-8964-e2b0c8962bb3" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="74b1f598-8b96-4351-affa-fc5fb24d3780" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e9a604a1-ab09-4b05-9735-33c14bd93446" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="14df65f1-db60-4c88-9da0-d3687152c630" name="payerID"><con:configuration><path>payerDefaultCoverages[1].payerID</path><content>PB010</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9bee65e1-05c9-4c27-a0cd-5e1de305330d" name="lineItemID"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a9923087-8d83-43a5-9e62-84697f929e2e" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[1].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e52c2ad6-aee0-48fc-8a15-159970f2c716" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ae8b9d37-f830-480d-8bfd-8a7ebc149976" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9ac4a496-af5d-4048-b40d-8917dabf1441" name="copayAmount"><con:configuration><path>payerDefaultCoverages[1].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a0512932-db11-4929-b3b6-23e892ca39a0" name="copayLevel"><con:configuration><path>payerDefaultCoverages[1].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44257" id="96fe4f9e-aaeb-4d19-86be-14a548885644"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44257" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "A9276",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA011",
                    "name": "2402",
                    "planName": "1807",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L002",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PB011",
                    "name": "2402",
                    "planName": "B189",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "Anti-Coagulation",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="510c37e4-9ed5-4aa0-9d71-5f8470b26063" name="Valid HTTP Status Codes_12"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ab19f6eb-70f2-435a-b4c4-735e2fb4fcb5" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA011</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a59e122-ac45-42a7-b385-93607b02d7b0" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0c9bf514-965d-4217-91b9-a8bdc4211d60" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9ada2008-cb16-402b-a742-f6706dbcb9b1" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4b851cf7-9111-40ae-b82c-4f8ad20260ac" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bb9c57e0-f468-4dcc-954c-2a7f33628ab2" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="424ab156-0a2a-4016-a0f7-cea0ea397cfa" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="33bededc-6fd7-4177-a3e9-6450abd4ad42" name="payerID"><con:configuration><path>payerDefaultCoverages[1].payerID</path><content>PB011</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e44ee24d-a3cc-4fcf-af19-738d6cbeb4e6" name="lineItemID"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f2567a77-3486-4b98-92c6-6e74b7f2e2e7" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[1].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="af34d20a-60cb-4749-b3b4-eed4d143dc3d" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9f31e9c5-8833-4fea-b537-16a1abfeb6cb" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a5c09be9-b3b8-4b8a-80f8-add53aff0e27" name="copayAmount"><con:configuration><path>payerDefaultCoverages[1].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="59d3b296-562a-4e97-906f-141b0df985c5" name="copayLevel"><con:configuration><path>payerDefaultCoverages[1].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44258" id="026b1ed6-6dc0-4fd2-bd6d-216dce2e5c47"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44258" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA012",
                    "name": "2402",
                    "planName": "2460",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Bowel Management Systems",
            "productSubCategory3": ""
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L002",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PB012",
                    "name": "2402",
                    "planName": "2460",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Blood Glucose Test Strips",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="29695f4d-c099-4232-9f11-033243f2293f" name="Valid HTTP Status Codes_13"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9e8e718e-35d2-481b-a877-7dd67460b288" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA012</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4db42e10-0608-4795-ba6e-eb95bebe279f" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cd3749f9-b854-489f-9691-ee411e64aa82" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6385d57e-e250-44a5-b236-d3ed7f1f248d" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0c1ba22a-c715-4804-95b4-eb834f8b15b3" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="02be0e47-fd05-4132-b934-2754bb6f31c3" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ec38a697-9c65-4c40-bf99-4384111187de" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0e495a03-55bd-4b23-a1fc-4a5f54f2a0be" name="payerID"><con:configuration><path>payerDefaultCoverages[1].payerID</path><content>PB012</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d845730e-60aa-4018-8749-3e705874902c" name="lineItemID"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a4a291a2-118c-4c44-882d-8c72ab904285" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[1].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5d7de138-54be-4673-949e-8bc55558e389" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="db73f429-c278-4fe8-89b2-d5504ae2a585" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="af257104-d89a-45af-83d3-2bf2689e2c68" name="copayAmount"><con:configuration><path>payerDefaultCoverages[1].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cab1c9ff-731e-43ea-b2b4-19e0bc51126c" name="copayLevel"><con:configuration><path>payerDefaultCoverages[1].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44259" id="16e5c2d1-2e17-489e-9d2e-f1d5985fd19f"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44259" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA013",
                    "name": "2402",
                    "planName": "2486",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Range of Motion",
            "productSubCategory2": "",
            "productSubCategory3": ""
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L002",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PB013",
                    "name": "2402",
                    "planName": "2486",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ad26142c-f471-45ad-a307-ff857c214821" name="Valid HTTP Status Codes_14"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5367f5af-78be-4a5c-ae8e-e07de9f85f30" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA013</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9cc16add-7d9b-40c8-b2b4-5551d1846e42" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="574dca0f-6d07-4a08-94a9-c47bd387f316" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5adac8a1-bad5-471e-ab06-61f51e1d1dd0" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e9432558-450b-48f8-af1c-2044a1fbd57d" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e9d154b2-78ac-46d1-bd23-4011e6bb8a6c" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c0a41e69-eb08-427c-900b-ca5d8230197f" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8dae156a-101d-4eb1-914a-ffe0488acd83" name="payerID"><con:configuration><path>payerDefaultCoverages[1].payerID</path><content>PB013</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="da5446a0-5002-435f-a45d-0f52bb453059" name="lineItemID"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4b40d628-0c37-4574-8b4d-442e0f443ea4" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[1].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="31f5e8af-513f-4be5-805c-7995b4c0b0ed" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f1e5b907-d309-49ef-8908-0a2758344010" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b2becd75-a928-4fb7-a347-06cc08cf0d88" name="copayAmount"><con:configuration><path>payerDefaultCoverages[1].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81a0d33d-16c2-4e2c-a5f8-e7b4f8b34b09" name="copayLevel"><con:configuration><path>payerDefaultCoverages[1].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44260" id="f8af7157-63d1-4417-aeb1-d367464b317c"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44260" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA014",
                    "name": "2402",
                    "planName": "2486",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Bowel Management Systems",
            "productSubCategory3": ""
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L002",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PB014",
                    "name": "2402",
                    "planName": "2486",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Blood Glucose Test Strips",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3568d6e0-3c14-42d3-9bc6-5b7384cab89f" name="Valid HTTP Status Codes_15"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cac811e6-15ce-44b7-a16f-99c0d49767fa" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA014</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="66ed3c0e-c2d5-447e-a764-500b908f858a" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2c830af4-c7d7-4bfc-804b-9539f3929ad0" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3971c1df-e968-4daf-882c-61b16c4c1396" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="925bf238-3e92-4174-a870-563ecebdc860" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b02ad132-e42b-47d1-a86c-62f50886a6f4" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a4ed19a7-7d8c-442f-8a8e-e82e2d909f9b" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c2cc84ab-620d-480e-ab91-44e23ded8397" name="payerID"><con:configuration><path>payerDefaultCoverages[1].payerID</path><content>PB014</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="92afbbaf-a69e-46b4-ba19-5cbfc09acbde" name="lineItemID"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="48e9ef27-02ed-4c7b-ae4a-b6cb03fe9277" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[1].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8090287c-5ed1-45a1-8034-01dcbb6c17b4" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="15989809-c75b-4f10-9bc2-1902f91163a5" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="95859df5-a444-4cbd-9a38-d7da6baae91a" name="copayAmount"><con:configuration><path>payerDefaultCoverages[1].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1fa38180-6bc2-4ae1-b7b1-c9b1678966ff" name="copayLevel"><con:configuration><path>payerDefaultCoverages[1].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44261" id="e1e1af5f-6414-4867-9020-ba40b7bbedd5"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44261" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA015",
                    "name": "2402",
                    "planName": "2494",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "Anti-Coagulation",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L002",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PB015",
                    "name": "2402",
                    "planName": "2494",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f8eceae6-d494-4e9f-8376-8915d1b131b5" name="Valid HTTP Status Codes_16"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="953a4df5-477b-4023-8947-b7208d09b466" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA015</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a6f49764-1a65-4bea-b49e-9657573e665b" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="77749c09-418f-45a0-bb73-b1309dd7e464" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4207b773-b9ce-4a11-a12b-f7eae32062c8" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="20b8ef37-19b7-40f8-8b49-506cdf0bbd60" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fa4d17ab-aff6-4ac6-91a1-e174b120cfd0" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="da12af71-3c5d-4d82-9954-b7eaeaf8e77e" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2282843b-627a-4b68-a2cf-5d4f57078d12" name="payerID"><con:configuration><path>payerDefaultCoverages[1].payerID</path><content>PB015</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7c54536e-3c68-4da1-a10c-24bd1efdd725" name="lineItemID"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5a2441e0-ada8-4e23-ab88-ec400bd23af9" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[1].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1061a9-19f0-4d70-b8ae-e83ff7970c93" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="638d0728-ca5d-451a-81d6-3abe5a4bd82f" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7818914b-4489-4e98-80a9-bdf19e990788" name="copayAmount"><con:configuration><path>payerDefaultCoverages[1].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d2c583f5-0afa-4d12-a21a-06739991c0fa" name="copayLevel"><con:configuration><path>payerDefaultCoverages[1].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44262" id="38f7a651-760b-4eb6-ae6c-e26cb7477011"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44262" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA016",
                    "name": "2402",
                    "planName": "2494",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Bone Growth Stimulation",
            "productSubCategory2": "",
            "productSubCategory3": ""
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L002",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PB016",
                    "name": "2402",
                    "planName": "2494",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Insulin Pump Supplies",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a8589cf0-6cbf-4393-aac9-5b28b156b951" name="Valid HTTP Status Codes_17"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6877e4cf-ccc0-446f-96d8-e9c571f57947" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA016</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a423016-c43e-4e0f-8744-5add68320dcb" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="54a5797c-8da0-4f48-9f3c-09210ce6e6c4" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a3d257db-8228-457d-a7b1-f395a34e0257" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3759b492-806a-4cf5-af8c-5d0236d747bd" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1fd6f099-1fa5-48cb-9136-f3f7189310fa" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8d086e5f-c202-4730-8b7c-56c94ebb563f" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5a58a6ff-dd4c-469a-88bd-2fbb89ba9c5a" name="payerID"><con:configuration><path>payerDefaultCoverages[1].payerID</path><content>PB016</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d4bdf566-9470-4b50-ba8c-708c7db30fb5" name="lineItemID"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bf9cc616-2122-4a99-9bdb-05b78df59960" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[1].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="14505a60-624f-4455-908a-8aa688d46a2f" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8a95b5dd-e398-47ee-9fc6-4a0b3f8e37e9" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="42149bf5-5fb3-4f2d-bde0-3bf38493459f" name="copayAmount"><con:configuration><path>payerDefaultCoverages[1].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="59e98b52-cbb6-4abb-9ed7-171e44716768" name="copayLevel"><con:configuration><path>payerDefaultCoverages[1].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44263" id="1ca65768-3e92-45d4-8194-95931f78d2d1"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44263" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA017",
                    "name": "2402",
                    "planName": "2494",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Bowel Management Systems",
            "productSubCategory3": ""
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L002",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PB017",
                    "name": "2402",
                    "planName": "0011",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "Bowel Management Systems",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="72d48e15-76bc-4696-bcef-d4f74b564289" name="Valid HTTP Status Codes_18"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2945b787-7eca-431e-bee3-49ce6cabc0e2" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA017</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="125540af-1da7-490d-a76f-106c62a2a797" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6c0baad2-a5d7-4cc1-ae72-7083cd91c843" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="123c9999-6727-410e-a312-d4f9bd812190" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1ac4aba9-92e4-4ed7-a3a2-79bb9932ea28" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="79bf9128-589e-4d3a-86b2-dacc1a60e00d" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9db70434-c9d9-4962-9632-ffb31cdcb669" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="06f7f1b5-dd0d-4c1c-97bc-e493cde36b77" name="payerID"><con:configuration><path>payerDefaultCoverages[1].payerID</path><content>PB017</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="64f3fa49-860f-4068-87db-a88b42ef7454" name="lineItemID"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6d108e95-f6ba-4bd4-acfe-6f5bdc0b1c0f" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[1].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a3014aa8-d379-47fe-a4d8-fa659cb49b74" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5d40adaf-2672-41f3-9439-ebc2b72eade4" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="25c38723-7917-4ef5-8aaf-663467c7e9f2" name="copayAmount"><con:configuration><path>payerDefaultCoverages[1].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e928a280-23f4-483d-898e-a8047a0f94f2" name="copayLevel"><con:configuration><path>payerDefaultCoverages[1].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44264" id="ae0c5c10-df25-437a-a957-72427e4647a2"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44264" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA018",
                    "name": "2402",
                    "planName": "4119",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Insulin Pump Supplies",
            "productSubCategory2": "Continuous Glucose Monitors",
            "productSubCategory3": ""
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L002",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PB018",
                    "name": "2402",
                    "planName": "4119",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Insulin Pump Supplies",
            "productSubCategory2": "Blood Glucose Test Strips",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7835d213-7f58-4727-a0f8-42beb1e112c2" name="Valid HTTP Status Codes_19"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="637b1b64-e82b-4521-88c1-4c400063e5b6" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA018</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a82a4302-cb29-46df-b835-cbcd8a47b5fd" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ab48d5f1-db3a-4c9b-9a99-2d2dc071f161" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2f98e95e-1275-4a9c-a46f-a0c17a8ba2ab" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c802ba43-5e80-4ae5-aceb-23691beed724" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="152b00fa-4f88-44ad-9e8c-44666dddcc40" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5ad3eaf4-835c-4743-961a-45cb5b034b28" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="888522c9-9c42-485c-8b78-903d1fdbf571" name="payerID"><con:configuration><path>payerDefaultCoverages[1].payerID</path><content>PB018</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0911ef34-068a-47f3-8268-0744bf8bb797" name="lineItemID"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ff5ba662-0384-44a3-9714-8ede2bedb794" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[1].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="07e4c730-ae54-4ec8-86f4-8d9fd5fcf7ca" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5657f810-d939-49bb-be3d-e30a77cd71b8" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="07adbf65-6217-4890-b5cf-a7ca86aa8bd5" name="copayAmount"><con:configuration><path>payerDefaultCoverages[1].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6b6fa6d3-8635-4e18-9f5b-31599161c04f" name="copayLevel"><con:configuration><path>payerDefaultCoverages[1].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-44265" id="afd4bcc7-d2f2-4389-9445-abcb82d6e025"><con:settings/><con:config service="CARESOrderManagement" methodName="DetermineDefaultBenefitMapping" resourcePath="/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-44265" id="ae344770-124d-4287-a678-2f8cfe824cb3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ldec5009c1ods02:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L001",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PA019",
                    "name": "2402",
                    "planName": "9085",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Breast Pumps",
            "productSubCategory2": "",
            "productSubCategory3": ""
        },
        {
            "diagnosis": [
                {
                    "codeICD10": ""
                }
            ],
            "hcpcsCode": "",
            "lineItemID": "L002",
            "manufacturer": "",
            "payers": [
                {
                    "groupID": "",
                    "id": "PB019",
                    "name": "2402",
                    "planName": "0011",
                    "prefix": "",
                    "type": "1"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "Breast Pumps",
            "productSubCategory2": "",
            "productSubCategory3": ""
        }
    ]
}</con:request><con:originalUri>http://ldec5009c1ods02/DecisionService/rest/v1/DetermineDefaultBenefitMapping/DetermineDefaultBenefitMapping/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="81c097c8-9c0b-4c8d-b468-7740a8602e43" name="Valid HTTP Status Codes_20"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b5ba10d3-584c-46f8-8e8a-e6a60ce06ecd" name="payerID"><con:configuration><path>payerDefaultCoverages[0].payerID</path><content>PA019</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6952fd7c-7d01-4101-94df-aa9e9d430141" name="lineItemID"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ae2c26d0-c352-4955-8874-384dcd4a6600" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[0].applyToAccountFlag</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="44e4f0e2-7f05-4fdc-9334-b36e39ca751a" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="40b6e1c3-c0e9-48b7-b844-25017441c738" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[0].lineItemCoverage[0].coinsurancePercentage</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="81e4139c-b32f-4653-b4ec-6b6805ddd216" name="copayAmount"><con:configuration><path>payerDefaultCoverages[0].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ae31a513-c676-4e79-b989-650b32ffbd4c" name="copayLevel"><con:configuration><path>payerDefaultCoverages[0].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="07033fc3-9c41-48a7-b199-184a6068f524" name="payerID"><con:configuration><path>payerDefaultCoverages[1].payerID</path><content>PB019</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e825a511-1443-4663-8df4-07a662be52ec" name="lineItemID"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="24f96fe5-d68b-4bef-8fea-e27ca6cacc3c" name="applyToAccountFlag"><con:configuration><path>payerDefaultCoverages[1].applyToAccountFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f668b714-d24b-4a2b-81fc-649fde1b58e6" name="applyToDeductableFlag"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].applyToDeductableFlag</path><content>false</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="632bb6de-1cf6-4fd5-8652-297b2e023eb4" name="coinsurancePercentage"><con:configuration><path>payerDefaultCoverages[1].lineItemCoverage[0].coinsurancePercentage</path><content>20.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aa6044e6-528c-4431-bc1c-42f6fd703eb3" name="copayAmount"><con:configuration><path>payerDefaultCoverages[1].copayAmount</path><content>0.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e011c42d-fae2-4526-86b6-7c06ea10360b" name="copayLevel"><con:configuration><path>payerDefaultCoverages[1].copayLevel</path><content>Order</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="17d32177-3712-4ee8-98ce-9fc6c3d3963c" name="DetermineServiceCode"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="4a5ed76e-6bda-45cf-baa9-875caaf19924" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineServiceCode" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="JSON Request" id="1dd2b43a-323e-435e-94d6-73535387ac41"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL" methodName="DetermineServiceCode" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="a773d023-0f76-46ab-8c1a-d2b425976773" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2014-09-19T04:48:33.000+0530"
        }
    },
    "lineItems": [
        {
            "lineItemID": "0001",
            "payers": [
                {
                    "id": "813942563DD75A34E0532C97F4A150EFG",
                    "planName": "A004"
                }
            ],
            "primaryFinRespPayerAssigned": true,
            "productCategory": "Breast Pump",
            "productID": "P1231"
        },
        {
            "lineItemID": "0002",
            "payers": [
                {
                    "id": "613942563DD75A34E0532C97F4A150EFG",
                    "planName": "A008"
                }
            ],
            "productCategory": "Breast Pump",
            "productID": "P5682"
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="DetermineServiceCode-withNoProduct" id="15408818-ffef-4e55-8177-39d722a56494"><con:settings/><con:config><script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineServiceCode/DetermineServiceCode-General-Input.xls"
def outputfile = projectDir + "/DetermineServiceCode/DetermineServiceCode-General-Output.xls"
 
//Creating workbook for reading value from Excel Sheet
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")


//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"primaryServiceCode",sheet1);
addCell(1,0,"secondServiceCode",sheet1);
addCell(2,0,"thirdServiceCode",sheet1);
addCell(3,0,"payerId",sheet1);
addCell(4,0,"productID",sheet1);
addCell(5,0,"lineItemId",sheet1);
addCell(6,0,"productClassPrimaryServiceCode",sheet1);
addCell(7,0,"productClassSecondaryServiceCode",sheet1);
addCell(8,0,"productClassTertiaryServiceCode",sheet1);
addCell(9,0,"primaryServiceCode1",sheet1);
addCell(10,0,"secondServiceCode1",sheet1);
addCell(11,0,"thirdServiceCode1",sheet1);
addCell(12,0,"payerId1",sheet1);
addCell(13,0,"productID1",sheet1);
addCell(14,0,"lineItemId1",sheet1);
addCell(15,0,"productClassPrimaryServiceCode1",sheet1);
addCell(16,0,"productClassSecondaryServiceCode1",sheet1);
addCell(17,0,"productClassTertiaryServiceCode1",sheet1);
addCell(18,0,"PASS/FAIL",sheet1);
addCell(19,0,"FAILED DUE TO",sheet1);

//new testStepName

def newTestStep=null

try {

            

               def req = jreq.getContents()
   
                //Assigning request value dynamically

                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplet = new JsonBuilder(slurper);

            
               for (i=2;i<rc;i++){

                                  // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        def lineItemID1 = sh.getCell(1,i).getContents()

                                //Input for Plan for Payer1                                       
                            requestTemplet.content.payers[0].planName = sh.getCell(1,i).getContents()

                               //Input for payerID for Payer1
                           requestTemplet.content.payers[0].id = sh.getCell(2,i).getContents()

                        def lineItemID2 = sh.getCell(3,i).getContents()
                        
                               //Input for Plan for Payer2
                           requestTemplet.content.payers[1].planName = sh.getCell(3,i).getContents()

                              //Input for payerID for Payer2
                           requestTemplet.content.payers[1].id = sh.getCell(4,i).getContents()

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                          def getTestCase = testRunner.testCase;
                          def testst = testRunner.testCase.getTestStepByName("JSON Request");                  
                              newTestStep = TestCaseName
                              cleanUp(newTestStep)
                              getTestCase.cloneStep(restRequest,newTestStep)

                                
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)

                          //retrive response
                        
                      def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                             
                        //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)

                    if(json.serviceCode.size()>=1 && lineItemID1!=""&& lineItemID2!=""){                            

                            // get primaryServiceCode from response json          
                        addCell(0,i,json.serviceCode[0].primaryServiceCode,sheet1);    
                           // get secondServiceCode from response json          
                        addCell(1,i,json.serviceCode[0].secondServiceCode,sheet1);    
                          // get thirdServiceCode from response json          
                        addCell(2,i,json.serviceCode[0].thirdServiceCode,sheet1);   
                         // get payerId from response json          
                        addCell(3,i,json.serviceCode[0].payerId,sheet1);
                          // get productID from response json          
                        addCell(4,i,json.serviceCode[0].productID,sheet1);
                          // get lineItemId from response json          
                        addCell(5,i,json.serviceCode[0].lineItemId,sheet1);
                           // get primaryServiceCode from response json
                        addCell(6,i,json.serviceCode[0].productClassPrimaryServiceCode,sheet1);
                          // get productClassSecondaryServiceCode from response json          
                        addCell(7,i,json.serviceCode[0].productClassSecondaryServiceCode,sheet1);
                           // get productClassTertiaryServiceCode from response json          
                        addCell(8,i,json.serviceCode[0].productClassTertiaryServiceCode,sheet1);
                           // get primaryServiceCode from response json
                         addCell(9,i,json.serviceCode[1].primaryServiceCode,sheet1);
                            // get secondServiceCode from response json          
                         addCell(10,i,json.serviceCode[1].secondServiceCode,sheet1);
                            // get thirdServiceCode from response json          
                         addCell(11,i,json.serviceCode[1].thirdServiceCode,sheet1); 
                            // get payerId from response json          
                         addCell(12,i,json.serviceCode[1].payerId,sheet1);
                            // get productID from response json          
                         addCell(13,i,json.serviceCode[1].productID,sheet1);
                           // get lineItemId from response json          
                         addCell(14,i,json.serviceCode[1].lineItemId,sheet1);
                           // get primaryServiceCode from response json
                         addCell(15,i,json.serviceCode[1].productClassPrimaryServiceCode,sheet1);
                           // get productClassSecondaryServiceCode from response json          
                         addCell(16,i,json.serviceCode[1].productClassSecondaryServiceCode,sheet1);
                           // get productClassTertiaryServiceCode from response json          
                        addCell(17,i,json.serviceCode[1].productClassTertiaryServiceCode,sheet1);

                    }else{  
                       
                       // get secondServiceCode from response json
                       addCell(0,i,json.serviceCode[0].primaryServiceCode,sheet1);
                        // get secondServiceCode from response json          
                       addCell(1,i,json.serviceCode[0].secondServiceCode,sheet1);       
                       // get thirdServiceCode from response json          
                      addCell(2,i,json.serviceCode[0].thirdServiceCode,sheet1);     
                        // get payerId from response json          
                      addCell(3,i,json.serviceCode[0].payerId,sheet1);
                        // get productID from response json          
                      addCell(4,i,json.serviceCode[0].productID,sheet1);
                         // get lineItemId from response json          
                      addCell(5,i,json.serviceCode[0].lineItemId,sheet1);
                         // get primaryServiceCode from response json
                      addCell(6,i,json.serviceCode[0].productClassPrimaryServiceCode,sheet1);
                         // get productClassSecondaryServiceCode from response json          
                      addCell(7,i,json.serviceCode[0].productClassSecondaryServiceCode,sheet1);
                         // get productClassTertiaryServiceCode from response json          
                      addCell(8,i,json.serviceCode[0].productClassTertiaryServiceCode,sheet1);

                           }

                                    
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);

                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
       if(json.serviceCode.size()>=1 && lineItemID1!=""&& lineItemID2!=""){

                            //get the expected values
                          payerID = sh.getCell(5,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID,"serviceCode[0].payerId","payerID")

                         primaryServiceCode = sh.getCell(6,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,primaryServiceCode,"serviceCode[0].primaryServiceCode","primaryServiceCode")

                         secondaryServiceCode = sh.getCell(7,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,secondaryServiceCode,"serviceCode[0].secondServiceCode","secondServiceCode")

                         thirdServiceCode = sh.getCell(8,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,thirdServiceCode,"serviceCode[0].thirdServiceCode","thirdServiceCode")

                          productID = sh.getCell(9,i).getContents()
                         addAssertionJsonPathMatch(testStepForAssertion,productID,"serviceCode[0].productID","productID")

                          lineItemID = sh.getCell(10,i).getContents()
                         addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"serviceCode[0].lineItemId","lineItemID")

                          productClassPrimaryServiceCode = sh.getCell(11,i).getContents()
                         addAssertionJsonPathMatch(testStepForAssertion,productClassPrimaryServiceCode,"serviceCode[0].productClassPrimaryServiceCode","productClassPrimaryServiceCode")

                           productClassSecondaryServiceCode = sh.getCell(12,i).getContents()
                          addAssertionJsonPathMatch(testStepForAssertion,productClassSecondaryServiceCode,"serviceCode[0].productClassSecondaryServiceCode","productClassSecondaryServiceCode")

                           productClassTertiaryServiceCode = sh.getCell(13,i).getContents()
                          addAssertionJsonPathMatch(testStepForAssertion,productClassTertiaryServiceCode,"serviceCode[0].productClassTertiaryServiceCode","productClassTertiaryServiceCode")

                            payerID1 = sh.getCell(14,i).getContents()
                           addAssertionJsonPathMatch(testStepForAssertion,payerID1,"serviceCode[1].payerId","payerID")

                            primaryServiceCode1 = sh.getCell(15,i).getContents()
                           addAssertionJsonPathMatch(testStepForAssertion,primaryServiceCode1,"serviceCode[1].primaryServiceCode","primaryServiceCode")

                            secondaryServiceCode1 = sh.getCell(16,i).getContents()
                           addAssertionJsonPathMatch(testStepForAssertion,secondaryServiceCode1,"serviceCode[1].secondServiceCode","secondServiceCode")

                            thirdServiceCode1 = sh.getCell(17,i).getContents()
                           addAssertionJsonPathMatch(testStepForAssertion,thirdServiceCode1,"serviceCode[1].thirdServiceCode","thirdServiceCode")

                            productID1 = sh.getCell(18,i).getContents()
                           addAssertionJsonPathMatch(testStepForAssertion,productID1,"serviceCode[1].productID","productID")

                            lineItemID1 = sh.getCell(19,i).getContents()
                           addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"serviceCode[1].lineItemId","lineItemID")

                            productClassPrimaryServiceCode1 = sh.getCell(20,i).getContents()
                           addAssertionJsonPathMatch(testStepForAssertion,productClassPrimaryServiceCode1,"serviceCode[1].productClassPrimaryServiceCode","productClassPrimaryServiceCode")

                            productClassSecondaryServiceCode1 = sh.getCell(21,i).getContents()
                           addAssertionJsonPathMatch(testStepForAssertion,productClassSecondaryServiceCode1,"serviceCode[1].productClassSecondaryServiceCode","productClassSecondaryServiceCode")

                            productClassTertiaryServiceCode1 = sh.getCell(22,i).getContents()
                          addAssertionJsonPathMatch(testStepForAssertion,productClassTertiaryServiceCode1,"serviceCode[1].productClassTertiaryServiceCode","productClassTertiaryServiceCode")

             }else{

                           payerID = sh.getCell(5,i).getContents()
                          addAssertionJsonPathMatch(testStepForAssertion,payerID,"serviceCode[0].payerId","payerID")

                           primaryServiceCode = sh.getCell(6,i).getContents()
                          addAssertionJsonPathMatch(testStepForAssertion,primaryServiceCode,"serviceCode[0].primaryServiceCode","primaryServiceCode")

                           secondaryServiceCode = sh.getCell(7,i).getContents()
                          addAssertionJsonPathMatch(testStepForAssertion,secondaryServiceCode,"serviceCode[0].secondServiceCode","secondServiceCode")

                           thirdServiceCode = sh.getCell(8,i).getContents()
                          addAssertionJsonPathMatch(testStepForAssertion,thirdServiceCode,"serviceCode[0].thirdServiceCode","thirdServiceCode")

                           productID = sh.getCell(9,i).getContents()
                          addAssertionJsonPathMatch(testStepForAssertion,productID,"serviceCode[0].productID","productID")

                           lineItemID = sh.getCell(10,i).getContents()
                          addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"serviceCode[0].lineItemId","lineItemID")

                           productClassPrimaryServiceCode = sh.getCell(11,i).getContents()
                          addAssertionJsonPathMatch(testStepForAssertion,productClassPrimaryServiceCode,"serviceCode[0].productClassPrimaryServiceCode","productClassPrimaryServiceCode")

                           productClassSecondaryServiceCode = sh.getCell(12,i).getContents()
                          addAssertionJsonPathMatch(testStepForAssertion,productClassSecondaryServiceCode,"serviceCode[0].productClassSecondaryServiceCode","productClassSecondaryServiceCode")

                           productClassTertiaryServiceCode = sh.getCell(13,i).getContents()
                          addAssertionJsonPathMatch(testStepForAssertion,productClassTertiaryServiceCode,"serviceCode[0].productClassTertiaryServiceCode","productClassTertiaryServiceCode")

            }

          
                              //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                      addCell(18,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){

                                 for( e in assertion.errors ){

                                                    addCell(19,i,e.message,sheet1);

                                                }  

                                   }

                                }

                                else{

                                  addCell(18,i,"PASS",sheet1);

                                }

       }

        wb1.write();

                log.info "TestCase Execution Completed successfull"

                }              

            
           
catch(Exception e)

{

                log.info(e)                          

}

finally

{

     //close workbook

     wb.close();
     wb1.close();      

     

}

  //Method code

def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {

          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")

                                assertionType.name = assertionName

                                assertionType.setPath(xPath)

                                assertionType.setExpectedContent(expectedContent)

                                assertionType.setAllowWildcards(true)  

}

   //Method code

def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")

                    StatusCodeAssertionxpath.name = assertionName

                    StatusCodeAssertionxpath.codes=200

}

//method to delete

def cleanUp(String requestName){

                //remove the teststep::Start

                def testCase = testRunner.testCase

                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

                                                testCase.removeTestStep(testStep)

                }

               

                //remove the teststep::End

}

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                Label header = new Label(colmNum,rowNum,lblName);

                sheet1.addCell(header);                

}]]></script></con:config></con:testStep><con:testStep type="groovy" name="DetermineServiceCode-withProduct" id="40897ca2-6f11-430a-9fca-00ad68450645"><con:settings/><con:config><script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineServiceCode/DetermineServiceCode-Product-Input.xls"
def outputfile = projectDir + "/DetermineServiceCode/DetermineServiceCode-Product-Output.xls"

//Creating workbook for reading value from Excel Sheet
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"Primary Service Code",sheet1);
addCell(1,0,"Second Service Code",sheet1);
addCell(2,0,"Third Service Code",sheet1);
addCell(3,0,"Payer Id",sheet1);
addCell(4,0,"Product Id",sheet1);
addCell(5,0,"Line Item Id",sheet1);
addCell(6,0,"productClassPrimaryServiceCode",sheet1);
addCell(7,0,"productClassSecondaryServiceCode",sheet1);
addCell(8,0,"productClassTertiaryServiceCode",sheet1);
addCell(9,0,"Primary Service Code1",sheet1);
addCell(10,0,"Second Service Code1",sheet1);
addCell(11,0,"Third Service Code1",sheet1);
addCell(12,0,"Payer Id1",sheet1);
addCell(13,0,"Product Id1",sheet1);
addCell(14,0,"Line Item Id",sheet1);
addCell(15,0,"productClassPrimaryServiceCode1",sheet1);
addCell(16,0,"productClassSecondaryServiceCode1",sheet1);
addCell(17,0,"productClassTertiaryServiceCode1",sheet1);
addCell(18,0,"PASS/FAIL",sheet1);
addCell(19,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null
try {
        
                def req = jreq.getContents()
   
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplet = new JsonBuilder(slurper);
          
           for (i=2;i<rc;i++){

                       // Input for TestCaseName

               Cell varTestCaseName = sh.getCell(0,i)
                 def TestCaseName = varTestCaseName.getContents()
                 def lineItemID1 = sh.getCell(1,i).getContents()

                                       //  Input for Line Item ID
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                      //Input for productID
                                requestTemplet.content.lineItems[0].productID = sh.getCell(2,i).getContents()
                                 //  Input for Product Category
                                requestTemplet.content.lineItems[0].productCategory = sh.getCell(3,i).getContents()                              
                                 // Input for Plan
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(4,i).getContents()
                                  // Input for ID
                                requestTemplet.content.lineItems[0].payers[0].id =sh.getCell(5,i).getContents()
                            
                def lineItemID2 = sh.getCell(6,i).getContents()

                                //  Input for Line Item ID
                               requestTemplet.content.lineItems[1].lineItemID = sh.getCell(6,i).getContents()
                                   //Input for productID
                                requestTemplet.content.lineItems[1].productID = sh.getCell(7,i).getContents()
                                   //Input for product Category
                                requestTemplet.content.lineItems[1].productCategory = sh.getCell(8,i).getContents()
                                // Input for Plan
                                requestTemplet.content.lineItems[1].payers[0].planName = sh.getCell(9,i).getContents()
                                    // Input for ID
                                requestTemplet.content.lineItems[1].payers[0].id =sh.getCell(10,i).getContents()

                                     //Assign json request to variable

                                def jsonReqAsString = requestTemplet.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)

                            
                          //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)

                                //retrive response
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                               
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                           if(json.serviceCode.size()>=1 && lineItemID1!=""&& lineItemID2!=""){
                            
                                 // get primaryServiceCode from response json          
                               addCell(0,i,json.serviceCode[0].primaryServiceCode,sheet1);   
                                  // get secondServiceCode from response json          
                               addCell(1,i,json.serviceCode[0].secondServiceCode,sheet1);      
                                 // get thirdServiceCode from response json          
                               addCell(2,i,json.serviceCode[0].thirdServiceCode,sheet1);  
                                // get payerId from response json          
                               addCell(3,i,json.serviceCode[0].payerId,sheet1);
                                 // get productID from response json          
                               addCell(4,i,json.serviceCode[0].productID,sheet1);
                                 // get lineItemId from response json          
                               addCell(5,i,json.serviceCode[0].lineItemId,sheet1);
                                  // get productClassPrimaryServiceCode from response json
                               addCell(6,i,json.serviceCode[0].productClassPrimaryServiceCode,sheet1);
                                  // get productClassSecondaryServiceCode from response json          
                               addCell(7,i,json.serviceCode[0].productClassSecondaryServiceCode,sheet1);
                                  // get productClassTertiaryServiceCode from response json          
                               addCell(8,i,json.serviceCode[0].productClassTertiaryServiceCode,sheet1);
  
                                 // get primaryServiceCode from response json
                                addCell(9,i,json.serviceCode[1].primaryServiceCode,sheet1);
                                 // get secondServiceCode from response json          
                                addCell(10,i,json.serviceCode[1].secondServiceCode,sheet1); 
                                 // get thirdServiceCode from response json          
                                addCell(11,i,json.serviceCode[1].thirdServiceCode,sheet1);  
                                 // get payerId from response json          
                                addCell(12,i,json.serviceCode[1].payerId,sheet1);
                                 // get productID from response json          
                                addCell(13,i,json.serviceCode[1].productID,sheet1); 
                                 // get lineItemId from response json          
                                addCell(14,i,json.serviceCode[1].lineItemID,sheet1);
                                 // get productClassPrimaryServiceCode from response json
                                addCell(15,i,json.serviceCode[1].productClassPrimaryServiceCode,sheet1);
                                  // get productClassSecondaryServiceCode from response json          
                                addCell(16,i,json.serviceCode[1].productClassSecondaryServiceCode,sheet1);
                                 // get productClassTertiaryServiceCode from response json          
                                addCell(17,i,json.serviceCode[1].productClassTertiaryServiceCode,sheet1);

                        
                            }else{

                                 // extract the value of required elements fron the json response                        
                                  // get primaryServiceCode from response json     
                                addCell(0,i,json.serviceCode[0].primaryServiceCode,sheet1);         
                                  // get secondServiceCode from response json     
                                addCell(1,i,json.serviceCode[0].secondServiceCode,sheet1);        
                                 // get thirdServiceCode from response json  
                                addCell(2,i,json.serviceCode[0].thirdServiceCode,sheet1);        
                                 // get payerId from response json         
                                addCell(3,i,json.serviceCode[0].payerId,sheet1);
                                 // get productID from response json          
                                addCell(4,i,json.serviceCode[0].productID,sheet1);
                                 // get lineItemId from response json          
                                addCell(5,i,json.serviceCode[0].lineItemId,sheet1);
                                 // get productClassPrimaryServiceCode from response json
                                addCell(6,i,json.serviceCode[0].productClassPrimaryServiceCode,sheet1);
                                 // get productClassSecondaryServiceCode from response json          
                                addCell(7,i,json.serviceCode[0].productClassSecondaryServiceCode,sheet1);
                                 // get productClassTertiaryServiceCode from response json           
                                addCell(8,i,json.serviceCode[0].productClassTertiaryServiceCode,sheet1);

                                }

                               //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
       addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
     if(json.serviceCode.size()>=1 && lineItemID1!=""&& lineItemID2!=""){

                     //get the expected values
                          lineItemID = sh.getCell(11,i).getContents()
                         addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"serviceCode[0].lineItemId","lineItemID")
                         
                          payerID = sh.getCell(12,i).getContents()
                         addAssertionJsonPathMatch(testStepForAssertion,payerID,"serviceCode[0].payerId","payerID")  
                            
                          productID = sh.getCell(13,i).getContents()
                         addAssertionJsonPathMatch(testStepForAssertion,productID,"serviceCode[0].productID","productID")
                         
                          primaryServiceCode = sh.getCell(14,i).getContents()
                         addAssertionJsonPathMatch(testStepForAssertion,primaryServiceCode,"serviceCode[0].primaryServiceCode","primaryServiceCode")
                         
                          secondaryServiceCode = sh.getCell(15,i).getContents()
                         addAssertionJsonPathMatch(testStepForAssertion,secondaryServiceCode,"serviceCode[0].secondServiceCode","secondServiceCode")
                         
                          thirdServiceCode = sh.getCell(16,i).getContents()
                         addAssertionJsonPathMatch(testStepForAssertion,thirdServiceCode,"serviceCode[0].thirdServiceCode","thirdServiceCode")
                         
                          productClassPrimaryServiceCode = sh.getCell(17,i).getContents()
                         addAssertionJsonPathMatch(testStepForAssertion,productClassPrimaryServiceCode,"serviceCode[0].productClassPrimaryServiceCode","productClassPrimaryServiceCode")
                         
                          productClassSecondaryServiceCode = sh.getCell(18,i).getContents()
                         addAssertionJsonPathMatch(testStepForAssertion,productClassSecondaryServiceCode,"serviceCode[0].productClassSecondaryServiceCode","productClassSecondaryServiceCode")
                         
                          productClassTertiaryServiceCode = sh.getCell(19,i).getContents()
                         addAssertionJsonPathMatch(testStepForAssertion,productClassTertiaryServiceCode,"serviceCode[0].productClassTertiaryServiceCode","productClassTertiaryServiceCode")

                         lineItemID1 = sh.getCell(20,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"serviceCode[1].lineItemId","lineItemID")
  
                        payerID1 = sh.getCell(21,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,payerID1,"serviceCode[1].payerId","payerID")
        
                        productID1 = sh.getCell(22,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,productID1,"serviceCode[1].productID","productID")
     
                       primaryServiceCode1 = sh.getCell(23,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,primaryServiceCode1,"serviceCode[1].primaryServiceCode","primaryServiceCode")

                       secondaryServiceCode1 = sh.getCell(24,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,secondaryServiceCode1,"serviceCode[1].secondServiceCode","secondServiceCode")

                        thirdServiceCode1 = sh.getCell(25,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,thirdServiceCode1,"serviceCode[1].thirdServiceCode","thirdServiceCode")

                        productClassPrimaryServiceCode1 = sh.getCell(26,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,productClassPrimaryServiceCode1,"serviceCode[1].productClassPrimaryServiceCode","productClassPrimaryServiceCode")

                        productClassSecondaryServiceCode1 = sh.getCell(27,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,productClassSecondaryServiceCode1,"serviceCode[1].productClassSecondaryServiceCode","productClassSecondaryServiceCode")

                        productClassTertiaryServiceCode1 = sh.getCell(28,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,productClassTertiaryServiceCode1,"serviceCode[1].productClassTertiaryServiceCode","productClassTertiaryServiceCode")

                          
         }else{
 
                    //get the expected values
                      lineItemID = sh.getCell(11,i).getContents()
                     addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"serviceCode[0].lineItemId","lineItemID")
   
                      payerID = sh.getCell(12,i).getContents()
                      addAssertionJsonPathMatch(testStepForAssertion,payerID,"serviceCode[0].payerId","payerID")
        
                      productID = sh.getCell(13,i).getContents()
                      addAssertionJsonPathMatch(testStepForAssertion,productID,"serviceCode[0].productID","productID")

                      primaryServiceCode = sh.getCell(14,i).getContents()
                     addAssertionJsonPathMatch(testStepForAssertion,primaryServiceCode,"serviceCode[0].primaryServiceCode","primaryServiceCode")

                      secondaryServiceCode = sh.getCell(15,i).getContents()
                      addAssertionJsonPathMatch(testStepForAssertion,secondaryServiceCode,"serviceCode[0].secondServiceCode","secondServiceCode")

                       thirdServiceCode = sh.getCell(16,i).getContents()
                      addAssertionJsonPathMatch(testStepForAssertion,thirdServiceCode,"serviceCode[0].thirdServiceCode","thirdServiceCode")

                      productClassPrimaryServiceCode = sh.getCell(17,i).getContents()
                     addAssertionJsonPathMatch(testStepForAssertion,productClassPrimaryServiceCode,"serviceCode[0].productClassPrimaryServiceCode","productClassPrimaryServiceCode")

                      productClassSecondaryServiceCode = sh.getCell(18,i).getContents()
                     addAssertionJsonPathMatch(testStepForAssertion,productClassSecondaryServiceCode,"serviceCode[0].productClassSecondaryServiceCode","productClassSecondaryServiceCode")

                       productClassTertiaryServiceCode = sh.getCell(19,i).getContents()
                     addAssertionJsonPathMatch(testStepForAssertion,productClassTertiaryServiceCode,"serviceCode[0].productClassTertiaryServiceCode","productClassTertiaryServiceCode")

     }

                         
                               //dynamic asserstion :End
                          assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(18,i,"Fail",sheet1);
                 for( assertion in testStepForAssertion.assertionList ){

                                               for( e in assertion.errors ){
                                                    addCell(19,i,e.message,sheet1);

                                                } 

                                   }

                                }

                                else{

                                  addCell(18,i,"PASS",sheet1);

                                }

       }

        wb1.write();

                log.info "TestCase Execution Completed successfull"

                }             

       
       
catch(Exception e)

{

                log.info(e)                          

}

finally

{

     //close workbook

     wb.close();
     wb1.close();      



}

  //Method code

def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {

          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")

                                assertionType.name = assertionName

                                assertionType.setPath(xPath)

                                assertionType.setExpectedContent(expectedContent)

                                assertionType.setAllowWildcards(true) 

}

   //Method code

def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")

                    StatusCodeAssertionxpath.name = assertionName

                    StatusCodeAssertionxpath.codes=200

}

//method to delete

def cleanUp(String requestName){

                //remove the teststep::Start

                def testCase = testRunner.testCase

                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

                                                testCase.removeTestStep(testStep)

                }

               

                //remove the teststep::End

}

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                Label header = new Label(colmNum,rowNum,lblName);

                sheet1.addCell(header);               

}

 ]]></script></con:config></con:testStep><con:testStep type="restrequest" name="EPST-43161" id="0fadadc3-3d84-44af-b42a-035e4d38a77b"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL" methodName="DetermineServiceCode" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-43161" id="a773d023-0f76-46ab-8c1a-d2b425976773" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-09-19T04:48:33.000+0530"
        }
    },
    "payers": [
        {
            "id": "PA001",
            "planName": "7529"
        },
        {
            "id": "",
            "planName": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bb646b3d-8fff-484c-a7e8-2cc9e9a6da14" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="959b791e-123d-4dd4-9849-16588d9e138d" name="payerID"><con:configuration><path>serviceCode[0].payerId</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c7d2e727-bad6-41fd-85e8-b7799503a389" name="primaryServiceCode"><con:configuration><path>serviceCode[0].primaryServiceCode</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7fba7486-a424-44b1-a7ce-16adb56093a1" name="secondServiceCode"><con:configuration><path>serviceCode[0].secondServiceCode</path><content>12</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e54d6709-baa8-4c65-ab2e-124be859bb99" name="thirdServiceCode"><con:configuration><path>serviceCode[0].thirdServiceCode</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9648f6d1-3a8e-4d99-b8d0-a7befa9ba85c" name="productID"><con:configuration><path>serviceCode[0].productID</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2dd9c71a-3d48-44d8-ae8e-cd1b1ff71da1" name="lineItemID"><con:configuration><path>serviceCode[0].lineItemId</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1ed970f0-1303-4c59-be16-dcf0cb7ef270" name="productClassPrimaryServiceCode"><con:configuration><path>serviceCode[0].productClassPrimaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="46c1c6ca-c17d-47de-9894-e1e287acbde5" name="productClassSecondaryServiceCode"><con:configuration><path>serviceCode[0].productClassSecondaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ac38cc76-6895-404d-8815-92a491439a80" name="productClassTertiaryServiceCode"><con:configuration><path>serviceCode[0].productClassTertiaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-43162" id="6d51cd19-ebef-435a-9a1a-26e78603cd66"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL" methodName="DetermineServiceCode" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-43162" id="a773d023-0f76-46ab-8c1a-d2b425976773" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-09-19T04:48:33.000+0530"
        }
    },
    "payers": [
        {
            "id": "null",
            "planName": "null"
        },
        {
            "id": "",
            "planName": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="af5f519a-a34d-4350-94b8-262f79417fc1" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="05312165-a0f3-4130-b125-499056ab4c11" name="payerID"><con:configuration><path>serviceCode[0].payerId</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fb021a83-97f4-484f-9f16-02826ca76a0b" name="primaryServiceCode"><con:configuration><path>serviceCode[0].primaryServiceCode</path><content>12</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0397ed00-c879-4bc5-8e18-d04aa0c91f76" name="secondServiceCode"><con:configuration><path>serviceCode[0].secondServiceCode</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eb28c24d-4768-4d8d-891e-c541c6ae0f11" name="thirdServiceCode"><con:configuration><path>serviceCode[0].thirdServiceCode</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="54f3199d-f11f-48c9-ae21-f41dc1439f43" name="productID"><con:configuration><path>serviceCode[0].productID</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d7554cf-a846-4152-9f09-fc01dbf245eb" name="lineItemID"><con:configuration><path>serviceCode[0].lineItemId</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="af0109e0-5226-42ed-a766-08a62c29aca0" name="productClassPrimaryServiceCode"><con:configuration><path>serviceCode[0].productClassPrimaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e465d70b-1a13-4682-bdad-2b9b4aebe575" name="productClassSecondaryServiceCode"><con:configuration><path>serviceCode[0].productClassSecondaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="48933536-4f5a-4505-8a43-ee86dea8fabd" name="productClassTertiaryServiceCode"><con:configuration><path>serviceCode[0].productClassTertiaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-43163" id="039057d5-72ea-443d-971f-12aa2ed63010"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL" methodName="DetermineServiceCode" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-43163" id="a773d023-0f76-46ab-8c1a-d2b425976773" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-09-19T04:48:33.000+0530"
        }
    },
    "payers": [
        {
            "id": "PA002",
            "planName": "A006"
        },
        {
            "id": "",
            "planName": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fd4b2f3b-7678-45ef-ae2a-4091f8ea6ddd" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6efe005f-d0ec-4f3d-bbe1-5f76bd5d97b2" name="payerID"><con:configuration><path>serviceCode[0].payerId</path><content>PA002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e6e6dde7-a65d-4a08-86ba-e9f97bc8a3a9" name="primaryServiceCode"><con:configuration><path>serviceCode[0].primaryServiceCode</path><content>12</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ca12ef89-5168-4beb-b98b-6c2a751b1d8d" name="secondServiceCode"><con:configuration><path>serviceCode[0].secondServiceCode</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b9408b85-dcf2-4e6a-90ad-4d8caf8e85c6" name="thirdServiceCode"><con:configuration><path>serviceCode[0].thirdServiceCode</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3257ebcf-7169-431b-b7cb-744946f578ef" name="productID"><con:configuration><path>serviceCode[0].productID</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8e3a9021-6b73-42b8-a5d1-07654753409a" name="lineItemID"><con:configuration><path>serviceCode[0].lineItemId</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="904c04c3-caf7-4638-9c9c-d702970f6f6c" name="productClassPrimaryServiceCode"><con:configuration><path>serviceCode[0].productClassPrimaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="13847ed7-57cd-4ff5-8008-a7e4ca096316" name="productClassSecondaryServiceCode"><con:configuration><path>serviceCode[0].productClassSecondaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c1a4d32e-dc88-4008-8b63-6c64afebe919" name="productClassTertiaryServiceCode"><con:configuration><path>serviceCode[0].productClassTertiaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-43164" id="03727a64-8f5d-42e0-8c43-16981d52de30"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL" methodName="DetermineServiceCode" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-43164" id="a773d023-0f76-46ab-8c1a-d2b425976773" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-09-19T04:48:33.000+0530"
        }
    },
    "payers": [
        {
            "id": "PA015",
            "planName": "7529"
        },
        {
            "id": "PA016",
            "planName": "6184"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8d08d437-b76f-42cd-b396-865fc141975c" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9a0c53c8-5259-4b03-a74c-49c825a92a6d" name="payerID"><con:configuration><path>serviceCode[0].payerId</path><content>PA015</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5c0e8a09-c643-4463-9e6f-a7fbc20a60d4" name="primaryServiceCode"><con:configuration><path>serviceCode[0].primaryServiceCode</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="161f0e04-b3a5-417e-89ce-9edec8e17a56" name="secondServiceCode"><con:configuration><path>serviceCode[0].secondServiceCode</path><content>12</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="40f3609c-1595-46c2-a516-cec3b0a7fb4a" name="thirdServiceCode"><con:configuration><path>serviceCode[0].thirdServiceCode</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c6209944-aec9-4805-8853-5a1549245b6b" name="productID"><con:configuration><path>serviceCode[0].productID</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="25943ac2-ae1b-453c-a10b-42777bfaadc2" name="lineItemID"><con:configuration><path>serviceCode[0].lineItemId</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4f1c26cf-5e2f-4419-849a-b1d4dc4be5bd" name="productClassPrimaryServiceCode"><con:configuration><path>serviceCode[0].productClassPrimaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d79404d1-a3a5-4a01-90a5-705afe18f3fd" name="productClassSecondaryServiceCode"><con:configuration><path>serviceCode[0].productClassSecondaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ec405688-f097-402e-9826-7d373e8a253e" name="productClassTertiaryServiceCode"><con:configuration><path>serviceCode[0].productClassTertiaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2c171d19-a455-4e47-a751-fe694a325de3" name="payerID"><con:configuration><path>serviceCode[1].payerId</path><content>PA016</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="95a110f5-0ac7-4607-b708-7651c1931abe" name="primaryServiceCode"><con:configuration><path>serviceCode[1].primaryServiceCode</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5601fb04-5865-458f-b6e6-81f01387dca6" name="secondServiceCode"><con:configuration><path>serviceCode[1].secondServiceCode</path><content>12</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="420259d4-3dad-4aab-af63-9157edeee723" name="thirdServiceCode"><con:configuration><path>serviceCode[1].thirdServiceCode</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="adf98439-203f-48af-9b2d-5d9bcddcb9f3" name="productID"><con:configuration><path>serviceCode[1].productID</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ca4c684d-69c4-44bc-81af-2e343c68f5e8" name="lineItemID"><con:configuration><path>serviceCode[1].lineItemId</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b65ca8c0-b036-4e1f-87f3-74b1fc1de0bb" name="productClassPrimaryServiceCode"><con:configuration><path>serviceCode[1].productClassPrimaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="67fb5c93-c9b8-49c4-8d50-d92f58130e19" name="productClassSecondaryServiceCode"><con:configuration><path>serviceCode[1].productClassSecondaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f1d6a6e-c277-4353-9adb-af5620844312" name="productClassTertiaryServiceCode"><con:configuration><path>serviceCode[1].productClassTertiaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-43165" id="36aa01cf-8da9-4afe-8faa-376c92fa3711"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL" methodName="DetermineServiceCode" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-43165" id="a773d023-0f76-46ab-8c1a-d2b425976773" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-09-19T04:48:33.000+0530"
        }
    },
    "payers": [
        {
            "id": "PA017",
            "planName": "A004"
        },
        {
            "id": "PA018",
            "planName": "A006"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e9d26991-9bbe-46d5-8126-54eb8a9a2487" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f4bc9723-f280-4c9a-a518-74456b2be2c2" name="payerID"><con:configuration><path>serviceCode[0].payerId</path><content>PA017</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="33524c52-2ceb-4013-9bcf-b0efbcd133a6" name="primaryServiceCode"><con:configuration><path>serviceCode[0].primaryServiceCode</path><content>12</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="eccee641-2f18-4cf3-ba04-dca5b86fac64" name="secondServiceCode"><con:configuration><path>serviceCode[0].secondServiceCode</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4d482c74-a751-4dd5-8e69-a1feec84208e" name="thirdServiceCode"><con:configuration><path>serviceCode[0].thirdServiceCode</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="85cee6a8-fa49-4e95-b8ea-2664d7459aa3" name="productID"><con:configuration><path>serviceCode[0].productID</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fb23c420-73e6-487c-a93f-25a5989e1c39" name="lineItemID"><con:configuration><path>serviceCode[0].lineItemId</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c2967bab-c60a-4d6e-a1a0-283ffce5bf57" name="productClassPrimaryServiceCode"><con:configuration><path>serviceCode[0].productClassPrimaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1c9fcf64-941e-41ec-985a-300dce1f2338" name="productClassSecondaryServiceCode"><con:configuration><path>serviceCode[0].productClassSecondaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ba88fc14-8ac0-4f93-8b2e-01b8ba9c8ad2" name="productClassTertiaryServiceCode"><con:configuration><path>serviceCode[0].productClassTertiaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="45a0282b-0875-4ffd-87c3-fec45f1750f3" name="payerID"><con:configuration><path>serviceCode[1].payerId</path><content>PA018</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cb065aae-7c46-44ad-8832-22410b928476" name="primaryServiceCode"><con:configuration><path>serviceCode[1].primaryServiceCode</path><content>12</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0967d755-be73-4092-864a-38722e9c32b0" name="secondServiceCode"><con:configuration><path>serviceCode[1].secondServiceCode</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="40d66a28-c428-4915-afe4-c80547e262ea" name="thirdServiceCode"><con:configuration><path>serviceCode[1].thirdServiceCode</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="789680b7-c098-4a40-b066-ab810bf0048f" name="productID"><con:configuration><path>serviceCode[1].productID</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="54355227-8a6f-4e3a-bf1d-8935f6891156" name="lineItemID"><con:configuration><path>serviceCode[1].lineItemId</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="deefb0d1-a29f-4937-a97e-bbc4d1443444" name="productClassPrimaryServiceCode"><con:configuration><path>serviceCode[1].productClassPrimaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6804bee7-c015-45c7-9950-14c7dd24b51a" name="productClassSecondaryServiceCode"><con:configuration><path>serviceCode[1].productClassSecondaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7794b2c8-26a0-4a71-8468-65d0b22c8eca" name="productClassTertiaryServiceCode"><con:configuration><path>serviceCode[1].productClassTertiaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-43166" id="2aab4b23-fd84-4d60-90fe-684e0d3c1067"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL" methodName="DetermineServiceCode" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-43166" id="a773d023-0f76-46ab-8c1a-d2b425976773" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2014-09-19T04:48:33.000+0530"
        }
    },
    "lineItems": [
        {
            "lineItemID": "0001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EFG",
                    "planName": "7408"
                }
            ],
            "primaryFinRespPayerAssigned": true,
            "productCategory": "Diabetes",
            "productID": "P1234"
        },
        {
            "lineItemID": "",
            "payers": [
                {
                    "id": "",
                    "planName": ""
                }
            ],
            "productCategory": "",
            "productID": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="cb7aa638-2e6d-486a-b09f-c14d3b03cdef" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="724bfbec-c6c5-4841-b318-4894ac611a6a" name="lineItemID"><con:configuration><path>serviceCode[0].lineItemId</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8535711b-ba4f-4f50-9325-b83f6101c956" name="payerID"><con:configuration><path>serviceCode[0].payerId</path><content>513942563DD75A34E0532C97F4A150EFG</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="255d14d9-1e2f-488b-8a7e-5013799cafc0" name="productID"><con:configuration><path>serviceCode[0].productID</path><content>P1234</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="43bdce81-d26b-4333-a50a-5201006fa5a8" name="primaryServiceCode"><con:configuration><path>serviceCode[0].primaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4499ae5e-7114-499b-ab2d-ed52d7ac5a52" name="secondServiceCode"><con:configuration><path>serviceCode[0].secondServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f05fe874-9c17-41cc-9881-ab207e89b7be" name="thirdServiceCode"><con:configuration><path>serviceCode[0].thirdServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8a8df475-9832-4fb9-b531-e1b572bfdac4" name="productClassPrimaryServiceCode"><con:configuration><path>serviceCode[0].productClassPrimaryServiceCode</path><content>DS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a5602827-e02d-4b44-82e0-88ef07fbe793" name="productClassSecondaryServiceCode"><con:configuration><path>serviceCode[0].productClassSecondaryServiceCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3c1a52ac-9fbb-407d-93fe-2c9262354042" name="productClassTertiaryServiceCode"><con:configuration><path>serviceCode[0].productClassTertiaryServiceCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-43167" id="743600a3-6acd-4c05-8510-f6b3f781c0c1"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL" methodName="DetermineServiceCode" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-43167" id="a773d023-0f76-46ab-8c1a-d2b425976773" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2014-09-19T04:48:33.000+0530"
        }
    },
    "lineItems": [
        {
            "lineItemID": "0001",
            "payers": [
                {
                    "id": "3C9F9D14CB7547A9ACCA8F896D54B0C6",
                    "planName": "A600"
                }
            ],
            "primaryFinRespPayerAssigned": true,
            "productCategory": "Breast Pump",
            "productID": "P1238"
        },
        {
            "lineItemID": "",
            "payers": [
                {
                    "id": "",
                    "planName": ""
                }
            ],
            "productCategory": "",
            "productID": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ab138bfd-ad21-4047-b9f3-e0687701d9b9" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b68f8bd2-cce8-4a53-b0f2-b1ce3381f62e" name="lineItemID"><con:configuration><path>serviceCode[0].lineItemId</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="428666de-ade9-485f-a422-956d2749f631" name="payerID"><con:configuration><path>serviceCode[0].payerId</path><content>3C9F9D14CB7547A9ACCA8F896D54B0C6</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c8cc9e00-6a39-47fd-ba29-80b99bbfae3b" name="productID"><con:configuration><path>serviceCode[0].productID</path><content>P1238</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9df897ec-6d33-4ca4-9dd4-04e2760298d2" name="primaryServiceCode"><con:configuration><path>serviceCode[0].primaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b16e27ff-3d4f-4b76-b9d7-7365be7fe97b" name="secondServiceCode"><con:configuration><path>serviceCode[0].secondServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2afa95aa-7024-40e6-b739-9542d4627e72" name="thirdServiceCode"><con:configuration><path>serviceCode[0].thirdServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bf4865ac-3aae-4da9-bfb7-cac42f74e045" name="productClassPrimaryServiceCode"><con:configuration><path>serviceCode[0].productClassPrimaryServiceCode</path><content>12</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c1a8c116-b718-4279-aa0b-b4d789e7c969" name="productClassSecondaryServiceCode"><con:configuration><path>serviceCode[0].productClassSecondaryServiceCode</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d13de2f4-a75b-4a8d-b8f0-be0ab5f86942" name="productClassTertiaryServiceCode"><con:configuration><path>serviceCode[0].productClassTertiaryServiceCode</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-43168" id="b65ae7bd-7c8f-433a-ab0b-721b5417cf19"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL" methodName="DetermineServiceCode" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-43168" id="a773d023-0f76-46ab-8c1a-d2b425976773" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2014-09-19T04:48:33.000+0530"
        }
    },
    "lineItems": [
        {
            "lineItemID": "0001",
            "payers": [
                {
                    "id": "456D102999E945678E47BA154FABFC12T",
                    "planName": "7408"
                }
            ],
            "primaryFinRespPayerAssigned": true,
            "productCategory": "Diabetes",
            "productID": "P1239"
        },
        {
            "lineItemID": "0002",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EFG",
                    "planName": "7408"
                }
            ],
            "productCategory": "Diabetes",
            "productID": "P5689"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4e532bd3-d7e1-431e-9234-a6257f3762df" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="da57243d-1346-47a6-95ba-4cd2a7dd7c55" name="lineItemID"><con:configuration><path>serviceCode[0].lineItemId</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8f5b28a3-5501-474b-b916-0789016f73f9" name="payerID"><con:configuration><path>serviceCode[0].payerId</path><content>456D102999E945678E47BA154FABFC12T</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="deef72bd-1528-4717-9af1-21c6048b00b3" name="productID"><con:configuration><path>serviceCode[0].productID</path><content>P1239</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="64251a58-8f97-451b-a3b4-fe46ff27bc46" name="primaryServiceCode"><con:configuration><path>serviceCode[0].primaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="efc8b022-eba9-4e77-bb8e-bea3272750bd" name="secondServiceCode"><con:configuration><path>serviceCode[0].secondServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bf5eb893-0196-41ce-9f37-41b6f0b91e11" name="thirdServiceCode"><con:configuration><path>serviceCode[0].thirdServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="86e1e08d-3576-45e5-a978-8045abf8dad3" name="productClassPrimaryServiceCode"><con:configuration><path>serviceCode[0].productClassPrimaryServiceCode</path><content>DS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b1ea94c6-12a8-4230-a717-ef9539b28ca4" name="productClassSecondaryServiceCode"><con:configuration><path>serviceCode[0].productClassSecondaryServiceCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c84255dc-a91d-4e6b-a8b1-381daff7e299" name="productClassTertiaryServiceCode"><con:configuration><path>serviceCode[0].productClassTertiaryServiceCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1cb9265d-2346-4bef-ba60-2d9c6fe4ea42" name="lineItemID"><con:configuration><path>serviceCode[1].lineItemId</path><content>0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8533a9aa-eccf-4a80-90d5-8200f6d6757e" name="payerID"><con:configuration><path>serviceCode[1].payerId</path><content>513942563DD75A34E0532C97F4A150EFG</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b380c8f8-3ef2-4fa0-a092-e0775c24c0ea" name="productID"><con:configuration><path>serviceCode[1].productID</path><content>P5689</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="36972898-32a0-47b3-b208-2cc818491374" name="primaryServiceCode"><con:configuration><path>serviceCode[1].primaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aca269c4-2c44-4f49-b4b0-a5fd8ee99cf8" name="secondServiceCode"><con:configuration><path>serviceCode[1].secondServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0abcda90-b071-4ed1-9165-b9362e8531aa" name="thirdServiceCode"><con:configuration><path>serviceCode[1].thirdServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="25649c42-a8ef-41e6-a1b7-447a1f0df671" name="productClassPrimaryServiceCode"><con:configuration><path>serviceCode[1].productClassPrimaryServiceCode</path><content>DS</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8f70c535-447d-4aa7-b0d6-b628af0712bb" name="productClassSecondaryServiceCode"><con:configuration><path>serviceCode[1].productClassSecondaryServiceCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="80656c6c-edb7-48a6-abb5-ad4d4b62afce" name="productClassTertiaryServiceCode"><con:configuration><path>serviceCode[1].productClassTertiaryServiceCode</path><content/><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-43169" id="32327272-85cc-4bba-aabd-84d720fd5634"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL" methodName="DetermineServiceCode" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-43169" id="a773d023-0f76-46ab-8c1a-d2b425976773" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2014-09-19T04:48:33.000+0530"
        }
    },
    "lineItems": [
        {
            "lineItemID": "0001",
            "payers": [
                {
                    "id": "513942563DD75A34E0532C97F4A150EFG",
                    "planName": "null"
                }
            ],
            "primaryFinRespPayerAssigned": true,
            "productCategory": "null",
            "productID": "P1234"
        },
        {
            "lineItemID": "0002",
            "payers": [
                {
                    "id": "913942563DD75A34E0532C97F4A150EFG",
                    "planName": "null"
                }
            ],
            "productCategory": "null",
            "productID": "P5681"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="633946cf-82de-4cc3-8890-085465ec26f4" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4821ce42-e9e9-45e2-95a9-405fc8df0dc0" name="lineItemID"><con:configuration><path>serviceCode[0].lineItemId</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e5f5f801-9de5-4f55-8c9c-2f70e7bd01e3" name="payerID"><con:configuration><path>serviceCode[0].payerId</path><content>513942563DD75A34E0532C97F4A150EFG</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ec42e20c-a271-4c95-8793-3bc515ca86b7" name="productID"><con:configuration><path>serviceCode[0].productID</path><content>P1234</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="88c178c7-58c3-43e7-9802-9ba0c493595e" name="primaryServiceCode"><con:configuration><path>serviceCode[0].primaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b8e74a95-ff96-4a19-96ea-40fcd631e3e4" name="secondServiceCode"><con:configuration><path>serviceCode[0].secondServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ad445b4a-5031-44c0-8ec5-8427ee44839c" name="thirdServiceCode"><con:configuration><path>serviceCode[0].thirdServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3b5d44da-dd77-4095-bc16-a8763a49c37c" name="productClassPrimaryServiceCode"><con:configuration><path>serviceCode[0].productClassPrimaryServiceCode</path><content>12</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1e1e659a-0cb3-4c7a-853a-6c78318521bd" name="productClassSecondaryServiceCode"><con:configuration><path>serviceCode[0].productClassSecondaryServiceCode</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ee8f2559-04be-46ea-9379-b9aba3835b1e" name="productClassTertiaryServiceCode"><con:configuration><path>serviceCode[0].productClassTertiaryServiceCode</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1c80bf2c-7eb7-4b8c-9032-6150f1e3d6e3" name="lineItemID"><con:configuration><path>serviceCode[1].lineItemId</path><content>0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6b5644ec-6892-4e79-83a0-e13b1c72e976" name="payerID"><con:configuration><path>serviceCode[1].payerId</path><content>913942563DD75A34E0532C97F4A150EFG</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5a2b13c2-e44e-4639-8451-1d8e98fcf31c" name="productID"><con:configuration><path>serviceCode[1].productID</path><content>P5681</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cae6b3f9-9a4d-4334-b803-8db5342de2da" name="primaryServiceCode"><con:configuration><path>serviceCode[1].primaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9e535b05-1651-4f43-afbd-60ffd505ef55" name="secondServiceCode"><con:configuration><path>serviceCode[1].secondServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="61cbe01c-2b28-45f6-bd4b-c24a58b02319" name="thirdServiceCode"><con:configuration><path>serviceCode[1].thirdServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="64008d6c-b5a6-4cb9-b350-7dc91fec8489" name="productClassPrimaryServiceCode"><con:configuration><path>serviceCode[1].productClassPrimaryServiceCode</path><content>12</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d5fe604-5f48-4ff6-9df3-0f284bc884d8" name="productClassSecondaryServiceCode"><con:configuration><path>serviceCode[1].productClassSecondaryServiceCode</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f68e18b5-7c13-4d8e-9ae1-b1c400070dc6" name="productClassTertiaryServiceCode"><con:configuration><path>serviceCode[1].productClassTertiaryServiceCode</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-43170" id="d3a9017e-4e80-488f-903f-4423773508aa"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL" methodName="DetermineServiceCode" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-43170" id="a773d023-0f76-46ab-8c1a-d2b425976773" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2014-09-19T04:48:33.000+0530"
        }
    },
    "lineItems": [
        {
            "lineItemID": "0001",
            "payers": [
                {
                    "id": "813942563DD75A34E0532C97F4A150EFG",
                    "planName": "A004"
                }
            ],
            "primaryFinRespPayerAssigned": true,
            "productCategory": "Breast Pump",
            "productID": "P1231"
        },
        {
            "lineItemID": "0002",
            "payers": [
                {
                    "id": "613942563DD75A34E0532C97F4A150EFG",
                    "planName": "A008"
                }
            ],
            "productCategory": "Breast Pump",
            "productID": "P5682"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineServiceCode/DetermineServiceCode/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c43e2b39-be9e-4ca9-aad9-dad887847864" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e7e46d30-22b5-43e8-b357-5b56bc62497c" name="lineItemID"><con:configuration><path>serviceCode[0].lineItemId</path><content>0001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bc8489d2-8049-4375-8265-60c213a26dbf" name="payerID"><con:configuration><path>serviceCode[0].payerId</path><content>813942563DD75A34E0532C97F4A150EFG</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="696f879e-d3bb-409a-bfde-3b115dfb3d0f" name="productID"><con:configuration><path>serviceCode[0].productID</path><content>P1231</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="93d9d0bb-1a47-416f-840c-9ea8a1924cc7" name="primaryServiceCode"><con:configuration><path>serviceCode[0].primaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="44d28735-d3b6-4032-80fd-e38439d97093" name="secondServiceCode"><con:configuration><path>serviceCode[0].secondServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="95e96600-a3bc-4466-bc5e-3940ca98f7d0" name="thirdServiceCode"><con:configuration><path>serviceCode[0].thirdServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1960745a-0045-4027-84a5-ecc72cd90daf" name="productClassPrimaryServiceCode"><con:configuration><path>serviceCode[0].productClassPrimaryServiceCode</path><content>12</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c2357d46-4832-495d-af16-ac3d0965711a" name="productClassSecondaryServiceCode"><con:configuration><path>serviceCode[0].productClassSecondaryServiceCode</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ce7e3b80-a07a-49eb-82f5-70aff5adadd3" name="productClassTertiaryServiceCode"><con:configuration><path>serviceCode[0].productClassTertiaryServiceCode</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f28129db-385f-454b-8e14-2ba487fce8d1" name="lineItemID"><con:configuration><path>serviceCode[1].lineItemId</path><content>0002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d3fa09b7-23a5-4b30-ba0f-a97bc5b6f13b" name="payerID"><con:configuration><path>serviceCode[1].payerId</path><content>613942563DD75A34E0532C97F4A150EFG</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="80eb03e7-38b7-4100-bdd4-0055919284b1" name="productID"><con:configuration><path>serviceCode[1].productID</path><content>P5682</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7834fec2-de55-4f9c-8da8-01f6d5cbda20" name="primaryServiceCode"><con:configuration><path>serviceCode[1].primaryServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6cd513ae-3532-4d2c-b9d2-b250d8f8ff87" name="secondServiceCode"><con:configuration><path>serviceCode[1].secondServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cd6725a4-0285-472f-8632-a9939121b93b" name="thirdServiceCode"><con:configuration><path>serviceCode[1].thirdServiceCode</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="629f536d-a72d-4879-8dde-1dd660f921f1" name="productClassPrimaryServiceCode"><con:configuration><path>serviceCode[1].productClassPrimaryServiceCode</path><content>12</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cc0711d3-4ce4-4f82-b85a-bdcaa00dab87" name="productClassSecondaryServiceCode"><con:configuration><path>serviceCode[1].productClassSecondaryServiceCode</path><content>30</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="075162fd-3d7c-4a67-a2aa-541810a439c4" name="productClassTertiaryServiceCode"><con:configuration><path>serviceCode[1].productClassTertiaryServiceCode</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="667ff7c3-d55d-47fe-9a3f-a22d2ac503a2" name="DetermineLevelOfInsuranceVerification"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="d4b52cc2-8f8b-4a06-84ae-21cbf6138200" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineLevelOfInsuranceVerification" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DetermineLevelOfInsuranceVerification_SingleLineItem" id="efdffbdc-1935-4945-a923-b08b810de212"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineInsuranceVerificationLevel/DetermineInsuranceVerificationLevel-SingleLineItem-Input.xls"
def outputfile = projectDir + "/DetermineInsuranceVerificationLevel/DetermineInsuranceVerificationLevel-SingleLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"payerID",sheet1);
addCell(2,0,"verificationLevel",sheet1);
addCell(3,0,"PASS/FAIL",sheet1);
addCell(4,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                 //Input for Line Item ID                               
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for productCategory  
                                requestTemplet.content.lineItems[0].productCategory = sh.getCell(2,i).getContents() 
                                //Input for productSubCategory1
                                
                                requestTemplet.content.lineItems[0].productSubCategory1 = sh.getCell(3,i).getContents() 
                                //Input for productSubCategory2
                                
                                requestTemplet.content.lineItems[0].productSubCategory2 = sh.getCell(4,i).getContents() 
                                //Input for productSubCategory3
                                
                                requestTemplet.content.lineItems[0].productSubCategory3 = sh.getCell(5,i).getContents() 
                                //Input for productSubCategory4
                                
                                requestTemplet.content.lineItems[0].productSubCategory4 = sh.getCell(6,i).getContents()
                                 //Input for hcpcsCode
                                 
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(7,i).getContents()                                                              
                                 // Input for Plan
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(8,i).getContents()
                                  // Input for ID
                                requestTemplet.content.lineItems[0].payers[0].id =sh.getCell(9,i).getContents()

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request_singleLineItem');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request_singleLineItem");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json                                 
                        addCell(0,i,json.InsuranceVerifications[0].lineItemID,sheet1);                                   
                          // get PayerID from response json                                   
                        addCell(1,i,json.InsuranceVerifications[0].payerID,sheet1);   
                          // get contactMethod from response json                           
                        addCell(2,i,json.InsuranceVerifications[0].verificationLevel,sheet1);  
                                                    
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(10,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"InsuranceVerifications[0].lineItemID","lineItemID")

                          payerID = sh.getCell(11,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID,"InsuranceVerifications[0].payerID","payerID")

                         verificationLevel = sh.getCell(12,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,verificationLevel,"InsuranceVerifications[0].verificationLevel","verificationLevel")
                                                  
                     
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(3,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(4,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(3,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="groovy" name="DetermineLevelOfInsuranceVerification_MultiLineItem" id="d7d7f749-bbd3-4c67-a763-a84abe574796"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineInsuranceVerificationLevel/DetermineInsuranceVerificationLevel-MultiLineItem-Input.xls"
def outputfile = projectDir + "/DetermineInsuranceVerificationLevel/DetermineInsuranceVerificationLevel-MultiLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"payerID",sheet1);
addCell(2,0,"verificationLevel",sheet1);
addCell(3,0,"lineItemID1",sheet1);
addCell(4,0,"payerID1",sheet1);
addCell(5,0,"verificationLevel1",sheet1);
addCell(6,0,"PASS/FAIL",sheet1);
addCell(7,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                //  Input for Line Item ID
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()                                      
                                //Input for productCategory    
                                requestTemplet.content.lineItems[0].productCategory = sh.getCell(2,i).getContents() 
                                //Input for productSubCategory1
                                requestTemplet.content.lineItems[0].productSubCategory1 = sh.getCell(3,i).getContents() 
                                //Input for productSubCategory2
                                requestTemplet.content.lineItems[0].productSubCategory2 = sh.getCell(4,i).getContents() 
                                //Input for productSubCategory3
                                requestTemplet.content.lineItems[0].productSubCategory3 = sh.getCell(5,i).getContents() 
                                //Input for productSubCategory4
                                requestTemplet.content.lineItems[0].productSubCategory4 = sh.getCell(6,i).getContents()
                                 //Input for hcpcsCode
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(7,i).getContents()    

                              //Input for payer1
                                 // Input for Plan
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(8,i).getContents()
                                  // Input for ID
                                requestTemplet.content.lineItems[0].payers[0].id =sh.getCell(9,i).getContents()
                                
                           //Input for LineItem 2
                           //  Input for Line Item ID
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(10,i).getContents()                                 
                                //Input for productCategory    
                                requestTemplet.content.lineItems[1].productCategory = sh.getCell(11,i).getContents() 
                                //Input for productSubCategory1
                                requestTemplet.content.lineItems[1].productSubCategory1 = sh.getCell(12,i).getContents() 
                                //Input for productSubCategory2
                                requestTemplet.content.lineItems[1].productSubCategory2 = sh.getCell(13,i).getContents() 
                                //Input for productSubCategory3
                                requestTemplet.content.lineItems[1].productSubCategory3 = sh.getCell(14,i).getContents() 
                                //Input for productSubCategory4
                                requestTemplet.content.lineItems[1].productSubCategory4 = sh.getCell(15,i).getContents()
                                 //Input for hcpcsCode
                                requestTemplet.content.lineItems[1].hcpcsCode = sh.getCell(16,i).getContents()  
                                // Input for Plan
                                requestTemplet.content.lineItems[1].payers[0].planName = sh.getCell(17,i).getContents()
                                 // Input for ID
                                requestTemplet.content.lineItems[1].payers[0].id =sh.getCell(18,i).getContents()

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request_MultiLineItem');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request_MultiLineItem");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json                                 
                        addCell(0,i,json.InsuranceVerifications[0].lineItemID,sheet1);                                   
                          // get PayerID from response json                                   
                        addCell(1,i,json.InsuranceVerifications[0].payerID,sheet1);   
                          // get contactMethod from response json                           
                        addCell(2,i,json.InsuranceVerifications[0].verificationLevel.toString(),sheet1); 

                         addCell(3,i,json.InsuranceVerifications[1].lineItemID,sheet1);                                   
                          // get PayerID from response json                                   
                        addCell(4,i,json.InsuranceVerifications[1].payerID,sheet1);   
                          // get contactMethod from response json                           
                        addCell(5,i,json.InsuranceVerifications[1].verificationLevel.toString(),sheet1); 
                                                    
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(19,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"InsuranceVerifications[0].lineItemID","lineItemID")

                          payerID = sh.getCell(20,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID,"InsuranceVerifications[0].payerID","payerID")

                         verificationLevel = sh.getCell(21,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,verificationLevel,"InsuranceVerifications[0].verificationLevel","verificationLevel")
                                                  
                        lineItemID1 = sh.getCell(22,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"InsuranceVerifications[1].lineItemID","lineItemID")

                          payerID1 = sh.getCell(23,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID1,"InsuranceVerifications[1].payerID","payerID")

                         verificationLevel1 = sh.getCell(24,i).getContents().toString()
                        addAssertionJsonPathMatch(testStepForAssertion,verificationLevel1,"InsuranceVerifications[1].verificationLevel","verificationLevel")
                                     
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(6,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(7,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(6,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="groovy" name="DetermineLevelOfInsuranceVerification_MultiPayers" id="ffa8fab4-ff14-48d0-99cd-58390eff0334"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineInsuranceVerificationLevel/DetermineInsuranceVerificationLevel-MultiPayer-Input.xls"
def outputfile = projectDir + "/DetermineInsuranceVerificationLevel/DetermineInsuranceVerificationLevel-MultiPayer-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"payerID",sheet1);
addCell(2,0,"verificationLevel",sheet1);
addCell(3,0,"lineItemID1",sheet1);
addCell(4,0,"payerID1",sheet1);
addCell(5,0,"verificationLevel1",sheet1);
addCell(6,0,"PASS/FAIL",sheet1);
addCell(7,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                //  Input for Line Item ID
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()                                    
                                //Input for productCategory    
                                requestTemplet.content.lineItems[0].productCategory = sh.getCell(2,i).getContents() 
                                //Input for productSubCategory1
                                requestTemplet.content.lineItems[0].productSubCategory1 = sh.getCell(3,i).getContents() 
                                //Input for productSubCategory2
                                requestTemplet.content.lineItems[0].productSubCategory2 = sh.getCell(4,i).getContents() 
                                //Input for productSubCategory3
                                requestTemplet.content.lineItems[0].productSubCategory3 = sh.getCell(5,i).getContents() 
                                //Input for productSubCategory4
                                requestTemplet.content.lineItems[0].productSubCategory4 = sh.getCell(6,i).getContents()
                                 //Input for hcpcsCode
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(7,i).getContents()    

                              //Input for payer1
                                 // Input for Plan
                                requestTemplet.content.lineItems[0].payers[0].planName = sh.getCell(8,i).getContents()
                                 // Input for ID
                                requestTemplet.content.lineItems[0].payers[0].id =sh.getCell(9,i).getContents()
                                
                           //Input for payer2
                                // Input for Plan
                                requestTemplet.content.lineItems[0].payers[1].planName = sh.getCell(10,i).getContents()
                                   // Input for ID
                                requestTemplet.content.lineItems[0].payers[1].id =sh.getCell(11,i).getContents()

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request_MultiPayer');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request_MultiPayer");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json                                 
                        addCell(0,i,json.InsuranceVerifications[0].lineItemID,sheet1);                                   
                          // get PayerID from response json                                   
                        addCell(1,i,json.InsuranceVerifications[0].payerID,sheet1);   
                          // get contactMethod from response json                           
                        addCell(2,i,json.InsuranceVerifications[0].verificationLevel,sheet1); 

                         addCell(3,i,json.InsuranceVerifications[1].lineItemID,sheet1);                                   
                          // get PayerID from response json                                   
                        addCell(4,i,json.InsuranceVerifications[1].payerID,sheet1);   
                          // get contactMethod from response json                           
                        addCell(5,i,json.InsuranceVerifications[1].verificationLevel,sheet1); 
                                                    
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(12,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"InsuranceVerifications[0].lineItemID","lineItemID")

                          payerID = sh.getCell(13,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID,"InsuranceVerifications[0].payerID","payerID")

                         verificationLevel = sh.getCell(14,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,verificationLevel,"InsuranceVerifications[0].verificationLevel","verificationLevel")
                                                  
                        lineItemID1 = sh.getCell(15,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"InsuranceVerifications[1].lineItemID","lineItemID")

                          payerID1 = sh.getCell(16,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,payerID1,"InsuranceVerifications[1].payerID","payerID")

                         verificationLevel1 = sh.getCell(17,i).getContents()
                        addAssertionJsonPathMatch(testStepForAssertion,verificationLevel1,"InsuranceVerifications[1].verificationLevel","verificationLevel")
                                     
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(6,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(7,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(6,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request_singleLineItem" id="1eb16c94-c2a1-4b62-a2e2-d723c0bed1e5"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request_singleLineItem" id="f21a31ab-9a7a-4ad0-a442-5d388b931718" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA18",
                    "planName": "0011"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "Insulin Delivery",
            "productSubCategory2": "Insulin Pump Supplies",
            "productSubCategory3": "INVALID",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request_MultiLineItem" id="78aeca69-5297-4031-a675-f7d5bfd9f483"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request_MultiLineItem" id="230b0a26-40b4-42d0-bffe-283b143b4684" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA003",
                    "planName": "null"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        },
        {
            "hcpcsCode": "null",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PA006",
                    "planName": "9027"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request_MultiPayer" id="22342277-3b73-40e4-adbc-904c586691ac"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request_MultiPayer" id="11e09e25-04de-4d5a-ba83-ae1cf4da6504" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A9274",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA002",
                    "planName": "9027"
                },
                {
                    "id": "PA004",
                    "planName": "null"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41774" id="39fe7266-4121-4f03-b859-803b0ceb4e93"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41774" id="11e09e25-04de-4d5a-ba83-ae1cf4da6504" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "0011"
                },
                {
                    "id": "PA003",
                    "planName": "INVALID"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9b2dfbf8-a2b6-4e15-800e-22cc36afe799" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="33e87f50-e891-4089-b116-e0f125ca736d" name="lineItemID"><con:configuration><path>InsuranceVerifications[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e8d57027-3cbf-498b-a155-ddb4b628c93f" name="payerID"><con:configuration><path>InsuranceVerifications[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5dcc1ba2-d208-463c-b401-2c3ff891c629" name="verificationLevel"><con:configuration><path>InsuranceVerifications[0].verificationLevel</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c687c9bd-5db4-46f2-b2dc-f15a3d0f552c" name="lineItemID"><con:configuration><path>InsuranceVerifications[1].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9069fabd-480c-48b3-8ff0-d2a18faf40ff" name="payerID"><con:configuration><path>InsuranceVerifications[1].payerID</path><content>PA003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a9dd40f4-70ca-4217-9ee3-1d261eaa8a9f" name="verificationLevel"><con:configuration><path>InsuranceVerifications[1].verificationLevel</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41775" id="a5ee254c-bdfb-4fdc-9274-ded479ff9cad"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41775" id="11e09e25-04de-4d5a-ba83-ae1cf4da6504" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A9274",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA002",
                    "planName": "9027"
                },
                {
                    "id": "PA004",
                    "planName": "null"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4a439e8a-1bef-494a-8166-2709586f7b63" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="94bd0b7b-d27e-4fe4-a1b3-6387e31727ec" name="lineItemID"><con:configuration><path>InsuranceVerifications[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="53e91c37-4fad-4e22-8405-76e4ca110035" name="payerID"><con:configuration><path>InsuranceVerifications[0].payerID</path><content>PA002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="23b91fe5-f773-41bf-9e95-54447b2bf5ff" name="verificationLevel"><con:configuration><path>InsuranceVerifications[0].verificationLevel</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f7a47be4-c41b-4f1f-94ed-523538cade5d" name="lineItemID"><con:configuration><path>InsuranceVerifications[1].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="867848a8-fce5-44e9-9cb6-6672a41a997d" name="payerID"><con:configuration><path>InsuranceVerifications[1].payerID</path><content>PA004</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b7ff0f00-98ca-484e-b136-be397cf1482c" name="verificationLevel"><con:configuration><path>InsuranceVerifications[1].verificationLevel</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41776" id="5adb557b-c143-4d93-9d7d-96e02ea3c168"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41776" id="230b0a26-40b4-42d0-bffe-283b143b4684" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA001",
                    "planName": "0011"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        },
        {
            "hcpcsCode": "E0784",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PA004",
                    "planName": "9027"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bcc770ba-24e0-4b2e-bb83-91211147e2bc" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="53d69501-dd22-450e-a56f-b6737a9c8fda" name="lineItemID"><con:configuration><path>InsuranceVerifications[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e0270afd-d012-4785-95d2-4edae7b8c557" name="payerID"><con:configuration><path>InsuranceVerifications[0].payerID</path><content>PA001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1ac15183-426a-412e-b32e-30d90740db4b" name="verificationLevel"><con:configuration><path>InsuranceVerifications[0].verificationLevel</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3ef85747-a5ff-4f2b-93e7-c0d7826257f1" name="lineItemID"><con:configuration><path>InsuranceVerifications[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8ca4621c-eae7-42d0-af65-fb7de6025ca2" name="payerID"><con:configuration><path>InsuranceVerifications[1].payerID</path><content>PA004</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d067ebfe-5c77-4e98-a10b-3f71c57d3b7a" name="verificationLevel"><con:configuration><path>InsuranceVerifications[1].verificationLevel</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41777" id="21ba751a-c125-4600-9c87-0b7c7c99a9b1"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41777" id="230b0a26-40b4-42d0-bffe-283b143b4684" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA002",
                    "planName": "0011"
                }
            ],
            "productCategory": "INVALID",
            "productSubCategory1": "Insulin Delivery",
            "productSubCategory2": "Insulin Pumps",
            "productSubCategory3": "Pods",
            "productSubCategory4": ""
        },
        {
            "hcpcsCode": "",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PA005",
                    "planName": "INVALID"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c88ccf97-0e7e-4b18-b080-a7318dd53649" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="bd02a4fc-837b-475e-aa0a-bd1017334db2" name="lineItemID"><con:configuration><path>InsuranceVerifications[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7c61887e-c1a1-4c7d-b08f-92659e6cff15" name="payerID"><con:configuration><path>InsuranceVerifications[0].payerID</path><content>PA002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7f02fdf5-0e46-4414-85c8-f10e3290d934" name="verificationLevel"><con:configuration><path>InsuranceVerifications[0].verificationLevel</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ffc8cd1f-9d73-49e4-8cd6-09892750a806" name="lineItemID"><con:configuration><path>InsuranceVerifications[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="87f7c800-616f-4392-a191-483aae968c2c" name="payerID"><con:configuration><path>InsuranceVerifications[1].payerID</path><content>PA005</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d54a06ec-40e5-4f9e-b9d4-96b0ff2a3757" name="verificationLevel"><con:configuration><path>InsuranceVerifications[1].verificationLevel</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41778" id="0e6a8248-83d4-45b8-a1b4-e2466d087792"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41778" id="230b0a26-40b4-42d0-bffe-283b143b4684" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA003",
                    "planName": "null"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        },
        {
            "hcpcsCode": "null",
            "lineItemID": "L002",
            "payers": [
                {
                    "id": "PA006",
                    "planName": "9027"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8b582c34-1ef8-40fe-a291-868ede71d9ef" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9a4e6987-653a-48ca-9870-c27a77f060f2" name="lineItemID"><con:configuration><path>InsuranceVerifications[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c489b9fd-18ce-4ac9-9f9a-ffaf8721bdbf" name="payerID"><con:configuration><path>InsuranceVerifications[0].payerID</path><content>PA003</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b4563763-ec26-4c9a-a021-149834f1ba07" name="verificationLevel"><con:configuration><path>InsuranceVerifications[0].verificationLevel</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="510c202d-a0e7-47c0-b8fe-69f6a7bc0abb" name="lineItemID"><con:configuration><path>InsuranceVerifications[1].lineItemID</path><content>L002</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="67d24358-f1ef-447a-b4b1-7ddc60db146a" name="payerID"><con:configuration><path>InsuranceVerifications[1].payerID</path><content>PA006</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9a61a729-419e-4e31-b9e7-d0d5f9029135" name="verificationLevel"><con:configuration><path>InsuranceVerifications[1].verificationLevel</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41759" id="7160bd7f-2dac-4e04-b06f-9d518c5801b1"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41759" id="f21a31ab-9a7a-4ad0-a442-5d388b931718" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA01",
                    "planName": "0011"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="71be30ef-107f-4522-87b6-fd0a85d03642" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3d32263e-9379-47cb-be4e-3f7c4e3bacf7" name="lineItemID"><con:configuration><path>InsuranceVerifications[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="57cb16cd-d220-4d4f-a587-57629bff090e" name="payerID"><con:configuration><path>InsuranceVerifications[0].payerID</path><content>PA01</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6ef9dad5-2d61-4f74-a7bd-733090c852f6" name="verificationLevel"><con:configuration><path>InsuranceVerifications[0].verificationLevel</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41760" id="8cd2b432-f1c4-4797-9c44-04320615eafe"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41760" id="f21a31ab-9a7a-4ad0-a442-5d388b931718" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA02",
                    "planName": "9471"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="924a6ecd-b49d-4bdf-8f64-20f907c09107" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="c539b769-5329-46b2-a5f9-d6df1ec5acd6" name="lineItemID"><con:configuration><path>InsuranceVerifications[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e800d8c2-3641-4af2-8c78-2a036585be01" name="payerID"><con:configuration><path>InsuranceVerifications[0].payerID</path><content>PA02</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="20392598-5a53-4c8e-b44b-0a7ccdc65747" name="verificationLevel"><con:configuration><path>InsuranceVerifications[0].verificationLevel</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41761" id="4e7b1b31-ab72-421d-8f19-517e2554b0d4"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41761" id="f21a31ab-9a7a-4ad0-a442-5d388b931718" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA03",
                    "planName": "0011"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "Insulin Delivery",
            "productSubCategory2": "Insulin Pump Supplies",
            "productSubCategory3": "Pods",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="cb72f103-e65c-45a2-9419-8808de2f4821" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="35c4fdcd-c345-4523-8ed8-397f15dc79de" name="lineItemID"><con:configuration><path>InsuranceVerifications[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2d8eda6a-f518-4222-b01d-f226dd6d8244" name="payerID"><con:configuration><path>InsuranceVerifications[0].payerID</path><content>PA03</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2cec4705-9070-445b-b590-13228ab0427a" name="verificationLevel"><con:configuration><path>InsuranceVerifications[0].verificationLevel</path><content>2</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41762" id="6d912879-a1db-45d4-b408-29b517752a9d"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41762" id="f21a31ab-9a7a-4ad0-a442-5d388b931718" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA04",
                    "planName": "9027"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "Continuous Glucose Monitors",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="99ff6dda-8522-4968-8b77-9cde6aded377" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d4e7ea43-52c9-4aac-922a-651b4a6416de" name="lineItemID"><con:configuration><path>InsuranceVerifications[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="fe88aa96-47c9-4666-9196-347ded54f701" name="payerID"><con:configuration><path>InsuranceVerifications[0].payerID</path><content>PA04</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4770f38f-fd86-4556-9ffe-fb66c9e2e32c" name="verificationLevel"><con:configuration><path>InsuranceVerifications[0].verificationLevel</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41763" id="1f0e7970-875a-4f93-972b-fc978bc6e577"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41763" id="f21a31ab-9a7a-4ad0-a442-5d388b931718" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA06",
                    "planName": "7932"
                }
            ],
            "productCategory": "Breast Pump",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ce13f1ce-feab-4eee-8a08-e869288e6d4c" name="Valid HTTP Status Codes_6"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cf0b7d54-ac50-486e-a35f-f18c943008f3" name="lineItemID"><con:configuration><path>InsuranceVerifications[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6aeedc6a-b01f-43b0-9536-6a99c82a4cac" name="payerID"><con:configuration><path>InsuranceVerifications[0].payerID</path><content>PA06</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1f0a58ff-8e61-4d0e-8c43-add1d7219bb0" name="verificationLevel"><con:configuration><path>InsuranceVerifications[0].verificationLevel</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41764" id="370c4000-5a9c-401c-a03e-3231b79a1a64"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41764" id="f21a31ab-9a7a-4ad0-a442-5d388b931718" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A9274",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA08",
                    "planName": "9027"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1d0c1ec4-32ab-42e2-931d-75128422c861" name="Valid HTTP Status Codes_7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="abb889e1-a5b6-4feb-a5a4-3cc6ff9649bf" name="lineItemID"><con:configuration><path>InsuranceVerifications[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="cf4c21c8-ce9c-4a1f-ad8b-c28d10b0c41f" name="payerID"><con:configuration><path>InsuranceVerifications[0].payerID</path><content>PA08</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="df76f8c3-de6b-42c6-a683-1932bfa2d269" name="verificationLevel"><con:configuration><path>InsuranceVerifications[0].verificationLevel</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41765" id="04e7c8a4-e9de-40e0-bbcc-ef37b24c8cc9"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41765" id="f21a31ab-9a7a-4ad0-a442-5d388b931718" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA09",
                    "planName": "9027"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "INVALID",
            "productSubCategory2": "Continuous Glucose Monitors",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="5b6281d3-1f5d-4f2e-84c7-5a2efef9a3b1" name="Valid HTTP Status Codes_8"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="d98a6088-f17f-4272-bdc9-39d70baeef86" name="lineItemID"><con:configuration><path>InsuranceVerifications[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="860fb7fe-785e-464e-8dee-cf636fcda5a6" name="payerID"><con:configuration><path>InsuranceVerifications[0].payerID</path><content>PA09</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="3c02320a-a0a7-49a8-bcbb-d990e852dac7" name="verificationLevel"><con:configuration><path>InsuranceVerifications[0].verificationLevel</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41766" id="cfbed580-5d6f-44e8-ac2e-507f1b7dffb4"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41766" id="f21a31ab-9a7a-4ad0-a442-5d388b931718" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA10",
                    "planName": "INVALID"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "Diabetes Testing",
            "productSubCategory2": "Continuous Glucose Monitors",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c6b1d837-0906-44a8-ba73-97fedc19f255" name="Valid HTTP Status Codes_9"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="220e6822-2aaa-4b3a-a979-0070aa585eef" name="lineItemID"><con:configuration><path>InsuranceVerifications[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6c1c2c44-5f62-450c-bb47-97a10168ea56" name="payerID"><con:configuration><path>InsuranceVerifications[0].payerID</path><content>PA10</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="21e491bb-b6c5-4be7-8367-b28a537327ca" name="verificationLevel"><con:configuration><path>InsuranceVerifications[0].verificationLevel</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41767" id="b46ed552-dce8-40d7-aa05-bcf58fbeb566"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41767" id="f21a31ab-9a7a-4ad0-a442-5d388b931718" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "INVALID",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA11",
                    "planName": "9027"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="acf925fe-0a0e-4e64-83b7-ae442b3b9f07" name="Valid HTTP Status Codes_10"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2d57a0e7-4c32-493a-a7e6-a4407bda519f" name="lineItemID"><con:configuration><path>InsuranceVerifications[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="0a0e0caf-08e9-4d89-bb5d-d1a98f1c051d" name="payerID"><con:configuration><path>InsuranceVerifications[0].payerID</path><content>PA11</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="f47e7029-f648-43a0-8e6d-5007a2bb1468" name="verificationLevel"><con:configuration><path>InsuranceVerifications[0].verificationLevel</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41768" id="ca8aadfc-4fc0-4c9b-8b95-d291abf60553"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41768" id="f21a31ab-9a7a-4ad0-a442-5d388b931718" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA12",
                    "planName": "INVALID"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="44a984e3-1052-4ff8-9033-5c4e2f860cc1" name="Valid HTTP Status Codes_11"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2a06e428-0da9-4141-a621-5bcf2a498ff1" name="lineItemID"><con:configuration><path>InsuranceVerifications[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="dc7f3839-308f-4d63-b1a4-de577f007a0b" name="payerID"><con:configuration><path>InsuranceVerifications[0].payerID</path><content>PA12</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="15f122f0-b63f-4765-a693-d7266c7c2411" name="verificationLevel"><con:configuration><path>InsuranceVerifications[0].verificationLevel</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41769" id="4f8d4351-4b29-45b5-9c0c-a733893488ce"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41769" id="f21a31ab-9a7a-4ad0-a442-5d388b931718" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA13",
                    "planName": "INVALID"
                }
            ],
            "productCategory": "Breast Pump",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="819b4d3b-627a-44b4-9e66-09830cdfca57" name="Valid HTTP Status Codes_12"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="20576217-721e-48de-8d3d-2e6a56d71a60" name="lineItemID"><con:configuration><path>InsuranceVerifications[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="47c993f2-be3a-41d6-b601-0f794785ca28" name="payerID"><con:configuration><path>InsuranceVerifications[0].payerID</path><content>PA13</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="46ca2daf-a49d-4152-9aa6-565314d35e4c" name="verificationLevel"><con:configuration><path>InsuranceVerifications[0].verificationLevel</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41770" id="c213e11b-16f7-4c9d-b386-cd8bbe9b59d5"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41770" id="f21a31ab-9a7a-4ad0-a442-5d388b931718" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA14",
                    "planName": "INVALID"
                }
            ],
            "productCategory": "INVALID",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="47a4afc7-6f5d-4f5c-9d59-3d4dd3401690" name="Valid HTTP Status Codes_13"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="818d424f-7846-40f7-a3a2-a7d60d9cc756" name="lineItemID"><con:configuration><path>InsuranceVerifications[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aa8b2bc3-b693-46e7-be63-ea84efe5ffe0" name="payerID"><con:configuration><path>InsuranceVerifications[0].payerID</path><content>PA14</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="88f963f7-25e5-4ffe-8788-5731b5e47474" name="verificationLevel"><con:configuration><path>InsuranceVerifications[0].verificationLevel</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41771" id="08909b2d-fc42-421e-a585-b4cd27f51bcf"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41771" id="f21a31ab-9a7a-4ad0-a442-5d388b931718" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA15",
                    "planName": "7932"
                }
            ],
            "productCategory": "null",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="5c8ec523-8c50-4ef6-b52e-82d2e6787ed3" name="Valid HTTP Status Codes_14"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="5d82dc55-d57f-4c05-bd34-71b7fb2f340b" name="lineItemID"><con:configuration><path>InsuranceVerifications[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="184cf006-4236-46fc-8721-4ce460512e4f" name="payerID"><con:configuration><path>InsuranceVerifications[0].payerID</path><content>PA15</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8ded9a11-c667-4170-a20b-721f8126aab3" name="verificationLevel"><con:configuration><path>InsuranceVerifications[0].verificationLevel</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41772" id="61682048-6646-409a-b6fd-51597dea11bc"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41772" id="f21a31ab-9a7a-4ad0-a442-5d388b931718" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "INVALID",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA16",
                    "planName": "INVALID"
                }
            ],
            "productCategory": "",
            "productSubCategory1": "",
            "productSubCategory2": "",
            "productSubCategory3": "",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ccde7140-7ead-4d06-ab4d-d70814d2ed4d" name="Valid HTTP Status Codes_15"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="196e728a-65f3-48b8-bdc6-6896f63b0d59" name="lineItemID"><con:configuration><path>InsuranceVerifications[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="8a521b86-79b5-45aa-9eaf-3afbaf98ffd4" name="payerID"><con:configuration><path>InsuranceVerifications[0].payerID</path><content>PA16</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="2b3228d9-8154-4131-b66a-96215d1c2a02" name="verificationLevel"><con:configuration><path>InsuranceVerifications[0].verificationLevel</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41773" id="8459be97-8c63-46fc-894e-c1c8059dad58"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41773" id="f21a31ab-9a7a-4ad0-a442-5d388b931718" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "INVALID",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA17",
                    "planName": "INVALID"
                }
            ],
            "productCategory": "INVALID",
            "productSubCategory1": "INVALID",
            "productSubCategory2": "INVALID",
            "productSubCategory3": "INVALID",
            "productSubCategory4": "INVALID"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="04115536-c1d8-43ff-ae4e-0f40d8154a0c" name="Valid HTTP Status Codes_16"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e2642ac8-cedb-48cb-94af-1dec42038528" name="lineItemID"><con:configuration><path>InsuranceVerifications[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="01092f0a-73dd-43f6-b097-deb6a3f7802f" name="payerID"><con:configuration><path>InsuranceVerifications[0].payerID</path><content>PA17</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="6485611d-0f5c-4bf7-9338-6f595930ccc3" name="verificationLevel"><con:configuration><path>InsuranceVerifications[0].verificationLevel</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-41779" id="a332ee1d-a52b-43e0-902c-ced41d64ee6f"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL" methodName="DetermineLevelOfInsuranceVerification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-41779" id="f21a31ab-9a7a-4ad0-a442-5d388b931718" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001",
            "payers": [
                {
                    "id": "PA18",
                    "planName": "0011"
                }
            ],
            "productCategory": "Diabetes",
            "productSubCategory1": "Insulin Delivery",
            "productSubCategory2": "Insulin Pump Supplies",
            "productSubCategory3": "INVALID",
            "productSubCategory4": ""
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineLevelOfInsuranceVerification/DetermineLevelOfInsuranceVerification/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="337ac210-1139-4b7c-b995-1c2b8db323fe" name="Valid HTTP Status Codes_17"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9f6c933c-f5c9-4e9b-9e55-4d37dbb98bcb" name="lineItemID"><con:configuration><path>InsuranceVerifications[0].lineItemID</path><content>L001</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="e45d405b-673d-4d8e-9b7c-81d331dfbce0" name="payerID"><con:configuration><path>InsuranceVerifications[0].payerID</path><content>PA18</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="9fadad70-699e-45c3-8e26-34c51739ed7e" name="verificationLevel"><con:configuration><path>InsuranceVerifications[0].verificationLevel</path><content>3</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="a5dde9e2-9087-463a-b59e-4c6ad2f08a20" name="DetermineBaseItemHcpcsCodes"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="13277cbb-9d3d-4a59-af4c-b967cee5e356" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineBaseItemHcpcsCodes" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DetermineBaseItemHcpcsCodes" id="84ae51f7-d035-42ae-9386-3773543b5e70"><con:settings/><con:config><script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes-Input.xls"//service name
def outputfile = projectDir + "/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes-Output.xls"



//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file 
addCell(0,0,"HCPCsCode1_In_Response",sheet1);
addCell(1,0,"BaseItemHCPCSCode1_In_Response",sheet1);
addCell(2,0,"HCPCsCode2_In_Response",sheet1);
addCell(3,0,"BaseItemHCPCSCode2_In_Response",sheet1);
addCell(4,0,"PASS/FAIL",sheet1);
addCell(5,0,"FAILED DUE TO",sheet1);


//new testStepName
def newTestStep=null
try {    
                def req = jreq.getContents()
               
              
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplete = new JsonBuilder(slurper);
                 //log.info "req"+requestTemplete
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(0,i)
					     def TestCaseName = varTestCaseName.getContents()
                             
				          //Input for hcpcsCode
				          requestTemplete.content.lineItems[0].hcpcsCode =  sh.getCell(1,i).getContents().toString()
						requestTemplete.content.lineItems[1].hcpcsCode =  sh.getCell(1,i).getContents().toString() 
				                                  
                                //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSON Request");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                //def response = context.expand( '${TestRequest#Response}' ).toString()
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                
				  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                               // extract the value of required elements fron the json response 		
                      		       // get hcpcsCode from response json   
                              addCell(0,i,json.lineItems[0].hcpcsCode.toString(),sheet1);
                          	addCell(2,i,json.lineItems[1].hcpcsCode.toString(),sheet1);	

                          		 // get baseItemHcpcCodes from response json   
						addCell(1,i,json.lineItems[0].baseItemHcpcCodes.toString(),sheet1);	
						addCell(3,i,json.lineItems[1].baseItemHcpcCodes.toString(),sheet1);
					
			                //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
						 //get the expected values
						 baseItemHcpcCodes1 = sh.getCell(2,i).getContents().toString()  						 					
                                addAssertionJsonPathMatch(testStepForAssertion,baseItemHcpcCodes1,"lineItems[0].baseItemHcpcCodes","baseItemHcpcCodes")
						 
						  baseItemHcpcCodes2 = sh.getCell(2,i).getContents().toString()
						  addAssertionJsonPathMatch(testStepForAssertion,baseItemHcpcCodes2,"lineItems[1].baseItemHcpcCodes","baseItemHcpcCodes")
								
						 
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(4,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(5,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(4,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
                }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{
     //close workbook
     wb.close();
     wb1.close();       
     
}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="JSON Request" id="809a515d-1236-4fd4-be9c-a633dffe349a"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL" methodName="DetermineBaseItemHcpcsCodes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="JSON Request" id="1cdca625-9abb-476f-8d86-0115a4887e4d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "bundles/DetermineBaseItemHcpcsCodes",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4233",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "A4233",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-6904" id="f17a022d-d7b7-4e43-9436-2dbd4eecb2c9"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL" methodName="DetermineBaseItemHcpcsCodes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-6904" id="1cdca625-9abb-476f-8d86-0115a4887e4d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "bundles/DetermineBaseItemHcpcsCodes",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "!@#$%^&amp;*()",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "!@#$%^&amp;*()",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d88b8728-3ab0-4cbe-b9b7-425a7580fc9d" name="Valid HTTP Status Codes_2"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="08e95725-fce1-400c-b92b-8781f76e536f" name="baseItemHcpcCodes"><con:configuration><path>lineItems[0].baseItemHcpcCodes</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="10622926-3258-47ae-940e-aac3c8e3e398" name="baseItemHcpcCodes"><con:configuration><path>lineItems[1].baseItemHcpcCodes</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-6905" id="af9078b9-2407-46fe-99d6-78e6acaf87de"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL" methodName="DetermineBaseItemHcpcsCodes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-6905" id="1cdca625-9abb-476f-8d86-0115a4887e4d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "bundles/DetermineBaseItemHcpcsCodes",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "null",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "null",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8c14e8ed-0812-4204-8909-c986ddbd3638" name="Valid HTTP Status Codes_3"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="ac94f6a0-73c3-4376-ad66-6bd1c62580ed" name="baseItemHcpcCodes"><con:configuration><path>lineItems[0].baseItemHcpcCodes</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="a2753d8c-2c3d-4808-bfea-db444aefdc27" name="baseItemHcpcCodes"><con:configuration><path>lineItems[1].baseItemHcpcCodes</path><content>null</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-6906" id="1e05dd79-3e2f-4844-ae1c-a2c60bb7a90b"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL" methodName="DetermineBaseItemHcpcsCodes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-6906" id="1cdca625-9abb-476f-8d86-0115a4887e4d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "bundles/DetermineBaseItemHcpcsCodes",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4236",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "A4236",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9959d967-dbab-488d-874e-3d2d596c71bc" name="Valid HTTP Status Codes_4"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="aac79334-a31d-486f-bec5-8a49160d247c" name="baseItemHcpcCodes"><con:configuration><path>lineItems[0].baseItemHcpcCodes</path><content>["K0553"]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="7080f63e-3249-4b48-ac88-72dd6a7d7e7e" name="baseItemHcpcCodes"><con:configuration><path>lineItems[1].baseItemHcpcCodes</path><content>["K0553"]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="EPST-10501" id="bb348aca-4b79-44ec-88f6-32c43887074a"><con:settings/><con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL" methodName="DetermineBaseItemHcpcsCodes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EPST-10501" id="1cdca625-9abb-476f-8d86-0115a4887e4d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://lqec5009c1ods01:9080</con:endpoint><con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "bundles/DetermineBaseItemHcpcsCodes",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4233",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "A4233",
            "lineItemID": "L002"
        }
    ]
}</con:request><con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9afa12f7-8d08-480a-a358-7693bb339756" name="Valid HTTP Status Codes_5"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="b4881c47-d102-4172-b512-99acb8ef4d7a" name="baseItemHcpcCodes"><con:configuration><path>lineItems[0].baseItemHcpcCodes</path><content>["A9276","K0553"]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4a02d046-9187-4b95-b9ab-aeaa7c434970" name="baseItemHcpcCodes"><con:configuration><path>lineItems[1].baseItemHcpcCodes</path><content>["A9276","K0553"]</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:endpoint mode="COMPLEMENT" username="DatapowerCares\, PCF (AP)" password="mHio2:Z2XoN">https://sg.ws.dev.cardinalhealth.net:4333/Medical/Cares/CalculateMedDocExpiration/V1_0</con:endpoint><con:endpoint mode="COMPLEMENT" username="DatapowerCares\, PCF (AP)" password="mHio2:Z2XoN">https://sg.ws.dev.cardinalhealth.net:4333/Medical/Cares/MedDocsNeeded/V1_0</con:endpoint><con:endpoint mode="COMPLEMENT" username="DatapowerCares\, PCF (AP)" password="mHio2:Z2XoN">https://sg.ws.dev.cardinalhealth.net:4333/Medical/Cares/DetermineDWOFormFields/V1_0</con:endpoint><con:endpoint mode="COMPLEMENT" username="DatapowerCares\, PCF (AP)" password="mHio2:Z2XoN">https://sg.ws.dev.cardinalhealth.net:4333/Medical/Cares/DetermineMedDocStartDate/V1_0</con:endpoint><con:endpoint mode="COMPLEMENT" username="DatapowerCares\, PCF (AP)" password="mHio2:Z2XoN">https://sg.ws.dev.cardinalhealth.net:4333/Medical/Cares/DeterminePriorAuthRequired/V1_0</con:endpoint><con:endpoint mode="COMPLEMENT" username="DatapowerCares\, PCF (AP)" password="mHio2:Z2XoN">https://sg.ws.dev.cardinalhealth.net:4333/Medical/Cares/EvaluateOrderLimits/V1_0</con:endpoint><con:endpoint mode="COMPLEMENT" username="DatapowerCares\, PCF (AP)" password="mHio2:Z2XoN">https://sg.ws.dev.cardinalhealth.net:4333/Medical/Cares/ValidateMedDocPerMedPolicy/V1_0</con:endpoint><con:endpoint mode="COMPLEMENT" username="DatapowerCares\, PCF (AP)" password="mHio2:Z2XoN">https://sg.ws.dev.cardinalhealth.net:4333/Medical/Cares/GroupTasks/V1_0</con:endpoint><con:endpoint mode="COMPLEMENT" username="rakesh.jha">https://ldil0219c1ods01.cardinalhealth.net:9082</con:endpoint><con:endpoint mode="COMPLEMENT" username="CaresPcf\, SGqa (AP)" password="V9oHsTR6o]tsxoCAT15Jw">https://sg.ws.qa.cardinalhealth.net:4443/Medical/Cares/GroupTasks/V1_0</con:endpoint></con:endpointStrategy><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>
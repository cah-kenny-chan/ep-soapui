<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="13277cbb-9d3d-4a59-af4c-b967cee5e356" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineBaseItemHcpcsCodes" searchProperties="true" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="13277cbb-9d3d-4a59-af4c-b967cee5e356fileName">DetermineBaseItemHcpcsCodes</con:setting>
  </con:settings>
  <con:testStep type="groovy" name="DetermineBaseItemHcpcsCodes_SingleLineItem" id="84ae51f7-d035-42ae-9386-3773543b5e70">
    <con:settings/>
    <con:config>
      <script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes-Input.xls"
def outputfile = projectDir + "/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes_SingleLineItem_Output.xls"



//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("SingleLineItem")
Sheet jsonInput = wb.getSheet("JSON-SingleLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file 
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"hcpcsCode",sheet1);
addCell(2,0,"baseItemHcpcCodes",sheet1);
addCell(3,0,"PASS/FAIL",sheet1);
addCell(4,0,"FAILED DUE TO",sheet1);


//new testStepName
def newTestStep=null
//try {    
                def req = jreq.getContents()
               
              
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplete = new JsonBuilder(slurper);
                 //log.info "req"+requestTemplete
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(0,i)
					     def TestCaseName = varTestCaseName.getContents()
                             
				          //Input for hcpcsCode
				          requestTemplete.content.lineItems[0].lineItemID =  sh.getCell(1,i).getContents().toString()
						requestTemplete.content.lineItems[0].hcpcsCode =  sh.getCell(2,i).getContents().toString() 
										                                  
                                //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSON Request");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                //def response = context.expand( '${TestRequest#Response}' ).toString()
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                
				  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                               // extract the value of required elements fron the json response 		
                      		       // get hcpcsCode from response json   
                              addCell(0,i,json.lineItems[0].lineItemID.toString(),sheet1);
                          	addCell(1,i,json.lineItems[0].hcpcsCode.toString(),sheet1);	
                          	addCell(2,i,json.lineItems[0].baseItemHcpcCodes.toString(),sheet1);	
					
			                //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
						 //get the expected values
						 lineItemID = sh.getCell(3,i).getContents().toString()  						 					
                                addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"lineItems[0].lineItemID","lineItemID")

						  hcpcsCode = sh.getCell(4,i).getContents().toString()  						 					
                                addAssertionJsonPathMatch(testStepForAssertion,hcpcsCode,"lineItems[0].hcpcsCode","hcpcsCode")
                                
						  baseItemHcpcCodes = sh.getCell(5,i).getContents().toString()
						  addAssertionJsonPathMatch(testStepForAssertion,baseItemHcpcCodes,"lineItems[0].baseItemHcpcCodes","baseItemHcpcCodes")
								
						 
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(3,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(4,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(3,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
               /* }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{*/
     //close workbook
     wb.close();
     wb1.close();       
     
//}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="JSON Request" id="809a515d-1236-4fd4-be9c-a633dffe349a">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL" methodName="DetermineBaseItemHcpcsCodes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="JSON Request" id="1cdca625-9abb-476f-8d86-0115a4887e4d" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4233",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "A4244",
            "lineItemID": "L002"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL</con:originalUri>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="DetermineBaseItemHcpcsCodes_Multi Line Item" id="8fd71c0c-e43d-4b2f-be14-625371542930">
    <con:settings/>
    <con:config>
      <script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes-Input.xls"
def outputfile = projectDir + "/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes_MultiLineItem_Output.xls"



//Creating workbook for reading value from Excel Sheet 
Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("MultiLineItem")
Sheet jsonInput = wb.getSheet("JSON-MultiLineItem")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();

Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file 
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"hcpcsCode",sheet1);
addCell(2,0,"baseItemHcpcCodes",sheet1);
addCell(3,0,"lineItemID",sheet1);
addCell(4,0,"hcpcsCode",sheet1);
addCell(5,0,"baseItemHcpcCodes",sheet1);
addCell(6,0,"PASS/FAIL",sheet1);
addCell(7,0,"FAILED DUE TO",sheet1);


//new testStepName
def newTestStep=null
//try {    
                def req = jreq.getContents()
               
              
                //Assigning request value dynamically
                //request
                def slurper = new JsonSlurper().parseText(req);
                def requestTemplete = new JsonBuilder(slurper);
                 //log.info "req"+requestTemplete
                for (i=2;i&lt;rc;i++){
                	
						// Input for TestCaseName
					     Cell varTestCaseName = sh.getCell(0,i)
					     def TestCaseName = varTestCaseName.getContents()
                             
				          //Input for hcpcsCode
				          requestTemplete.content.lineItems[0].lineItemID =  sh.getCell(1,i).getContents().toString()
						requestTemplete.content.lineItems[0].hcpcsCode =  sh.getCell(2,i).getContents().toString() 
						
				          requestTemplete.content.lineItems[1].lineItemID =  sh.getCell(3,i).getContents().toString()
						requestTemplete.content.lineItems[1].hcpcsCode =  sh.getCell(4,i).getContents().toString()
				                                  
                                //Assign json request to variable
                                def jsonReqAsString = requestTemplete.toPrettyString()
                                def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                                restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                                def getTestCase = testRunner.testCase;
                                def testst = testRunner.testCase.getTestStepByName("JSON Request");                  
                                newTestStep = TestCaseName
                                cleanUp(newTestStep)
                                getTestCase.cloneStep(restRequest,newTestStep)
                               
                     		   //teststep cloned: End
                                //Executing the testcase
                                testRunner.runTestStepByName(newTestStep)
 
                                //retrive response
                                //def response = context.expand( '${TestRequest#Response}' ).toString()
                                def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                                
				  
                                //new JsonSlurper to parse and get the response in Json format
                                def slurper1 = new JsonSlurper()
                                def json = slurper1.parseText(ResponseMessage)

                               // extract the value of required elements fron the json response 		
                      		       // get hcpcsCode from response json   
                              addCell(0,i,json.lineItems[0].lineItemID.toString(),sheet1);
                          	addCell(1,i,json.lineItems[0].hcpcsCode.toString(),sheet1);	
                          	addCell(2,i,json.lineItems[0].baseItemHcpcCodes.toString(),sheet1);	
						
						addCell(3,i,json.lineItems[1].lineItemID.toString(),sheet1);
                          	addCell(4,i,json.lineItems[1].hcpcsCode.toString(),sheet1);	
                          	addCell(5,i,json.lineItems[1].baseItemHcpcCodes.toString(),sheet1);
					
			                //dynamic asserstion :Start
                                def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
						  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
							
						 //get the expected values
						  lineItemID = sh.getCell(5,i).getContents().toString()  						 					
                                addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"lineItems[0].lineItemID","lineItemID")

						  hcpcsCode = sh.getCell(6,i).getContents().toString()  						 					
                                addAssertionJsonPathMatch(testStepForAssertion,hcpcsCode,"lineItems[0].hcpcsCode","hcpcsCode")
                                
						  baseItemHcpcCodes = sh.getCell(7,i).getContents().toString()
						  addAssertionJsonPathMatch(testStepForAssertion,baseItemHcpcCodes,"lineItems[0].baseItemHcpcCodes","baseItemHcpcCodes")
								
						  lineItemID1 = sh.getCell(8,i).getContents().toString()  						 					
                                addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"lineItems[1].lineItemID","lineItemID1")

						  hcpcsCode1 = sh.getCell(9,i).getContents().toString()  						 					
                                addAssertionJsonPathMatch(testStepForAssertion,hcpcsCode1,"lineItems[1].hcpcsCode","hcpcsCode1")
                                
						  baseItemHcpcCodes1 = sh.getCell(10,i).getContents().toString()
						  addAssertionJsonPathMatch(testStepForAssertion,baseItemHcpcCodes1,"lineItems[1].baseItemHcpcCodes","baseItemHcpcCodes1")
							
                                //dynamic asserstion :End
                                assertionResult = testStepForAssertion.getAssertionStatus()
                                if(assertionResult.toString().equals("FAILED")){
                                   addCell(6,i,"Fail",sheet1);
             				for( assertion in testStepForAssertion.assertionList ){
                                                for( e in assertion.errors ){
                                                    addCell(7,i,e.message,sheet1);
                                                }  
                                   }
                                }
                                else{
                                  addCell(6,i,"PASS",sheet1); 
                                }
								}
								 wb1.write();
                log.info "TestCase Execution Completed successfull"
               /* }              
               
             
catch(Exception e)
{
                log.info(e)                           
}
finally
{*/
     //close workbook
     wb.close();
     wb1.close();       
     
//}
  //Method code 
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) { 
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true)  
}
   //Method code 
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) { 
         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
                    StatusCodeAssertionxpath.name = assertionName
                    StatusCodeAssertionxpath.codes=200
}
//method to delete
def cleanUp(String requestName){
                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)
                if (testStep!=null){
                                                testCase.removeTestStep(testStep)
                }
                
                //remove the teststep::End
}
//method to add Cell to sheet1
def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){
                Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);                
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-65273" id="255060e0-4658-4a46-baa7-ef29f2047f55">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL" methodName="DetermineBaseItemHcpcsCodes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-65273" id="1cdca625-9abb-476f-8d86-0115a4887e4d" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4244",
            "lineItemID": "L001"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="2fe54f74-82e4-4489-8a18-39af781aa105" name="Valid HTTP Status Codes_2">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="9c958038-deff-4b86-a281-ddc77f895cd7" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="56cdeb17-e190-408a-8d3f-db47d6749349" name="hcpcsCode">
          <con:configuration>
            <path>lineItems[0].hcpcsCode</path>
            <content>A4244</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="6692b814-86ff-45e5-9083-041226ec8017" name="baseItemHcpcCodes">
          <con:configuration>
            <path>lineItems[0].baseItemHcpcCodes</path>
            <content>["K0553"]</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-65274" id="c6c1acf3-5614-4a73-ba30-fc62c3829735">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL" methodName="DetermineBaseItemHcpcsCodes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-65274" id="1cdca625-9abb-476f-8d86-0115a4887e4d" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "null",
            "lineItemID": "L001"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="19380157-90c6-4e92-81ef-5502fb1cf215" name="Valid HTTP Status Codes_3">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d9456808-405f-45cc-a1f2-6345740a6eba" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="0a5404a5-8a16-43f2-bd01-c389f04a7377" name="hcpcsCode">
          <con:configuration>
            <path>lineItems[0].hcpcsCode</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="6a8e1aec-24fc-4cae-990d-7dcdf6e036ea" name="baseItemHcpcCodes">
          <con:configuration>
            <path>lineItems[0].baseItemHcpcCodes</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-65275" id="c61cb738-32fc-42c9-85ec-290d0f713f15">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL" methodName="DetermineBaseItemHcpcsCodes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-65275" id="1cdca625-9abb-476f-8d86-0115a4887e4d" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "AA1234",
            "lineItemID": "L001"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="9003d696-4731-47b8-8733-c49bee9086bc" name="Valid HTTP Status Codes_4">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f89c980c-c0ee-4c6e-8ae2-8ad580cb0eda" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="fee25b6f-0f62-4eb8-8e2a-5c51c35a6c2a" name="hcpcsCode">
          <con:configuration>
            <path>lineItems[0].hcpcsCode</path>
            <content>AA1234</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="bba2fbb6-6025-4f67-934d-c10edf65dd6c" name="baseItemHcpcCodes">
          <con:configuration>
            <path>lineItems[0].baseItemHcpcCodes</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-65276" id="b6014687-7066-4bef-903d-1cb18799074f">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL" methodName="DetermineBaseItemHcpcsCodes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-65276" id="1cdca625-9abb-476f-8d86-0115a4887e4d" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4233",
            "lineItemID": "L001"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="d3ccf04a-cc6b-4fa4-bdc1-696f684ceabd" name="Valid HTTP Status Codes_5">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="18f6d0b5-3533-4d0d-8fa0-0257dd6599b6" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="76c4e99f-d96d-492c-af21-b5233ab0b8b2" name="hcpcsCode">
          <con:configuration>
            <path>lineItems[0].hcpcsCode</path>
            <content>A4233</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="2f8a22e1-6b17-4be9-b578-d0b37a55ac1e" name="baseItemHcpcCodes">
          <con:configuration>
            <path>lineItems[0].baseItemHcpcCodes</path>
            <content>["A9276","K0553"]</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-65277" id="98eed146-1fde-482a-a6fc-32059b342507">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL" methodName="DetermineBaseItemHcpcsCodes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-65277" id="1cdca625-9abb-476f-8d86-0115a4887e4d" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4244",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "",
            "lineItemID": "L002"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="4296c11e-50cb-4790-bb4f-a32e96a411f8" name="Valid HTTP Status Codes_2">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="30ebbb67-d2a3-4594-829d-30ce705cb3af" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="bf67dd1c-dcd6-4dc3-8cba-8417802abf82" name="hcpcsCode">
          <con:configuration>
            <path>lineItems[0].hcpcsCode</path>
            <content>A4244</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="420d619a-ee81-4b9f-9f5c-9e66af53c9da" name="baseItemHcpcCodes">
          <con:configuration>
            <path>lineItems[0].baseItemHcpcCodes</path>
            <content>["K0553"]</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="250724e2-a042-4432-b154-5b649d8209a1" name="lineItemID1">
          <con:configuration>
            <path>lineItems[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e0e287f6-50d5-4a25-bf9a-015f592636b4" name="hcpcsCode1">
          <con:configuration>
            <path>lineItems[1].hcpcsCode</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="0c1c9c14-ec1d-4830-bd6a-9ee01788470f" name="baseItemHcpcCodes1">
          <con:configuration>
            <path>lineItems[1].baseItemHcpcCodes</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-65278" id="677332b5-31eb-4f05-a341-dc0a67eea636">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL" methodName="DetermineBaseItemHcpcsCodes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-65278" id="1cdca625-9abb-476f-8d86-0115a4887e4d" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "null",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "AA1234",
            "lineItemID": "L002"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="6020fdba-260e-478d-bc40-841362d062e0" name="Valid HTTP Status Codes_3">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f7aab7f4-403b-447d-b6c6-2c97b47a4b8b" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a94febf8-f7e8-436f-a1cc-e7e5a6c167b5" name="hcpcsCode">
          <con:configuration>
            <path>lineItems[0].hcpcsCode</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e919e026-29f3-4aac-92de-018b5c10da89" name="baseItemHcpcCodes">
          <con:configuration>
            <path>lineItems[0].baseItemHcpcCodes</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="63133c4a-1eff-47ab-abda-be85d3a49179" name="lineItemID1">
          <con:configuration>
            <path>lineItems[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e5ece893-80f8-4728-8ba5-a47b242ead64" name="hcpcsCode1">
          <con:configuration>
            <path>lineItems[1].hcpcsCode</path>
            <content>AA1234</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d36be3a0-efd4-4a6a-8044-ece8e5d8ab0c" name="baseItemHcpcCodes1">
          <con:configuration>
            <path>lineItems[1].baseItemHcpcCodes</path>
            <content>null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-65279" id="dc7a91ac-e69d-47e0-8a38-2af2a1378e08">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL" methodName="DetermineBaseItemHcpcsCodes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-65279" id="1cdca625-9abb-476f-8d86-0115a4887e4d" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "Bundles/BaseItemHcPc",
            "correlationID": " IrKi27e1lMYrHGqA5CZRGL6i ",
            "from": "PCF",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4233",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "A4244",
            "lineItemID": "L002"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineBaseItemHcpcsCodes/DetermineBaseItemHcpcsCodes/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="10859fab-9e15-45ef-b130-9fc65997e565" name="Valid HTTP Status Codes_4">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="bbc56276-5e43-44de-b6bf-7c13df66425d" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="78fd71ad-ec1a-456b-88f6-e881bf17cbab" name="hcpcsCode">
          <con:configuration>
            <path>lineItems[0].hcpcsCode</path>
            <content>A4233</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="cbf11548-c1bf-49d9-a151-8efbc5f5ce30" name="baseItemHcpcCodes">
          <con:configuration>
            <path>lineItems[0].baseItemHcpcCodes</path>
            <content>["A9276","K0553"]</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="09aa1a0d-6ea0-439d-bdcf-5ad754c41710" name="lineItemID1">
          <con:configuration>
            <path>lineItems[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="3eac9ca7-5404-4351-9c30-8483e130e7e5" name="hcpcsCode1">
          <con:configuration>
            <path>lineItems[1].hcpcsCode</path>
            <content>A4244</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f63d3177-4044-4502-95b5-ce934627da49" name="baseItemHcpcCodes1">
          <con:configuration>
            <path>lineItems[1].baseItemHcpcCodes</path>
            <content>["K0553"]</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
</con:testCase>

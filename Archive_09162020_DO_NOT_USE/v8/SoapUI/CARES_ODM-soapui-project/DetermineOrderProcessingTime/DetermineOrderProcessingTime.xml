<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="ed5c6de2-945d-4aac-adab-5a67045f1c49" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineOrderProcessingTime" searchProperties="true" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="ed5c6de2-945d-4aac-adab-5a67045f1c49fileName">DetermineOrderProcessingTime</con:setting>
  </con:settings>
  <con:testStep type="restrequest" name="JSON Request" id="8a0d736b-cd97-4b8d-be13-e8fe09126a04">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineOrderProcessingTime/DetermineOrderProcessingTime/WADL" methodName="DetermineOrderProcessingTime" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="JSON Request" id="bf726038-cf60-4e66-ad92-467409395dd3" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    }
}</con:request>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="DetermineOrderProcessingTime" id="c452e527-f8d4-4bfe-9aa9-f7af10c99429">
    <con:settings/>
    <con:config>
      <script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineOrderProcessingTime/DetermineOrderProcessingTime-Input.xls"
def outputfile = projectDir + "/DetermineOrderProcessingTime/DetermineOrderProcessingTime-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"stepKey",sheet1);
addCell(1,0,"timeAtTask",sheet1);
addCell(2,0,"queueTime",sheet1);

addCell(3,0,"stepKey",sheet1);
addCell(4,0,"timeAtTask",sheet1);
addCell(5,0,"queueTime",sheet1);

addCell(6,0,"stepKey",sheet1);
addCell(7,0,"timeAtTask",sheet1);
addCell(8,0,"queueTime",sheet1);

addCell(9,0,"stepKey",sheet1);
addCell(10,0,"timeAtTask",sheet1);
addCell(11,0,"queueTime",sheet1);

addCell(12,0,"stepKey",sheet1);
addCell(13,0,"timeAtTask",sheet1);
addCell(14,0,"queueTime",sheet1);

addCell(15,0,"stepKey",sheet1);
addCell(16,0,"timeAtTask",sheet1);
addCell(17,0,"queueTime",sheet1);

addCell(18,0,"stepKey",sheet1);
addCell(19,0,"timeAtTask",sheet1);
addCell(20,0,"queueTime",sheet1);

addCell(21,0,"stepKey",sheet1);
addCell(22,0,"timeAtTask",sheet1);
addCell(23,0,"queueTime",sheet1);

addCell(24,0,"stepKey",sheet1);
addCell(25,0,"timeAtTask",sheet1);
addCell(26,0,"queueTime",sheet1);

addCell(27,0,"stepKey",sheet1);
addCell(28,0,"timeAtTask",sheet1);
addCell(29,0,"queueTime",sheet1);

addCell(30,0,"stepKey",sheet1);
addCell(31,0,"timeAtTask",sheet1);
addCell(32,0,"queueTime",sheet1);

addCell(33,0,"stepKey",sheet1);
addCell(34,0,"timeAtTask",sheet1);
addCell(35,0,"queueTime",sheet1);

addCell(36,0,"PASS/FAIL",sheet1);
addCell(37,0,"FAILED DUE TO",sheet1);

//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()


                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get stepKey from response json                                 
                        addCell(0,i,json.orderProcessingResponseTimeList[0].stepKey,sheet1);                                   
                          // get timeAtTask from response json                                   
                        addCell(1,i,json.orderProcessingResponseTimeList[0].timeAtTask.toString(),sheet1);  
                         // get queueTime from response json                                   
                        addCell(2,i,json.orderProcessingResponseTimeList[0].queueTime.toString(),sheet1); 
                         
                          // get stepKey from response json                                 
                        addCell(3,i,json.orderProcessingResponseTimeList[1].stepKey,sheet1);                                   
                          // get timeAtTask from response json                                   
                        addCell(4,i,json.orderProcessingResponseTimeList[1].timeAtTask.toString(),sheet1);  
                         // get queueTime from response json                                   
                        addCell(5,i,json.orderProcessingResponseTimeList[1].queueTime.toString(),sheet1);  

// get stepKey from response json                                 
                        addCell(6,i,json.orderProcessingResponseTimeList[2].stepKey,sheet1);                                   
                          // get timeAtTask from response json                                   
                        addCell(7,i,json.orderProcessingResponseTimeList[2].timeAtTask.toString(),sheet1);  
                         // get queueTime from response json                                   
                        addCell(8,i,json.orderProcessingResponseTimeList[2].queueTime.toString(),sheet1); 
                                                   // get stepKey from response json                                 
                        addCell(9,i,json.orderProcessingResponseTimeList[3].stepKey,sheet1);                                   
                          // get timeAtTask from response json                                   
                        addCell(10,i,json.orderProcessingResponseTimeList[3].timeAtTask.toString(),sheet1);  
                         // get queueTime from response json                                   
                        addCell(11,i,json.orderProcessingResponseTimeList[3].queueTime.toString(),sheet1); 

                         // get stepKey from response json                                 
                        addCell(12,i,json.orderProcessingResponseTimeList[4].stepKey,sheet1);                                   
                          // get timeAtTask from response json                                   
                        addCell(13,i,json.orderProcessingResponseTimeList[4].timeAtTask.toString(),sheet1);  
                         // get queueTime from response json                                   
                        addCell(14,i,json.orderProcessingResponseTimeList[4].queueTime.toString(),sheet1); 

                         // get stepKey from response json                                 
                        addCell(15,i,json.orderProcessingResponseTimeList[5].stepKey,sheet1);                                   
                          // get timeAtTask from response json                                   
                        addCell(16,i,json.orderProcessingResponseTimeList[5].timeAtTask.toString(),sheet1);  
                         // get queueTime from response json                                   
                        addCell(17,i,json.orderProcessingResponseTimeList[5].queueTime.toString(),sheet1); 

                         // get stepKey from response json                                 
                        addCell(18,i,json.orderProcessingResponseTimeList[6].stepKey,sheet1);                                   
                          // get timeAtTask from response json                                   
                        addCell(19,i,json.orderProcessingResponseTimeList[6].timeAtTask.toString(),sheet1);  
                         // get queueTime from response json                                   
                        addCell(20,i,json.orderProcessingResponseTimeList[6].queueTime.toString(),sheet1); 

                         // get stepKey from response json                                 
                        addCell(21,i,json.orderProcessingResponseTimeList[7].stepKey,sheet1);                                   
                          // get timeAtTask from response json                                   
                        addCell(22,i,json.orderProcessingResponseTimeList[7].timeAtTask.toString(),sheet1);  
                         // get queueTime from response json                                   
                        addCell(23,i,json.orderProcessingResponseTimeList[7].queueTime.toString(),sheet1); 

                         // get stepKey from response json                                 
                        addCell(24,i,json.orderProcessingResponseTimeList[8].stepKey,sheet1);                                   
                          // get timeAtTask from response json                                   
                        addCell(25,i,json.orderProcessingResponseTimeList[8].timeAtTask.toString(),sheet1);  
                         // get queueTime from response json                                   
                        addCell(26,i,json.orderProcessingResponseTimeList[8].queueTime.toString(),sheet1); 

                         // get stepKey from response json                                 
                        addCell(27,i,json.orderProcessingResponseTimeList[9].stepKey,sheet1);                                   
                          // get timeAtTask from response json                                   
                        addCell(28,i,json.orderProcessingResponseTimeList[9].timeAtTask.toString(),sheet1);  
                         // get queueTime from response json                                   
                        addCell(29,i,json.orderProcessingResponseTimeList[9].queueTime.toString(),sheet1); 

                         // get stepKey from response json                                 
                        addCell(30,i,json.orderProcessingResponseTimeList[10].stepKey,sheet1);                                   
                          // get timeAtTask from response json                                   
                        addCell(31,i,json.orderProcessingResponseTimeList[10].timeAtTask.toString(),sheet1);  
                         // get queueTime from response json                                   
                        addCell(32,i,json.orderProcessingResponseTimeList[10].queueTime.toString(),sheet1); 

                         // get stepKey from response json                                 
                        addCell(33,i,json.orderProcessingResponseTimeList[11].stepKey,sheet1);                                   
                          // get timeAtTask from response json                                   
                        addCell(34,i,json.orderProcessingResponseTimeList[11].timeAtTask.toString(),sheet1);  
                         // get queueTime from response json                                   
                        addCell(35,i,json.orderProcessingResponseTimeList[11].queueTime.toString(),sheet1); 
                           
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(1,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"orderProcessingResponseTimeList[0].stepKey","stepKey")

                          limitQuantity = sh.getCell(2,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"orderProcessingResponseTimeList[0].timeAtTask","timeAtTask")

                       limitDays = sh.getCell(3,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays,"orderProcessingResponseTimeList[0].queueTime","queueTime")
                              // get the expected values for second column
                     lineItemID = sh.getCell(4,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"orderProcessingResponseTimeList[1].stepKey","stepKey1")

                          limitQuantity = sh.getCell(5,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"orderProcessingResponseTimeList[1].timeAtTask","timeAtTask1")

                       limitDays = sh.getCell(6,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays,"orderProcessingResponseTimeList[1].queueTime","queueTime1")

                                               //get the expected values
                          lineItemID = sh.getCell(7,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"orderProcessingResponseTimeList[2].stepKey","stepKey")

                          limitQuantity = sh.getCell(8,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"orderProcessingResponseTimeList[2].timeAtTask","timeAtTask")

                       limitDays = sh.getCell(9,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays,"orderProcessingResponseTimeList[2].queueTime","queueTime")

                   //get the expected values
                          lineItemID = sh.getCell(10,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"orderProcessingResponseTimeList[3].stepKey","stepKey")

                          limitQuantity = sh.getCell(11,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"orderProcessingResponseTimeList[3].timeAtTask","timeAtTask")

                       limitDays = sh.getCell(12,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays,"orderProcessingResponseTimeList[3].queueTime","queueTime")

//get the expected values
                          lineItemID = sh.getCell(13,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"orderProcessingResponseTimeList[4].stepKey","stepKey")

                          limitQuantity = sh.getCell(14,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"orderProcessingResponseTimeList[4].timeAtTask","timeAtTask")

                       limitDays = sh.getCell(15,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays,"orderProcessingResponseTimeList[4].queueTime","queueTime")

                       //get the expected values
                          lineItemID = sh.getCell(16,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"orderProcessingResponseTimeList[5].stepKey","stepKey")

                          limitQuantity = sh.getCell(17,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"orderProcessingResponseTimeList[5].timeAtTask","timeAtTask")

                       limitDays = sh.getCell(18,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays,"orderProcessingResponseTimeList[5].queueTime","queueTime")

                       //get the expected values
                          lineItemID = sh.getCell(19,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"orderProcessingResponseTimeList[6].stepKey","stepKey")

                          limitQuantity = sh.getCell(20,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"orderProcessingResponseTimeList[6].timeAtTask","timeAtTask")

                       limitDays = sh.getCell(21,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays,"orderProcessingResponseTimeList[6].queueTime","queueTime")

                       //get the expected values
                          lineItemID = sh.getCell(22,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"orderProcessingResponseTimeList[7].stepKey","stepKey")

                          limitQuantity = sh.getCell(23,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"orderProcessingResponseTimeList[7].timeAtTask","timeAtTask")

                       limitDays = sh.getCell(24,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays,"orderProcessingResponseTimeList[7].queueTime","queueTime")

                       //get the expected values
                          lineItemID = sh.getCell(25,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"orderProcessingResponseTimeList[8].stepKey","stepKey")

                          limitQuantity = sh.getCell(26,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"orderProcessingResponseTimeList[8].timeAtTask","timeAtTask")

                       limitDays = sh.getCell(27,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays,"orderProcessingResponseTimeList[8].queueTime","queueTime")

                       //get the expected values
                          lineItemID = sh.getCell(28,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"orderProcessingResponseTimeList[9].stepKey","stepKey")

                          limitQuantity = sh.getCell(29,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"orderProcessingResponseTimeList[9].timeAtTask","timeAtTask")

                       limitDays = sh.getCell(30,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays,"orderProcessingResponseTimeList[9].queueTime","queueTime")

                       //get the expected values
                          lineItemID = sh.getCell(31,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"orderProcessingResponseTimeList[10].stepKey","stepKey")

                          limitQuantity = sh.getCell(32,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"orderProcessingResponseTimeList[10].timeAtTask","timeAtTask")

                       limitDays = sh.getCell(33,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays,"orderProcessingResponseTimeList[10].queueTime","queueTime")

//get the expected values
                          lineItemID = sh.getCell(34,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"orderProcessingResponseTimeList[11].stepKey","stepKey")

                          limitQuantity = sh.getCell(35,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"orderProcessingResponseTimeList[11].timeAtTask","timeAtTask")

                       limitDays = sh.getCell(36,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays,"orderProcessingResponseTimeList[11].queueTime","queueTime")
                       
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(36,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(37,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(36,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

    }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-39611" id="36be75be-a24d-4bed-b88e-a9a35f32c1d9">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineOrderProcessingTime/DetermineOrderProcessingTime/WADL" methodName="DetermineOrderProcessingTime" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-39611" id="bf726038-cf60-4e66-ad92-467409395dd3" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2019-08-26T00:00:00.000+0000"
        }
    }
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineOrderProcessingTime/DetermineOrderProcessingTime/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="a0295fe9-d3a2-4033-b1f6-2121683db09b" name="Valid HTTP Status Codes_2">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="3e29207a-f429-4bf0-b9eb-e6418ffe2fdd" name="stepKey">
          <con:configuration>
            <path>orderProcessingResponseTimeList[0].stepKey</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c9dd7ee2-0f27-4403-ad66-3df2fb4640ce" name="timeAtTask">
          <con:configuration>
            <path>orderProcessingResponseTimeList[0].timeAtTask</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="dcc05dc9-9295-4758-ab3f-6a65ebe616ed" name="queueTime">
          <con:configuration>
            <path>orderProcessingResponseTimeList[0].queueTime</path>
            <content>5</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="546e62f5-de56-425c-a566-ca46633cd3fa" name="stepKey1">
          <con:configuration>
            <path>orderProcessingResponseTimeList[1].stepKey</path>
            <content>2</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f89fba7e-a85e-4892-b3ff-b944267edcaa" name="timeAtTask1">
          <con:configuration>
            <path>orderProcessingResponseTimeList[1].timeAtTask</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="2ad8db58-ec6d-4f64-9c11-61d9bd9534f5" name="queueTime1">
          <con:configuration>
            <path>orderProcessingResponseTimeList[1].queueTime</path>
            <content>5</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e41cd8da-eb74-450d-a1a6-a7cb3f6ed4ba" name="stepKey">
          <con:configuration>
            <path>orderProcessingResponseTimeList[2].stepKey</path>
            <content>3</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="6896a575-62d2-4fb1-b4a9-cdba7db6f7ea" name="timeAtTask">
          <con:configuration>
            <path>orderProcessingResponseTimeList[2].timeAtTask</path>
            <content>3</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e0d40696-3169-48d0-942c-a570f414b2e7" name="queueTime">
          <con:configuration>
            <path>orderProcessingResponseTimeList[2].queueTime</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="7d1fe729-b1ba-4eb9-a4e5-d8ee965619c2" name="stepKey">
          <con:configuration>
            <path>orderProcessingResponseTimeList[3].stepKey</path>
            <content>4</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="5b66d388-6a1f-4acc-b7ba-4c296e335453" name="timeAtTask">
          <con:configuration>
            <path>orderProcessingResponseTimeList[3].timeAtTask</path>
            <content>2</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="75104105-5d7a-4e1a-a1f9-d82c33da096a" name="queueTime">
          <con:configuration>
            <path>orderProcessingResponseTimeList[3].queueTime</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a2efc45c-1ade-4d5c-a91c-dda1c96774d8" name="stepKey">
          <con:configuration>
            <path>orderProcessingResponseTimeList[4].stepKey</path>
            <content>5</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="0e8c10b0-8da6-482e-9f34-41aec7b35e71" name="timeAtTask">
          <con:configuration>
            <path>orderProcessingResponseTimeList[4].timeAtTask</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f7ceabe6-d999-43e8-9cb4-433d4e3f8e54" name="queueTime">
          <con:configuration>
            <path>orderProcessingResponseTimeList[4].queueTime</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="3a1e114a-7874-4cdc-9f52-d5a3d8338fa3" name="stepKey">
          <con:configuration>
            <path>orderProcessingResponseTimeList[5].stepKey</path>
            <content>6</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="18dd32b2-b475-463c-8e62-4e9de137104e" name="timeAtTask">
          <con:configuration>
            <path>orderProcessingResponseTimeList[5].timeAtTask</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="120d358a-d7e8-43ef-a9e9-0c62ecd6d10f" name="queueTime">
          <con:configuration>
            <path>orderProcessingResponseTimeList[5].queueTime</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="0d26478e-a72a-4022-aec3-e3525c817cd9" name="stepKey">
          <con:configuration>
            <path>orderProcessingResponseTimeList[6].stepKey</path>
            <content>7</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="16e5136d-eab2-421e-8ee0-6b0caf269d84" name="timeAtTask">
          <con:configuration>
            <path>orderProcessingResponseTimeList[6].timeAtTask</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="2ccbba8f-87d4-43eb-955c-c2dfbbfd61f7" name="queueTime">
          <con:configuration>
            <path>orderProcessingResponseTimeList[6].queueTime</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a4e69f2c-5bd5-484e-8619-ce85ffc98128" name="stepKey">
          <con:configuration>
            <path>orderProcessingResponseTimeList[7].stepKey</path>
            <content>8</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="fd752b0f-4e26-434f-af63-b79673bc9abb" name="timeAtTask">
          <con:configuration>
            <path>orderProcessingResponseTimeList[7].timeAtTask</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="13a34245-690a-497c-9cc9-e97f314ebc9d" name="queueTime">
          <con:configuration>
            <path>orderProcessingResponseTimeList[7].queueTime</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="70d8de46-c8eb-4c84-a482-57c5e9146818" name="stepKey">
          <con:configuration>
            <path>orderProcessingResponseTimeList[8].stepKey</path>
            <content>9</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="8b8a1462-a78e-4943-9872-66735ebef0bb" name="timeAtTask">
          <con:configuration>
            <path>orderProcessingResponseTimeList[8].timeAtTask</path>
            <content>3</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d5f60939-8080-4329-b28f-49efcadbf006" name="queueTime">
          <con:configuration>
            <path>orderProcessingResponseTimeList[8].queueTime</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="17f0c7d3-7c8c-4035-8634-127d18ae1e92" name="stepKey">
          <con:configuration>
            <path>orderProcessingResponseTimeList[9].stepKey</path>
            <content>10</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="14a41557-d698-4652-a1e4-b64d50cbfbb9" name="timeAtTask">
          <con:configuration>
            <path>orderProcessingResponseTimeList[9].timeAtTask</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="78b6286c-9b97-42f9-af4c-aecfdaa6331c" name="queueTime">
          <con:configuration>
            <path>orderProcessingResponseTimeList[9].queueTime</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="30146bcc-8380-4adc-a71f-e7a9b04ba9ad" name="stepKey">
          <con:configuration>
            <path>orderProcessingResponseTimeList[10].stepKey</path>
            <content>11</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="096c78f1-856e-4724-9ef0-a701b3a7c2fb" name="timeAtTask">
          <con:configuration>
            <path>orderProcessingResponseTimeList[10].timeAtTask</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="fb900039-eb93-4fa2-9307-84d45a302e65" name="queueTime">
          <con:configuration>
            <path>orderProcessingResponseTimeList[10].queueTime</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="36039217-ee58-437e-b9d1-c131fbc55551" name="stepKey">
          <con:configuration>
            <path>orderProcessingResponseTimeList[11].stepKey</path>
            <content>12</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="0de03fdb-4850-4738-8f9b-64e8b6fd096b" name="timeAtTask">
          <con:configuration>
            <path>orderProcessingResponseTimeList[11].timeAtTask</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="54661fda-f5bf-4aa2-b890-0282cba97c38" name="queueTime">
          <con:configuration>
            <path>orderProcessingResponseTimeList[11].queueTime</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
</con:testCase>

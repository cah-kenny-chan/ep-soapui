<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="6a9dfd96-7946-41cc-82b1-3266eb6d4119" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineTradeInEligibilityAndAmount" searchProperties="true" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="6a9dfd96-7946-41cc-82b1-3266eb6d4119fileName">DetermineTradeInEligibilityAndAmount</con:setting>
  </con:settings>
  <con:testStep type="restrequest" name="JSON Request" id="cc30f38e-8c67-40fc-baa4-155eb53116dc">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="JSON Request" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "TANDEM DIABETES CARE",
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planCode": "2500"
                }
            ],
            "tradingInItemManufacturersCode": "Insulet"
        },
        {
            "currentItemManufacturersCode": "MINIMED DISTRIBUTION CENTER",
            "hcpcsCode": "E0784",
            "lineItemID": "L002",
            "plans": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planCode": "A000"
                }
            ],
            "tradingInItemManufacturersCode": "Insulet"
        }
    ]
}</con:request>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="DetermineTradeInEligibilityAndAmount_Single Lineitem" id="6633783e-fb03-4a36-9a69-66e9f6044859">
    <con:settings/>
    <con:config>
      <script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineTrade-InEligibilityAndAmount/DetermineTradeInEligibilityAndAmount-SingleLineItem-Input.xls"
def outputfile = projectDir + "/DetermineTrade-InEligibilityAndAmount/DetermineTradeInEligibilityAndAmount-SingleLineItem-Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"eligibleForTradeIn",sheet1);
addCell(2,0,"tradeInAmount",sheet1);
addCell(3,0,"PASS/FAIL",sheet1);
addCell(4,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                 //Input for Line Item ID                                                             
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents().toString()
                                 //Input for hcpcsCode                                  
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents().toString()
                                //Input for id                                  
                                requestTemplet.content.lineItems[0].plans[0].id = sh.getCell(3,i).getContents().toString()
                                //Input for planName                                  
                                requestTemplet.content.lineItems[0].plans[0].planCode = sh.getCell(4,i).getContents().toString()
                                //Input for tradingInItemManufacturersCode                                  
                                requestTemplet.content.lineItems[0].tradingInItemManufacturersCode = sh.getCell(5,i).getContents().toString()
                                //Input for currentItemManufacturersCode                                  
                                requestTemplet.content.lineItems[0].currentItemManufacturersCode = sh.getCell(6,i).getContents().toString()
                                                                                    
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json  
                        addCell(0,i,json.tradeInEligibilityAndAmountResponse[0].lineItemID.toString(),sheet1);                                   
                          // get messageCode from response json                               
                        addCell(1,i,json.tradeInEligibilityAndAmountResponse[0].tradeInAmount.toString(),sheet1);                                   
                          // get description from response json                                   
                        addCell(2,i,json.tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn.toString(),sheet1);  
                                                
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(7,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"tradeInEligibilityAndAmountResponse[0].lineItemID","lineItemID")

                          eligibleForTradeIn = sh.getCell(8,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,eligibleForTradeIn,"tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn","eligibleForTradeIn")

                          tradeInAmount = sh.getCell(9,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,tradeInAmount,"tradeInEligibilityAndAmountResponse[0].tradeInAmount","tradeInAmount")

        
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(3,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(4,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(3,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfully"

 

         }             
     
catch(Exception e)
{
log.info"test execution failed"
                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="DetermineTradeInEligibilityAndAmount_Multi Lineitem" id="91fd8109-0ed2-4655-85a8-f2bb1ec5d04a">
    <con:settings/>
    <con:config>
      <script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineTrade-InEligibilityAndAmount/DetermineTradeInEligibilityAndAmount-MultiLineItem-Input.xls"
def outputfile = projectDir + "/DetermineTrade-InEligibilityAndAmount/DetermineTradeInEligibilityAndAmount-MultiLineItem-Output.xls"


//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"eligibleForTradeIn",sheet1);
addCell(2,0,"tradeInAmount",sheet1);
addCell(3,0,"lineItemID1",sheet1);
addCell(4,0,"eligibleForTradeIn1",sheet1);
addCell(5,0,"tradeInAmount1",sheet1);
addCell(6,0,"PASS/FAIL",sheet1);
addCell(7,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                                        
                                 //Input for Line Item ID                                                             
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents().toString()
                                 //Input for hcpcsCode                                  
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents().toString()
                                //Input for id                                  
                                requestTemplet.content.lineItems[0].plans[0].id = sh.getCell(3,i).getContents().toString()
                                //Input for planName                                  
                                requestTemplet.content.lineItems[0].plans[0].planCode = sh.getCell(4,i).getContents().toString()
                                //Input for tradingInItemManufacturersCode                                  
                                requestTemplet.content.lineItems[0].tradingInItemManufacturersCode = sh.getCell(5,i).getContents().toString()
                                //Input for currentItemManufacturersCode                                  
                                requestTemplet.content.lineItems[0].currentItemManufacturersCode = sh.getCell(6,i).getContents().toString()

                                //Input for Line Item ID1                                                         
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(7,i).getContents().toString()
                                 //Input for hcpcsCode1                              
                                requestTemplet.content.lineItems[1].hcpcsCode = sh.getCell(8,i).getContents().toString()
                                //Input for id1                                  
                                requestTemplet.content.lineItems[1].plans[0].id = sh.getCell(9,i).getContents().toString()
                                //Input for planName1                                  
                                requestTemplet.content.lineItems[1].plans[0].planCode = sh.getCell(10,i).getContents().toString()
                                //Input for tradingInItemManufacturersCode1                                  
                                requestTemplet.content.lineItems[1].tradingInItemManufacturersCode = sh.getCell(11,i).getContents().toString()
                                //Input for currentItemManufacturersCode1                                  
                                requestTemplet.content.lineItems[1].currentItemManufacturersCode = sh.getCell(12,i).getContents().toString()
                                                                                    
                                 
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json  
                        addCell(0,i,json.tradeInEligibilityAndAmountResponse[0].lineItemID.toString(),sheet1);                                   
                          // get tradeInAmount from response json                               
                        addCell(1,i,json.tradeInEligibilityAndAmountResponse[0].tradeInAmount.toString(),sheet1);                                   
                          // get eligibleForTradeIn from response json                                   
                        addCell(2,i,json.tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn.toString(),sheet1);  

                        // get lineItemID1 from response json  
                        addCell(3,i,json.tradeInEligibilityAndAmountResponse[1].lineItemID.toString(),sheet1);                                   
                          // get tradeInAmount from response json                               
                        addCell(4,i,json.tradeInEligibilityAndAmountResponse[1].tradeInAmount.toString(),sheet1);                                   
                          // get eligibleForTradeIn from response json                                   
                        addCell(5,i,json.tradeInEligibilityAndAmountResponse[1].eligibleForTradeIn.toString(),sheet1); 
                        
                                                
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(13,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"tradeInEligibilityAndAmountResponse[0].lineItemID","lineItemID")

                          eligibleForTradeIn = sh.getCell(14,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,eligibleForTradeIn,"tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn","eligibleForTradeIn")

                          tradeInAmount = sh.getCell(15,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,tradeInAmount,"tradeInEligibilityAndAmountResponse[0].tradeInAmount","tradeInAmount")


					//get the expected values
                          lineItemID1 = sh.getCell(16,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"tradeInEligibilityAndAmountResponse[1].lineItemID","lineItemID")

                          eligibleForTradeIn1 = sh.getCell(17,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,eligibleForTradeIn1,"tradeInEligibilityAndAmountResponse[1].eligibleForTradeIn","eligibleForTradeIn")

                          tradeInAmount1 = sh.getCell(18,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,tradeInAmount1,"tradeInEligibilityAndAmountResponse[1].tradeInAmount","tradeInAmount")
        
                               //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(6,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(7,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(6,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfully"

 

         }             
     
catch(Exception e)
{
log.info"test execution failed"
                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-52276" id="e2e8d372-266a-4037-ba84-9b98d581514b">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-52276" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "TANDEM DIABETES CARE",
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planCode": "2461"
                }
            ],
            "tradingInItemManufacturersCode": "Insulet"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="239fca45-2f5d-42f3-9ce6-817be2c6745a" name="Valid HTTP Status Codes_2">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="522626dd-2289-443d-81f3-b5efde5f7f17" name="lineItemID">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ce8b6bfd-c8e8-4294-adb8-b6a41cb7c723" name="eligibleForTradeIn">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="08769a1e-bf69-4093-99a6-769867954987" name="tradeInAmount">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].tradeInAmount</path>
            <content>0.0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-52277" id="fb451cd9-509a-4519-a9a2-d43fb7034744">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-52277" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "TANDEM DIABETES CARE",
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planCode": "A0761"
                }
            ],
            "tradingInItemManufacturersCode": "Medtronic"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="7ebad20f-ac50-45da-906a-8718f1a3ba5d" name="Valid HTTP Status Codes_3">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="fc04ebdd-b682-4f11-9938-aa2814a0f826" name="lineItemID">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="9487553a-662c-422b-b36d-4e0d5c60ba73" name="eligibleForTradeIn">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="33b686d0-8e84-49de-85cb-777141b0608a" name="tradeInAmount">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].tradeInAmount</path>
            <content>400.0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-52278" id="f55a09fe-d3f8-4411-b6e5-1b875b2d7ac4">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-52278" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "MINIMED DISTRIBUTION CENT",
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planCode": "A0761"
                }
            ],
            "tradingInItemManufacturersCode": "Tandem"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="826cc441-fcbf-44a3-bf33-9022874ed0ef" name="Valid HTTP Status Codes_4">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="7136d793-6bef-46d6-aa9a-63d4cb407f7f" name="lineItemID">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="b0197c74-b264-48ea-a810-58c1338aef51" name="eligibleForTradeIn">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="551dff82-1984-4ed5-bcb5-bef6e13772c7" name="tradeInAmount">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].tradeInAmount</path>
            <content>500.0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-52279" id="a81da1b2-4057-47ee-ae71-c4d82eaf3da8">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-52279" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "MINIMED DISTRIBUTION CENTER",
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planCode": "A0761"
                }
            ],
            "tradingInItemManufacturersCode": "Insulet"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="bcecceaf-411c-4524-899e-bd74ccab5bda" name="Valid HTTP Status Codes_5">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="cee9db7b-bbe6-4bfc-b82c-85cc6b500c4b" name="lineItemID">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="aec520c1-ada2-4046-82a3-39f3dcf061b0" name="eligibleForTradeIn">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d4d69b1a-77a6-4e4d-b3f1-efe1c81cec66" name="tradeInAmount">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].tradeInAmount</path>
            <content>300.0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-52280" id="d44acc15-7104-412c-bbbf-82e207ba8498">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-52280" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "TANDEM DIABETES CARE",
            "hcpcsCode": "A001",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planCode": "2481"
                }
            ],
            "tradingInItemManufacturersCode": "Animas"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="444ef22a-4dab-4cd1-b821-a5ea557028de" name="Valid HTTP Status Codes_6">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="8cb93a34-075c-4d80-85ce-5a32d9c50298" name="lineItemID">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d37e6eac-a312-4937-877c-252f06f5b4b4" name="eligibleForTradeIn">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f37a78cd-ae39-4dd8-b4d0-86ac4e75e41f" name="tradeInAmount">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].tradeInAmount</path>
            <content>0.0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-52281" id="258ad851-7702-4ff7-a0f3-1145ff991d93">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-52281" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "MINIMED DISTRIBUTION CENTER",
            "hcpcsCode": "A001",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planCode": "A0761"
                }
            ],
            "tradingInItemManufacturersCode": "Insulet"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="6769945d-33d7-4497-bfe8-21070b8e8c0c" name="Valid HTTP Status Codes_7">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="53983390-1372-4a2d-ae55-f12834942f3b" name="lineItemID">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a87f100d-e1ef-4fce-8011-35b8ca3906dd" name="eligibleForTradeIn">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="309b5030-e371-4b39-ab25-650b3d3c8713" name="tradeInAmount">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].tradeInAmount</path>
            <content>0.0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-52282" id="33692f97-1c96-4b3d-bfe3-88efb202b280">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-52282" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "DIABETIC CARE",
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planCode": "2480"
                }
            ],
            "tradingInItemManufacturersCode": "Disease"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="f5165f5a-76b0-43ee-9eab-e3183a8e6505" name="Valid HTTP Status Codes_8">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="8a4e8eb7-f434-4afa-880c-6b8982d7d8c0" name="lineItemID">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="adebadfe-295f-4f8c-b290-31707aacca5c" name="eligibleForTradeIn">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="fbc8cf3b-615a-40f6-b1d7-09090440db8c" name="tradeInAmount">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].tradeInAmount</path>
            <content>0.0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-52283" id="9dd23b52-477f-4d36-8661-3c0df3ae82fe">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-52283" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "TANDEM DIABETES CARE",
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planCode": "2493"
                }
            ],
            "tradingInItemManufacturersCode": "Disease"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="2e8f797f-16d7-4fb9-b64b-b017a0f9b142" name="Valid HTTP Status Codes_9">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="137d1ffe-7770-491c-80f2-02f53183ec8a" name="lineItemID">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="85bedf85-69b6-41c1-af1c-ae60e5647b4a" name="eligibleForTradeIn">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f16d4409-6611-447e-a89e-0a49654f7066" name="tradeInAmount">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].tradeInAmount</path>
            <content>0.0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-52284" id="3e3ebede-7e23-4e1b-862d-644a1d728c9c">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-52284" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "TANDEM DIABETES CARE",
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planCode": "A0761"
                }
            ],
            "tradingInItemManufacturersCode": ""
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="a5c5ce16-2617-4a92-895a-412461788eb6" name="Valid HTTP Status Codes_10">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="62b7bbd4-6b85-4b81-ac62-06ecea3b6b81" name="lineItemID">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="1da8db81-ccb7-4f66-b569-02781121dd80" name="eligibleForTradeIn">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="939771fe-7d39-4613-8575-2df1621b6af7" name="tradeInAmount">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].tradeInAmount</path>
            <content>400.0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-52285" id="cc6eab6d-dc57-4fd0-a93c-47090074ea5d">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL" methodName="DetermineTradeInEligibilityAndAmount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-52285" id="51e9f46e-3502-411c-84fc-986fa7f7fff1" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "C12345",
            "from": "string",
            "timestamp": "2020-04-01T18:30:00.000+0000"
        }
    },
    "lineItems": [
        {
            "currentItemManufacturersCode": "TANDEM DIABETES CARE",
            "hcpcsCode": "E0784",
            "lineItemID": "L001",
            "plans": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planCode": "2500"
                }
            ],
            "tradingInItemManufacturersCode": "Insulet"
        },
        {
            "currentItemManufacturersCode": "MINIMED DISTRIBUTION CENTER",
            "hcpcsCode": "E0784",
            "lineItemID": "L002",
            "plans": [
                {
                    "id": "09GJKJI56FHGJ787UU9897834",
                    "planCode": "A000"
                }
            ],
            "tradingInItemManufacturersCode": "Insulet"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineTradeInEligibilityAndAmount/DetermineTradeInEligibilityAndAmount/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="6f8b6bbe-5823-4264-961c-a49be5e9a4d8" name="Valid HTTP Status Codes_2">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="cd3abbad-7ce0-445e-9604-2be127ef91e6" name="lineItemID">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e73a4989-df35-42e7-a06c-f3159f564701" name="eligibleForTradeIn">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].eligibleForTradeIn</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="dc91144e-1e26-45cd-b67c-14975ed3431f" name="tradeInAmount">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[0].tradeInAmount</path>
            <content>0.0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="4817d7b4-eaca-4792-81eb-d659aa2ecc96" name="lineItemID">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="1a741c28-dba8-4a89-802d-49f90090ab10" name="eligibleForTradeIn">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[1].eligibleForTradeIn</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f2cbac1a-52c0-46a3-b59a-43dc1687f195" name="tradeInAmount">
          <con:configuration>
            <path>tradeInEligibilityAndAmountResponse[1].tradeInAmount</path>
            <content>300.0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
</con:testCase>

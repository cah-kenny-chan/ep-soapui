<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="0fd0ab2a-8c09-47af-9c75-137a5e7c42f1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineAllocationTypeForOrder" searchProperties="true" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="0fd0ab2a-8c09-47af-9c75-137a5e7c42f1fileName">DetermineAllocationTypeForOrder</con:setting>
  </con:settings>
  <con:testStep type="groovy" name="DetermineAllocationTypeForOrder-withAllocationTypeInputParameter" id="ba972638-8e1a-4646-97cf-02c5b9286a8c">
    <con:settings/>
    <con:config>
      <script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAllocationTypeForOrder/DetermineAllocationTypeForOrder-Input.xls"
def outputfile = projectDir + "/DetermineAllocationTypeForOrder/DetermineAllocationTypeForOrder-withAllocationTypeInputParameter-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults_withAllocTyp")
Sheet jsonInput = wb.getSheet("JSON_withAllocTyp")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"Jira Task ID",sheet1);
addCell(1,0,"lineItemID1",sheet1);
addCell(2,0,"allocationType1",sheet1);
addCell(3,0,"lineItemID2",sheet1);
addCell(4,0,"allocationType2",sheet1);
addCell(5,0,"PASS/FAIL",sheet1);
addCell(6,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(1,i)
                        def TestCaseName = varTestCaseName.getContents()
                                               
                        
                                 //Inputs for LineItem1                                                             
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(2,i).getContents()
                                requestTemplet.content.lineItems[0].itemNumber = sh.getCell(3,i).getContents()
                                requestTemplet.content.lineItems[0].productClass = sh.getCell(4,i).getContents()
                                requestTemplet.content.lineItems[0].allocationType = sh.getCell(5,i).getContents()

                                //Inputs for LineItem2                                                             
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(6,i).getContents()
                                requestTemplet.content.lineItems[1].itemNumber = sh.getCell(7,i).getContents()
                                requestTemplet.content.lineItems[1].productClass = sh.getCell(8,i).getContents()
                                requestTemplet.content.lineItems[1].allocationType = sh.getCell(9,i).getContents()                             
                              
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                                 
                           // get from response json                     
                        addCell(0,i,varTestCaseName.getContents().toString(),sheet1); 
                       
                     int celNumForLineItem=1;
                 for(int arrForLineItem=0; arrForLineItem&lt;json.lineItems.size(); arrForLineItem++){
                 	addCell(celNumForLineItem,i,json.lineItems[arrForLineItem].lineItemID.toString(),sheet1);
	                              celNumForLineItem = celNumForLineItem+1;
	               addCell(celNumForLineItem,i,json.lineItems[arrForLineItem].allocationType.toString(),sheet1);
	                             celNumForLineItem = celNumForLineItem+1;                
                     } 
                  
                                                 
                   //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                        int celForLineItem=10;
                   		for(int arrForLineItems=0; arrForLineItems&lt;json.lineItems.size(); arrForLineItems++){
                     	     
                            lineItemID = sh.getCell(celForLineItem,i).getContents()
	                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"lineItems["+arrForLineItems+"].lineItemID","lineItemID")
	                       celForLineItem = celForLineItem+1
	                       
	                       allocationType = sh.getCell(celForLineItem,i).getContents()
	                       addAssertionJsonPathMatch(testStepForAssertion,allocationType,"lineItems["+arrForLineItems+"].allocationType","allocationType")
	                       celForLineItem = celForLineItem+1
                     	}
           
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(5,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(6,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(5,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="DetermineAllocationTypeForOrder-withoutAllocationTypeInputParameter" id="fa0480e7-bc9c-4718-8db1-f8a510cf5a1a">
    <con:settings/>
    <con:config>
      <script><![CDATA[import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAllocationTypeForOrder/DetermineAllocationTypeForOrder-Input.xls"
def outputfile = projectDir + "/DetermineAllocationTypeForOrder/DetermineAllocationTypeForOrder-withoutAllocationTypeInputParameter-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults_withoutAllocTyp")
Sheet jsonInput = wb.getSheet("JSON_withoutAllocTyp")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"Jira Task ID",sheet1);
addCell(1,0,"lineItemID1",sheet1);
addCell(2,0,"allocationType1",sheet1);
addCell(3,0,"lineItemID2",sheet1);
addCell(4,0,"allocationType2",sheet1);
addCell(5,0,"PASS/FAIL",sheet1);
addCell(6,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i<rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(1,i)
                        def TestCaseName = varTestCaseName.getContents()
                                               
                        
                                 //Inputs for LineItem1 
                                def LineItemID1 = sh.getCell(2,i).getContents()                                                              
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(2,i).getContents()
                                requestTemplet.content.lineItems[0].itemNumber = sh.getCell(3,i).getContents()
                                requestTemplet.content.lineItems[0].productClass = sh.getCell(4,i).getContents()                                

                                //Inputs for LineItem2   
                                def LineItemID2 = sh.getCell(5,i).getContents()                                                          
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(5,i).getContents()
                                requestTemplet.content.lineItems[1].itemNumber = sh.getCell(6,i).getContents()
                                requestTemplet.content.lineItems[1].productClass = sh.getCell(7,i).getContents()                               
                              
                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                                 
                           // get from response json                     
                        addCell(0,i,varTestCaseName.getContents().toString(),sheet1); 
                 if(json.lineItems.size()>=1&& LineItemID1!=""&& LineItemID2!=""){  
                       
                     int celNumForLineItem=1;
                 for(int arrForLineItem=0; arrForLineItem<json.lineItems.size(); arrForLineItem++){
                 	addCell(celNumForLineItem,i,json.lineItems[arrForLineItem].lineItemID.toString(),sheet1);
	                              celNumForLineItem = celNumForLineItem+1;
	               addCell(celNumForLineItem,i,json.lineItems[arrForLineItem].allocationType.toString(),sheet1);
	                             celNumForLineItem = celNumForLineItem+1;                
                     } 
                 }else{
                 	 addCell(1,i,json.lineItems[0].lineItemID.toString(),sheet1);
                 	 addCell(2,i,json.lineItems[0].allocationType.toString(),sheet1);
                 	 
                 }
                                                 
                   //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                       if(json.lineItems.size()>=1&& LineItemID1!=""&& LineItemID2!=""){       
                        int celForLineItem=8;
                   		for(int arrForLineItems=0; arrForLineItems<json.lineItems.size(); arrForLineItems++){
                     	     
                            lineItemID = sh.getCell(celForLineItem,i).getContents()
	                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"lineItems["+arrForLineItems+"].lineItemID","lineItemID")
	                       celForLineItem = celForLineItem+1
	                       
	                       allocationType = sh.getCell(celForLineItem,i).getContents()
	                       addAssertionJsonPathMatch(testStepForAssertion,allocationType,"lineItems["+arrForLineItems+"].allocationType","allocationType")
	                       celForLineItem = celForLineItem+1
                     	}
                       }else{
                       	   
                       	   lineItemID = sh.getCell(8,i).getContents()
	                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"lineItems[0].lineItemID","lineItemID")
	                       	                       
	                       allocationType = sh.getCell(9,i).getContents()
	                       addAssertionJsonPathMatch(testStepForAssertion,allocationType,"lineItems[0].allocationType","allocationType")
	                                              	
                       }
           
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(5,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(6,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(5,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="JSON Request" id="7fc77367-e7e0-4b4b-8071-57011b31bb7e">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllocationTypeForOrder/DetermineAllocationTypeForOrder/WADL" methodName="DetermineAllocationTypeForOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="JSON Request" id="770b9035-ae76-4aec-8c2e-18a0e55c4c3d" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "c123",
            "from": "PCF",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        }
    },
    "lineItems": [
        {
            "itemNumber": "51037440",
            "lineItemID": "L001",
            "productClass": ""
        },
        {
            "itemNumber": "",
            "lineItemID": "L002",
            "productClass": ""
        }
    ]
}</con:request>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-47303" id="7b9e4c29-b26f-4143-a7a5-dac8382fd5c8">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllocationTypeForOrder/DetermineAllocationTypeForOrder/WADL" methodName="DetermineAllocationTypeForOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-47303" id="770b9035-ae76-4aec-8c2e-18a0e55c4c3d" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "c123",
            "from": "PCF",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        }
    },
    "lineItems": [
        {
            "allocationType": "XY",
            "itemNumber": "58309605",
            "lineItemID": "L001",
            "productClass": "17"
        },
        {
            "allocationType": "",
            "itemNumber": "",
            "lineItemID": "L002",
            "productClass": "71"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAllocationTypeForOrder/DetermineAllocationTypeForOrder/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="f181ea0b-bc1d-4b2a-912a-355b0a171f04" name="Valid HTTP Status Codes_2">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="705187a4-48d0-480e-895d-8051c09da001" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="aa1c3c9d-eff5-4a9d-9caa-3d27cc24241b" name="allocationType">
          <con:configuration>
            <path>lineItems[0].allocationType</path>
            <content>XY</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="49e517bf-4ae0-4d38-b7c9-ff5ae7df96ff" name="lineItemID">
          <con:configuration>
            <path>lineItems[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="1da359ad-2aff-4c51-becb-9c83b11e4f5b" name="allocationType">
          <con:configuration>
            <path>lineItems[1].allocationType</path>
            <content/>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-47304" id="01b1ec0d-8bc8-42ed-bfa2-c060081c1701">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllocationTypeForOrder/DetermineAllocationTypeForOrder/WADL" methodName="DetermineAllocationTypeForOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-47304" id="770b9035-ae76-4aec-8c2e-18a0e55c4c3d" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "c123",
            "from": "PCF",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        }
    },
    "lineItems": [
        {
            "allocationType": "DB",
            "itemNumber": "5459421200",
            "lineItemID": "L001",
            "productClass": ""
        },
        {
            "allocationType": "RS",
            "itemNumber": "5459421200",
            "lineItemID": "L002",
            "productClass": "57"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAllocationTypeForOrder/DetermineAllocationTypeForOrder/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="566b99d6-f39b-4b79-88b7-7c8d557fad2e" name="Valid HTTP Status Codes_3">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="1b45b293-69aa-4474-8968-5c3eb45a6f5f" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="9081cfa6-7af2-4cfc-a967-d22def7d4503" name="allocationType">
          <con:configuration>
            <path>lineItems[0].allocationType</path>
            <content>DB</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="aca0f14c-993a-436e-93a5-100a596019aa" name="lineItemID">
          <con:configuration>
            <path>lineItems[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="31edbb37-0e47-47f7-922e-3f61ea08b6f9" name="allocationType">
          <con:configuration>
            <path>lineItems[1].allocationType</path>
            <content>RS</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-47297" id="ffe29670-0fa9-460c-831c-4946a170cbfa">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllocationTypeForOrder/DetermineAllocationTypeForOrder/WADL" methodName="DetermineAllocationTypeForOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-47297" id="770b9035-ae76-4aec-8c2e-18a0e55c4c3d" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "c123",
            "from": "PCF",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        }
    },
    "lineItems": [
        {
            "itemNumber": "",
            "lineItemID": "L001",
            "productClass": "01"
        },
        {
            "itemNumber": "",
            "lineItemID": "",
            "productClass": ""
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAllocationTypeForOrder/DetermineAllocationTypeForOrder/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="1d51ba35-4d21-4abe-ba0f-9d21e44f7f58" name="Valid HTTP Status Codes_2">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="1ebd7e16-60dd-45b4-8f82-33ac25c0f1ae" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d441c5a0-2413-4fbd-a5bf-ecd74fa819b2" name="allocationType">
          <con:configuration>
            <path>lineItems[0].allocationType</path>
            <content>OS</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-47298" id="3a06cdec-8e5f-420a-ab6a-259a6ce5baca">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllocationTypeForOrder/DetermineAllocationTypeForOrder/WADL" methodName="DetermineAllocationTypeForOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-47298" id="770b9035-ae76-4aec-8c2e-18a0e55c4c3d" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "c123",
            "from": "PCF",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        }
    },
    "lineItems": [
        {
            "itemNumber": "",
            "lineItemID": "L001",
            "productClass": "17"
        },
        {
            "itemNumber": "",
            "lineItemID": "",
            "productClass": ""
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAllocationTypeForOrder/DetermineAllocationTypeForOrder/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="53224330-5bb2-499a-9f83-f852052160a7" name="Valid HTTP Status Codes_3">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="b35f0bbb-4992-4d3a-b331-37b25a380ebc" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="6114cce8-d11c-477a-89ee-cc332f954045" name="allocationType">
          <con:configuration>
            <path>lineItems[0].allocationType</path>
            <content>DF</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-47299" id="433543d5-dd2b-40cd-9f18-3d812b5ad87e">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllocationTypeForOrder/DetermineAllocationTypeForOrder/WADL" methodName="DetermineAllocationTypeForOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-47299" id="770b9035-ae76-4aec-8c2e-18a0e55c4c3d" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "c123",
            "from": "PCF",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        }
    },
    "lineItems": [
        {
            "itemNumber": "60DYN20325",
            "lineItemID": "L001",
            "productClass": "17"
        },
        {
            "itemNumber": "",
            "lineItemID": "",
            "productClass": ""
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAllocationTypeForOrder/DetermineAllocationTypeForOrder/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="9a30a355-89a5-439f-92a9-dbcba828c9e7" name="Valid HTTP Status Codes_4">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="fd3af8ff-9629-4dbb-9a9b-7c2aeebd94f2" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a3caa497-fa3c-45ce-9567-2b46482d15a8" name="allocationType">
          <con:configuration>
            <path>lineItems[0].allocationType</path>
            <content>DF</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-47300" id="80fc35a3-0a44-4d6c-8e65-51144c58080a">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllocationTypeForOrder/DetermineAllocationTypeForOrder/WADL" methodName="DetermineAllocationTypeForOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-47300" id="770b9035-ae76-4aec-8c2e-18a0e55c4c3d" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "c123",
            "from": "PCF",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        }
    },
    "lineItems": [
        {
            "itemNumber": "60DYN20325",
            "lineItemID": "L001",
            "productClass": "85"
        },
        {
            "itemNumber": "",
            "lineItemID": "",
            "productClass": ""
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAllocationTypeForOrder/DetermineAllocationTypeForOrder/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="e5cff383-b371-4116-a626-dac091253e21" name="Valid HTTP Status Codes_5">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="61f3e2bf-6e8e-48e5-b20f-422a83a1d5e9" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="0c8b553c-9034-407e-b6b8-53228dd7e337" name="allocationType">
          <con:configuration>
            <path>lineItems[0].allocationType</path>
            <content>DF</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-47301" id="0b715b4a-1251-47e6-a329-bf179d424593">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllocationTypeForOrder/DetermineAllocationTypeForOrder/WADL" methodName="DetermineAllocationTypeForOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-47301" id="770b9035-ae76-4aec-8c2e-18a0e55c4c3d" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "c123",
            "from": "PCF",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        }
    },
    "lineItems": [
        {
            "itemNumber": "",
            "lineItemID": "L001",
            "productClass": "72"
        },
        {
            "itemNumber": "44ALLDIET",
            "lineItemID": "L002",
            "productClass": ""
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAllocationTypeForOrder/DetermineAllocationTypeForOrder/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="96f39af2-7201-4145-8e94-cefe9f581b82" name="Valid HTTP Status Codes_6">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f33b7bae-b68a-49fc-8985-66786513f317" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="27275737-faa1-4e89-a300-30793a57cf02" name="allocationType">
          <con:configuration>
            <path>lineItems[0].allocationType</path>
            <content>WC</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="9bc10aff-d8dc-4bf3-9094-703035c3247b" name="lineItemID">
          <con:configuration>
            <path>lineItems[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f8e71526-76a9-46ce-972e-0c38b236505e" name="allocationType">
          <con:configuration>
            <path>lineItems[1].allocationType</path>
            <content>DF</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-47302" id="c7d9b201-fc45-422e-8ed2-78012719aa7a">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAllocationTypeForOrder/DetermineAllocationTypeForOrder/WADL" methodName="DetermineAllocationTypeForOrder" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-47302" id="770b9035-ae76-4aec-8c2e-18a0e55c4c3d" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "c123",
            "from": "PCF",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        }
    },
    "lineItems": [
        {
            "itemNumber": "51037440",
            "lineItemID": "L001",
            "productClass": ""
        },
        {
            "itemNumber": "",
            "lineItemID": "L002",
            "productClass": ""
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAllocationTypeForOrder/DetermineAllocationTypeForOrder/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="80d025aa-af8c-40e2-910f-5385cb44373b" name="Valid HTTP Status Codes_7">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="026ee794-fd19-4687-aa51-ba9c19be78fc" name="lineItemID">
          <con:configuration>
            <path>lineItems[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="0c99b2e1-1bef-4688-b864-ebaad9e203fb" name="allocationType">
          <con:configuration>
            <path>lineItems[0].allocationType</path>
            <content>DF</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="466a7311-afc0-4ce6-9f74-cb88d18a8d54" name="lineItemID">
          <con:configuration>
            <path>lineItems[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="30f67ac6-713a-4259-bcec-1d08c78caea5" name="allocationType">
          <con:configuration>
            <path>lineItems[1].allocationType</path>
            <content>DF</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
</con:testCase>

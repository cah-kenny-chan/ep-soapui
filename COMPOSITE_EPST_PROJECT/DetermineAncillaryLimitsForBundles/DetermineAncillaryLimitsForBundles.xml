<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="134fc463-6f27-4da7-95eb-819e7ebc6602" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DetermineAncillaryLimitsForBundles" searchProperties="true" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="134fc463-6f27-4da7-95eb-819e7ebc6602fileName">DetermineAncillaryLimitsForBundles</con:setting>
  </con:settings>
  <con:testStep type="restrequest" name="JSON Request" id="559fdb37-c4ed-4a11-8c0f-8a56ee6b3165">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL" methodName="DetermineAncillaryLimitsForBundles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="JSON Request" id="c14f5186-5a8e-4940-9d5b-d6e7be45c5e7" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "DK6789",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "DK6789",
            "lineItemID": "L002"
        }
    ]
}</con:request>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="DetermineAncillaryLimitsforBundles-SingleLineItem" id="578f8cc6-67c7-4e62-9230-655ea052fda6">
    <con:settings/>
    <con:config>
      <script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAncillaryLimitsforBundles/DetermineAncillaryLimitsforBundles-SingleLineItem-Input.xls"
def outputfile = projectDir + "/DetermineAncillaryLimitsforBundles/DetermineAncillaryLimitsforBundles-SingleLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"limitQuantity",sheet1);
addCell(2,0,"limitDays",sheet1);
addCell(3,0,"limitsValid",sheet1);
addCell(4,0,"PASS/FAIL",sheet1);
addCell(5,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()
                        
                                 //Input for Line Item ID                               
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for hcpcsCode  
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents()                                                                                     
                                 

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)
                    
                                  
                           // get lineItemID from response json                                 
                        addCell(0,i,json.limitsResponse[0].lineItemID,sheet1);                                   
                          // get limitQuantity from response json                                   
                        addCell(1,i,json.limitsResponse[0].limitQuantity.toString(),sheet1);  
                         // get limitDays from response json                                   
                        addCell(2,i,json.limitsResponse[0].limitDays.toString(),sheet1); 
                         // get limitsValid from response json                                   
                        addCell(3,i,json.limitsResponse[0].limitsValid.toString(),sheet1); 
                          
                                                    
                                                           
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)
            
                             //get the expected values
                          lineItemID = sh.getCell(3,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"limitsResponse[0].lineItemID","lineItemID")

                          limitQuantity = sh.getCell(4,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"limitsResponse[0].limitQuantity","limitQuantity")

                       limitDays = sh.getCell(5,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays,"limitsResponse[0].limitDays","limitDays")

                        limitsValid = sh.getCell(6,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitsValid,"limitsResponse[0].limitsValid","limitsValid")
                     
                                               
                   
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(4,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(5,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(4,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="DetermineAncillaryLimitsforBundles-MultiLineItem" id="a6714283-781b-4eda-a460-094ecf538cf6">
    <con:settings/>
    <con:config>
      <script>import jxl.*;
import jxl.write.*
import java.io.*
import java.io.file.*
import java.util.*
import java.lang.*
import jxl.read.biff.BiffException;
import net.sf.*
import net.sf.json.*
import net.sf.json.groovy.*
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.json.JsonBuilder
import com.eviware.soapui.model.testsuite.TestStepResult.TestStepStatus
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

def inputfile =  projectDir + "/DetermineAncillaryLimitsforBundles/DetermineAncillaryLimitsforBundles-MultiLineItem-Input.xls"
def outputfile = projectDir + "/DetermineAncillaryLimitsforBundles/DetermineAncillaryLimitsforBundles-MultiLineItem-Output.xls"

//Creating workbook for reading value from Excel Sheet

Workbook wb = Workbook.getWorkbook(new File(inputfile))
Sheet sh = wb.getSheet("ExpectedResults")
Sheet jsonInput = wb.getSheet("JSON")

//reading data from input Excel sheet
rc = sh.getRows();
cc = sh.getColumns();
Cell jreq = jsonInput.getCell(0,0)

//Creating Workbook for writing value in Excel Sheet
WritableWorkbook wb1= Workbook.createWorkbook(new File(outputfile));
WritableSheet sheet1 = wb1.createSheet("ActualResults",0);

//Header declaration for output file
addCell(0,0,"lineItemID",sheet1);
addCell(1,0,"limitQuantity",sheet1);
addCell(2,0,"limitDays",sheet1);
addCell(3,0,"limitsValid",sheet1);
addCell(4,0,"lineItemID1",sheet1);
addCell(5,0,"limitQuantity1",sheet1);
addCell(6,0,"limitDays1",sheet1);
addCell(7,0,"limitsValid1",sheet1);
addCell(8,0,"PASS/FAIL",sheet1);
addCell(9,0,"FAILED DUE TO",sheet1);
 
//new testStepName
def newTestStep=null

try {

   
               def req = jreq.getContents()
               //Assigning request value dynamically
               //request
               def slurper = new JsonSlurper().parseText(req);
               def requestTemplet = new JsonBuilder(slurper);

         
               for (i=2;i&lt;rc;i++){

                           // Input for TestCaseName
                         Cell varTestCaseName = sh.getCell(0,i)
                        def TestCaseName = varTestCaseName.getContents()

                                               
                                 //Input for LineItemID for LineItem1                               
                                requestTemplet.content.lineItems[0].lineItemID = sh.getCell(1,i).getContents()
                                 //Input for ancillaryHcpcsCode for LineItem1    
                                requestTemplet.content.lineItems[0].hcpcsCode = sh.getCell(2,i).getContents()
                        
                        
                               //Input for LineItemID for LineItem2                             
                                requestTemplet.content.lineItems[1].lineItemID = sh.getCell(3,i).getContents()
                                 //Input for ancillaryHcpcsCode for LineItem2
                                requestTemplet.content.lineItems[1].hcpcsCode = sh.getCell(4,i).getContents()                                                                                                                   
                                 

                              //Assign json request to variable
                       def jsonReqAsString = requestTemplet.toPrettyString()
                       def restRequest = testRunner.testCase.getTestStepByName('JSON Request');
                       restRequest.setPropertyValue('Request',jsonReqAsString);

                                //teststep cloned: Start
                        def getTestCase = testRunner.testCase;
                        def testst = testRunner.testCase.getTestStepByName("JSON Request");                 
                            newTestStep = TestCaseName
                            cleanUp(newTestStep)
                            getTestCase.cloneStep(restRequest,newTestStep)
                             
                         //teststep cloned: End
                         //Executing the testcase
                        testRunner.runTestStepByName(newTestStep)
 
                         //retrive response         
                       def ResponseMessage = testRunner.testCase.testSteps[newTestStep].testRequest.response.contentAsString
                    
                         //new JsonSlurper to parse and get the response in Json format
                        def slurper1 = new JsonSlurper()
                        def json = slurper1.parseText(ResponseMessage)

                                      
                            // json response for LineItem1      
                           // get lineItemID from response json                                 
                        addCell(0,i,json.limitsResponse[0].lineItemID,sheet1);                                   
                          // get limitQuantity from response json                                   
                        addCell(1,i,json.limitsResponse[0].limitQuantity.toString(),sheet1);  
                         // get limitDays from response json                                 
                        addCell(2,i,json.limitsResponse[0].limitDays.toString(),sheet1); 
                        // get limitsValid from response json                                  
                        addCell(3,i,json.limitsResponse[0].limitsValid.toString(),sheet1); 
                        
                         // json response for LineItem2 
                        // get lineItemID from response json                                 
                        addCell(4,i,json.limitsResponse[1].lineItemID,sheet1);                                   
                          // get limitQuantity from response json                                   
                        addCell(5,i,json.limitsResponse[1].limitQuantity.toString(),sheet1);  
                         // get limitDays from response json                                   
                        addCell(6,i,json.limitsResponse[1].limitDays.toString(),sheet1);  
                         // get limitsValid from response json                                  
                        addCell(7,i,json.limitsResponse[1].limitsValid.toString(),sheet1);      
                          
                                                                        
                                                      
                      //dynamic asserstion :Start
                   def testStepForAssertion = testRunner.testCase.getTestStepByName(newTestStep);
                                //ValidHTTPStatusCodes 200 Assertion
                  addAssertionValidHTTPStatusCodes(testStepForAssertion,"Valid HTTP Status Codes_"+i)

                            
                             //get the expected values for LineItem1
                          lineItemID = sh.getCell(5,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID,"limitsResponse[0].lineItemID","lineItemID")

                          limitQuantity = sh.getCell(6,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity,"limitsResponse[0].limitQuantity","limitQuantity")

                       limitDays = sh.getCell(7,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays,"limitsResponse[0].limitDays","limitDays")

                        limitsValid = sh.getCell(8,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitsValid,"limitsResponse[0].limitsValid","limitsValid")

                       //get the expected values for LineItem2
                          lineItemID1 = sh.getCell(9,i).getContents()
                       addAssertionJsonPathMatch(testStepForAssertion,lineItemID1,"limitsResponse[1].lineItemID","lineItemID")

                          limitQuantity1 = sh.getCell(10,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitQuantity1,"limitsResponse[1].limitQuantity","limitQuantity")

                       limitDays1 = sh.getCell(11,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitDays1,"limitsResponse[1].limitDays","limitDays")

                        limitsValid1 = sh.getCell(12,i).getContents().toString()
                       addAssertionJsonPathMatch(testStepForAssertion,limitsValid1,"limitsResponse[1].limitsValid","limitsValid")                 
                                                                
                     
                            //dynamic asserstion :End
                            assertionResult = testStepForAssertion.getAssertionStatus()
             if(assertionResult.toString().equals("FAILED")){

                                       addCell(8,i,"Fail",sheet1);
                                   for( assertion in testStepForAssertion.assertionList ){
                                  for( e in assertion.errors ){

                                                     addCell(9,i,e.message,sheet1);

                                                } 

                                   }

                                }


                                else{

                                   addCell(8,i,"PASS",sheet1);

                                }

 
       }

      wb1.write();
            log.info "TestCase Execution Completed successfull"

 

                }             
     
catch(Exception e)
{

                 log.info(e)                         
}

finally
{

    //close workbook
     wb.close();
     wb1.close();     

}

//Method code
def addAssertionJsonPathMatch(RestTestRequestStep testStepForAssertion,String expectedContent,String xPath,String assertionName) {
          def assertionType = testStepForAssertion.addAssertion("JsonPath Match")
                                assertionType.name = assertionName
                                assertionType.setPath(xPath)
                                assertionType.setExpectedContent(expectedContent)
                                assertionType.setAllowWildcards(true) 

}

//Method code
def addAssertionValidHTTPStatusCodes(RestTestRequestStep testStepForAssertion,String assertionName) {

         def StatusCodeAssertionxpath = testStepForAssertion.addAssertion("Valid HTTP Status Codes")
             StatusCodeAssertionxpath.name = assertionName
             StatusCodeAssertionxpath.codes=200

}

//method to delete
def cleanUp(String requestName){

                //remove the teststep::Start
                def testCase = testRunner.testCase
                def testStep = testCase.getTestStepByName(requestName)

                if (testStep!=null){

 
                                    testCase.removeTestStep(testStep)
                }

    
            //remove the teststep::End

}

 

//method to add Cell to sheet1

def addCell(int colmNum,int rowNum,String lblName,WritableSheet sheet1 ){

                 Label header = new Label(colmNum,rowNum,lblName);
                sheet1.addCell(header);               

}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-36778" id="7702b5c5-af5c-45ce-bca8-f5f820b25e14">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL" methodName="DetermineAncillaryLimitsForBundles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-36778" id="c14f5186-5a8e-4940-9d5b-d6e7be45c5e7" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4233",
            "lineItemID": "L001"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="ae0787bb-779e-434f-af6c-d1c40447c9e3" name="Valid HTTP Status Codes_2">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="0b4c70aa-3c2e-439a-b069-8e28d62b1176" name="lineItemID">
          <con:configuration>
            <path>limitsResponse[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="199a45a4-8dce-4f8c-8e51-7b326e6e9d44" name="limitQuantity">
          <con:configuration>
            <path>limitsResponse[0].limitQuantity</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="63fd91b3-154a-4695-a1d9-1247cea1a3a7" name="limitDays">
          <con:configuration>
            <path>limitsResponse[0].limitDays</path>
            <content>365</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="05e44f38-d481-4f98-a90c-93edf0286475" name="limitsValid">
          <con:configuration>
            <path>limitsResponse[0].limitsValid</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-36779" id="cca7e0fa-831b-4584-9c42-cd05ff537530">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL" methodName="DetermineAncillaryLimitsForBundles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-36779" id="c14f5186-5a8e-4940-9d5b-d6e7be45c5e7" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "D2314",
            "lineItemID": "L001"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="c10562af-96e4-4ed0-8f23-767b1a3ae881" name="Valid HTTP Status Codes_3">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a68916fa-d855-43eb-a7b2-d2f4cdd4ef07" name="lineItemID">
          <con:configuration>
            <path>limitsResponse[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="86c148eb-46b8-4485-b470-bc5ed92df584" name="limitQuantity">
          <con:configuration>
            <path>limitsResponse[0].limitQuantity</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="dbc034e8-4347-4592-9254-9069dd0cbed4" name="limitDays">
          <con:configuration>
            <path>limitsResponse[0].limitDays</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="40a472da-d122-4e1f-bcbf-25684ac30f97" name="limitsValid">
          <con:configuration>
            <path>limitsResponse[0].limitsValid</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-36780" id="ba17d251-96fb-49c3-8193-b116e24c1696">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL" methodName="DetermineAncillaryLimitsForBundles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-36780" id="c14f5186-5a8e-4940-9d5b-d6e7be45c5e7" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="307b5584-aa16-40c5-aad7-4e51e6bfa968" name="Valid HTTP Status Codes_4">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c89c3cb7-201a-44a1-b25c-8d0ba05235e6" name="lineItemID">
          <con:configuration>
            <path>limitsResponse[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d9f23de4-66bd-4230-b368-092c00f0c836" name="limitQuantity">
          <con:configuration>
            <path>limitsResponse[0].limitQuantity</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="01832d49-6a99-4443-92b4-2551dc3313ad" name="limitDays">
          <con:configuration>
            <path>limitsResponse[0].limitDays</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="00539f19-c4e3-4e22-8863-c39a6c6678cb" name="limitsValid">
          <con:configuration>
            <path>limitsResponse[0].limitsValid</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-36781" id="e7d17a00-d7c4-4674-a8a7-ede4b1903711">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL" methodName="DetermineAncillaryLimitsForBundles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-36781" id="c14f5186-5a8e-4940-9d5b-d6e7be45c5e7" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4250",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "E0607",
            "lineItemID": "L002"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="d25a9ea1-3253-4eaf-85d0-9ac29aa63ace" name="Valid HTTP Status Codes_2">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="86d69d14-78a3-4825-8e52-4d277fa65079" name="lineItemID">
          <con:configuration>
            <path>limitsResponse[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="096a0dd5-c2d9-44c5-9dba-dd2cf50adfe4" name="limitQuantity">
          <con:configuration>
            <path>limitsResponse[0].limitQuantity</path>
            <content>3</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="dabc6077-9411-4673-a86d-3d3fb15874c5" name="limitDays">
          <con:configuration>
            <path>limitsResponse[0].limitDays</path>
            <content>80</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="6070b20e-ad38-4e52-bd42-81c6c091c29b" name="limitsValid">
          <con:configuration>
            <path>limitsResponse[0].limitsValid</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="407d72c9-953f-4ee6-95a5-306344f6472a" name="lineItemID">
          <con:configuration>
            <path>limitsResponse[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="005f4aab-026d-4e26-8021-a9d6ab531501" name="limitQuantity">
          <con:configuration>
            <path>limitsResponse[1].limitQuantity</path>
            <content>2</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="cb40e14d-355e-4126-ab22-a03231d5ce4f" name="limitDays">
          <con:configuration>
            <path>limitsResponse[1].limitDays</path>
            <content>365</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="b49b4f01-dc75-485a-a66e-793b581ddd54" name="limitsValid">
          <con:configuration>
            <path>limitsResponse[1].limitsValid</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-36782" id="3159b296-c7f1-4f62-843b-0ab9f02e432a">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL" methodName="DetermineAncillaryLimitsForBundles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-36782" id="c14f5186-5a8e-4940-9d5b-d6e7be45c5e7" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "A4253",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "DK671",
            "lineItemID": "L002"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="da0d81a5-7a1e-4aef-a316-20a37a255e29" name="Valid HTTP Status Codes_3">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="86009cf6-edd0-4ebb-8c7a-dae091e77bb4" name="lineItemID">
          <con:configuration>
            <path>limitsResponse[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ffa7d7ae-86a8-49b2-94b2-9aef7e06fd9c" name="limitQuantity">
          <con:configuration>
            <path>limitsResponse[0].limitQuantity</path>
            <content>4</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="6b0123f2-c899-41fa-9aac-fe29b3de1c88" name="limitDays">
          <con:configuration>
            <path>limitsResponse[0].limitDays</path>
            <content>80</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="8faa1b4b-cbd7-47f5-9126-5a6297c54df2" name="limitsValid">
          <con:configuration>
            <path>limitsResponse[0].limitsValid</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="7fc5f631-147c-4203-a667-cea25eebb6e2" name="lineItemID">
          <con:configuration>
            <path>limitsResponse[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="fb41442b-decb-48b8-86c3-1e0212787db3" name="limitQuantity">
          <con:configuration>
            <path>limitsResponse[1].limitQuantity</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="c9b097b1-c535-428b-82e5-9b817b09c72c" name="limitDays">
          <con:configuration>
            <path>limitsResponse[1].limitDays</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f879bdec-ba9c-44c4-aa32-c80a919ecf61" name="limitsValid">
          <con:configuration>
            <path>limitsResponse[1].limitsValid</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-36783" id="c5d50a51-2604-4293-bac9-68c7678fdb69">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL" methodName="DetermineAncillaryLimitsForBundles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-36783" id="c14f5186-5a8e-4940-9d5b-d6e7be45c5e7" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "A9277",
            "lineItemID": "L002"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="009d7dda-0acc-4028-b918-71f17ee59c4e" name="Valid HTTP Status Codes_4">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f35bd616-717b-4fc5-96f5-3d370abd4c69" name="lineItemID">
          <con:configuration>
            <path>limitsResponse[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a1ba8d4e-1d9d-4982-9c18-cdce90613a4e" name="limitQuantity">
          <con:configuration>
            <path>limitsResponse[0].limitQuantity</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ab0e60d8-7682-4587-a210-39586a800d9c" name="limitDays">
          <con:configuration>
            <path>limitsResponse[0].limitDays</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e8aa4f08-13fc-4778-8d63-600059f3c2c1" name="limitsValid">
          <con:configuration>
            <path>limitsResponse[0].limitsValid</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="982f9ccc-68b2-41c7-b600-10e1d7a4957a" name="lineItemID">
          <con:configuration>
            <path>limitsResponse[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="fdbf0fc3-9456-48b2-829b-8dd2eeaac1e2" name="limitQuantity">
          <con:configuration>
            <path>limitsResponse[1].limitQuantity</path>
            <content>1</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="5d2c2e95-11c6-4cd9-ab79-b051ced4322a" name="limitDays">
          <con:configuration>
            <path>limitsResponse[1].limitDays</path>
            <content>80</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="5b73a851-51d7-47ee-b026-485fbfaaf21c" name="limitsValid">
          <con:configuration>
            <path>limitsResponse[1].limitsValid</path>
            <content>true</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="EPST-36784" id="21180117-6ebe-4575-bae4-083d602f9553">
    <con:settings/>
    <con:config service="CARESOrderManagement" resourcePath="/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL" methodName="DetermineAncillaryLimitsForBundles" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="EPST-36784" id="c14f5186-5a8e-4940-9d5b-d6e7be45c5e7" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://lqec5009c1ods01:9080</con:endpoint>
        <con:request>{
    "__DecisionID__": "string",
    "e2eMetadata": {
        "serviceAddressing": {
            "callingFunction": "string",
            "correlationID": "string",
            "from": "string",
            "timestamp": "2008-09-29T07:19:45.000+0530"
        },
        "serviceParameters": {
            "accountId": "string",
            "agentId": "string",
            "orderId": "string",
            "serviceTags": [
                "string"
            ]
        },
        "serviceState": {
            "errorCode": "string",
            "errorText": "string",
            "errorTrace": "string",
            "stateCode": "string"
        }
    },
    "lineItems": [
        {
            "hcpcsCode": "DK6789",
            "lineItemID": "L001"
        },
        {
            "hcpcsCode": "DK6789",
            "lineItemID": "L002"
        }
    ]
}</con:request>
        <con:originalUri>http://lqec5009c1ods01/DecisionService/rest/v1/DetermineAncillaryLimitsForBundles/DetermineAncillaryLimitsForBundles/WADL</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="2533f1db-013d-4810-a23a-6a7df436f5e5" name="Valid HTTP Status Codes_5">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="08464424-72e4-4ff1-accc-6dca29d68ef0" name="lineItemID">
          <con:configuration>
            <path>limitsResponse[0].lineItemID</path>
            <content>L001</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="3857eff6-c899-4eb4-879e-a2329ea93b52" name="limitQuantity">
          <con:configuration>
            <path>limitsResponse[0].limitQuantity</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="1ffc23e2-379b-4b73-8066-a7ffa226a545" name="limitDays">
          <con:configuration>
            <path>limitsResponse[0].limitDays</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="6151f567-a7df-4ad5-a752-450b0284979d" name="limitsValid">
          <con:configuration>
            <path>limitsResponse[0].limitsValid</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="af275528-4d26-4c9b-bbbe-64c8391ff1fc" name="lineItemID">
          <con:configuration>
            <path>limitsResponse[1].lineItemID</path>
            <content>L002</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="4108430e-81ae-4f4a-9eea-f40094f2bf95" name="limitQuantity">
          <con:configuration>
            <path>limitsResponse[1].limitQuantity</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="62bb4290-824b-4872-a2af-3dba638b3f63" name="limitDays">
          <con:configuration>
            <path>limitsResponse[1].limitDays</path>
            <content>0</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="bb3c06b9-15b3-4cba-a0d4-75f61455a08d" name="limitsValid">
          <con:configuration>
            <path>limitsResponse[1].limitsValid</path>
            <content>false</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
</con:testCase>
